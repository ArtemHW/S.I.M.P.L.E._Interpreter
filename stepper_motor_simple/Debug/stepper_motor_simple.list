
stepper_motor_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b70  08007b70  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b78  08007b78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b7c  08007b7c  00017b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004758  20000010  08007b90  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004768  08007b90  00024768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ee0  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003622  00000000  00000000  00035f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00039588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5d  00000000  00000000  0003a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c1c  00000000  00000000  0003b8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163bd  00000000  00000000  000534c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000965c8  00000000  00000000  0006987e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005368  00000000  00000000  000ffe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001051b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a50 	.word	0x08007a50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08007a50 	.word	0x08007a50

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b970 	b.w	8000ae4 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9e08      	ldr	r6, [sp, #32]
 8000822:	460d      	mov	r5, r1
 8000824:	4604      	mov	r4, r0
 8000826:	460f      	mov	r7, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4694      	mov	ip, r2
 8000830:	d965      	bls.n	80008fe <__udivmoddi4+0xe2>
 8000832:	fab2 f382 	clz	r3, r2
 8000836:	b143      	cbz	r3, 800084a <__udivmoddi4+0x2e>
 8000838:	fa02 fc03 	lsl.w	ip, r2, r3
 800083c:	f1c3 0220 	rsb	r2, r3, #32
 8000840:	409f      	lsls	r7, r3
 8000842:	fa20 f202 	lsr.w	r2, r0, r2
 8000846:	4317      	orrs	r7, r2
 8000848:	409c      	lsls	r4, r3
 800084a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800084e:	fa1f f58c 	uxth.w	r5, ip
 8000852:	fbb7 f1fe 	udiv	r1, r7, lr
 8000856:	0c22      	lsrs	r2, r4, #16
 8000858:	fb0e 7711 	mls	r7, lr, r1, r7
 800085c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000860:	fb01 f005 	mul.w	r0, r1, r5
 8000864:	4290      	cmp	r0, r2
 8000866:	d90a      	bls.n	800087e <__udivmoddi4+0x62>
 8000868:	eb1c 0202 	adds.w	r2, ip, r2
 800086c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000870:	f080 811c 	bcs.w	8000aac <__udivmoddi4+0x290>
 8000874:	4290      	cmp	r0, r2
 8000876:	f240 8119 	bls.w	8000aac <__udivmoddi4+0x290>
 800087a:	3902      	subs	r1, #2
 800087c:	4462      	add	r2, ip
 800087e:	1a12      	subs	r2, r2, r0
 8000880:	b2a4      	uxth	r4, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800088e:	fb00 f505 	mul.w	r5, r0, r5
 8000892:	42a5      	cmp	r5, r4
 8000894:	d90a      	bls.n	80008ac <__udivmoddi4+0x90>
 8000896:	eb1c 0404 	adds.w	r4, ip, r4
 800089a:	f100 32ff 	add.w	r2, r0, #4294967295
 800089e:	f080 8107 	bcs.w	8000ab0 <__udivmoddi4+0x294>
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	f240 8104 	bls.w	8000ab0 <__udivmoddi4+0x294>
 80008a8:	4464      	add	r4, ip
 80008aa:	3802      	subs	r0, #2
 80008ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b0:	1b64      	subs	r4, r4, r5
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11e      	cbz	r6, 80008be <__udivmoddi4+0xa2>
 80008b6:	40dc      	lsrs	r4, r3
 80008b8:	2300      	movs	r3, #0
 80008ba:	e9c6 4300 	strd	r4, r3, [r6]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0xbc>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	f000 80ed 	beq.w	8000aa6 <__udivmoddi4+0x28a>
 80008cc:	2100      	movs	r1, #0
 80008ce:	e9c6 0500 	strd	r0, r5, [r6]
 80008d2:	4608      	mov	r0, r1
 80008d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d8:	fab3 f183 	clz	r1, r3
 80008dc:	2900      	cmp	r1, #0
 80008de:	d149      	bne.n	8000974 <__udivmoddi4+0x158>
 80008e0:	42ab      	cmp	r3, r5
 80008e2:	d302      	bcc.n	80008ea <__udivmoddi4+0xce>
 80008e4:	4282      	cmp	r2, r0
 80008e6:	f200 80f8 	bhi.w	8000ada <__udivmoddi4+0x2be>
 80008ea:	1a84      	subs	r4, r0, r2
 80008ec:	eb65 0203 	sbc.w	r2, r5, r3
 80008f0:	2001      	movs	r0, #1
 80008f2:	4617      	mov	r7, r2
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0e2      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f8:	e9c6 4700 	strd	r4, r7, [r6]
 80008fc:	e7df      	b.n	80008be <__udivmoddi4+0xa2>
 80008fe:	b902      	cbnz	r2, 8000902 <__udivmoddi4+0xe6>
 8000900:	deff      	udf	#255	; 0xff
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8090 	bne.w	8000a2c <__udivmoddi4+0x210>
 800090c:	1a8a      	subs	r2, r1, r2
 800090e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000912:	fa1f fe8c 	uxth.w	lr, ip
 8000916:	2101      	movs	r1, #1
 8000918:	fbb2 f5f7 	udiv	r5, r2, r7
 800091c:	fb07 2015 	mls	r0, r7, r5, r2
 8000920:	0c22      	lsrs	r2, r4, #16
 8000922:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000926:	fb0e f005 	mul.w	r0, lr, r5
 800092a:	4290      	cmp	r0, r2
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x124>
 800092e:	eb1c 0202 	adds.w	r2, ip, r2
 8000932:	f105 38ff 	add.w	r8, r5, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x122>
 8000938:	4290      	cmp	r0, r2
 800093a:	f200 80cb 	bhi.w	8000ad4 <__udivmoddi4+0x2b8>
 800093e:	4645      	mov	r5, r8
 8000940:	1a12      	subs	r2, r2, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb2 f0f7 	udiv	r0, r2, r7
 8000948:	fb07 2210 	mls	r2, r7, r0, r2
 800094c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000950:	fb0e fe00 	mul.w	lr, lr, r0
 8000954:	45a6      	cmp	lr, r4
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x14e>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000960:	d202      	bcs.n	8000968 <__udivmoddi4+0x14c>
 8000962:	45a6      	cmp	lr, r4
 8000964:	f200 80bb 	bhi.w	8000ade <__udivmoddi4+0x2c2>
 8000968:	4610      	mov	r0, r2
 800096a:	eba4 040e 	sub.w	r4, r4, lr
 800096e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000972:	e79f      	b.n	80008b4 <__udivmoddi4+0x98>
 8000974:	f1c1 0720 	rsb	r7, r1, #32
 8000978:	408b      	lsls	r3, r1
 800097a:	fa22 fc07 	lsr.w	ip, r2, r7
 800097e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000982:	fa05 f401 	lsl.w	r4, r5, r1
 8000986:	fa20 f307 	lsr.w	r3, r0, r7
 800098a:	40fd      	lsrs	r5, r7
 800098c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000990:	4323      	orrs	r3, r4
 8000992:	fbb5 f8f9 	udiv	r8, r5, r9
 8000996:	fa1f fe8c 	uxth.w	lr, ip
 800099a:	fb09 5518 	mls	r5, r9, r8, r5
 800099e:	0c1c      	lsrs	r4, r3, #16
 80009a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009a4:	fb08 f50e 	mul.w	r5, r8, lr
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	fa02 f201 	lsl.w	r2, r2, r1
 80009ae:	fa00 f001 	lsl.w	r0, r0, r1
 80009b2:	d90b      	bls.n	80009cc <__udivmoddi4+0x1b0>
 80009b4:	eb1c 0404 	adds.w	r4, ip, r4
 80009b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009bc:	f080 8088 	bcs.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c0:	42a5      	cmp	r5, r4
 80009c2:	f240 8085 	bls.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ca:	4464      	add	r4, ip
 80009cc:	1b64      	subs	r4, r4, r5
 80009ce:	b29d      	uxth	r5, r3
 80009d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d4:	fb09 4413 	mls	r4, r9, r3, r4
 80009d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x1da>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009ec:	d26c      	bcs.n	8000ac8 <__udivmoddi4+0x2ac>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	d96a      	bls.n	8000ac8 <__udivmoddi4+0x2ac>
 80009f2:	3b02      	subs	r3, #2
 80009f4:	4464      	add	r4, ip
 80009f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009fa:	fba3 9502 	umull	r9, r5, r3, r2
 80009fe:	eba4 040e 	sub.w	r4, r4, lr
 8000a02:	42ac      	cmp	r4, r5
 8000a04:	46c8      	mov	r8, r9
 8000a06:	46ae      	mov	lr, r5
 8000a08:	d356      	bcc.n	8000ab8 <__udivmoddi4+0x29c>
 8000a0a:	d053      	beq.n	8000ab4 <__udivmoddi4+0x298>
 8000a0c:	b156      	cbz	r6, 8000a24 <__udivmoddi4+0x208>
 8000a0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a12:	eb64 040e 	sbc.w	r4, r4, lr
 8000a16:	fa04 f707 	lsl.w	r7, r4, r7
 8000a1a:	40ca      	lsrs	r2, r1
 8000a1c:	40cc      	lsrs	r4, r1
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	e9c6 7400 	strd	r7, r4, [r6]
 8000a24:	4618      	mov	r0, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2c:	f1c3 0120 	rsb	r1, r3, #32
 8000a30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a34:	fa20 f201 	lsr.w	r2, r0, r1
 8000a38:	fa25 f101 	lsr.w	r1, r5, r1
 8000a3c:	409d      	lsls	r5, r3
 8000a3e:	432a      	orrs	r2, r5
 8000a40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a50:	0c11      	lsrs	r1, r2, #16
 8000a52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a56:	fb00 f50e 	mul.w	r5, r0, lr
 8000a5a:	428d      	cmp	r5, r1
 8000a5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x258>
 8000a62:	eb1c 0101 	adds.w	r1, ip, r1
 8000a66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a6a:	d22f      	bcs.n	8000acc <__udivmoddi4+0x2b0>
 8000a6c:	428d      	cmp	r5, r1
 8000a6e:	d92d      	bls.n	8000acc <__udivmoddi4+0x2b0>
 8000a70:	3802      	subs	r0, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1b49      	subs	r1, r1, r5
 8000a76:	b292      	uxth	r2, r2
 8000a78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a84:	fb05 f10e 	mul.w	r1, r5, lr
 8000a88:	4291      	cmp	r1, r2
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x282>
 8000a8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a94:	d216      	bcs.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a96:	4291      	cmp	r1, r2
 8000a98:	d914      	bls.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a9a:	3d02      	subs	r5, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a52      	subs	r2, r2, r1
 8000aa0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aa4:	e738      	b.n	8000918 <__udivmoddi4+0xfc>
 8000aa6:	4631      	mov	r1, r6
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	e708      	b.n	80008be <__udivmoddi4+0xa2>
 8000aac:	4639      	mov	r1, r7
 8000aae:	e6e6      	b.n	800087e <__udivmoddi4+0x62>
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	e6fb      	b.n	80008ac <__udivmoddi4+0x90>
 8000ab4:	4548      	cmp	r0, r9
 8000ab6:	d2a9      	bcs.n	8000a0c <__udivmoddi4+0x1f0>
 8000ab8:	ebb9 0802 	subs.w	r8, r9, r2
 8000abc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	e7a3      	b.n	8000a0c <__udivmoddi4+0x1f0>
 8000ac4:	4645      	mov	r5, r8
 8000ac6:	e7ea      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ac8:	462b      	mov	r3, r5
 8000aca:	e794      	b.n	80009f6 <__udivmoddi4+0x1da>
 8000acc:	4640      	mov	r0, r8
 8000ace:	e7d1      	b.n	8000a74 <__udivmoddi4+0x258>
 8000ad0:	46d0      	mov	r8, sl
 8000ad2:	e77b      	b.n	80009cc <__udivmoddi4+0x1b0>
 8000ad4:	3d02      	subs	r5, #2
 8000ad6:	4462      	add	r2, ip
 8000ad8:	e732      	b.n	8000940 <__udivmoddi4+0x124>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e70a      	b.n	80008f4 <__udivmoddi4+0xd8>
 8000ade:	4464      	add	r4, ip
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	e742      	b.n	800096a <__udivmoddi4+0x14e>

08000ae4 <__aeabi_idiv0>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <vApplicationGetIdleTaskMemory+0x30>)
 8000afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	20000090 	.word	0x20000090

08000b1c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <vApplicationGetTimerTaskMemory+0x30>)
 8000b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20000290 	.word	0x20000290
 8000b4c:	200002f4 	.word	0x200002f4

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b09e      	sub	sp, #120	; 0x78
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	counter_for_steps = 0;
 8000b56:	4b84      	ldr	r3, [pc, #528]	; (8000d68 <main+0x218>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	677b      	str	r3, [r7, #116]	; 0x74
 8000b60:	e007      	b.n	8000b72 <main+0x22>
		exm.execution_memory[i] = 0;
 8000b62:	4a82      	ldr	r2, [pc, #520]	; (8000d6c <main+0x21c>)
 8000b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b66:	4413      	add	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b6e:	3301      	adds	r3, #1
 8000b70:	677b      	str	r3, [r7, #116]	; 0x74
 8000b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b74:	2b76      	cmp	r3, #118	; 0x76
 8000b76:	d9f4      	bls.n	8000b62 <main+0x12>
	}
	exm.memory_pointer = 0;
 8000b78:	4b7c      	ldr	r3, [pc, #496]	; (8000d6c <main+0x21c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	exm.size_of_instruction = 0;
 8000b80:	4b7a      	ldr	r3, [pc, #488]	; (8000d6c <main+0x21c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	exm.start_of_instruction = 0;
 8000b88:	4b78      	ldr	r3, [pc, #480]	; (8000d6c <main+0x21c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	exm.function_pointer_S = function_of_S;
 8000b90:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <main+0x21c>)
 8000b92:	4a77      	ldr	r2, [pc, #476]	; (8000d70 <main+0x220>)
 8000b94:	67da      	str	r2, [r3, #124]	; 0x7c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 ffa9 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f909 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 fa79 	bl	8001094 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ba2:	f000 f965 	bl	8000e70 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ba6:	f000 fa49 	bl	800103c <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000baa:	f000 f9f9 	bl	8000fa0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000bae:	4871      	ldr	r0, [pc, #452]	; (8000d74 <main+0x224>)
 8000bb0:	f001 ffca 	bl	8002b48 <HAL_TIM_Base_Start_IT>
  uint16_t base = 2000;
 8000bb4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bb8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
  TIM3->ARR = base;
 8000bbc:	4a6e      	ldr	r2, [pc, #440]	; (8000d78 <main+0x228>)
 8000bbe:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM3->CCR1 = (uint16_t) base*0.98;
 8000bc4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd85 	bl	80006d8 <__aeabi_i2d>
 8000bce:	a364      	add	r3, pc, #400	; (adr r3, 8000d60 <main+0x210>)
 8000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd4:	f7ff fb04 	bl	80001e0 <__aeabi_dmul>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4c66      	ldr	r4, [pc, #408]	; (8000d78 <main+0x228>)
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff fde3 	bl	80007ac <__aeabi_d2uiz>
 8000be6:	4603      	mov	r3, r0
 8000be8:	6363      	str	r3, [r4, #52]	; 0x34
  TIM3->CCR2 = (uint16_t) base*0.98;
 8000bea:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fd72 	bl	80006d8 <__aeabi_i2d>
 8000bf4:	a35a      	add	r3, pc, #360	; (adr r3, 8000d60 <main+0x210>)
 8000bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfa:	f7ff faf1 	bl	80001e0 <__aeabi_dmul>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4c5d      	ldr	r4, [pc, #372]	; (8000d78 <main+0x228>)
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f7ff fdd0 	bl	80007ac <__aeabi_d2uiz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM3->CCR3 = (uint16_t) base*0.98;
 8000c10:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fd5f 	bl	80006d8 <__aeabi_i2d>
 8000c1a:	a351      	add	r3, pc, #324	; (adr r3, 8000d60 <main+0x210>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	f7ff fade 	bl	80001e0 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4c53      	ldr	r4, [pc, #332]	; (8000d78 <main+0x228>)
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff fdbd 	bl	80007ac <__aeabi_d2uiz>
 8000c32:	4603      	mov	r3, r0
 8000c34:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIM3->CCR4 = (uint16_t) base*0.98;
 8000c36:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fd4c 	bl	80006d8 <__aeabi_i2d>
 8000c40:	a347      	add	r3, pc, #284	; (adr r3, 8000d60 <main+0x210>)
 8000c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c46:	f7ff facb 	bl	80001e0 <__aeabi_dmul>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4c4a      	ldr	r4, [pc, #296]	; (8000d78 <main+0x228>)
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff fdaa 	bl	80007ac <__aeabi_d2uiz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	6423      	str	r3, [r4, #64]	; 0x40

  USART1->CR1 |= USART_CR1_RXNEIE;
 8000c5c:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <main+0x22c>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <main+0x22c>)
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <main+0x22c>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <main+0x22c>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 8000c74:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <main+0x22c>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <main+0x22c>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 8000c80:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <main+0x22c>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	4a3d      	ldr	r2, [pc, #244]	; (8000d7c <main+0x22c>)
 8000c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c8a:	60d3      	str	r3, [r2, #12]

  GPIOC->ODR &= ~GPIO_ODR_OD9; //Enable stepper driver
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <main+0x230>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <main+0x230>)
 8000c92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c96:	6153      	str	r3, [r2, #20]
  HAL_TIM_Base_Start_IT(&htim10);
 8000c98:	483a      	ldr	r0, [pc, #232]	; (8000d84 <main+0x234>)
 8000c9a:	f001 ff55 	bl	8002b48 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 8000c9e:	f003 ffaa 	bl	8004bf6 <xEventGroupCreate>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <main+0x238>)
 8000ca6:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <main+0x238>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f004 f8c2 	bl	8004e38 <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(10, 1);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f004 faff 	bl	80052bc <xQueueGenericCreate>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <main+0x23c>)
 8000cc2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 500);
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <main+0x240>)
 8000cc6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000cca:	461d      	mov	r5, r3
 8000ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 8000cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 ff3d 	bl	8004b5e <osThreadCreate>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <main+0x244>)
 8000ce8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 500);
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <main+0x248>)
 8000cec:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000cf0:	461d      	mov	r5, r3
 8000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 8000cfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 ff2a 	bl	8004b5e <osThreadCreate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <main+0x24c>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_comunication */
  osThreadDef(UART_comunication, uart_comunication, osPriorityNormal, 0, 160);
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <main+0x250>)
 8000d12:	f107 041c 	add.w	r4, r7, #28
 8000d16:	461d      	mov	r5, r3
 8000d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_comunicationHandle = osThreadCreate(osThread(UART_comunication), NULL);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 ff17 	bl	8004b5e <osThreadCreate>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <main+0x254>)
 8000d34:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 500);
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <main+0x258>)
 8000d38:	463c      	mov	r4, r7
 8000d3a:	461d      	mov	r5, r3
 8000d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 ff06 	bl	8004b5e <osThreadCreate>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a15      	ldr	r2, [pc, #84]	; (8000dac <main+0x25c>)
 8000d56:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d58:	f003 fefa 	bl	8004b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <main+0x20c>
 8000d5e:	bf00      	nop
 8000d60:	f5c28f5c 	.word	0xf5c28f5c
 8000d64:	3fef5c28 	.word	0x3fef5c28
 8000d68:	200007d8 	.word	0x200007d8
 8000d6c:	200007e0 	.word	0x200007e0
 8000d70:	08001221 	.word	0x08001221
 8000d74:	200006f4 	.word	0x200006f4
 8000d78:	40000400 	.word	0x40000400
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40020800 	.word	0x40020800
 8000d84:	2000073c 	.word	0x2000073c
 8000d88:	20000860 	.word	0x20000860
 8000d8c:	200007dc 	.word	0x200007dc
 8000d90:	08007a78 	.word	0x08007a78
 8000d94:	200007c8 	.word	0x200007c8
 8000d98:	08007aa0 	.word	0x08007aa0
 8000d9c:	200007cc 	.word	0x200007cc
 8000da0:	08007ad0 	.word	0x08007ad0
 8000da4:	200007d0 	.word	0x200007d0
 8000da8:	08007b00 	.word	0x08007b00
 8000dac:	200007d4 	.word	0x200007d4

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	; 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fe0c 	bl	80079dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <SystemClock_Config+0xb8>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <SystemClock_Config+0xb8>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <SystemClock_Config+0xb8>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <SystemClock_Config+0xbc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <SystemClock_Config+0xbc>)
 8000dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <SystemClock_Config+0xbc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 f9b5 	bl	8002194 <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e30:	f000 fc26 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fc18 	bl	8002684 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e5a:	f000 fc11 	bl	8001680 <Error_Handler>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3750      	adds	r7, #80	; 0x50
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40007000 	.word	0x40007000

08000e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000ea2:	4a3e      	ldr	r2, [pc, #248]	; (8000f9c <MX_TIM3_Init+0x12c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000ea6:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec6:	4834      	ldr	r0, [pc, #208]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000ec8:	f001 fdee 	bl	8002aa8 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ed2:	f000 fbd5 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	482d      	ldr	r0, [pc, #180]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000ee4:	f002 f9ca 	bl	800327c <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000eee:	f000 fbc7 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef2:	4829      	ldr	r0, [pc, #164]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000ef4:	f001 fe8a 	bl	8002c0c <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000efe:	f000 fbbf 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4821      	ldr	r0, [pc, #132]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000f12:	f002 fd6f 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f1c:	f000 fbb0 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 980;
 8000f24:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000f3a:	f002 f8dd 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f44:	f000 fb9c 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4812      	ldr	r0, [pc, #72]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000f50:	f002 f8d2 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f5a:	f000 fb91 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2208      	movs	r2, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000f66:	f002 f8c7 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f70:	f000 fb86 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	220c      	movs	r2, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000f7c:	f002 f8bc 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000f86:	f000 fb7b 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_TIM3_Init+0x128>)
 8000f8c:	f000 fbe8 	bl	8001760 <HAL_TIM_MspPostInit>

}
 8000f90:	bf00      	nop
 8000f92:	3738      	adds	r7, #56	; 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200006f4 	.word	0x200006f4
 8000f9c:	40000400 	.word	0x40000400

08000fa0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MX_TIM10_Init+0x94>)
 8000fba:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <MX_TIM10_Init+0x98>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_TIM10_Init+0x94>)
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_TIM10_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_TIM10_Init+0x94>)
 8000fcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fd0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_TIM10_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_TIM10_Init+0x94>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000fde:	4815      	ldr	r0, [pc, #84]	; (8001034 <MX_TIM10_Init+0x94>)
 8000fe0:	f001 fd62 	bl	8002aa8 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000fea:	f000 fb49 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000fee:	4811      	ldr	r0, [pc, #68]	; (8001034 <MX_TIM10_Init+0x94>)
 8000ff0:	f001 fe0c 	bl	8002c0c <HAL_TIM_PWM_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000ffa:	f000 fb41 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffe:	2360      	movs	r3, #96	; 0x60
 8001000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8001002:	f241 3388 	movw	r3, #5000	; 0x1388
 8001006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM10_Init+0x94>)
 8001018:	f002 f86e 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001022:	f000 fb2d 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM10_Init+0x94>)
 8001028:	f000 fb9a 	bl	8001760 <HAL_TIM_MspPostInit>

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000073c 	.word	0x2000073c
 8001038:	40014400 	.word	0x40014400

0800103c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <MX_USART1_UART_Init+0x54>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001048:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART1_UART_Init+0x50>)
 800105e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART1_UART_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001078:	f002 fd3e 	bl	8003af8 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001082:	f000 fafd 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000784 	.word	0x20000784
 8001090:	40011000 	.word	0x40011000

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b2b      	ldr	r3, [pc, #172]	; (800115c <MX_GPIO_Init+0xc8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a2a      	ldr	r2, [pc, #168]	; (800115c <MX_GPIO_Init+0xc8>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <MX_GPIO_Init+0xc8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_GPIO_Init+0xc8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <MX_GPIO_Init+0xc8>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_GPIO_Init+0xc8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_GPIO_Init+0xc8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a1c      	ldr	r2, [pc, #112]	; (800115c <MX_GPIO_Init+0xc8>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_GPIO_Init+0xc8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENA_stepper_GPIO_Port, ENA_stepper_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001104:	4816      	ldr	r0, [pc, #88]	; (8001160 <MX_GPIO_Init+0xcc>)
 8001106:	f001 f82b 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_stepper_GPIO_Port, DIR_stepper_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <MX_GPIO_Init+0xd0>)
 8001112:	f001 f825 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENA_stepper_Pin */
  GPIO_InitStruct.Pin = ENA_stepper_Pin;
 8001116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENA_stepper_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_GPIO_Init+0xcc>)
 8001130:	f000 fe92 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_stepper_Pin */
  GPIO_InitStruct.Pin = DIR_stepper_Pin;
 8001134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_stepper_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_GPIO_Init+0xd0>)
 800114e:	f000 fe83 	bl	8001e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40020800 	.word	0x40020800
 8001164:	40020400 	.word	0x40020400

08001168 <uart1_rx_callback>:

/* USER CODE BEGIN 4 */

void uart1_rx_callback(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <uart1_rx_callback+0x18>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	2300      	movs	r3, #0
 8001172:	2201      	movs	r2, #1
 8001174:	4903      	ldr	r1, [pc, #12]	; (8001184 <uart1_rx_callback+0x1c>)
 8001176:	f004 f9f9 	bl	800556c <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 800117a:	bf00      	nop

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200007dc 	.word	0x200007dc
 8001184:	40011004 	.word	0x40011004

08001188 <write_to_exm>:

void write_to_exm(uint8_t* start_of_data, uint8_t size_of_data){
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size_of_data; i++){
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e013      	b.n	80011c2 <write_to_exm+0x3a>
		exm.execution_memory[exm.memory_pointer] = start_of_data[i];
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <write_to_exm+0x50>)
 80011a2:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
 80011a6:	7819      	ldrb	r1, [r3, #0]
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <write_to_exm+0x50>)
 80011aa:	5499      	strb	r1, [r3, r2]
		exm.memory_pointer++;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <write_to_exm+0x50>)
 80011ae:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <write_to_exm+0x50>)
 80011b8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	for(int i = 0; i < size_of_data; i++){
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dbe7      	blt.n	800119a <write_to_exm+0x12>
	}
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	200007e0 	.word	0x200007e0

080011dc <erase_exm>:

void erase_exm(){
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	e007      	b.n	80011f8 <erase_exm+0x1c>
		exm.execution_memory[i] = 0;
 80011e8:	4a08      	ldr	r2, [pc, #32]	; (800120c <erase_exm+0x30>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3301      	adds	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b76      	cmp	r3, #118	; 0x76
 80011fc:	d9f4      	bls.n	80011e8 <erase_exm+0xc>
	}
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	200007e0 	.word	0x200007e0

08001210 <perform_instruction_from_exm>:

void perform_instruction_from_exm(){
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <function_of_S>:

void function_of_S(){
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
	uint32_t base = 1000000/exm.start_speed_value; // Speed of HCLK is 16MHz but prescaler for TIM3 is 15 (15+1) so you receive 1MHz clock for TIM3
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <function_of_S+0xc8>)
 8001228:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800122c:	461a      	mov	r2, r3
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <function_of_S+0xcc>)
 8001230:	fb93 f3f2 	sdiv	r3, r3, r2
 8001234:	607b      	str	r3, [r7, #4]
	  TIM3->ARR = base;
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <function_of_S+0xd0>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	62d3      	str	r3, [r2, #44]	; 0x2c
	  TIM3->CCR1 = (uint16_t) base*0.99;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fa49 	bl	80006d8 <__aeabi_i2d>
 8001246:	a326      	add	r3, pc, #152	; (adr r3, 80012e0 <function_of_S+0xc0>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7fe ffc8 	bl	80001e0 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4c26      	ldr	r4, [pc, #152]	; (80012f0 <function_of_S+0xd0>)
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff faa7 	bl	80007ac <__aeabi_d2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM3->CCR2 = (uint16_t) base*0.99;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fa36 	bl	80006d8 <__aeabi_i2d>
 800126c:	a31c      	add	r3, pc, #112	; (adr r3, 80012e0 <function_of_S+0xc0>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7fe ffb5 	bl	80001e0 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4c1d      	ldr	r4, [pc, #116]	; (80012f0 <function_of_S+0xd0>)
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fa94 	bl	80007ac <__aeabi_d2uiz>
 8001284:	4603      	mov	r3, r0
 8001286:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM3->CCR3 = (uint16_t) base*0.99;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fa23 	bl	80006d8 <__aeabi_i2d>
 8001292:	a313      	add	r3, pc, #76	; (adr r3, 80012e0 <function_of_S+0xc0>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7fe ffa2 	bl	80001e0 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4c13      	ldr	r4, [pc, #76]	; (80012f0 <function_of_S+0xd0>)
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fa81 	bl	80007ac <__aeabi_d2uiz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM3->CCR4 = (uint16_t) base*0.99;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fa10 	bl	80006d8 <__aeabi_i2d>
 80012b8:	a309      	add	r3, pc, #36	; (adr r3, 80012e0 <function_of_S+0xc0>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7fe ff8f 	bl	80001e0 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <function_of_S+0xd0>)
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fa6e 	bl	80007ac <__aeabi_d2uiz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	6423      	str	r3, [r4, #64]	; 0x40
	__asm__ volatile("NOP");
 80012d4:	bf00      	nop
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	7ae147ae 	.word	0x7ae147ae
 80012e4:	3fefae14 	.word	0x3fefae14
 80012e8:	200007e0 	.word	0x200007e0
 80012ec:	000f4240 	.word	0x000f4240
 80012f0:	40000400 	.word	0x40000400

080012f4 <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <programing_mode+0x30>)
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2200      	movs	r2, #0
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	f003 fc8e 	bl	8004c2c <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	2211      	movs	r2, #17
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <programing_mode+0x34>)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <programing_mode+0x38>)
 8001318:	f002 fc3b 	bl	8003b92 <HAL_UART_Transmit>
	  vTaskDelay(200);
 800131c:	20c8      	movs	r0, #200	; 0xc8
 800131e:	f004 fda3 	bl	8005e68 <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8001322:	e7eb      	b.n	80012fc <programing_mode+0x8>
 8001324:	20000860 	.word	0x20000860
 8001328:	08007b1c 	.word	0x08007b1c
 800132c:	20000784 	.word	0x20000784

08001330 <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8001338:	4b74      	ldr	r3, [pc, #464]	; (800150c <interpreter+0x1dc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f107 0113 	add.w	r1, r7, #19
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	4618      	mov	r0, r3
 8001346:	f004 f9ad 	bl	80056a4 <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 800134a:	f107 0113 	add.w	r1, r7, #19
 800134e:	230a      	movs	r3, #10
 8001350:	2201      	movs	r2, #1
 8001352:	486f      	ldr	r0, [pc, #444]	; (8001510 <interpreter+0x1e0>)
 8001354:	f002 fc1d 	bl	8003b92 <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 8001358:	7cfb      	ldrb	r3, [r7, #19]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	da04      	bge.n	800136a <interpreter+0x3a>
		  pData &= ~(1<<7);
 8001360:	7cfb      	ldrb	r3, [r7, #19]
 8001362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001366:	b2db      	uxtb	r3, r3
 8001368:	74fb      	strb	r3, [r7, #19]
	  }
	  __asm__ volatile("NOP");
 800136a:	bf00      	nop
	  switch (pData) {
 800136c:	7cfb      	ldrb	r3, [r7, #19]
 800136e:	2b53      	cmp	r3, #83	; 0x53
 8001370:	d062      	beq.n	8001438 <interpreter+0x108>
 8001372:	2b53      	cmp	r3, #83	; 0x53
 8001374:	f300 80c2 	bgt.w	80014fc <interpreter+0x1cc>
 8001378:	2b50      	cmp	r3, #80	; 0x50
 800137a:	d008      	beq.n	800138e <interpreter+0x5e>
 800137c:	2b50      	cmp	r3, #80	; 0x50
 800137e:	f300 80bd 	bgt.w	80014fc <interpreter+0x1cc>
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80bc 	beq.w	8001500 <interpreter+0x1d0>
 8001388:	2b45      	cmp	r3, #69	; 0x45
 800138a:	d044      	beq.n	8001416 <interpreter+0xe6>
			__asm__ volatile("NOP");
			break;
	    case 0:
			break;
		default:
			break;
 800138c:	e0b6      	b.n	80014fc <interpreter+0x1cc>
			xQueueReceive(uart_queue_rx, &pData, 5);
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <interpreter+0x1dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f107 0113 	add.w	r1, r7, #19
 8001396:	2205      	movs	r2, #5
 8001398:	4618      	mov	r0, r3
 800139a:	f004 f983 	bl	80056a4 <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 800139e:	f107 0113 	add.w	r1, r7, #19
 80013a2:	230a      	movs	r3, #10
 80013a4:	2201      	movs	r2, #1
 80013a6:	485a      	ldr	r0, [pc, #360]	; (8001510 <interpreter+0x1e0>)
 80013a8:	f002 fbf3 	bl	8003b92 <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da04      	bge.n	80013be <interpreter+0x8e>
					  pData &= ~(1<<7);
 80013b4:	7cfb      	ldrb	r3, [r7, #19]
 80013b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	74fb      	strb	r3, [r7, #19]
			__asm__ volatile("NOP");
 80013be:	bf00      	nop
			switch (pData) {
 80013c0:	7cfb      	ldrb	r3, [r7, #19]
 80013c2:	2b6f      	cmp	r3, #111	; 0x6f
 80013c4:	d002      	beq.n	80013cc <interpreter+0x9c>
 80013c6:	2b78      	cmp	r3, #120	; 0x78
 80013c8:	d013      	beq.n	80013f2 <interpreter+0xc2>
					break;
 80013ca:	e023      	b.n	8001414 <interpreter+0xe4>
					xEventGroupClearBits(EventGroup, 0x40);
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <interpreter+0x1e4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2140      	movs	r1, #64	; 0x40
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fcf8 	bl	8004dc8 <xEventGroupClearBits>
					exm.memory_pointer = 0;
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <interpreter+0x1e8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
					erase_exm();
 80013e0:	f7ff fefc 	bl	80011dc <erase_exm>
					xEventGroupSetBits(EventGroup, 0x80);
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <interpreter+0x1e4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fd24 	bl	8004e38 <xEventGroupSetBits>
					break;
 80013f0:	e010      	b.n	8001414 <interpreter+0xe4>
					xEventGroupClearBits(EventGroup, 0x80);
 80013f2:	4b48      	ldr	r3, [pc, #288]	; (8001514 <interpreter+0x1e4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fce5 	bl	8004dc8 <xEventGroupClearBits>
					exm.memory_pointer = 0;
 80013fe:	4b46      	ldr	r3, [pc, #280]	; (8001518 <interpreter+0x1e8>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
					xEventGroupSetBits(EventGroup, 0x40);
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <interpreter+0x1e4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2140      	movs	r1, #64	; 0x40
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fd13 	bl	8004e38 <xEventGroupSetBits>
					break;
 8001412:	bf00      	nop
			break;
 8001414:	e077      	b.n	8001506 <interpreter+0x1d6>
	    	xEventGroupClearBits(EventGroup, 0x80);
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <interpreter+0x1e4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	4618      	mov	r0, r3
 800141e:	f003 fcd3 	bl	8004dc8 <xEventGroupClearBits>
	    	exm.memory_pointer = 0;
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <interpreter+0x1e8>)
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	    	xEventGroupSetBits(EventGroup, 0x40);
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <interpreter+0x1e4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2140      	movs	r1, #64	; 0x40
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fd01 	bl	8004e38 <xEventGroupSetBits>
	    	break;
 8001436:	e066      	b.n	8001506 <interpreter+0x1d6>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <interpreter+0x1e4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fcc2 	bl	8004dc8 <xEventGroupClearBits>
 8001444:	4603      	mov	r3, r0
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	2b80      	cmp	r3, #128	; 0x80
 800144c:	d15a      	bne.n	8001504 <interpreter+0x1d4>
			exm.start_speed_value = 0;
 800144e:	4b32      	ldr	r3, [pc, #200]	; (8001518 <interpreter+0x1e8>)
 8001450:	2200      	movs	r2, #0
 8001452:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			char temp = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	74bb      	strb	r3, [r7, #18]
			for(int i = 0; i < 4; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e030      	b.n	80014c2 <interpreter+0x192>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <interpreter+0x1dc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f107 0112 	add.w	r1, r7, #18
 8001468:	2205      	movs	r2, #5
 800146a:	4618      	mov	r0, r3
 800146c:	f004 f91a 	bl	80056a4 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8001470:	7cbb      	ldrb	r3, [r7, #18]
 8001472:	2b0d      	cmp	r3, #13
 8001474:	d02a      	beq.n	80014cc <interpreter+0x19c>
 8001476:	7cbb      	ldrb	r3, [r7, #18]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d027      	beq.n	80014cc <interpreter+0x19c>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d024      	beq.n	80014cc <interpreter+0x19c>
				if(i == 3) break;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d020      	beq.n	80014ca <interpreter+0x19a>
				if ((temp & (1<<7)) == 0x80){
 8001488:	7cbb      	ldrb	r3, [r7, #18]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	da04      	bge.n	800149a <interpreter+0x16a>
					temp &= ~(1<<7);
 8001490:	7cbb      	ldrb	r3, [r7, #18]
 8001492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001496:	b2db      	uxtb	r3, r3
 8001498:	74bb      	strb	r3, [r7, #18]
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <interpreter+0x1e8>)
 800149c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80014a0:	461a      	mov	r2, r3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	7cbb      	ldrb	r3, [r7, #18]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b30      	subs	r3, #48	; 0x30
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <interpreter+0x1e8>)
 80014b8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			for(int i = 0; i < 4; i++){
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	ddcb      	ble.n	8001460 <interpreter+0x130>
 80014c8:	e000      	b.n	80014cc <interpreter+0x19c>
				if(i == 3) break;
 80014ca:	bf00      	nop
			uint8_t data[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
 80014cc:	2353      	movs	r3, #83	; 0x53
 80014ce:	733b      	strb	r3, [r7, #12]
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <interpreter+0x1e8>)
 80014d2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	737b      	strb	r3, [r7, #13]
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <interpreter+0x1e8>)
 80014dc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	73bb      	strb	r3, [r7, #14]
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
			write_to_exm(data, sizeof(data));
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2104      	movs	r1, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fe48 	bl	8001188 <write_to_exm>
			__asm__ volatile("NOP");
 80014f8:	bf00      	nop
			break;
 80014fa:	e004      	b.n	8001506 <interpreter+0x1d6>
			break;
 80014fc:	bf00      	nop
 80014fe:	e002      	b.n	8001506 <interpreter+0x1d6>
			break;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <interpreter+0x1d6>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001504:	bf00      	nop
	}

	  pData = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	74fb      	strb	r3, [r7, #19]
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 800150a:	e715      	b.n	8001338 <interpreter+0x8>
 800150c:	200007dc 	.word	0x200007dc
 8001510:	20000784 	.word	0x20000784
 8001514:	20000860 	.word	0x20000860
 8001518:	200007e0 	.word	0x200007e0

0800151c <uart_comunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_comunication */
void uart_comunication(void const * argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_comunication */
	GPIOB->ODR |= GPIO_ODR_OD9;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <uart_comunication+0x20>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <uart_comunication+0x20>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6153      	str	r3, [r2, #20]
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001530:	2100      	movs	r1, #0
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <uart_comunication+0x24>)
 8001534:	f001 fbc4 	bl	8002cc0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  for(;;)
 8001538:	e7fe      	b.n	8001538 <uart_comunication+0x1c>
 800153a:	bf00      	nop
 800153c:	40020400 	.word	0x40020400
 8001540:	2000073c 	.word	0x2000073c

08001544 <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <execution_from_memory+0x34>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2301      	movs	r3, #1
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	f003 fb66 	bl	8004c2c <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8001560:	2364      	movs	r3, #100	; 0x64
 8001562:	220f      	movs	r2, #15
 8001564:	4905      	ldr	r1, [pc, #20]	; (800157c <execution_from_memory+0x38>)
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <execution_from_memory+0x3c>)
 8001568:	f002 fb13 	bl	8003b92 <HAL_UART_Transmit>
	  perform_instruction_from_exm();
 800156c:	f7ff fe50 	bl	8001210 <perform_instruction_from_exm>


	  vTaskDelay(200);
 8001570:	20c8      	movs	r0, #200	; 0xc8
 8001572:	f004 fc79 	bl	8005e68 <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8001576:	e7e9      	b.n	800154c <execution_from_memory+0x8>
 8001578:	20000860 	.word	0x20000860
 800157c:	08007b30 	.word	0x08007b30
 8001580:	20000784 	.word	0x20000784

08001584 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001594:	d101      	bne.n	800159a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001596:	f000 facb 	bl	8001b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a35      	ldr	r2, [pc, #212]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d162      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0xe6>
		switch (counter_for_steps) {
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d84f      	bhi.n	800164c <HAL_TIM_PeriodElapsedCallback+0xc8>
 80015ac:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b2:	bf00      	nop
 80015b4:	080015c5 	.word	0x080015c5
 80015b8:	080015e7 	.word	0x080015e7
 80015bc:	08001609 	.word	0x08001609
 80015c0:	0800162b 	.word	0x0800162b
			case 0:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80015c4:	2108      	movs	r1, #8
 80015c6:	482d      	ldr	r0, [pc, #180]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015c8:	f001 fc2a 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80015cc:	210c      	movs	r1, #12
 80015ce:	482b      	ldr	r0, [pc, #172]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015d0:	f001 fc26 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015d4:	2100      	movs	r1, #0
 80015d6:	4829      	ldr	r0, [pc, #164]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015d8:	f001 fb72 	bl	8002cc0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015dc:	2104      	movs	r1, #4
 80015de:	4827      	ldr	r0, [pc, #156]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015e0:	f001 fb6e 	bl	8002cc0 <HAL_TIM_PWM_Start>
				break;
 80015e4:	e033      	b.n	800164e <HAL_TIM_PeriodElapsedCallback+0xca>
			case 1:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80015e6:	2100      	movs	r1, #0
 80015e8:	4824      	ldr	r0, [pc, #144]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015ea:	f001 fc19 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80015ee:	210c      	movs	r1, #12
 80015f0:	4822      	ldr	r0, [pc, #136]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015f2:	f001 fc15 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015f6:	2104      	movs	r1, #4
 80015f8:	4820      	ldr	r0, [pc, #128]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015fa:	f001 fb61 	bl	8002cc0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015fe:	2108      	movs	r1, #8
 8001600:	481e      	ldr	r0, [pc, #120]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001602:	f001 fb5d 	bl	8002cc0 <HAL_TIM_PWM_Start>
				break;
 8001606:	e022      	b.n	800164e <HAL_TIM_PeriodElapsedCallback+0xca>
			case 2:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001608:	2100      	movs	r1, #0
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800160c:	f001 fc08 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001610:	2104      	movs	r1, #4
 8001612:	481a      	ldr	r0, [pc, #104]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001614:	f001 fc04 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001618:	2108      	movs	r1, #8
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800161c:	f001 fb50 	bl	8002cc0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001620:	210c      	movs	r1, #12
 8001622:	4816      	ldr	r0, [pc, #88]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001624:	f001 fb4c 	bl	8002cc0 <HAL_TIM_PWM_Start>
				break;
 8001628:	e011      	b.n	800164e <HAL_TIM_PeriodElapsedCallback+0xca>
			case 3:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800162a:	2104      	movs	r1, #4
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800162e:	f001 fbf7 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001632:	2108      	movs	r1, #8
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001636:	f001 fbf3 	bl	8002e20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800163a:	210c      	movs	r1, #12
 800163c:	480f      	ldr	r0, [pc, #60]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800163e:	f001 fb3f 	bl	8002cc0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001642:	2100      	movs	r1, #0
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001646:	f001 fb3b 	bl	8002cc0 <HAL_TIM_PWM_Start>
				break;
 800164a:	e000      	b.n	800164e <HAL_TIM_PeriodElapsedCallback+0xca>
			default:
				break;
 800164c:	bf00      	nop
		}
		counter_for_steps == 3 ? counter_for_steps = 0 : counter_for_steps++;
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d103      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0xda>
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 800165c:	e005      	b.n	800166a <HAL_TIM_PeriodElapsedCallback+0xe6>
		counter_for_steps == 3 ? counter_for_steps = 0 : counter_for_steps++;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001668:	701a      	strb	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40000400 	.word	0x40000400
 8001678:	200007d8 	.word	0x200007d8
 800167c:	200006f4 	.word	0x200006f4

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_MspInit+0x54>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_MspInit+0x54>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_MspInit+0x54>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_MspInit+0x54>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_MspInit+0x54>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_MspInit+0x54>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	210f      	movs	r1, #15
 80016ce:	f06f 0001 	mvn.w	r0, #1
 80016d2:	f000 fb05 	bl	8001ce0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d116      	bne.n	8001724 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2106      	movs	r1, #6
 8001716:	201d      	movs	r0, #29
 8001718:	f000 fae2 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800171c:	201d      	movs	r0, #29
 800171e:	f000 fafb 	bl	8001d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001722:	e012      	b.n	800174a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <HAL_TIM_Base_MspInit+0x78>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10d      	bne.n	800174a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40000400 	.word	0x40000400
 8001758:	40023800 	.word	0x40023800
 800175c:	40014400 	.word	0x40014400

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a33      	ldr	r2, [pc, #204]	; (800184c <HAL_TIM_MspPostInit+0xec>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d13c      	bne.n	80017fc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a31      	ldr	r2, [pc, #196]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ba:	23c0      	movs	r3, #192	; 0xc0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ca:	2302      	movs	r3, #2
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	481f      	ldr	r0, [pc, #124]	; (8001854 <HAL_TIM_MspPostInit+0xf4>)
 80017d6:	f000 fb3f 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017da:	2303      	movs	r3, #3
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ea:	2302      	movs	r3, #2
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4818      	ldr	r0, [pc, #96]	; (8001858 <HAL_TIM_MspPostInit+0xf8>)
 80017f6:	f000 fb2f 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80017fa:	e023      	b.n	8001844 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM10)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_TIM_MspPostInit+0xfc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11e      	bne.n	8001844 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_TIM_MspPostInit+0xf0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PUL_stepper_Pin;
 8001822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001834:	2303      	movs	r3, #3
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PUL_stepper_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <HAL_TIM_MspPostInit+0xf8>)
 8001840:	f000 fb0a 	bl	8001e58 <HAL_GPIO_Init>
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40000400 	.word	0x40000400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40014400 	.word	0x40014400

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_UART_MspInit+0x94>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d134      	bne.n	80018ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_UART_MspInit+0x98>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_UART_MspInit+0x98>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0x98>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_UART_MspInit+0x98>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_UART_MspInit+0x98>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_UART_MspInit+0x98>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018cc:	2307      	movs	r3, #7
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4809      	ldr	r0, [pc, #36]	; (80018fc <HAL_UART_MspInit+0x9c>)
 80018d8:	f000 fabe 	bl	8001e58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2105      	movs	r1, #5
 80018e0:	2025      	movs	r0, #37	; 0x25
 80018e2:	f000 f9fd 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018e6:	2025      	movs	r0, #37	; 0x25
 80018e8:	f000 fa16 	bl	8001d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40011000 	.word	0x40011000
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_InitTick+0xe8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a33      	ldr	r2, [pc, #204]	; (80019e8 <HAL_InitTick+0xe8>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_InitTick+0xe8>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800192c:	f107 0210 	add.w	r2, r7, #16
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f001 f884 	bl	8002a44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001946:	f001 f855 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 800194a:	6378      	str	r0, [r7, #52]	; 0x34
 800194c:	e004      	b.n	8001958 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800194e:	f001 f851 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8001952:	4603      	mov	r3, r0
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195a:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_InitTick+0xec>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	3b01      	subs	r3, #1
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_InitTick+0xf0>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_InitTick+0xf0>)
 8001970:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001974:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001976:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <HAL_InitTick+0xf0>)
 8001978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_InitTick+0xf0>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_InitTick+0xf0>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_InitTick+0xf0>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800198e:	4818      	ldr	r0, [pc, #96]	; (80019f0 <HAL_InitTick+0xf0>)
 8001990:	f001 f88a 	bl	8002aa8 <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800199a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11b      	bne.n	80019da <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80019a2:	4813      	ldr	r0, [pc, #76]	; (80019f0 <HAL_InitTick+0xf0>)
 80019a4:	f001 f8d0 	bl	8002b48 <HAL_TIM_Base_Start_IT>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d111      	bne.n	80019da <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b6:	201c      	movs	r0, #28
 80019b8:	f000 f9ae 	bl	8001d18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	d808      	bhi.n	80019d4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80019c2:	2200      	movs	r2, #0
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	201c      	movs	r0, #28
 80019c8:	f000 f98a 	bl	8001ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_InitTick+0xf4>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e002      	b.n	80019da <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3738      	adds	r7, #56	; 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	20000864 	.word	0x20000864
 80019f4:	20000004 	.word	0x20000004

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM2_IRQHandler+0x10>)
 8001a2a:	f001 fa5d 	bl	8002ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000864 	.word	0x20000864

08001a38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM3_IRQHandler+0x10>)
 8001a3e:	f001 fa53 	bl	8002ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200006f4 	.word	0x200006f4

08001a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <USART1_IRQHandler+0x20>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 8001a5c:	f7ff fb84 	bl	8001168 <uart1_rx_callback>
		__asm__ volatile("NOP");
 8001a60:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <USART1_IRQHandler+0x24>)
 8001a64:	f002 f928 	bl	8003cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	20000784 	.word	0x20000784

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac2:	f7ff ffd7 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f005 ff91 	bl	80079ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7ff f841 	bl	8000b50 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001adc:	08007b80 	.word	0x08007b80
  ldr r2, =_sbss
 8001ae0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ae4:	20004768 	.word	0x20004768

08001ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_Init+0x40>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_Init+0x40>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_Init+0x40>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f8d8 	bl	8001cca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff fef0 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b20:	f7ff fdb4 	bl	800168c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008
 8001b54:	200008ac 	.word	0x200008ac

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200008ac 	.word	0x200008ac

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	; (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff4c 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf2:	f7ff ff61 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001cf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	6978      	ldr	r0, [r7, #20]
 8001cfe:	f7ff ffb1 	bl	8001c64 <NVIC_EncodePriority>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff80 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff54 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d42:	f7ff ff09 	bl	8001b58 <HAL_GetTick>
 8001d46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d008      	beq.n	8001d66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e052      	b.n	8001e0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0216 	bic.w	r2, r2, #22
 8001d74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <HAL_DMA_Abort+0x62>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0208 	bic.w	r2, r2, #8
 8001da4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db6:	e013      	b.n	8001de0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db8:	f7ff fece 	bl	8001b58 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d90c      	bls.n	8001de0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e015      	b.n	8001e0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1e4      	bne.n	8001db8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	223f      	movs	r2, #63	; 0x3f
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d004      	beq.n	8001e32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00c      	b.n	8001e4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e159      	b.n	8002128 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8148 	bne.w	8002122 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a2 	beq.w	8002122 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b54      	ldr	r3, [pc, #336]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_GPIO_Init+0x2ec>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_GPIO_Init+0x2f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x202>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a48      	ldr	r2, [pc, #288]	; (800214c <HAL_GPIO_Init+0x2f4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x1fe>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a47      	ldr	r2, [pc, #284]	; (8002150 <HAL_GPIO_Init+0x2f8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a46      	ldr	r2, [pc, #280]	; (8002154 <HAL_GPIO_Init+0x2fc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x1f6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a45      	ldr	r2, [pc, #276]	; (8002158 <HAL_GPIO_Init+0x300>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x1f2>
 8002046:	2304      	movs	r3, #4
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204a:	2307      	movs	r3, #7
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x204>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <HAL_GPIO_Init+0x2ec>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_GPIO_Init+0x304>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a2f      	ldr	r2, [pc, #188]	; (800215c <HAL_GPIO_Init+0x304>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_GPIO_Init+0x304>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <HAL_GPIO_Init+0x304>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_GPIO_Init+0x304>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_GPIO_Init+0x304>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_GPIO_Init+0x304>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211c:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_GPIO_Init+0x304>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f aea2 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e267      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d075      	beq.n	800229e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b2:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d00c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4b85      	ldr	r3, [pc, #532]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d112      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	4b82      	ldr	r3, [pc, #520]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	4b7e      	ldr	r3, [pc, #504]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05b      	beq.n	800229c <HAL_RCC_OscConfig+0x108>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d157      	bne.n	800229c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e242      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x74>
 80021fa:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a75      	ldr	r2, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x98>
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6f      	ldr	r2, [pc, #444]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6c      	ldr	r2, [pc, #432]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 800222c:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a68      	ldr	r2, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fc84 	bl	8001b58 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fc80 	bl	8001b58 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e207      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b5b      	ldr	r3, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xc0>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fc70 	bl	8001b58 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fc6c 	bl	8001b58 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1f3      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0xe8>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1c7      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4937      	ldr	r1, [pc, #220]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCC_OscConfig+0x244>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7ff fc25 	bl	8001b58 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7ff fc21 	bl	8001b58 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1a8      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4925      	ldr	r1, [pc, #148]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_OscConfig+0x244>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fc04 	bl	8001b58 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff fc00 	bl	8001b58 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e187      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d036      	beq.n	80023ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_RCC_OscConfig+0x248>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff fbe4 	bl	8001b58 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fbe0 	bl	8001b58 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e167      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x200>
 80023b2:	e01b      	b.n	80023ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_OscConfig+0x248>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fbcd 	bl	8001b58 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	e00e      	b.n	80023e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff fbc9 	bl	8001b58 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d907      	bls.n	80023e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e150      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
 80023d4:	40023800 	.word	0x40023800
 80023d8:	42470000 	.word	0x42470000
 80023dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ea      	bne.n	80023c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8097 	beq.w	8002528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a7c      	ldr	r2, [pc, #496]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b7a      	ldr	r3, [pc, #488]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b77      	ldr	r3, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d118      	bne.n	8002468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002436:	4b74      	ldr	r3, [pc, #464]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a73      	ldr	r2, [pc, #460]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002442:	f7ff fb89 	bl	8001b58 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7ff fb85 	bl	8001b58 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e10c      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x2ea>
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a63      	ldr	r2, [pc, #396]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x324>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x30c>
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a5e      	ldr	r2, [pc, #376]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a5b      	ldr	r2, [pc, #364]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0x324>
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a57      	ldr	r2, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	4b55      	ldr	r3, [pc, #340]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a54      	ldr	r2, [pc, #336]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d015      	beq.n	80024ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff fb4a 	bl	8001b58 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7ff fb46 	bl	8001b58 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0cb      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ee      	beq.n	80024c8 <HAL_RCC_OscConfig+0x334>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7ff fb34 	bl	8001b58 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7ff fb30 	bl	8001b58 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0b5      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250a:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ee      	bne.n	80024f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251c:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	4a38      	ldr	r2, [pc, #224]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a1 	beq.w	8002674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002532:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b08      	cmp	r3, #8
 800253c:	d05c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d141      	bne.n	80025ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_OscConfig+0x478>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fb04 	bl	8001b58 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff fb00 	bl	8001b58 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e087      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	019b      	lsls	r3, r3, #6
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	3b01      	subs	r3, #1
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	491b      	ldr	r1, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x478>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7ff fad9 	bl	8001b58 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025aa:	f7ff fad5 	bl	8001b58 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e05c      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x416>
 80025c8:	e054      	b.n	8002674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCC_OscConfig+0x478>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fac2 	bl	8001b58 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff fabe 	bl	8001b58 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e045      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x444>
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e038      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
 8002604:	40023800 	.word	0x40023800
 8002608:	40007000 	.word	0x40007000
 800260c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4ec>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d028      	beq.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d121      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d11a      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	3b01      	subs	r3, #1
 800265a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0cc      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d90c      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d044      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d119      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d003      	beq.n	8002742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273e:	2b03      	cmp	r3, #3
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e067      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4934      	ldr	r1, [pc, #208]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7ff f9f0 	bl	8001b58 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7ff f9ec 	bl	8001b58 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e04f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d20c      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f868 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00
 8002840:	40023800 	.word	0x40023800
 8002844:	08007b58 	.word	0x08007b58
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	b090      	sub	sp, #64	; 0x40
 8002856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	2300      	movs	r3, #0
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002860:	2300      	movs	r3, #0
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d00d      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x40>
 8002874:	2b08      	cmp	r3, #8
 8002876:	f200 80a1 	bhi.w	80029bc <HAL_RCC_GetSysClockFreq+0x16c>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x34>
 800287e:	2b04      	cmp	r3, #4
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x3a>
 8002882:	e09b      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002888:	e09b      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800288e:	e098      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289a:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d028      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	2200      	movs	r2, #0
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	627a      	str	r2, [r7, #36]	; 0x24
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028b8:	2100      	movs	r1, #0
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80028bc:	fb03 f201 	mul.w	r2, r3, r1
 80028c0:	2300      	movs	r3, #0
 80028c2:	fb00 f303 	mul.w	r3, r0, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	4a43      	ldr	r2, [pc, #268]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80028ca:	fba0 1202 	umull	r1, r2, r0, r2
 80028ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d0:	460a      	mov	r2, r1
 80028d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80028d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d6:	4413      	add	r3, r2
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028dc:	2200      	movs	r2, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	61fa      	str	r2, [r7, #28]
 80028e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028ea:	f7fd ff7f 	bl	80007ec <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4613      	mov	r3, r2
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f6:	e053      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	2200      	movs	r2, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	617a      	str	r2, [r7, #20]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800290a:	f04f 0b00 	mov.w	fp, #0
 800290e:	4652      	mov	r2, sl
 8002910:	465b      	mov	r3, fp
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	0159      	lsls	r1, r3, #5
 800291c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002920:	0150      	lsls	r0, r2, #5
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	ebb2 080a 	subs.w	r8, r2, sl
 800292a:	eb63 090b 	sbc.w	r9, r3, fp
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800293a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800293e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002942:	ebb2 0408 	subs.w	r4, r2, r8
 8002946:	eb63 0509 	sbc.w	r5, r3, r9
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	00eb      	lsls	r3, r5, #3
 8002954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002958:	00e2      	lsls	r2, r4, #3
 800295a:	4614      	mov	r4, r2
 800295c:	461d      	mov	r5, r3
 800295e:	eb14 030a 	adds.w	r3, r4, sl
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	eb45 030b 	adc.w	r3, r5, fp
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002976:	4629      	mov	r1, r5
 8002978:	028b      	lsls	r3, r1, #10
 800297a:	4621      	mov	r1, r4
 800297c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002980:	4621      	mov	r1, r4
 8002982:	028a      	lsls	r2, r1, #10
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298a:	2200      	movs	r2, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	60fa      	str	r2, [r7, #12]
 8002990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002994:	f7fd ff2a 	bl	80007ec <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4613      	mov	r3, r2
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3740      	adds	r7, #64	; 0x40
 80029c8:	46bd      	mov	sp, r7
 80029ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	017d7840 	.word	0x017d7840

080029dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000000 	.word	0x20000000

080029f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029f8:	f7ff fff0 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0a9b      	lsrs	r3, r3, #10
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4903      	ldr	r1, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08007b68 	.word	0x08007b68

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a20:	f7ff ffdc 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0b5b      	lsrs	r3, r3, #13
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4903      	ldr	r1, [pc, #12]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	08007b68 	.word	0x08007b68

08002a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	220f      	movs	r2, #15
 8002a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	08db      	lsrs	r3, r3, #3
 8002a7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <HAL_RCC_GetClockConfig+0x60>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0207 	and.w	r2, r3, #7
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fe08 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fcb8 	bl	800345c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d001      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e044      	b.n	8002bea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d018      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8a:	d013      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_TIM_Base_Start_IT+0xb4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00e      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_TIM_Base_Start_IT+0xc0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d111      	bne.n	8002bd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d010      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd6:	e007      	b.n	8002be8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40014000 	.word	0x40014000

08002c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e041      	b.n	8002ca2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f839 	bl	8002caa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 fc06 	bl	800345c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_TIM_PWM_Start+0x24>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e022      	b.n	8002d2a <HAL_TIM_PWM_Start+0x6a>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d109      	bne.n	8002cfe <HAL_TIM_PWM_Start+0x3e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	e015      	b.n	8002d2a <HAL_TIM_PWM_Start+0x6a>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d109      	bne.n	8002d18 <HAL_TIM_PWM_Start+0x58>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e008      	b.n	8002d2a <HAL_TIM_PWM_Start+0x6a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e068      	b.n	8002e04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_PWM_Start+0x82>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d40:	e013      	b.n	8002d6a <HAL_TIM_PWM_Start+0xaa>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x92>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d50:	e00b      	b.n	8002d6a <HAL_TIM_PWM_Start+0xaa>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_PWM_Start+0xa2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	e003      	b.n	8002d6a <HAL_TIM_PWM_Start+0xaa>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fe18 	bl	80039a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_TIM_PWM_Start+0x14c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d107      	bne.n	8002d92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_TIM_PWM_Start+0x14c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d018      	beq.n	8002dce <HAL_TIM_PWM_Start+0x10e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d013      	beq.n	8002dce <HAL_TIM_PWM_Start+0x10e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_TIM_PWM_Start+0x150>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00e      	beq.n	8002dce <HAL_TIM_PWM_Start+0x10e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <HAL_TIM_PWM_Start+0x154>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_TIM_PWM_Start+0x10e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <HAL_TIM_PWM_Start+0x158>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_TIM_PWM_Start+0x10e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <HAL_TIM_PWM_Start+0x15c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d010      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df0:	e007      	b.n	8002e02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00
 8002e1c:	40014000 	.word	0x40014000

08002e20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fdb8 	bl	80039a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <HAL_TIM_PWM_Stop+0xc4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d117      	bne.n	8002e72 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10f      	bne.n	8002e72 <HAL_TIM_PWM_Stop+0x52>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	f240 4344 	movw	r3, #1092	; 0x444
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_TIM_PWM_Stop+0x52>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_TIM_PWM_Stop+0x82>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	f240 4344 	movw	r3, #1092	; 0x444
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_TIM_PWM_Stop+0x82>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d104      	bne.n	8002eb2 <HAL_TIM_PWM_Stop+0x92>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb0:	e013      	b.n	8002eda <HAL_TIM_PWM_Stop+0xba>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_PWM_Stop+0xa2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec0:	e00b      	b.n	8002eda <HAL_TIM_PWM_Stop+0xba>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_PWM_Stop+0xb2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	e003      	b.n	8002eda <HAL_TIM_PWM_Stop+0xba>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40010000 	.word	0x40010000

08002ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0202 	mvn.w	r2, #2
 8002f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa77 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa69 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fa7a 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0204 	mvn.w	r2, #4
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa4d 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa3f 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fa50 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0208 	mvn.w	r2, #8
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa23 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fa15 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa26 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0210 	mvn.w	r2, #16
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2208      	movs	r2, #8
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9f9 	bl	800341e <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9eb 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9fc 	bl	8003432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0201 	mvn.w	r2, #1
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe fa8c 	bl	8001584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d10e      	bne.n	8003098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d107      	bne.n	8003098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fd26 	bl	8003ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d10e      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f9c1 	bl	8003446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0220 	mvn.w	r2, #32
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fcf0 	bl	8003ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0ae      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	f200 809f 	bhi.w	8003264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003161 	.word	0x08003161
 8003130:	08003265 	.word	0x08003265
 8003134:	08003265 	.word	0x08003265
 8003138:	08003265 	.word	0x08003265
 800313c:	080031a1 	.word	0x080031a1
 8003140:	08003265 	.word	0x08003265
 8003144:	08003265 	.word	0x08003265
 8003148:	08003265 	.word	0x08003265
 800314c:	080031e3 	.word	0x080031e3
 8003150:	08003265 	.word	0x08003265
 8003154:	08003265 	.word	0x08003265
 8003158:	08003265 	.word	0x08003265
 800315c:	08003223 	.word	0x08003223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f9f8 	bl	800355c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0208 	orr.w	r2, r2, #8
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	619a      	str	r2, [r3, #24]
      break;
 800319e:	e064      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fa3e 	bl	8003628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	021a      	lsls	r2, r3, #8
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]
      break;
 80031e0:	e043      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa89 	bl	8003700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0208 	orr.w	r2, r2, #8
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0204 	bic.w	r2, r2, #4
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
      break;
 8003220:	e023      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fad3 	bl	80037d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	021a      	lsls	r2, r3, #8
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	61da      	str	r2, [r3, #28]
      break;
 8003262:	e002      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIM_ConfigClockSource+0x1c>
 8003294:	2302      	movs	r3, #2
 8003296:	e0b4      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x186>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d0:	d03e      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0xd4>
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	f200 8087 	bhi.w	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	f000 8086 	beq.w	80033ee <HAL_TIM_ConfigClockSource+0x172>
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	d87f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d01a      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0xa6>
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d87b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d050      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x11a>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d877      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	d03c      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0xfa>
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d873      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d058      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d86f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d064      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	2b30      	cmp	r3, #48	; 0x30
 800330e:	d86b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d060      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d867      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05c      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	2b10      	cmp	r3, #16
 800331e:	d05a      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003320:	e062      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f000 fb19 	bl	8003968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	609a      	str	r2, [r3, #8]
      break;
 800334e:	e04f      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f000 fb02 	bl	8003968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003372:	609a      	str	r2, [r3, #8]
      break;
 8003374:	e03c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	461a      	mov	r2, r3
 8003384:	f000 fa76 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2150      	movs	r1, #80	; 0x50
 800338e:	4618      	mov	r0, r3
 8003390:	f000 facf 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 8003394:	e02c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f000 fa95 	bl	80038d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2160      	movs	r1, #96	; 0x60
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fabf 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 80033b4:	e01c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 fa56 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 faaf 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 80033d4:	e00c      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f000 faa6 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 80033e6:	e003      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e000      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a34      	ldr	r2, [pc, #208]	; (8003540 <TIM_Base_SetConfig+0xe4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0x38>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x38>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a31      	ldr	r2, [pc, #196]	; (8003544 <TIM_Base_SetConfig+0xe8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x38>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a30      	ldr	r2, [pc, #192]	; (8003548 <TIM_Base_SetConfig+0xec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x38>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a2f      	ldr	r2, [pc, #188]	; (800354c <TIM_Base_SetConfig+0xf0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <TIM_Base_SetConfig+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01b      	beq.n	80034e6 <TIM_Base_SetConfig+0x8a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d017      	beq.n	80034e6 <TIM_Base_SetConfig+0x8a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a22      	ldr	r2, [pc, #136]	; (8003544 <TIM_Base_SetConfig+0xe8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <TIM_Base_SetConfig+0x8a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a21      	ldr	r2, [pc, #132]	; (8003548 <TIM_Base_SetConfig+0xec>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00f      	beq.n	80034e6 <TIM_Base_SetConfig+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a20      	ldr	r2, [pc, #128]	; (800354c <TIM_Base_SetConfig+0xf0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00b      	beq.n	80034e6 <TIM_Base_SetConfig+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <TIM_Base_SetConfig+0xf4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <TIM_Base_SetConfig+0xf8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <TIM_Base_SetConfig+0xfc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d108      	bne.n	80034f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <TIM_Base_SetConfig+0xe4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	615a      	str	r2, [r3, #20]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800

0800355c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0201 	bic.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0302 	bic.w	r3, r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <TIM_OC1_SetConfig+0xc8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10c      	bne.n	80035d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0308 	bic.w	r3, r3, #8
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a13      	ldr	r2, [pc, #76]	; (8003624 <TIM_OC1_SetConfig+0xc8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40010000 	.word	0x40010000

08003628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0210 	bic.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0320 	bic.w	r3, r3, #32
 8003672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <TIM_OC2_SetConfig+0xd4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10d      	bne.n	80036a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <TIM_OC2_SetConfig+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d113      	bne.n	80036d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000

08003700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <TIM_OC3_SetConfig+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10d      	bne.n	800377a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <TIM_OC3_SetConfig+0xd0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d113      	bne.n	80037aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000

080037d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	031b      	lsls	r3, r3, #12
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <TIM_OC4_SetConfig+0x9c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d109      	bne.n	8003848 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800383a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000

08003874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 030a 	bic.w	r3, r3, #10
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0210 	bic.w	r2, r3, #16
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	031b      	lsls	r3, r3, #12
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800390e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	f043 0307 	orr.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	431a      	orrs	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4313      	orrs	r3, r2
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2201      	movs	r2, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	401a      	ands	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	431a      	orrs	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e050      	b.n	8003aae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d018      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d013      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	; (8003acc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10c      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40014000 	.word	0x40014000

08003ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e03f      	b.n	8003b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd fe9e 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	; 0x24
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fd7b 	bl	8004638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b08a      	sub	sp, #40	; 0x28
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d17c      	bne.n	8003cac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_Transmit+0x2c>
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e075      	b.n	8003cae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_UART_Transmit+0x3e>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e06e      	b.n	8003cae <HAL_UART_Transmit+0x11c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2221      	movs	r2, #33	; 0x21
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be6:	f7fd ffb7 	bl	8001b58 <HAL_GetTick>
 8003bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	88fa      	ldrh	r2, [r7, #6]
 8003bf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	d108      	bne.n	8003c14 <HAL_UART_Transmit+0x82>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	e003      	b.n	8003c1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c24:	e02a      	b.n	8003c7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 faf9 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e036      	b.n	8003cae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	3302      	adds	r3, #2
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	e007      	b.n	8003c6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1cf      	bne.n	8003c26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2140      	movs	r1, #64	; 0x40
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fac9 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e006      	b.n	8003cae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b0ba      	sub	sp, #232	; 0xe8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_UART_IRQHandler+0x66>
 8003d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fbd3 	bl	80044c2 <UART_Receive_IT>
      return;
 8003d1c:	e256      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80de 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x22c>
 8003d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80d1 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_UART_IRQHandler+0xae>
 8003d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_UART_IRQHandler+0xd2>
 8003d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0202 	orr.w	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_UART_IRQHandler+0xf6>
 8003d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f043 0204 	orr.w	r2, r3, #4
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d011      	beq.n	8003dde <HAL_UART_IRQHandler+0x126>
 8003dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f043 0208 	orr.w	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 81ed 	beq.w	80041c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_UART_IRQHandler+0x14e>
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fb5e 	bl	80044c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <HAL_UART_IRQHandler+0x17a>
 8003e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04f      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa66 	bl	8004304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d141      	bne.n	8003eca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1d9      	bne.n	8003e46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d013      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	4a7d      	ldr	r2, [pc, #500]	; (8004094 <HAL_UART_IRQHandler+0x3dc>)
 8003ea0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd ffb4 	bl	8001e14 <HAL_DMA_Abort_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	e00e      	b.n	8003ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f99a 	bl	80041fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e00a      	b.n	8003ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f996 	bl	80041fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e006      	b.n	8003ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f992 	bl	80041fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ede:	e170      	b.n	80041c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	bf00      	nop
    return;
 8003ee2:	e16e      	b.n	80041c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 814a 	bne.w	8004182 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8143 	beq.w	8004182 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 813c 	beq.w	8004182 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	f040 80b4 	bne.w	8004098 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8140 	beq.w	80041c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	f080 8139 	bcs.w	80041c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	f000 8088 	beq.w	800407a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1d9      	bne.n	8003f6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e1      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004016:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004018:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800401c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e3      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404a:	f023 0310 	bic.w	r3, r3, #16
 800404e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800405c:	65ba      	str	r2, [r7, #88]	; 0x58
 800405e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e3      	bne.n	8004038 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	4618      	mov	r0, r3
 8004076:	f7fd fe5d 	bl	8001d34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004082:	b29b      	uxth	r3, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8c0 	bl	8004210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004090:	e099      	b.n	80041c6 <HAL_UART_IRQHandler+0x50e>
 8004092:	bf00      	nop
 8004094:	080043cb 	.word	0x080043cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808b 	beq.w	80041ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8086 	beq.w	80041ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040e2:	647a      	str	r2, [r7, #68]	; 0x44
 80040e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e3      	bne.n	80040be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	623b      	str	r3, [r7, #32]
   return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800411a:	633a      	str	r2, [r7, #48]	; 0x30
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	60fb      	str	r3, [r7, #12]
   return(result);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004160:	61fa      	str	r2, [r7, #28]
 8004162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	69b9      	ldr	r1, [r7, #24]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	617b      	str	r3, [r7, #20]
   return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e3      	bne.n	800413c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f848 	bl	8004210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004180:	e023      	b.n	80041ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_UART_IRQHandler+0x4ea>
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f929 	bl	80043f2 <UART_Transmit_IT>
    return;
 80041a0:	e014      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00e      	beq.n	80041cc <HAL_UART_IRQHandler+0x514>
 80041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f969 	bl	8004492 <UART_EndTransmit_IT>
    return;
 80041c0:	e004      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
    return;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
      return;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <HAL_UART_IRQHandler+0x514>
      return;
 80041ca:	bf00      	nop
  }
}
 80041cc:	37e8      	adds	r7, #232	; 0xe8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop

080041d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b090      	sub	sp, #64	; 0x40
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004238:	e050      	b.n	80042dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d04c      	beq.n	80042dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <UART_WaitOnFlagUntilTimeout+0x30>
 8004248:	f7fd fc86 	bl	8001b58 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004254:	429a      	cmp	r2, r3
 8004256:	d241      	bcs.n	80042dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004278:	637a      	str	r2, [r7, #52]	; 0x34
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800427e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e5      	bne.n	8004258 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	613b      	str	r3, [r7, #16]
   return(result);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042ac:	623a      	str	r2, [r7, #32]
 80042ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	69f9      	ldr	r1, [r7, #28]
 80042b2:	6a3a      	ldr	r2, [r7, #32]
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e5      	bne.n	800428c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e00f      	b.n	80042fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d09f      	beq.n	800423a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3740      	adds	r7, #64	; 0x40
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b095      	sub	sp, #84	; 0x54
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432c:	643a      	str	r2, [r7, #64]	; 0x40
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e5      	bne.n	800430c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	64bb      	str	r3, [r7, #72]	; 0x48
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3314      	adds	r3, #20
 800435e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e5      	bne.n	8004340 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	2b01      	cmp	r3, #1
 800437a:	d119      	bne.n	80043b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	60bb      	str	r3, [r7, #8]
   return(result);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f023 0310 	bic.w	r3, r3, #16
 8004392:	647b      	str	r3, [r7, #68]	; 0x44
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800439c:	61ba      	str	r2, [r7, #24]
 800439e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6979      	ldr	r1, [r7, #20]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	613b      	str	r3, [r7, #16]
   return(result);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e5      	bne.n	800437c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043be:	bf00      	nop
 80043c0:	3754      	adds	r7, #84	; 0x54
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff ff09 	bl	80041fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b21      	cmp	r3, #33	; 0x21
 8004404:	d13e      	bne.n	8004484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440e:	d114      	bne.n	800443a <UART_Transmit_IT+0x48>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d110      	bne.n	800443a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800442c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	621a      	str	r2, [r3, #32]
 8004438:	e008      	b.n	800444c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6211      	str	r1, [r2, #32]
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4619      	mov	r1, r3
 800445a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800446e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fe8e 	bl	80041d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08c      	sub	sp, #48	; 0x30
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b22      	cmp	r3, #34	; 0x22
 80044d4:	f040 80ab 	bne.w	800462e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d117      	bne.n	8004512 <UART_Receive_IT+0x50>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d113      	bne.n	8004512 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004500:	b29a      	uxth	r2, r3
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	1c9a      	adds	r2, r3, #2
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
 8004510:	e026      	b.n	8004560 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004524:	d007      	beq.n	8004536 <UART_Receive_IT+0x74>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <UART_Receive_IT+0x82>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e008      	b.n	8004556 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004550:	b2da      	uxtb	r2, r3
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4619      	mov	r1, r3
 800456e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004570:	2b00      	cmp	r3, #0
 8004572:	d15a      	bne.n	800462a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0220 	bic.w	r2, r2, #32
 8004582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d135      	bne.n	8004620 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f023 0310 	bic.w	r3, r3, #16
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	623a      	str	r2, [r7, #32]
 80045dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	69f9      	ldr	r1, [r7, #28]
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e5      	bne.n	80045ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d10a      	bne.n	8004612 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fdf9 	bl	8004210 <HAL_UARTEx_RxEventCallback>
 800461e:	e002      	b.n	8004626 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff fde1 	bl	80041e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e002      	b.n	8004630 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800463c:	b0c0      	sub	sp, #256	; 0x100
 800463e:	af00      	add	r7, sp, #0
 8004640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	68d9      	ldr	r1, [r3, #12]
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	ea40 0301 	orr.w	r3, r0, r1
 8004660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	431a      	orrs	r2, r3
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004690:	f021 010c 	bic.w	r1, r1, #12
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800469e:	430b      	orrs	r3, r1
 80046a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b2:	6999      	ldr	r1, [r3, #24]
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	ea40 0301 	orr.w	r3, r0, r1
 80046be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b8f      	ldr	r3, [pc, #572]	; (8004904 <UART_SetConfig+0x2cc>)
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d005      	beq.n	80046d8 <UART_SetConfig+0xa0>
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b8d      	ldr	r3, [pc, #564]	; (8004908 <UART_SetConfig+0x2d0>)
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d104      	bne.n	80046e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046d8:	f7fe f9a0 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 80046dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046e0:	e003      	b.n	80046ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046e2:	f7fe f987 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 80046e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f4:	f040 810c 	bne.w	8004910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800470a:	4622      	mov	r2, r4
 800470c:	462b      	mov	r3, r5
 800470e:	1891      	adds	r1, r2, r2
 8004710:	65b9      	str	r1, [r7, #88]	; 0x58
 8004712:	415b      	adcs	r3, r3
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800471a:	4621      	mov	r1, r4
 800471c:	eb12 0801 	adds.w	r8, r2, r1
 8004720:	4629      	mov	r1, r5
 8004722:	eb43 0901 	adc.w	r9, r3, r1
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473a:	4690      	mov	r8, r2
 800473c:	4699      	mov	r9, r3
 800473e:	4623      	mov	r3, r4
 8004740:	eb18 0303 	adds.w	r3, r8, r3
 8004744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004748:	462b      	mov	r3, r5
 800474a:	eb49 0303 	adc.w	r3, r9, r3
 800474e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800475e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004766:	460b      	mov	r3, r1
 8004768:	18db      	adds	r3, r3, r3
 800476a:	653b      	str	r3, [r7, #80]	; 0x50
 800476c:	4613      	mov	r3, r2
 800476e:	eb42 0303 	adc.w	r3, r2, r3
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
 8004774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800477c:	f7fc f836 	bl	80007ec <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <UART_SetConfig+0x2d4>)
 8004786:	fba3 2302 	umull	r2, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	011c      	lsls	r4, r3, #4
 800478e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004792:	2200      	movs	r2, #0
 8004794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800479c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047a0:	4642      	mov	r2, r8
 80047a2:	464b      	mov	r3, r9
 80047a4:	1891      	adds	r1, r2, r2
 80047a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047a8:	415b      	adcs	r3, r3
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047b0:	4641      	mov	r1, r8
 80047b2:	eb12 0a01 	adds.w	sl, r2, r1
 80047b6:	4649      	mov	r1, r9
 80047b8:	eb43 0b01 	adc.w	fp, r3, r1
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d0:	4692      	mov	sl, r2
 80047d2:	469b      	mov	fp, r3
 80047d4:	4643      	mov	r3, r8
 80047d6:	eb1a 0303 	adds.w	r3, sl, r3
 80047da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047de:	464b      	mov	r3, r9
 80047e0:	eb4b 0303 	adc.w	r3, fp, r3
 80047e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047fc:	460b      	mov	r3, r1
 80047fe:	18db      	adds	r3, r3, r3
 8004800:	643b      	str	r3, [r7, #64]	; 0x40
 8004802:	4613      	mov	r3, r2
 8004804:	eb42 0303 	adc.w	r3, r2, r3
 8004808:	647b      	str	r3, [r7, #68]	; 0x44
 800480a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800480e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004812:	f7fb ffeb 	bl	80007ec <__aeabi_uldivmod>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4611      	mov	r1, r2
 800481c:	4b3b      	ldr	r3, [pc, #236]	; (800490c <UART_SetConfig+0x2d4>)
 800481e:	fba3 2301 	umull	r2, r3, r3, r1
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	2264      	movs	r2, #100	; 0x64
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	1acb      	subs	r3, r1, r3
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <UART_SetConfig+0x2d4>)
 8004834:	fba3 2302 	umull	r2, r3, r3, r2
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004840:	441c      	add	r4, r3
 8004842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004846:	2200      	movs	r2, #0
 8004848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800484c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	1891      	adds	r1, r2, r2
 800485a:	63b9      	str	r1, [r7, #56]	; 0x38
 800485c:	415b      	adcs	r3, r3
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004864:	4641      	mov	r1, r8
 8004866:	1851      	adds	r1, r2, r1
 8004868:	6339      	str	r1, [r7, #48]	; 0x30
 800486a:	4649      	mov	r1, r9
 800486c:	414b      	adcs	r3, r1
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800487c:	4659      	mov	r1, fp
 800487e:	00cb      	lsls	r3, r1, #3
 8004880:	4651      	mov	r1, sl
 8004882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004886:	4651      	mov	r1, sl
 8004888:	00ca      	lsls	r2, r1, #3
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	4603      	mov	r3, r0
 8004890:	4642      	mov	r2, r8
 8004892:	189b      	adds	r3, r3, r2
 8004894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004898:	464b      	mov	r3, r9
 800489a:	460a      	mov	r2, r1
 800489c:	eb42 0303 	adc.w	r3, r2, r3
 80048a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048b8:	460b      	mov	r3, r1
 80048ba:	18db      	adds	r3, r3, r3
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048be:	4613      	mov	r3, r2
 80048c0:	eb42 0303 	adc.w	r3, r2, r3
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048ce:	f7fb ff8d 	bl	80007ec <__aeabi_uldivmod>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <UART_SetConfig+0x2d4>)
 80048d8:	fba3 1302 	umull	r1, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	2164      	movs	r1, #100	; 0x64
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	3332      	adds	r3, #50	; 0x32
 80048ea:	4a08      	ldr	r2, [pc, #32]	; (800490c <UART_SetConfig+0x2d4>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	f003 0207 	and.w	r2, r3, #7
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4422      	add	r2, r4
 80048fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004900:	e106      	b.n	8004b10 <UART_SetConfig+0x4d8>
 8004902:	bf00      	nop
 8004904:	40011000 	.word	0x40011000
 8004908:	40011400 	.word	0x40011400
 800490c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004914:	2200      	movs	r2, #0
 8004916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800491a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800491e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004922:	4642      	mov	r2, r8
 8004924:	464b      	mov	r3, r9
 8004926:	1891      	adds	r1, r2, r2
 8004928:	6239      	str	r1, [r7, #32]
 800492a:	415b      	adcs	r3, r3
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004932:	4641      	mov	r1, r8
 8004934:	1854      	adds	r4, r2, r1
 8004936:	4649      	mov	r1, r9
 8004938:	eb43 0501 	adc.w	r5, r3, r1
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	00eb      	lsls	r3, r5, #3
 8004946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800494a:	00e2      	lsls	r2, r4, #3
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
 8004950:	4643      	mov	r3, r8
 8004952:	18e3      	adds	r3, r4, r3
 8004954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004958:	464b      	mov	r3, r9
 800495a:	eb45 0303 	adc.w	r3, r5, r3
 800495e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800496e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800497e:	4629      	mov	r1, r5
 8004980:	008b      	lsls	r3, r1, #2
 8004982:	4621      	mov	r1, r4
 8004984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004988:	4621      	mov	r1, r4
 800498a:	008a      	lsls	r2, r1, #2
 800498c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004990:	f7fb ff2c 	bl	80007ec <__aeabi_uldivmod>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4b60      	ldr	r3, [pc, #384]	; (8004b1c <UART_SetConfig+0x4e4>)
 800499a:	fba3 2302 	umull	r2, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	011c      	lsls	r4, r3, #4
 80049a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049b4:	4642      	mov	r2, r8
 80049b6:	464b      	mov	r3, r9
 80049b8:	1891      	adds	r1, r2, r2
 80049ba:	61b9      	str	r1, [r7, #24]
 80049bc:	415b      	adcs	r3, r3
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c4:	4641      	mov	r1, r8
 80049c6:	1851      	adds	r1, r2, r1
 80049c8:	6139      	str	r1, [r7, #16]
 80049ca:	4649      	mov	r1, r9
 80049cc:	414b      	adcs	r3, r1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049dc:	4659      	mov	r1, fp
 80049de:	00cb      	lsls	r3, r1, #3
 80049e0:	4651      	mov	r1, sl
 80049e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e6:	4651      	mov	r1, sl
 80049e8:	00ca      	lsls	r2, r1, #3
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	4642      	mov	r2, r8
 80049f2:	189b      	adds	r3, r3, r2
 80049f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049f8:	464b      	mov	r3, r9
 80049fa:	460a      	mov	r2, r1
 80049fc:	eb42 0303 	adc.w	r3, r2, r3
 8004a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	008b      	lsls	r3, r1, #2
 8004a20:	4641      	mov	r1, r8
 8004a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a26:	4641      	mov	r1, r8
 8004a28:	008a      	lsls	r2, r1, #2
 8004a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a2e:	f7fb fedd 	bl	80007ec <__aeabi_uldivmod>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	4b38      	ldr	r3, [pc, #224]	; (8004b1c <UART_SetConfig+0x4e4>)
 8004a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2264      	movs	r2, #100	; 0x64
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	1acb      	subs	r3, r1, r3
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	3332      	adds	r3, #50	; 0x32
 8004a4c:	4a33      	ldr	r2, [pc, #204]	; (8004b1c <UART_SetConfig+0x4e4>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a58:	441c      	add	r4, r3
 8004a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5e:	2200      	movs	r2, #0
 8004a60:	673b      	str	r3, [r7, #112]	; 0x70
 8004a62:	677a      	str	r2, [r7, #116]	; 0x74
 8004a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	415b      	adcs	r3, r3
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a78:	4641      	mov	r1, r8
 8004a7a:	1851      	adds	r1, r2, r1
 8004a7c:	6039      	str	r1, [r7, #0]
 8004a7e:	4649      	mov	r1, r9
 8004a80:	414b      	adcs	r3, r1
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a90:	4659      	mov	r1, fp
 8004a92:	00cb      	lsls	r3, r1, #3
 8004a94:	4651      	mov	r1, sl
 8004a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	00ca      	lsls	r2, r1, #3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aaa:	464b      	mov	r3, r9
 8004aac:	460a      	mov	r2, r1
 8004aae:	eb42 0303 	adc.w	r3, r2, r3
 8004ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	663b      	str	r3, [r7, #96]	; 0x60
 8004abe:	667a      	str	r2, [r7, #100]	; 0x64
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004acc:	4649      	mov	r1, r9
 8004ace:	008b      	lsls	r3, r1, #2
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	008a      	lsls	r2, r1, #2
 8004ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ade:	f7fb fe85 	bl	80007ec <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <UART_SetConfig+0x4e4>)
 8004ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	2164      	movs	r1, #100	; 0x64
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	3332      	adds	r3, #50	; 0x32
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <UART_SetConfig+0x4e4>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4422      	add	r2, r4
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b16:	46bd      	mov	sp, r7
 8004b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1c:	51eb851f 	.word	0x51eb851f

08004b20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b32:	2b84      	cmp	r3, #132	; 0x84
 8004b34:	d005      	beq.n	8004b42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3303      	adds	r3, #3
 8004b40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b54:	f001 f9bc 	bl	8005ed0 <vTaskStartScheduler>
  
  return osOK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b60:	b089      	sub	sp, #36	; 0x24
 8004b62:	af04      	add	r7, sp, #16
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <osThreadCreate+0x54>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01c      	beq.n	8004bb2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685c      	ldr	r4, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691e      	ldr	r6, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ffc8 	bl	8004b20 <makeFreeRtosPriority>
 8004b90:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b9a:	9202      	str	r2, [sp, #8]
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	9100      	str	r1, [sp, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4632      	mov	r2, r6
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 ffca 	bl	8005b40 <xTaskCreateStatic>
 8004bac:	4603      	mov	r3, r0
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e01c      	b.n	8004bec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685c      	ldr	r4, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bbe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff ffaa 	bl	8004b20 <makeFreeRtosPriority>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	9200      	str	r2, [sp, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f001 f80c 	bl	8005bfa <xTaskCreate>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d001      	beq.n	8004bec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004bec:	68fb      	ldr	r3, [r7, #12]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bf6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004bfc:	201c      	movs	r0, #28
 8004bfe:	f002 fd03 	bl	8007608 <pvPortMalloc>
 8004c02:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 f9bc 	bl	8004f92 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004c20:	687b      	ldr	r3, [r7, #4]
	}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	; 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	61fb      	str	r3, [r7, #28]
}
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xEventGroupWaitBits+0x72>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	61bb      	str	r3, [r7, #24]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c9e:	f001 fdf5 	bl	800688c <xTaskGetSchedulerState>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <xEventGroupWaitBits+0x82>
 8004ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <xEventGroupWaitBits+0x86>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xEventGroupWaitBits+0x88>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	617b      	str	r3, [r7, #20]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004cce:	f001 f965 	bl	8005f9c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cde:	f000 f936 	bl	8004f4e <prvTestWaitCondition>
 8004ce2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00e      	beq.n	8004d08 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d028      	beq.n	8004d4a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	401a      	ands	r2, r3
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e020      	b.n	8004d4a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004d12:	2301      	movs	r3, #1
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
 8004d16:	e018      	b.n	8004d4a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d32:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	1d18      	adds	r0, r3, #4
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d40:	4619      	mov	r1, r3
 8004d42:	f001 fb1d 	bl	8006380 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004d4a:	f001 f935 	bl	8005fb8 <xTaskResumeAll>
 8004d4e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d031      	beq.n	8004dba <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <xEventGroupWaitBits+0x198>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004d6c:	f001 fe32 	bl	80069d4 <uxTaskResetEventItemValue>
 8004d70:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d11a      	bne.n	8004db2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004d7c:	f002 fb22 	bl	80073c4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d8c:	f000 f8df 	bl	8004f4e <prvTestWaitCondition>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	401a      	ands	r2, r3
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004dae:	f002 fb39 	bl	8007424 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3740      	adds	r7, #64	; 0x40
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xEventGroupClearBits+0x2a>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	60fb      	str	r3, [r7, #12]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <xEventGroupClearBits+0x4a>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	60bb      	str	r3, [r7, #8]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004e12:	f002 fad7 	bl	80073c4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	401a      	ands	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004e2a:	f002 fafb 	bl	8007424 <vPortExitCritical>

	return uxReturn;
 8004e2e:	693b      	ldr	r3, [r7, #16]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08e      	sub	sp, #56	; 0x38
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004e42:	2300      	movs	r3, #0
 8004e44:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xEventGroupSetBits+0x32>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	613b      	str	r3, [r7, #16]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <xEventGroupSetBits+0x52>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60fb      	str	r3, [r7, #12]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	3308      	adds	r3, #8
 8004e94:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004e96:	f001 f881 	bl	8005f9c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004eac:	e03c      	b.n	8004f28 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ec4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ecc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00b      	beq.n	8004efc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee8:	e008      	b.n	8004efc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d101      	bne.n	8004efc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d010      	beq.n	8004f24 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f20:	f001 faf8 	bl	8006514 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1be      	bne.n	8004eae <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	43db      	mvns	r3, r3
 8004f38:	401a      	ands	r2, r3
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004f3e:	f001 f83b 	bl	8005fb8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	681b      	ldr	r3, [r3, #0]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3738      	adds	r7, #56	; 0x38
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d107      	bne.n	8004f74 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e007      	b.n	8004f84 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d101      	bne.n	8004f84 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004f84:	697b      	ldr	r3, [r7, #20]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f103 0208 	add.w	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004faa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f103 0208 	add.w	r2, r3, #8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 0208 	add.w	r2, r3, #8
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d103      	bne.n	8005054 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e00c      	b.n	800506e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3308      	adds	r3, #8
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e002      	b.n	8005062 <vListInsert+0x2e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d2f6      	bcs.n	800505c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6892      	ldr	r2, [r2, #8]
 80050bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6852      	ldr	r2, [r2, #4]
 80050c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d103      	bne.n	80050da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	1e5a      	subs	r2, r3, #1
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xQueueGenericReset+0x2a>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60bb      	str	r3, [r7, #8]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005126:	f002 f94d 	bl	80073c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	441a      	add	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	3b01      	subs	r3, #1
 8005158:	68f9      	ldr	r1, [r7, #12]
 800515a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	22ff      	movs	r2, #255	; 0xff
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d114      	bne.n	80051a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01a      	beq.n	80051ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3310      	adds	r3, #16
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f961 	bl	8006450 <xTaskRemoveFromEventList>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d012      	beq.n	80051ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <xQueueGenericReset+0xcc>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	e009      	b.n	80051ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3310      	adds	r3, #16
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fef1 	bl	8004f92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3324      	adds	r3, #36	; 0x24
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff feec 	bl	8004f92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051ba:	f002 f933 	bl	8007424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051be:	2301      	movs	r3, #1
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08e      	sub	sp, #56	; 0x38
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <xQueueGenericCreateStatic+0x52>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <xQueueGenericCreateStatic+0x56>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xQueueGenericCreateStatic+0x58>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	623b      	str	r3, [r7, #32]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <xQueueGenericCreateStatic+0x7e>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <xQueueGenericCreateStatic+0x82>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericCreateStatic+0x84>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	61fb      	str	r3, [r7, #28]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800526a:	2348      	movs	r3, #72	; 0x48
 800526c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b48      	cmp	r3, #72	; 0x48
 8005272:	d00a      	beq.n	800528a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	61bb      	str	r3, [r7, #24]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800528a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800529e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f83f 	bl	8005330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3730      	adds	r7, #48	; 0x30
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	613b      	str	r3, [r7, #16]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3348      	adds	r3, #72	; 0x48
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 f987 	bl	8007608 <pvPortMalloc>
 80052fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d011      	beq.n	8005326 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	3348      	adds	r3, #72	; 0x48
 800530a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005314:	79fa      	ldrb	r2, [r7, #7]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f805 	bl	8005330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005326:	69bb      	ldr	r3, [r7, #24]
	}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e002      	b.n	8005352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800535e:	2101      	movs	r1, #1
 8005360:	69b8      	ldr	r0, [r7, #24]
 8005362:	f7ff fecb 	bl	80050fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueGenericSend+0x32>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d103      	bne.n	80053b0 <xQueueGenericSend+0x40>
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <xQueueGenericSend+0x44>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <xQueueGenericSend+0x46>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xQueueGenericSend+0x60>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <xQueueGenericSend+0x6e>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0x72>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0x74>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericSend+0x8e>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053fe:	f001 fa45 	bl	800688c <xTaskGetSchedulerState>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueGenericSend+0x9e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueGenericSend+0xa2>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericSend+0xa4>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueGenericSend+0xbe>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800542e:	f001 ffc9 	bl	80073c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <xQueueGenericSend+0xd4>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d129      	bne.n	8005498 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544a:	f000 fa0b 	bl	8005864 <prvCopyDataToQueue>
 800544e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d010      	beq.n	800547a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	3324      	adds	r3, #36	; 0x24
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fff7 	bl	8006450 <xTaskRemoveFromEventList>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005468:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <xQueueGenericSend+0x1f8>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	e00a      	b.n	8005490 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b39      	ldr	r3, [pc, #228]	; (8005568 <xQueueGenericSend+0x1f8>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005490:	f001 ffc8 	bl	8007424 <vPortExitCritical>
				return pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	e063      	b.n	8005560 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549e:	f001 ffc1 	bl	8007424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e05c      	b.n	8005560 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ac:	f107 0314 	add.w	r3, r7, #20
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f891 	bl	80065d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ba:	f001 ffb3 	bl	8007424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054be:	f000 fd6d 	bl	8005f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c2:	f001 ff7f 	bl	80073c4 <vPortEnterCritical>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054cc:	b25b      	sxtb	r3, r3
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d103      	bne.n	80054dc <xQueueGenericSend+0x16c>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueGenericSend+0x182>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f2:	f001 ff97 	bl	8007424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f6:	1d3a      	adds	r2, r7, #4
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 f880 	bl	8006604 <xTaskCheckForTimeOut>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d124      	bne.n	8005554 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800550a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550c:	f000 faa2 	bl	8005a54 <prvIsQueueFull>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d018      	beq.n	8005548 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	3310      	adds	r3, #16
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 ff0a 	bl	8006338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005526:	f000 fa2d 	bl	8005984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800552a:	f000 fd45 	bl	8005fb8 <xTaskResumeAll>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af7c 	bne.w	800542e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <xQueueGenericSend+0x1f8>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	e772      	b.n	800542e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554a:	f000 fa1b 	bl	8005984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800554e:	f000 fd33 	bl	8005fb8 <xTaskResumeAll>
 8005552:	e76c      	b.n	800542e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005556:	f000 fa15 	bl	8005984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800555a:	f000 fd2d 	bl	8005fb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800555e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005560:	4618      	mov	r0, r3
 8005562:	3738      	adds	r7, #56	; 0x38
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b090      	sub	sp, #64	; 0x40
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <xQueueGenericSendFromISR+0x3c>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <xQueueGenericSendFromISR+0x40>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <xQueueGenericSendFromISR+0x42>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <xQueueGenericSendFromISR+0x6a>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <xQueueGenericSendFromISR+0x6e>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <xQueueGenericSendFromISR+0x70>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	623b      	str	r3, [r7, #32]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055f6:	f001 ffc7 	bl	8007588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055fa:	f3ef 8211 	mrs	r2, BASEPRI
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61fa      	str	r2, [r7, #28]
 8005610:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005612:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xQueueGenericSendFromISR+0xbc>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d12f      	bne.n	8005688 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800563e:	f000 f911 	bl	8005864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005642:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d112      	bne.n	8005672 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	d016      	beq.n	8005682 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	3324      	adds	r3, #36	; 0x24
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fef9 	bl	8006450 <xTaskRemoveFromEventList>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e007      	b.n	8005682 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005676:	3301      	adds	r3, #1
 8005678:	b2db      	uxtb	r3, r3
 800567a:	b25a      	sxtb	r2, r3
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005682:	2301      	movs	r3, #1
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005686:	e001      	b.n	800568c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005688:	2300      	movs	r3, #0
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005696:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800569a:	4618      	mov	r0, r3
 800569c:	3740      	adds	r7, #64	; 0x40
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	; 0x30
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <xQueueReceive+0x30>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	623b      	str	r3, [r7, #32]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <xQueueReceive+0x3e>
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <xQueueReceive+0x42>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <xQueueReceive+0x44>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xQueueReceive+0x5e>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	61fb      	str	r3, [r7, #28]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005702:	f001 f8c3 	bl	800688c <xTaskGetSchedulerState>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <xQueueReceive+0x6e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <xQueueReceive+0x72>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <xQueueReceive+0x74>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <xQueueReceive+0x8e>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	61bb      	str	r3, [r7, #24]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005732:	f001 fe47 	bl	80073c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d01f      	beq.n	8005782 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005746:	f000 f8f7 	bl	8005938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1e5a      	subs	r2, r3, #1
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00f      	beq.n	800577a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	3310      	adds	r3, #16
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fe76 	bl	8006450 <xTaskRemoveFromEventList>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800576a:	4b3d      	ldr	r3, [pc, #244]	; (8005860 <xQueueReceive+0x1bc>)
 800576c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800577a:	f001 fe53 	bl	8007424 <vPortExitCritical>
				return pdPASS;
 800577e:	2301      	movs	r3, #1
 8005780:	e069      	b.n	8005856 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005788:	f001 fe4c 	bl	8007424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800578c:	2300      	movs	r3, #0
 800578e:	e062      	b.n	8005856 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	4618      	mov	r0, r3
 800579c:	f000 ff1c 	bl	80065d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057a4:	f001 fe3e 	bl	8007424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057a8:	f000 fbf8 	bl	8005f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ac:	f001 fe0a 	bl	80073c4 <vPortEnterCritical>
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d103      	bne.n	80057c6 <xQueueReceive+0x122>
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d103      	bne.n	80057dc <xQueueReceive+0x138>
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057dc:	f001 fe22 	bl	8007424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057e0:	1d3a      	adds	r2, r7, #4
 80057e2:	f107 0310 	add.w	r3, r7, #16
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 ff0b 	bl	8006604 <xTaskCheckForTimeOut>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d123      	bne.n	800583c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f6:	f000 f917 	bl	8005a28 <prvIsQueueEmpty>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d017      	beq.n	8005830 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	3324      	adds	r3, #36	; 0x24
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fd95 	bl	8006338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800580e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005810:	f000 f8b8 	bl	8005984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005814:	f000 fbd0 	bl	8005fb8 <xTaskResumeAll>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d189      	bne.n	8005732 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800581e:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xQueueReceive+0x1bc>)
 8005820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	e780      	b.n	8005732 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005832:	f000 f8a7 	bl	8005984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005836:	f000 fbbf 	bl	8005fb8 <xTaskResumeAll>
 800583a:	e77a      	b.n	8005732 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800583c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800583e:	f000 f8a1 	bl	8005984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005842:	f000 fbb9 	bl	8005fb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005848:	f000 f8ee 	bl	8005a28 <prvIsQueueEmpty>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	f43f af6f 	beq.w	8005732 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005856:	4618      	mov	r0, r3
 8005858:	3730      	adds	r7, #48	; 0x30
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10d      	bne.n	800589e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d14d      	bne.n	8005926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4618      	mov	r0, r3
 8005890:	f001 f81a 	bl	80068c8 <xTaskPriorityDisinherit>
 8005894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	e043      	b.n	8005926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d119      	bne.n	80058d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6858      	ldr	r0, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	461a      	mov	r2, r3
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	f002 f8c0 	bl	8007a34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d32b      	bcc.n	8005926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	e026      	b.n	8005926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68d8      	ldr	r0, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	461a      	mov	r2, r3
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	f002 f8a6 	bl	8007a34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	425b      	negs	r3, r3
 80058f2:	441a      	add	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d207      	bcs.n	8005914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	425b      	negs	r3, r3
 800590e:	441a      	add	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d105      	bne.n	8005926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3b01      	subs	r3, #1
 8005924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800592e:	697b      	ldr	r3, [r7, #20]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	d303      	bcc.n	800596c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68d9      	ldr	r1, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	461a      	mov	r2, r3
 8005976:	6838      	ldr	r0, [r7, #0]
 8005978:	f002 f85c 	bl	8007a34 <memcpy>
	}
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800598c:	f001 fd1a 	bl	80073c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005998:	e011      	b.n	80059be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d012      	beq.n	80059c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3324      	adds	r3, #36	; 0x24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fd52 	bl	8006450 <xTaskRemoveFromEventList>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059b2:	f000 fe89 	bl	80066c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	dce9      	bgt.n	800599a <prvUnlockQueue+0x16>
 80059c6:	e000      	b.n	80059ca <prvUnlockQueue+0x46>
					break;
 80059c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	22ff      	movs	r2, #255	; 0xff
 80059ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80059d2:	f001 fd27 	bl	8007424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059d6:	f001 fcf5 	bl	80073c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059e2:	e011      	b.n	8005a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d012      	beq.n	8005a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3310      	adds	r3, #16
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fd2d 	bl	8006450 <xTaskRemoveFromEventList>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059fc:	f000 fe64 	bl	80066c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a00:	7bbb      	ldrb	r3, [r7, #14]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	dce9      	bgt.n	80059e4 <prvUnlockQueue+0x60>
 8005a10:	e000      	b.n	8005a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	22ff      	movs	r2, #255	; 0xff
 8005a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a1c:	f001 fd02 	bl	8007424 <vPortExitCritical>
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a30:	f001 fcc8 	bl	80073c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e001      	b.n	8005a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a46:	f001 fced 	bl	8007424 <vPortExitCritical>

	return xReturn;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a5c:	f001 fcb2 	bl	80073c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d102      	bne.n	8005a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e001      	b.n	8005a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a76:	f001 fcd5 	bl	8007424 <vPortExitCritical>

	return xReturn;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e014      	b.n	8005abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a94:	4a0f      	ldr	r2, [pc, #60]	; (8005ad4 <vQueueAddToRegistry+0x50>)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005aa0:	490c      	ldr	r1, [pc, #48]	; (8005ad4 <vQueueAddToRegistry+0x50>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <vQueueAddToRegistry+0x50>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ab6:	e006      	b.n	8005ac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3301      	adds	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	d9e7      	bls.n	8005a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	200008b0 	.word	0x200008b0

08005ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ae8:	f001 fc6c 	bl	80073c4 <vPortEnterCritical>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d103      	bne.n	8005b02 <vQueueWaitForMessageRestricted+0x2a>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	d103      	bne.n	8005b18 <vQueueWaitForMessageRestricted+0x40>
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b18:	f001 fc84 	bl	8007424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	3324      	adds	r3, #36	; 0x24
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fc63 	bl	80063f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f7ff ff26 	bl	8005984 <prvUnlockQueue>
	}
 8005b38:	bf00      	nop
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08e      	sub	sp, #56	; 0x38
 8005b44:	af04      	add	r7, sp, #16
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	623b      	str	r3, [r7, #32]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	61fb      	str	r3, [r7, #28]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b86:	2364      	movs	r3, #100	; 0x64
 8005b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b64      	cmp	r3, #100	; 0x64
 8005b8e:	d00a      	beq.n	8005ba6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	61bb      	str	r3, [r7, #24]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ba6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01e      	beq.n	8005bec <xTaskCreateStatic+0xac>
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01b      	beq.n	8005bec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f850 	bl	8005c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005be6:	f000 f8d5 	bl	8005d94 <prvAddNewTaskToReadyList>
 8005bea:	e001      	b.n	8005bf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bf0:	697b      	ldr	r3, [r7, #20]
	}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3728      	adds	r7, #40	; 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b08c      	sub	sp, #48	; 0x30
 8005bfe:	af04      	add	r7, sp, #16
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	603b      	str	r3, [r7, #0]
 8005c06:	4613      	mov	r3, r2
 8005c08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fcfa 	bl	8007608 <pvPortMalloc>
 8005c14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00e      	beq.n	8005c3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c1c:	2064      	movs	r0, #100	; 0x64
 8005c1e:	f001 fcf3 	bl	8007608 <pvPortMalloc>
 8005c22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c30:	e005      	b.n	8005c3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f001 fdb4 	bl	80077a0 <vPortFree>
 8005c38:	e001      	b.n	8005c3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d017      	beq.n	8005c74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9303      	str	r3, [sp, #12]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	9302      	str	r3, [sp, #8]
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f80e 	bl	8005c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c68:	69f8      	ldr	r0, [r7, #28]
 8005c6a:	f000 f893 	bl	8005d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e002      	b.n	8005c7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <prvInitialiseNewTask+0x48>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	617b      	str	r3, [r7, #20]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01f      	beq.n	8005d12 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	e012      	b.n	8005cfe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	7819      	ldrb	r1, [r3, #0]
 8005ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3334      	adds	r3, #52	; 0x34
 8005ce8:	460a      	mov	r2, r1
 8005cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d006      	beq.n	8005d06 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b1f      	cmp	r3, #31
 8005d02:	d9e9      	bls.n	8005cd8 <prvInitialiseNewTask+0x54>
 8005d04:	e000      	b.n	8005d08 <prvInitialiseNewTask+0x84>
			{
				break;
 8005d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005d10:	e003      	b.n	8005d1a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d901      	bls.n	8005d24 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d20:	2306      	movs	r3, #6
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	2200      	movs	r2, #0
 8005d34:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff f949 	bl	8004fd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	3318      	adds	r3, #24
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff f944 	bl	8004fd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	f1c3 0207 	rsb	r2, r3, #7
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	2200      	movs	r2, #0
 8005d64:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f001 f9fa 	bl	800716c <pxPortInitialiseStack>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d9c:	f001 fb12 	bl	80073c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005da0:	4b2a      	ldr	r3, [pc, #168]	; (8005e4c <prvAddNewTaskToReadyList+0xb8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <prvAddNewTaskToReadyList+0xb8>)
 8005da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005daa:	4b29      	ldr	r3, [pc, #164]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005db2:	4a27      	ldr	r2, [pc, #156]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005db8:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <prvAddNewTaskToReadyList+0xb8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d110      	bne.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dc0:	f000 fca6 	bl	8006710 <prvInitialiseTaskLists>
 8005dc4:	e00d      	b.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dc6:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <prvAddNewTaskToReadyList+0xc0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dce:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d802      	bhi.n	8005de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <prvAddNewTaskToReadyList+0xc4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <prvAddNewTaskToReadyList+0xc4>)
 8005dea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2201      	movs	r2, #1
 8005df2:	409a      	lsls	r2, r3
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <prvAddNewTaskToReadyList+0xc8>)
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <prvAddNewTaskToReadyList+0xcc>)
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7ff f8e9 	bl	8004fec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e1a:	f001 fb03 	bl	8007424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <prvAddNewTaskToReadyList+0xc0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvAddNewTaskToReadyList+0xbc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d207      	bcs.n	8005e44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <prvAddNewTaskToReadyList+0xd0>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	200009f0 	.word	0x200009f0
 8005e50:	200008f0 	.word	0x200008f0
 8005e54:	200009fc 	.word	0x200009fc
 8005e58:	20000a0c 	.word	0x20000a0c
 8005e5c:	200009f8 	.word	0x200009f8
 8005e60:	200008f4 	.word	0x200008f4
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d017      	beq.n	8005eaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <vTaskDelay+0x60>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <vTaskDelay+0x30>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e98:	f000 f880 	bl	8005f9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fdb0 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ea4:	f000 f888 	bl	8005fb8 <xTaskResumeAll>
 8005ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <vTaskDelay+0x64>)
 8005eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000a18 	.word	0x20000a18
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ede:	463a      	mov	r2, r7
 8005ee0:	1d39      	adds	r1, r7, #4
 8005ee2:	f107 0308 	add.w	r3, r7, #8
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa fdfe 	bl	8000ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	9202      	str	r2, [sp, #8]
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2300      	movs	r3, #0
 8005efc:	460a      	mov	r2, r1
 8005efe:	4921      	ldr	r1, [pc, #132]	; (8005f84 <vTaskStartScheduler+0xb4>)
 8005f00:	4821      	ldr	r0, [pc, #132]	; (8005f88 <vTaskStartScheduler+0xb8>)
 8005f02:	f7ff fe1d 	bl	8005b40 <xTaskCreateStatic>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4a20      	ldr	r2, [pc, #128]	; (8005f8c <vTaskStartScheduler+0xbc>)
 8005f0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f0c:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <vTaskStartScheduler+0xbc>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f14:	2301      	movs	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e001      	b.n	8005f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d102      	bne.n	8005f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f24:	f000 fdd4 	bl	8006ad0 <xTimerCreateTimerTask>
 8005f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d116      	bne.n	8005f5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	613b      	str	r3, [r7, #16]
}
 8005f42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f44:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <vTaskStartScheduler+0xc0>)
 8005f46:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f4c:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <vTaskStartScheduler+0xc4>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <vTaskStartScheduler+0xc8>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f58:	f001 f992 	bl	8007280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f5c:	e00e      	b.n	8005f7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d10a      	bne.n	8005f7c <vTaskStartScheduler+0xac>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60fb      	str	r3, [r7, #12]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <vTaskStartScheduler+0xaa>
}
 8005f7c:	bf00      	nop
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	08007b40 	.word	0x08007b40
 8005f88:	080066e1 	.word	0x080066e1
 8005f8c:	20000a14 	.word	0x20000a14
 8005f90:	20000a10 	.word	0x20000a10
 8005f94:	200009fc 	.word	0x200009fc
 8005f98:	200009f4 	.word	0x200009f4

08005f9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <vTaskSuspendAll+0x18>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a03      	ldr	r2, [pc, #12]	; (8005fb4 <vTaskSuspendAll+0x18>)
 8005fa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005faa:	bf00      	nop
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	20000a18 	.word	0x20000a18

08005fb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <xTaskResumeAll+0x114>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	603b      	str	r3, [r7, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fe4:	f001 f9ee 	bl	80073c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fe8:	4b38      	ldr	r3, [pc, #224]	; (80060cc <xTaskResumeAll+0x114>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	4a37      	ldr	r2, [pc, #220]	; (80060cc <xTaskResumeAll+0x114>)
 8005ff0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff2:	4b36      	ldr	r3, [pc, #216]	; (80060cc <xTaskResumeAll+0x114>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d161      	bne.n	80060be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ffa:	4b35      	ldr	r3, [pc, #212]	; (80060d0 <xTaskResumeAll+0x118>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d05d      	beq.n	80060be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006002:	e02e      	b.n	8006062 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006004:	4b33      	ldr	r3, [pc, #204]	; (80060d4 <xTaskResumeAll+0x11c>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3318      	adds	r3, #24
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff f848 	bl	80050a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3304      	adds	r3, #4
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff f843 	bl	80050a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	2201      	movs	r2, #1
 8006026:	409a      	lsls	r2, r3
 8006028:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <xTaskResumeAll+0x120>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4313      	orrs	r3, r2
 800602e:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <xTaskResumeAll+0x120>)
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4a27      	ldr	r2, [pc, #156]	; (80060dc <xTaskResumeAll+0x124>)
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3304      	adds	r3, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f7fe ffcf 	bl	8004fec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	4b23      	ldr	r3, [pc, #140]	; (80060e0 <xTaskResumeAll+0x128>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800605c:	4b21      	ldr	r3, [pc, #132]	; (80060e4 <xTaskResumeAll+0x12c>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <xTaskResumeAll+0x11c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1cc      	bne.n	8006004 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006070:	f000 fbec 	bl	800684c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006074:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <xTaskResumeAll+0x130>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006080:	f000 f846 	bl	8006110 <xTaskIncrementTick>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800608a:	4b16      	ldr	r3, [pc, #88]	; (80060e4 <xTaskResumeAll+0x12c>)
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3b01      	subs	r3, #1
 8006094:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f1      	bne.n	8006080 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800609c:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <xTaskResumeAll+0x130>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060a2:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <xTaskResumeAll+0x12c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <xTaskResumeAll+0x134>)
 80060b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060be:	f001 f9b1 	bl	8007424 <vPortExitCritical>

	return xAlreadyYielded;
 80060c2:	68bb      	ldr	r3, [r7, #8]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000a18 	.word	0x20000a18
 80060d0:	200009f0 	.word	0x200009f0
 80060d4:	200009b0 	.word	0x200009b0
 80060d8:	200009f8 	.word	0x200009f8
 80060dc:	200008f4 	.word	0x200008f4
 80060e0:	200008f0 	.word	0x200008f0
 80060e4:	20000a04 	.word	0x20000a04
 80060e8:	20000a00 	.word	0x20000a00
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <xTaskGetTickCount+0x1c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060fc:	687b      	ldr	r3, [r7, #4]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	200009f4 	.word	0x200009f4

08006110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800611a:	4b4e      	ldr	r3, [pc, #312]	; (8006254 <xTaskIncrementTick+0x144>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 808e 	bne.w	8006240 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006124:	4b4c      	ldr	r3, [pc, #304]	; (8006258 <xTaskIncrementTick+0x148>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3301      	adds	r3, #1
 800612a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800612c:	4a4a      	ldr	r2, [pc, #296]	; (8006258 <xTaskIncrementTick+0x148>)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d120      	bne.n	800617a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006138:	4b48      	ldr	r3, [pc, #288]	; (800625c <xTaskIncrementTick+0x14c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <xTaskIncrementTick+0x48>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	603b      	str	r3, [r7, #0]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <xTaskIncrementTick+0x46>
 8006158:	4b40      	ldr	r3, [pc, #256]	; (800625c <xTaskIncrementTick+0x14c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	4b40      	ldr	r3, [pc, #256]	; (8006260 <xTaskIncrementTick+0x150>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a3e      	ldr	r2, [pc, #248]	; (800625c <xTaskIncrementTick+0x14c>)
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4a3e      	ldr	r2, [pc, #248]	; (8006260 <xTaskIncrementTick+0x150>)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <xTaskIncrementTick+0x154>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	4a3c      	ldr	r2, [pc, #240]	; (8006264 <xTaskIncrementTick+0x154>)
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	f000 fb69 	bl	800684c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800617a:	4b3b      	ldr	r3, [pc, #236]	; (8006268 <xTaskIncrementTick+0x158>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	429a      	cmp	r2, r3
 8006182:	d348      	bcc.n	8006216 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006184:	4b35      	ldr	r3, [pc, #212]	; (800625c <xTaskIncrementTick+0x14c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618e:	4b36      	ldr	r3, [pc, #216]	; (8006268 <xTaskIncrementTick+0x158>)
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	601a      	str	r2, [r3, #0]
					break;
 8006196:	e03e      	b.n	8006216 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006198:	4b30      	ldr	r3, [pc, #192]	; (800625c <xTaskIncrementTick+0x14c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d203      	bcs.n	80061b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061b0:	4a2d      	ldr	r2, [pc, #180]	; (8006268 <xTaskIncrementTick+0x158>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061b6:	e02e      	b.n	8006216 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe ff72 	bl	80050a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d004      	beq.n	80061d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	3318      	adds	r3, #24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe ff69 	bl	80050a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	2201      	movs	r2, #1
 80061da:	409a      	lsls	r2, r3
 80061dc:	4b23      	ldr	r3, [pc, #140]	; (800626c <xTaskIncrementTick+0x15c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	4a22      	ldr	r2, [pc, #136]	; (800626c <xTaskIncrementTick+0x15c>)
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <xTaskIncrementTick+0x160>)
 80061f4:	441a      	add	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe fef5 	bl	8004fec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <xTaskIncrementTick+0x164>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	429a      	cmp	r2, r3
 800620e:	d3b9      	bcc.n	8006184 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006214:	e7b6      	b.n	8006184 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <xTaskIncrementTick+0x164>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	4914      	ldr	r1, [pc, #80]	; (8006270 <xTaskIncrementTick+0x160>)
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d901      	bls.n	8006232 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800622e:	2301      	movs	r3, #1
 8006230:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <xTaskIncrementTick+0x168>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800623a:	2301      	movs	r3, #1
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e004      	b.n	800624a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <xTaskIncrementTick+0x16c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	4a0d      	ldr	r2, [pc, #52]	; (800627c <xTaskIncrementTick+0x16c>)
 8006248:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800624a:	697b      	ldr	r3, [r7, #20]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000a18 	.word	0x20000a18
 8006258:	200009f4 	.word	0x200009f4
 800625c:	200009a8 	.word	0x200009a8
 8006260:	200009ac 	.word	0x200009ac
 8006264:	20000a08 	.word	0x20000a08
 8006268:	20000a10 	.word	0x20000a10
 800626c:	200009f8 	.word	0x200009f8
 8006270:	200008f4 	.word	0x200008f4
 8006274:	200008f0 	.word	0x200008f0
 8006278:	20000a04 	.word	0x20000a04
 800627c:	20000a00 	.word	0x20000a00

08006280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006286:	4b27      	ldr	r3, [pc, #156]	; (8006324 <vTaskSwitchContext+0xa4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800628e:	4b26      	ldr	r3, [pc, #152]	; (8006328 <vTaskSwitchContext+0xa8>)
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006294:	e03f      	b.n	8006316 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <vTaskSwitchContext+0xa8>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629c:	4b23      	ldr	r3, [pc, #140]	; (800632c <vTaskSwitchContext+0xac>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	fab3 f383 	clz	r3, r3
 80062a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062aa:	7afb      	ldrb	r3, [r7, #11]
 80062ac:	f1c3 031f 	rsb	r3, r3, #31
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	491f      	ldr	r1, [pc, #124]	; (8006330 <vTaskSwitchContext+0xb0>)
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	607b      	str	r3, [r7, #4]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <vTaskSwitchContext+0x5a>
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a12      	ldr	r2, [pc, #72]	; (8006330 <vTaskSwitchContext+0xb0>)
 80062e8:	4413      	add	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	3308      	adds	r3, #8
 80062fe:	429a      	cmp	r2, r3
 8006300:	d104      	bne.n	800630c <vTaskSwitchContext+0x8c>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	605a      	str	r2, [r3, #4]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	4a08      	ldr	r2, [pc, #32]	; (8006334 <vTaskSwitchContext+0xb4>)
 8006314:	6013      	str	r3, [r2, #0]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000a18 	.word	0x20000a18
 8006328:	20000a04 	.word	0x20000a04
 800632c:	200009f8 	.word	0x200009f8
 8006330:	200008f4 	.word	0x200008f4
 8006334:	200008f0 	.word	0x200008f0

08006338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	60fb      	str	r3, [r7, #12]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <vTaskPlaceOnEventList+0x44>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3318      	adds	r3, #24
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fe fe64 	bl	8005034 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800636c:	2101      	movs	r1, #1
 800636e:	6838      	ldr	r0, [r7, #0]
 8006370:	f000 fb48 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
}
 8006374:	bf00      	nop
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	200008f0 	.word	0x200008f0

08006380 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	617b      	str	r3, [r7, #20]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80063a8:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80063c6:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80063d0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3318      	adds	r3, #24
 80063d8:	4619      	mov	r1, r3
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7fe fe06 	bl	8004fec <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063e0:	2101      	movs	r1, #1
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fb0e 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
}
 80063e8:	bf00      	nop
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20000a18 	.word	0x20000a18
 80063f4:	200008f0 	.word	0x200008f0

080063f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	617b      	str	r3, [r7, #20]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <vTaskPlaceOnEventListRestricted+0x54>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3318      	adds	r3, #24
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7fe fddf 	bl	8004fec <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	68b8      	ldr	r0, [r7, #8]
 800643e:	f000 fae1 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
	}
 8006442:	bf00      	nop
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200008f0 	.word	0x200008f0

08006450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	60fb      	str	r3, [r7, #12]
}
 8006478:	bf00      	nop
 800647a:	e7fe      	b.n	800647a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3318      	adds	r3, #24
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fe10 	bl	80050a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006486:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <xTaskRemoveFromEventList+0xac>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11c      	bne.n	80064c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3304      	adds	r3, #4
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fe07 	bl	80050a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	2201      	movs	r2, #1
 800649e:	409a      	lsls	r2, r3
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <xTaskRemoveFromEventList+0xb0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	4a16      	ldr	r2, [pc, #88]	; (8006500 <xTaskRemoveFromEventList+0xb0>)
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4a13      	ldr	r2, [pc, #76]	; (8006504 <xTaskRemoveFromEventList+0xb4>)
 80064b8:	441a      	add	r2, r3
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	3304      	adds	r3, #4
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f7fe fd93 	bl	8004fec <vListInsertEnd>
 80064c6:	e005      	b.n	80064d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3318      	adds	r3, #24
 80064cc:	4619      	mov	r1, r3
 80064ce:	480e      	ldr	r0, [pc, #56]	; (8006508 <xTaskRemoveFromEventList+0xb8>)
 80064d0:	f7fe fd8c 	bl	8004fec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	4b0c      	ldr	r3, [pc, #48]	; (800650c <xTaskRemoveFromEventList+0xbc>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d905      	bls.n	80064ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064e2:	2301      	movs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <xTaskRemoveFromEventList+0xc0>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e001      	b.n	80064f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000a18 	.word	0x20000a18
 8006500:	200009f8 	.word	0x200009f8
 8006504:	200008f4 	.word	0x200008f4
 8006508:	200009b0 	.word	0x200009b0
 800650c:	200008f0 	.word	0x200008f0
 8006510:	20000a04 	.word	0x20000a04

08006514 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800651e:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	613b      	str	r3, [r7, #16]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60fb      	str	r3, [r7, #12]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fe fd9c 	bl	80050a6 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3304      	adds	r3, #4
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fd97 	bl	80050a6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	2201      	movs	r2, #1
 800657e:	409a      	lsls	r2, r3
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4313      	orrs	r3, r2
 8006586:	4a10      	ldr	r2, [pc, #64]	; (80065c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006598:	441a      	add	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe fd23 	bl	8004fec <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d902      	bls.n	80065ba <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
	}
}
 80065ba:	bf00      	nop
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000a18 	.word	0x20000a18
 80065c8:	200009f8 	.word	0x200009f8
 80065cc:	200008f4 	.word	0x200008f4
 80065d0:	200008f0 	.word	0x200008f0
 80065d4:	20000a04 	.word	0x20000a04

080065d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <vTaskInternalSetTimeOutState+0x24>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <vTaskInternalSetTimeOutState+0x28>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20000a08 	.word	0x20000a08
 8006600:	200009f4 	.word	0x200009f4

08006604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	613b      	str	r3, [r7, #16]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006646:	f000 febd 	bl	80073c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <xTaskCheckForTimeOut+0xbc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d102      	bne.n	800666a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006664:	2300      	movs	r3, #0
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e023      	b.n	80066b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <xTaskCheckForTimeOut+0xc0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d007      	beq.n	8006686 <xTaskCheckForTimeOut+0x82>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	e015      	b.n	80066b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	429a      	cmp	r2, r3
 800668e:	d20b      	bcs.n	80066a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ff9b 	bl	80065d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	e004      	b.n	80066b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066ae:	2301      	movs	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066b2:	f000 feb7 	bl	8007424 <vPortExitCritical>

	return xReturn;
 80066b6:	69fb      	ldr	r3, [r7, #28]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200009f4 	.word	0x200009f4
 80066c4:	20000a08 	.word	0x20000a08

080066c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066cc:	4b03      	ldr	r3, [pc, #12]	; (80066dc <vTaskMissedYield+0x14>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
}
 80066d2:	bf00      	nop
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	20000a04 	.word	0x20000a04

080066e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066e8:	f000 f852 	bl	8006790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066ec:	4b06      	ldr	r3, [pc, #24]	; (8006708 <prvIdleTask+0x28>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d9f9      	bls.n	80066e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066f4:	4b05      	ldr	r3, [pc, #20]	; (800670c <prvIdleTask+0x2c>)
 80066f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006704:	e7f0      	b.n	80066e8 <prvIdleTask+0x8>
 8006706:	bf00      	nop
 8006708:	200008f4 	.word	0x200008f4
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006716:	2300      	movs	r3, #0
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	e00c      	b.n	8006736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4a12      	ldr	r2, [pc, #72]	; (8006770 <prvInitialiseTaskLists+0x60>)
 8006728:	4413      	add	r3, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fc31 	bl	8004f92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3301      	adds	r3, #1
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b06      	cmp	r3, #6
 800673a:	d9ef      	bls.n	800671c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800673c:	480d      	ldr	r0, [pc, #52]	; (8006774 <prvInitialiseTaskLists+0x64>)
 800673e:	f7fe fc28 	bl	8004f92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006742:	480d      	ldr	r0, [pc, #52]	; (8006778 <prvInitialiseTaskLists+0x68>)
 8006744:	f7fe fc25 	bl	8004f92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006748:	480c      	ldr	r0, [pc, #48]	; (800677c <prvInitialiseTaskLists+0x6c>)
 800674a:	f7fe fc22 	bl	8004f92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <prvInitialiseTaskLists+0x70>)
 8006750:	f7fe fc1f 	bl	8004f92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006754:	480b      	ldr	r0, [pc, #44]	; (8006784 <prvInitialiseTaskLists+0x74>)
 8006756:	f7fe fc1c 	bl	8004f92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <prvInitialiseTaskLists+0x78>)
 800675c:	4a05      	ldr	r2, [pc, #20]	; (8006774 <prvInitialiseTaskLists+0x64>)
 800675e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <prvInitialiseTaskLists+0x7c>)
 8006762:	4a05      	ldr	r2, [pc, #20]	; (8006778 <prvInitialiseTaskLists+0x68>)
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	200008f4 	.word	0x200008f4
 8006774:	20000980 	.word	0x20000980
 8006778:	20000994 	.word	0x20000994
 800677c:	200009b0 	.word	0x200009b0
 8006780:	200009c4 	.word	0x200009c4
 8006784:	200009dc 	.word	0x200009dc
 8006788:	200009a8 	.word	0x200009a8
 800678c:	200009ac 	.word	0x200009ac

08006790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006796:	e019      	b.n	80067cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006798:	f000 fe14 	bl	80073c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <prvCheckTasksWaitingTermination+0x50>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fc7c 	bl	80050a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <prvCheckTasksWaitingTermination+0x54>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	4a0b      	ldr	r2, [pc, #44]	; (80067e4 <prvCheckTasksWaitingTermination+0x54>)
 80067b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <prvCheckTasksWaitingTermination+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3b01      	subs	r3, #1
 80067be:	4a0a      	ldr	r2, [pc, #40]	; (80067e8 <prvCheckTasksWaitingTermination+0x58>)
 80067c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067c2:	f000 fe2f 	bl	8007424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f810 	bl	80067ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <prvCheckTasksWaitingTermination+0x58>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e1      	bne.n	8006798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200009c4 	.word	0x200009c4
 80067e4:	200009f0 	.word	0x200009f0
 80067e8:	200009d8 	.word	0x200009d8

080067ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d108      	bne.n	8006810 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	4618      	mov	r0, r3
 8006804:	f000 ffcc 	bl	80077a0 <vPortFree>
				vPortFree( pxTCB );
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 ffc9 	bl	80077a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800680e:	e018      	b.n	8006842 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006816:	2b01      	cmp	r3, #1
 8006818:	d103      	bne.n	8006822 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 ffc0 	bl	80077a0 <vPortFree>
	}
 8006820:	e00f      	b.n	8006842 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006828:	2b02      	cmp	r3, #2
 800682a:	d00a      	beq.n	8006842 <prvDeleteTCB+0x56>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <prvDeleteTCB+0x54>
	}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006852:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <prvResetNextTaskUnblockTime+0x38>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <prvResetNextTaskUnblockTime+0x3c>)
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006864:	e008      	b.n	8006878 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <prvResetNextTaskUnblockTime+0x38>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4a04      	ldr	r2, [pc, #16]	; (8006888 <prvResetNextTaskUnblockTime+0x3c>)
 8006876:	6013      	str	r3, [r2, #0]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	200009a8 	.word	0x200009a8
 8006888:	20000a10 	.word	0x20000a10

0800688c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006892:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <xTaskGetSchedulerState+0x34>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800689a:	2301      	movs	r3, #1
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	e008      	b.n	80068b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <xTaskGetSchedulerState+0x38>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068a8:	2302      	movs	r3, #2
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	e001      	b.n	80068b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068b2:	687b      	ldr	r3, [r7, #4]
	}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	200009fc 	.word	0x200009fc
 80068c4:	20000a18 	.word	0x20000a18

080068c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d06e      	beq.n	80069bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068de:	4b3a      	ldr	r3, [pc, #232]	; (80069c8 <xTaskPriorityDisinherit+0x100>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d00a      	beq.n	80068fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	60fb      	str	r3, [r7, #12]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60bb      	str	r3, [r7, #8]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	1e5a      	subs	r2, r3, #1
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692e:	429a      	cmp	r2, r3
 8006930:	d044      	beq.n	80069bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	2b00      	cmp	r3, #0
 8006938:	d140      	bne.n	80069bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	3304      	adds	r3, #4
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fbb1 	bl	80050a6 <uxListRemove>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d115      	bne.n	8006976 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	491f      	ldr	r1, [pc, #124]	; (80069cc <xTaskPriorityDisinherit+0x104>)
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xTaskPriorityDisinherit+0xae>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	2201      	movs	r2, #1
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43da      	mvns	r2, r3
 800696c:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <xTaskPriorityDisinherit+0x108>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4013      	ands	r3, r2
 8006972:	4a17      	ldr	r2, [pc, #92]	; (80069d0 <xTaskPriorityDisinherit+0x108>)
 8006974:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	f1c3 0207 	rsb	r2, r3, #7
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	2201      	movs	r2, #1
 8006990:	409a      	lsls	r2, r3
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <xTaskPriorityDisinherit+0x108>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <xTaskPriorityDisinherit+0x108>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4a08      	ldr	r2, [pc, #32]	; (80069cc <xTaskPriorityDisinherit+0x104>)
 80069aa:	441a      	add	r2, r3
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f7fe fb1a 	bl	8004fec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069b8:	2301      	movs	r3, #1
 80069ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069bc:	697b      	ldr	r3, [r7, #20]
	}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	200008f0 	.word	0x200008f0
 80069cc:	200008f4 	.word	0x200008f4
 80069d0:	200009f8 	.word	0x200009f8

080069d4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80069da:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <uxTaskResetEventItemValue+0x2c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <uxTaskResetEventItemValue+0x2c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <uxTaskResetEventItemValue+0x2c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f1c2 0207 	rsb	r2, r2, #7
 80069f0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80069f2:	687b      	ldr	r3, [r7, #4]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	200008f0 	.word	0x200008f0

08006a04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a0e:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a14:	4b28      	ldr	r3, [pc, #160]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fb43 	bl	80050a6 <uxListRemove>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10b      	bne.n	8006a3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a26:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43da      	mvns	r2, r3
 8006a34:	4b21      	ldr	r3, [pc, #132]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	4a20      	ldr	r2, [pc, #128]	; (8006abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d10a      	bne.n	8006a5c <prvAddCurrentTaskToDelayedList+0x58>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4619      	mov	r1, r3
 8006a54:	481a      	ldr	r0, [pc, #104]	; (8006ac0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a56:	f7fe fac9 	bl	8004fec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a5a:	e026      	b.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a64:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d209      	bcs.n	8006a88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a74:	4b13      	ldr	r3, [pc, #76]	; (8006ac4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7fe fad7 	bl	8005034 <vListInsert>
}
 8006a86:	e010      	b.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a88:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f7fe facd 	bl	8005034 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d202      	bcs.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006aa4:	4a09      	ldr	r2, [pc, #36]	; (8006acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200009f4 	.word	0x200009f4
 8006ab8:	200008f0 	.word	0x200008f0
 8006abc:	200009f8 	.word	0x200009f8
 8006ac0:	200009dc 	.word	0x200009dc
 8006ac4:	200009ac 	.word	0x200009ac
 8006ac8:	200009a8 	.word	0x200009a8
 8006acc:	20000a10 	.word	0x20000a10

08006ad0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	; 0x28
 8006ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ada:	f000 fb07 	bl	80070ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ade:	4b1c      	ldr	r3, [pc, #112]	; (8006b50 <xTimerCreateTimerTask+0x80>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d021      	beq.n	8006b2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006aee:	1d3a      	adds	r2, r7, #4
 8006af0:	f107 0108 	add.w	r1, r7, #8
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fa f80f 	bl	8000b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	9202      	str	r2, [sp, #8]
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	2302      	movs	r3, #2
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	460a      	mov	r2, r1
 8006b10:	4910      	ldr	r1, [pc, #64]	; (8006b54 <xTimerCreateTimerTask+0x84>)
 8006b12:	4811      	ldr	r0, [pc, #68]	; (8006b58 <xTimerCreateTimerTask+0x88>)
 8006b14:	f7ff f814 	bl	8005b40 <xTaskCreateStatic>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	4a10      	ldr	r2, [pc, #64]	; (8006b5c <xTimerCreateTimerTask+0x8c>)
 8006b1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <xTimerCreateTimerTask+0x8c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b26:	2301      	movs	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b46:	697b      	ldr	r3, [r7, #20]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000a4c 	.word	0x20000a4c
 8006b54:	08007b48 	.word	0x08007b48
 8006b58:	08006c95 	.word	0x08006c95
 8006b5c:	20000a50 	.word	0x20000a50

08006b60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	623b      	str	r3, [r7, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b8e:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <xTimerGenericCommand+0x98>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d02a      	beq.n	8006bec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	dc18      	bgt.n	8006bda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ba8:	f7ff fe70 	bl	800688c <xTaskGetSchedulerState>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d109      	bne.n	8006bc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <xTimerGenericCommand+0x98>)
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	f107 0110 	add.w	r1, r7, #16
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	f7fe fbd7 	bl	8005370 <xQueueGenericSend>
 8006bc2:	6278      	str	r0, [r7, #36]	; 0x24
 8006bc4:	e012      	b.n	8006bec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <xTimerGenericCommand+0x98>)
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	f107 0110 	add.w	r1, r7, #16
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f7fe fbcd 	bl	8005370 <xQueueGenericSend>
 8006bd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006bd8:	e008      	b.n	8006bec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <xTimerGenericCommand+0x98>)
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	f107 0110 	add.w	r1, r7, #16
 8006be2:	2300      	movs	r3, #0
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	f7fe fcc1 	bl	800556c <xQueueGenericSendFromISR>
 8006bea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3728      	adds	r7, #40	; 0x28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000a4c 	.word	0x20000a4c

08006bfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c06:	4b22      	ldr	r3, [pc, #136]	; (8006c90 <prvProcessExpiredTimer+0x94>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe fa46 	bl	80050a6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d022      	beq.n	8006c6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	18d1      	adds	r1, r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	6978      	ldr	r0, [r7, #20]
 8006c36:	f000 f8d1 	bl	8006ddc <prvInsertTimerInActiveList>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01f      	beq.n	8006c80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c40:	2300      	movs	r3, #0
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2300      	movs	r3, #0
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6978      	ldr	r0, [r7, #20]
 8006c4c:	f7ff ff88 	bl	8006b60 <xTimerGenericCommand>
 8006c50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d113      	bne.n	8006c80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	60fb      	str	r3, [r7, #12]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	6978      	ldr	r0, [r7, #20]
 8006c86:	4798      	blx	r3
}
 8006c88:	bf00      	nop
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000a44 	.word	0x20000a44

08006c94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c9c:	f107 0308 	add.w	r3, r7, #8
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 f857 	bl	8006d54 <prvGetNextExpireTime>
 8006ca6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f803 	bl	8006cb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cb2:	f000 f8d5 	bl	8006e60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cb6:	e7f1      	b.n	8006c9c <prvTimerTask+0x8>

08006cb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cc2:	f7ff f96b 	bl	8005f9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f866 	bl	8006d9c <prvSampleTimeNow>
 8006cd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d130      	bne.n	8006d3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <prvProcessTimerOrBlockTask+0x3c>
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d806      	bhi.n	8006cf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ce6:	f7ff f967 	bl	8005fb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff85 	bl	8006bfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cf2:	e024      	b.n	8006d3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <prvProcessTimerOrBlockTask+0x90>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <prvProcessTimerOrBlockTask+0x50>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <prvProcessTimerOrBlockTask+0x52>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <prvProcessTimerOrBlockTask+0x94>)
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7fe fedd 	bl	8005ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d1e:	f7ff f94b 	bl	8005fb8 <xTaskResumeAll>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <prvProcessTimerOrBlockTask+0x98>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
}
 8006d38:	e001      	b.n	8006d3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d3a:	f7ff f93d 	bl	8005fb8 <xTaskResumeAll>
}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000a48 	.word	0x20000a48
 8006d4c:	20000a4c 	.word	0x20000a4c
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <prvGetNextExpireTime+0x44>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <prvGetNextExpireTime+0x16>
 8006d66:	2201      	movs	r2, #1
 8006d68:	e000      	b.n	8006d6c <prvGetNextExpireTime+0x18>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d105      	bne.n	8006d84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d78:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <prvGetNextExpireTime+0x44>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	e001      	b.n	8006d88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d88:	68fb      	ldr	r3, [r7, #12]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000a44 	.word	0x20000a44

08006d9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006da4:	f7ff f9a4 	bl	80060f0 <xTaskGetTickCount>
 8006da8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006daa:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <prvSampleTimeNow+0x3c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d205      	bcs.n	8006dc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006db4:	f000 f936 	bl	8007024 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	e002      	b.n	8006dc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006dc6:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <prvSampleTimeNow+0x3c>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000a54 	.word	0x20000a54

08006ddc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d812      	bhi.n	8006e28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	1ad2      	subs	r2, r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d302      	bcc.n	8006e16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e10:	2301      	movs	r3, #1
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	e01b      	b.n	8006e4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <prvInsertTimerInActiveList+0x7c>)
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f7fe f907 	bl	8005034 <vListInsert>
 8006e26:	e012      	b.n	8006e4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d206      	bcs.n	8006e3e <prvInsertTimerInActiveList+0x62>
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d302      	bcc.n	8006e3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	e007      	b.n	8006e4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <prvInsertTimerInActiveList+0x80>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4619      	mov	r1, r3
 8006e48:	4610      	mov	r0, r2
 8006e4a:	f7fe f8f3 	bl	8005034 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e4e:	697b      	ldr	r3, [r7, #20]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000a48 	.word	0x20000a48
 8006e5c:	20000a44 	.word	0x20000a44

08006e60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08e      	sub	sp, #56	; 0x38
 8006e64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e66:	e0ca      	b.n	8006ffe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da18      	bge.n	8006ea0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e6e:	1d3b      	adds	r3, r7, #4
 8006e70:	3304      	adds	r3, #4
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	61fb      	str	r3, [r7, #28]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e96:	6850      	ldr	r0, [r2, #4]
 8006e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e9a:	6892      	ldr	r2, [r2, #8]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f2c0 80ab 	blt.w	8006ffe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe f8f4 	bl	80050a6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ff6b 	bl	8006d9c <prvSampleTimeNow>
 8006ec6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b09      	cmp	r3, #9
 8006ecc:	f200 8096 	bhi.w	8006ffc <prvProcessReceivedCommands+0x19c>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <prvProcessReceivedCommands+0x78>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006f01 	.word	0x08006f01
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f01 	.word	0x08006f01
 8006ee4:	08006f75 	.word	0x08006f75
 8006ee8:	08006f89 	.word	0x08006f89
 8006eec:	08006fd3 	.word	0x08006fd3
 8006ef0:	08006f01 	.word	0x08006f01
 8006ef4:	08006f01 	.word	0x08006f01
 8006ef8:	08006f75 	.word	0x08006f75
 8006efc:	08006f89 	.word	0x08006f89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f06:	f043 0301 	orr.w	r3, r3, #1
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	18d1      	adds	r1, r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f20:	f7ff ff5c 	bl	8006ddc <prvInsertTimerInActiveList>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d069      	beq.n	8006ffe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d05e      	beq.n	8006ffe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	441a      	add	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f52:	f7ff fe05 	bl	8006b60 <xTimerGenericCommand>
 8006f56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d14f      	bne.n	8006ffe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	61bb      	str	r3, [r7, #24]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8006f86:	e03a      	b.n	8006ffe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	617b      	str	r3, [r7, #20]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	18d1      	adds	r1, r2, r3
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fcc:	f7ff ff06 	bl	8006ddc <prvInsertTimerInActiveList>
					break;
 8006fd0:	e015      	b.n	8006ffe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe2:	f000 fbdd 	bl	80077a0 <vPortFree>
 8006fe6:	e00a      	b.n	8006ffe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fee:	f023 0301 	bic.w	r3, r3, #1
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ffa:	e000      	b.n	8006ffe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006ffc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ffe:	4b08      	ldr	r3, [pc, #32]	; (8007020 <prvProcessReceivedCommands+0x1c0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	1d39      	adds	r1, r7, #4
 8007004:	2200      	movs	r2, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fb4c 	bl	80056a4 <xQueueReceive>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	f47f af2a 	bne.w	8006e68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	3730      	adds	r7, #48	; 0x30
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000a4c 	.word	0x20000a4c

08007024 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800702a:	e048      	b.n	80070be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800702c:	4b2d      	ldr	r3, [pc, #180]	; (80070e4 <prvSwitchTimerLists+0xc0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007036:	4b2b      	ldr	r3, [pc, #172]	; (80070e4 <prvSwitchTimerLists+0xc0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe f82e 	bl	80050a6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d02e      	beq.n	80070be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4413      	add	r3, r2
 8007068:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	429a      	cmp	r2, r3
 8007070:	d90e      	bls.n	8007090 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800707e:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <prvSwitchTimerLists+0xc0>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fd ffd3 	bl	8005034 <vListInsert>
 800708e:	e016      	b.n	80070be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007090:	2300      	movs	r3, #0
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	2300      	movs	r3, #0
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	2100      	movs	r1, #0
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff fd60 	bl	8006b60 <xTimerGenericCommand>
 80070a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	603b      	str	r3, [r7, #0]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <prvSwitchTimerLists+0xc0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1b1      	bne.n	800702c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <prvSwitchTimerLists+0xc0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070ce:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <prvSwitchTimerLists+0xc4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a04      	ldr	r2, [pc, #16]	; (80070e4 <prvSwitchTimerLists+0xc0>)
 80070d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070d6:	4a04      	ldr	r2, [pc, #16]	; (80070e8 <prvSwitchTimerLists+0xc4>)
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000a44 	.word	0x20000a44
 80070e8:	20000a48 	.word	0x20000a48

080070ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070f2:	f000 f967 	bl	80073c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070f6:	4b15      	ldr	r3, [pc, #84]	; (800714c <prvCheckForValidListAndQueue+0x60>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d120      	bne.n	8007140 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070fe:	4814      	ldr	r0, [pc, #80]	; (8007150 <prvCheckForValidListAndQueue+0x64>)
 8007100:	f7fd ff47 	bl	8004f92 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007104:	4813      	ldr	r0, [pc, #76]	; (8007154 <prvCheckForValidListAndQueue+0x68>)
 8007106:	f7fd ff44 	bl	8004f92 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800710a:	4b13      	ldr	r3, [pc, #76]	; (8007158 <prvCheckForValidListAndQueue+0x6c>)
 800710c:	4a10      	ldr	r2, [pc, #64]	; (8007150 <prvCheckForValidListAndQueue+0x64>)
 800710e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007110:	4b12      	ldr	r3, [pc, #72]	; (800715c <prvCheckForValidListAndQueue+0x70>)
 8007112:	4a10      	ldr	r2, [pc, #64]	; (8007154 <prvCheckForValidListAndQueue+0x68>)
 8007114:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007116:	2300      	movs	r3, #0
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	4b11      	ldr	r3, [pc, #68]	; (8007160 <prvCheckForValidListAndQueue+0x74>)
 800711c:	4a11      	ldr	r2, [pc, #68]	; (8007164 <prvCheckForValidListAndQueue+0x78>)
 800711e:	2110      	movs	r1, #16
 8007120:	200a      	movs	r0, #10
 8007122:	f7fe f853 	bl	80051cc <xQueueGenericCreateStatic>
 8007126:	4603      	mov	r3, r0
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <prvCheckForValidListAndQueue+0x60>)
 800712a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <prvCheckForValidListAndQueue+0x60>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <prvCheckForValidListAndQueue+0x60>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	490b      	ldr	r1, [pc, #44]	; (8007168 <prvCheckForValidListAndQueue+0x7c>)
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fca2 	bl	8005a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007140:	f000 f970 	bl	8007424 <vPortExitCritical>
}
 8007144:	bf00      	nop
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000a4c 	.word	0x20000a4c
 8007150:	20000a1c 	.word	0x20000a1c
 8007154:	20000a30 	.word	0x20000a30
 8007158:	20000a44 	.word	0x20000a44
 800715c:	20000a48 	.word	0x20000a48
 8007160:	20000af8 	.word	0x20000af8
 8007164:	20000a58 	.word	0x20000a58
 8007168:	08007b50 	.word	0x08007b50

0800716c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3b04      	subs	r3, #4
 800717c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3b04      	subs	r3, #4
 800718a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f023 0201 	bic.w	r2, r3, #1
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3b04      	subs	r3, #4
 800719a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800719c:	4a0c      	ldr	r2, [pc, #48]	; (80071d0 <pxPortInitialiseStack+0x64>)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3b14      	subs	r3, #20
 80071a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3b04      	subs	r3, #4
 80071b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f06f 0202 	mvn.w	r2, #2
 80071ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3b20      	subs	r3, #32
 80071c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071c2:	68fb      	ldr	r3, [r7, #12]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	080071d5 	.word	0x080071d5

080071d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <prvTaskExitError+0x54>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d00a      	beq.n	80071fe <prvTaskExitError+0x2a>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	60fb      	str	r3, [r7, #12]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <prvTaskExitError+0x28>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	60bb      	str	r3, [r7, #8]
}
 8007210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007212:	bf00      	nop
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0fc      	beq.n	8007214 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	2000000c 	.word	0x2000000c
 800722c:	00000000 	.word	0x00000000

08007230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <pxCurrentTCBConst2>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	f380 8809 	msr	PSP, r0
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	4770      	bx	lr
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst2>:
 8007250:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007258:	4808      	ldr	r0, [pc, #32]	; (800727c <prvPortStartFirstTask+0x24>)
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f380 8808 	msr	MSP, r0
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8814 	msr	CONTROL, r0
 800726a:	b662      	cpsie	i
 800726c:	b661      	cpsie	f
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	df00      	svc	0
 8007278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800727a:	bf00      	nop
 800727c:	e000ed08 	.word	0xe000ed08

08007280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007286:	4b46      	ldr	r3, [pc, #280]	; (80073a0 <xPortStartScheduler+0x120>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a46      	ldr	r2, [pc, #280]	; (80073a4 <xPortStartScheduler+0x124>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10a      	bne.n	80072a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	613b      	str	r3, [r7, #16]
}
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072a6:	4b3e      	ldr	r3, [pc, #248]	; (80073a0 <xPortStartScheduler+0x120>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a3f      	ldr	r2, [pc, #252]	; (80073a8 <xPortStartScheduler+0x128>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10a      	bne.n	80072c6 <xPortStartScheduler+0x46>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	60fb      	str	r3, [r7, #12]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072c6:	4b39      	ldr	r3, [pc, #228]	; (80073ac <xPortStartScheduler+0x12c>)
 80072c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	22ff      	movs	r2, #255	; 0xff
 80072d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	4b31      	ldr	r3, [pc, #196]	; (80073b0 <xPortStartScheduler+0x130>)
 80072ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072ee:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <xPortStartScheduler+0x134>)
 80072f0:	2207      	movs	r2, #7
 80072f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072f4:	e009      	b.n	800730a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072f6:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <xPortStartScheduler+0x134>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	4a2d      	ldr	r2, [pc, #180]	; (80073b4 <xPortStartScheduler+0x134>)
 80072fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007312:	2b80      	cmp	r3, #128	; 0x80
 8007314:	d0ef      	beq.n	80072f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007316:	4b27      	ldr	r3, [pc, #156]	; (80073b4 <xPortStartScheduler+0x134>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1c3 0307 	rsb	r3, r3, #7
 800731e:	2b04      	cmp	r3, #4
 8007320:	d00a      	beq.n	8007338 <xPortStartScheduler+0xb8>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60bb      	str	r3, [r7, #8]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007338:	4b1e      	ldr	r3, [pc, #120]	; (80073b4 <xPortStartScheduler+0x134>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <xPortStartScheduler+0x134>)
 8007340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007342:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <xPortStartScheduler+0x134>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800734a:	4a1a      	ldr	r2, [pc, #104]	; (80073b4 <xPortStartScheduler+0x134>)
 800734c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007356:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <xPortStartScheduler+0x138>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <xPortStartScheduler+0x138>)
 800735c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <xPortStartScheduler+0x138>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a14      	ldr	r2, [pc, #80]	; (80073b8 <xPortStartScheduler+0x138>)
 8007368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800736c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800736e:	f000 f8dd 	bl	800752c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <xPortStartScheduler+0x13c>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007378:	f000 f8fc 	bl	8007574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800737c:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <xPortStartScheduler+0x140>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0f      	ldr	r2, [pc, #60]	; (80073c0 <xPortStartScheduler+0x140>)
 8007382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007386:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007388:	f7ff ff66 	bl	8007258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800738c:	f7fe ff78 	bl	8006280 <vTaskSwitchContext>
	prvTaskExitError();
 8007390:	f7ff ff20 	bl	80071d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	e000ed00 	.word	0xe000ed00
 80073a4:	410fc271 	.word	0x410fc271
 80073a8:	410fc270 	.word	0x410fc270
 80073ac:	e000e400 	.word	0xe000e400
 80073b0:	20000b40 	.word	0x20000b40
 80073b4:	20000b44 	.word	0x20000b44
 80073b8:	e000ed20 	.word	0xe000ed20
 80073bc:	2000000c 	.word	0x2000000c
 80073c0:	e000ef34 	.word	0xe000ef34

080073c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	607b      	str	r3, [r7, #4]
}
 80073dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073de:	4b0f      	ldr	r3, [pc, #60]	; (800741c <vPortEnterCritical+0x58>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3301      	adds	r3, #1
 80073e4:	4a0d      	ldr	r2, [pc, #52]	; (800741c <vPortEnterCritical+0x58>)
 80073e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <vPortEnterCritical+0x58>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10f      	bne.n	8007410 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <vPortEnterCritical+0x5c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <vPortEnterCritical+0x4c>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	603b      	str	r3, [r7, #0]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <vPortEnterCritical+0x4a>
	}
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	2000000c 	.word	0x2000000c
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <vPortExitCritical+0x50>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <vPortExitCritical+0x24>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	607b      	str	r3, [r7, #4]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <vPortExitCritical+0x50>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3b01      	subs	r3, #1
 800744e:	4a09      	ldr	r2, [pc, #36]	; (8007474 <vPortExitCritical+0x50>)
 8007450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <vPortExitCritical+0x50>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <vPortExitCritical+0x42>
 800745a:	2300      	movs	r3, #0
 800745c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f383 8811 	msr	BASEPRI, r3
}
 8007464:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	2000000c 	.word	0x2000000c
	...

08007480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007480:	f3ef 8009 	mrs	r0, PSP
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <pxCurrentTCBConst>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	f01e 0f10 	tst.w	lr, #16
 8007490:	bf08      	it	eq
 8007492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	6010      	str	r0, [r2, #0]
 800749c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074a4:	f380 8811 	msr	BASEPRI, r0
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f7fe fee6 	bl	8006280 <vTaskSwitchContext>
 80074b4:	f04f 0000 	mov.w	r0, #0
 80074b8:	f380 8811 	msr	BASEPRI, r0
 80074bc:	bc09      	pop	{r0, r3}
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	6808      	ldr	r0, [r1, #0]
 80074c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c6:	f01e 0f10 	tst.w	lr, #16
 80074ca:	bf08      	it	eq
 80074cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074d0:	f380 8809 	msr	PSP, r0
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst>:
 80074e0:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
}
 8007500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007502:	f7fe fe05 	bl	8006110 <xTaskIncrementTick>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <SysTick_Handler+0x40>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f383 8811 	msr	BASEPRI, r3
}
 800751e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007536:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <vPortSetupTimerInterrupt+0x38>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <vPortSetupTimerInterrupt+0x3c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0a      	ldr	r2, [pc, #40]	; (800756c <vPortSetupTimerInterrupt+0x40>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	099b      	lsrs	r3, r3, #6
 8007548:	4a09      	ldr	r2, [pc, #36]	; (8007570 <vPortSetupTimerInterrupt+0x44>)
 800754a:	3b01      	subs	r3, #1
 800754c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007550:	2207      	movs	r2, #7
 8007552:	601a      	str	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	e000e010 	.word	0xe000e010
 8007564:	e000e018 	.word	0xe000e018
 8007568:	20000000 	.word	0x20000000
 800756c:	10624dd3 	.word	0x10624dd3
 8007570:	e000e014 	.word	0xe000e014

08007574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007584 <vPortEnableVFP+0x10>
 8007578:	6801      	ldr	r1, [r0, #0]
 800757a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800757e:	6001      	str	r1, [r0, #0]
 8007580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007582:	bf00      	nop
 8007584:	e000ed88 	.word	0xe000ed88

08007588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800758e:	f3ef 8305 	mrs	r3, IPSR
 8007592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d914      	bls.n	80075c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800759a:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <vPortValidateInterruptPriority+0x70>)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075a4:	4b15      	ldr	r3, [pc, #84]	; (80075fc <vPortValidateInterruptPriority+0x74>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	7afa      	ldrb	r2, [r7, #11]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d20a      	bcs.n	80075c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075c4:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <vPortValidateInterruptPriority+0x78>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075cc:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <vPortValidateInterruptPriority+0x7c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d90a      	bls.n	80075ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	603b      	str	r3, [r7, #0]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <vPortValidateInterruptPriority+0x60>
	}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	e000e3f0 	.word	0xe000e3f0
 80075fc:	20000b40 	.word	0x20000b40
 8007600:	e000ed0c 	.word	0xe000ed0c
 8007604:	20000b44 	.word	0x20000b44

08007608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	; 0x28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007614:	f7fe fcc2 	bl	8005f9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007618:	4b5b      	ldr	r3, [pc, #364]	; (8007788 <pvPortMalloc+0x180>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007620:	f000 f920 	bl	8007864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007624:	4b59      	ldr	r3, [pc, #356]	; (800778c <pvPortMalloc+0x184>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4013      	ands	r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	f040 8093 	bne.w	8007758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01d      	beq.n	8007674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007638:	2208      	movs	r2, #8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4413      	add	r3, r2
 800763e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	2b00      	cmp	r3, #0
 8007648:	d014      	beq.n	8007674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f023 0307 	bic.w	r3, r3, #7
 8007650:	3308      	adds	r3, #8
 8007652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <pvPortMalloc+0x6c>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	617b      	str	r3, [r7, #20]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d06e      	beq.n	8007758 <pvPortMalloc+0x150>
 800767a:	4b45      	ldr	r3, [pc, #276]	; (8007790 <pvPortMalloc+0x188>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d869      	bhi.n	8007758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007684:	4b43      	ldr	r3, [pc, #268]	; (8007794 <pvPortMalloc+0x18c>)
 8007686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007688:	4b42      	ldr	r3, [pc, #264]	; (8007794 <pvPortMalloc+0x18c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800768e:	e004      	b.n	800769a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d903      	bls.n	80076ac <pvPortMalloc+0xa4>
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f1      	bne.n	8007690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076ac:	4b36      	ldr	r3, [pc, #216]	; (8007788 <pvPortMalloc+0x180>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d050      	beq.n	8007758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2208      	movs	r2, #8
 80076bc:	4413      	add	r3, r2
 80076be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	2308      	movs	r3, #8
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d91f      	bls.n	8007718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4413      	add	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <pvPortMalloc+0xf8>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	613b      	str	r3, [r7, #16]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007712:	69b8      	ldr	r0, [r7, #24]
 8007714:	f000 f908 	bl	8007928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007718:	4b1d      	ldr	r3, [pc, #116]	; (8007790 <pvPortMalloc+0x188>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	4a1b      	ldr	r2, [pc, #108]	; (8007790 <pvPortMalloc+0x188>)
 8007724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <pvPortMalloc+0x188>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <pvPortMalloc+0x190>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d203      	bcs.n	800773a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007732:	4b17      	ldr	r3, [pc, #92]	; (8007790 <pvPortMalloc+0x188>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a18      	ldr	r2, [pc, #96]	; (8007798 <pvPortMalloc+0x190>)
 8007738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <pvPortMalloc+0x184>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	431a      	orrs	r2, r3
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	2200      	movs	r2, #0
 800774c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <pvPortMalloc+0x194>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3301      	adds	r3, #1
 8007754:	4a11      	ldr	r2, [pc, #68]	; (800779c <pvPortMalloc+0x194>)
 8007756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007758:	f7fe fc2e 	bl	8005fb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <pvPortMalloc+0x174>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60fb      	str	r3, [r7, #12]
}
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <pvPortMalloc+0x172>
	return pvReturn;
 800777c:	69fb      	ldr	r3, [r7, #28]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3728      	adds	r7, #40	; 0x28
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20004750 	.word	0x20004750
 800778c:	20004764 	.word	0x20004764
 8007790:	20004754 	.word	0x20004754
 8007794:	20004748 	.word	0x20004748
 8007798:	20004758 	.word	0x20004758
 800779c:	2000475c 	.word	0x2000475c

080077a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d04d      	beq.n	800784e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077b2:	2308      	movs	r3, #8
 80077b4:	425b      	negs	r3, r3
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4413      	add	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	4b24      	ldr	r3, [pc, #144]	; (8007858 <vPortFree+0xb8>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4013      	ands	r3, r2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <vPortFree+0x44>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <vPortFree+0x62>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	60bb      	str	r3, [r7, #8]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	4b14      	ldr	r3, [pc, #80]	; (8007858 <vPortFree+0xb8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01e      	beq.n	800784e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d11a      	bne.n	800784e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <vPortFree+0xb8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	43db      	mvns	r3, r3
 8007822:	401a      	ands	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007828:	f7fe fbb8 	bl	8005f9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	4b0a      	ldr	r3, [pc, #40]	; (800785c <vPortFree+0xbc>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4413      	add	r3, r2
 8007836:	4a09      	ldr	r2, [pc, #36]	; (800785c <vPortFree+0xbc>)
 8007838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800783a:	6938      	ldr	r0, [r7, #16]
 800783c:	f000 f874 	bl	8007928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <vPortFree+0xc0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3301      	adds	r3, #1
 8007846:	4a06      	ldr	r2, [pc, #24]	; (8007860 <vPortFree+0xc0>)
 8007848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800784a:	f7fe fbb5 	bl	8005fb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800784e:	bf00      	nop
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20004764 	.word	0x20004764
 800785c:	20004754 	.word	0x20004754
 8007860:	20004760 	.word	0x20004760

08007864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800786a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800786e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007870:	4b27      	ldr	r3, [pc, #156]	; (8007910 <prvHeapInit+0xac>)
 8007872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00c      	beq.n	8007898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3307      	adds	r3, #7
 8007882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	4a1f      	ldr	r2, [pc, #124]	; (8007910 <prvHeapInit+0xac>)
 8007894:	4413      	add	r3, r2
 8007896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800789c:	4a1d      	ldr	r2, [pc, #116]	; (8007914 <prvHeapInit+0xb0>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078a2:	4b1c      	ldr	r3, [pc, #112]	; (8007914 <prvHeapInit+0xb0>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4413      	add	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078b0:	2208      	movs	r2, #8
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0307 	bic.w	r3, r3, #7
 80078be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4a15      	ldr	r2, [pc, #84]	; (8007918 <prvHeapInit+0xb4>)
 80078c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <prvHeapInit+0xb4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ce:	4b12      	ldr	r3, [pc, #72]	; (8007918 <prvHeapInit+0xb4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <prvHeapInit+0xb4>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4a0a      	ldr	r2, [pc, #40]	; (800791c <prvHeapInit+0xb8>)
 80078f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4a09      	ldr	r2, [pc, #36]	; (8007920 <prvHeapInit+0xbc>)
 80078fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <prvHeapInit+0xc0>)
 80078fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007902:	601a      	str	r2, [r3, #0]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20000b48 	.word	0x20000b48
 8007914:	20004748 	.word	0x20004748
 8007918:	20004750 	.word	0x20004750
 800791c:	20004758 	.word	0x20004758
 8007920:	20004754 	.word	0x20004754
 8007924:	20004764 	.word	0x20004764

08007928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007930:	4b28      	ldr	r3, [pc, #160]	; (80079d4 <prvInsertBlockIntoFreeList+0xac>)
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e002      	b.n	800793c <prvInsertBlockIntoFreeList+0x14>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d8f7      	bhi.n	8007936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4413      	add	r3, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	429a      	cmp	r2, r3
 8007956:	d108      	bne.n	800796a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	441a      	add	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	441a      	add	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d118      	bne.n	80079b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d00d      	beq.n	80079a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	441a      	add	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e008      	b.n	80079b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079a6:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <prvInsertBlockIntoFreeList+0xb0>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	e003      	b.n	80079b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d002      	beq.n	80079c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20004748 	.word	0x20004748
 80079d8:	20004750 	.word	0x20004750

080079dc <memset>:
 80079dc:	4402      	add	r2, r0
 80079de:	4603      	mov	r3, r0
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d100      	bne.n	80079e6 <memset+0xa>
 80079e4:	4770      	bx	lr
 80079e6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ea:	e7f9      	b.n	80079e0 <memset+0x4>

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4d0d      	ldr	r5, [pc, #52]	; (8007a24 <__libc_init_array+0x38>)
 80079f0:	4c0d      	ldr	r4, [pc, #52]	; (8007a28 <__libc_init_array+0x3c>)
 80079f2:	1b64      	subs	r4, r4, r5
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	2600      	movs	r6, #0
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	d109      	bne.n	8007a10 <__libc_init_array+0x24>
 80079fc:	4d0b      	ldr	r5, [pc, #44]	; (8007a2c <__libc_init_array+0x40>)
 80079fe:	4c0c      	ldr	r4, [pc, #48]	; (8007a30 <__libc_init_array+0x44>)
 8007a00:	f000 f826 	bl	8007a50 <_init>
 8007a04:	1b64      	subs	r4, r4, r5
 8007a06:	10a4      	asrs	r4, r4, #2
 8007a08:	2600      	movs	r6, #0
 8007a0a:	42a6      	cmp	r6, r4
 8007a0c:	d105      	bne.n	8007a1a <__libc_init_array+0x2e>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a14:	4798      	blx	r3
 8007a16:	3601      	adds	r6, #1
 8007a18:	e7ee      	b.n	80079f8 <__libc_init_array+0xc>
 8007a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1e:	4798      	blx	r3
 8007a20:	3601      	adds	r6, #1
 8007a22:	e7f2      	b.n	8007a0a <__libc_init_array+0x1e>
 8007a24:	08007b78 	.word	0x08007b78
 8007a28:	08007b78 	.word	0x08007b78
 8007a2c:	08007b78 	.word	0x08007b78
 8007a30:	08007b7c 	.word	0x08007b7c

08007a34 <memcpy>:
 8007a34:	440a      	add	r2, r1
 8007a36:	4291      	cmp	r1, r2
 8007a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a3c:	d100      	bne.n	8007a40 <memcpy+0xc>
 8007a3e:	4770      	bx	lr
 8007a40:	b510      	push	{r4, lr}
 8007a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	d1f9      	bne.n	8007a42 <memcpy+0xe>
 8007a4e:	bd10      	pop	{r4, pc}

08007a50 <_init>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr

08007a5c <_fini>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr

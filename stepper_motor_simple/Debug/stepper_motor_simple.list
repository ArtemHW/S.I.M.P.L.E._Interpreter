
stepper_motor_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ec  080064ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f4  080064f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080064fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c0  20000010  0800650c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040d0  0800650c  000240d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138cd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f27  00000000  00000000  00033950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  00036878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e17  00000000  00000000  00037a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175af  00000000  00000000  000388a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145e6  00000000  00000000  0004fe56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095909  00000000  00000000  0006443c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c8c  00000000  00000000  000f9d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000fe9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006430 	.word	0x08006430

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006430 	.word	0x08006430

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b970 	b.w	8000ae4 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9e08      	ldr	r6, [sp, #32]
 8000822:	460d      	mov	r5, r1
 8000824:	4604      	mov	r4, r0
 8000826:	460f      	mov	r7, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4694      	mov	ip, r2
 8000830:	d965      	bls.n	80008fe <__udivmoddi4+0xe2>
 8000832:	fab2 f382 	clz	r3, r2
 8000836:	b143      	cbz	r3, 800084a <__udivmoddi4+0x2e>
 8000838:	fa02 fc03 	lsl.w	ip, r2, r3
 800083c:	f1c3 0220 	rsb	r2, r3, #32
 8000840:	409f      	lsls	r7, r3
 8000842:	fa20 f202 	lsr.w	r2, r0, r2
 8000846:	4317      	orrs	r7, r2
 8000848:	409c      	lsls	r4, r3
 800084a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800084e:	fa1f f58c 	uxth.w	r5, ip
 8000852:	fbb7 f1fe 	udiv	r1, r7, lr
 8000856:	0c22      	lsrs	r2, r4, #16
 8000858:	fb0e 7711 	mls	r7, lr, r1, r7
 800085c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000860:	fb01 f005 	mul.w	r0, r1, r5
 8000864:	4290      	cmp	r0, r2
 8000866:	d90a      	bls.n	800087e <__udivmoddi4+0x62>
 8000868:	eb1c 0202 	adds.w	r2, ip, r2
 800086c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000870:	f080 811c 	bcs.w	8000aac <__udivmoddi4+0x290>
 8000874:	4290      	cmp	r0, r2
 8000876:	f240 8119 	bls.w	8000aac <__udivmoddi4+0x290>
 800087a:	3902      	subs	r1, #2
 800087c:	4462      	add	r2, ip
 800087e:	1a12      	subs	r2, r2, r0
 8000880:	b2a4      	uxth	r4, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800088e:	fb00 f505 	mul.w	r5, r0, r5
 8000892:	42a5      	cmp	r5, r4
 8000894:	d90a      	bls.n	80008ac <__udivmoddi4+0x90>
 8000896:	eb1c 0404 	adds.w	r4, ip, r4
 800089a:	f100 32ff 	add.w	r2, r0, #4294967295
 800089e:	f080 8107 	bcs.w	8000ab0 <__udivmoddi4+0x294>
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	f240 8104 	bls.w	8000ab0 <__udivmoddi4+0x294>
 80008a8:	4464      	add	r4, ip
 80008aa:	3802      	subs	r0, #2
 80008ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b0:	1b64      	subs	r4, r4, r5
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11e      	cbz	r6, 80008be <__udivmoddi4+0xa2>
 80008b6:	40dc      	lsrs	r4, r3
 80008b8:	2300      	movs	r3, #0
 80008ba:	e9c6 4300 	strd	r4, r3, [r6]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0xbc>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	f000 80ed 	beq.w	8000aa6 <__udivmoddi4+0x28a>
 80008cc:	2100      	movs	r1, #0
 80008ce:	e9c6 0500 	strd	r0, r5, [r6]
 80008d2:	4608      	mov	r0, r1
 80008d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d8:	fab3 f183 	clz	r1, r3
 80008dc:	2900      	cmp	r1, #0
 80008de:	d149      	bne.n	8000974 <__udivmoddi4+0x158>
 80008e0:	42ab      	cmp	r3, r5
 80008e2:	d302      	bcc.n	80008ea <__udivmoddi4+0xce>
 80008e4:	4282      	cmp	r2, r0
 80008e6:	f200 80f8 	bhi.w	8000ada <__udivmoddi4+0x2be>
 80008ea:	1a84      	subs	r4, r0, r2
 80008ec:	eb65 0203 	sbc.w	r2, r5, r3
 80008f0:	2001      	movs	r0, #1
 80008f2:	4617      	mov	r7, r2
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0e2      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f8:	e9c6 4700 	strd	r4, r7, [r6]
 80008fc:	e7df      	b.n	80008be <__udivmoddi4+0xa2>
 80008fe:	b902      	cbnz	r2, 8000902 <__udivmoddi4+0xe6>
 8000900:	deff      	udf	#255	; 0xff
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8090 	bne.w	8000a2c <__udivmoddi4+0x210>
 800090c:	1a8a      	subs	r2, r1, r2
 800090e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000912:	fa1f fe8c 	uxth.w	lr, ip
 8000916:	2101      	movs	r1, #1
 8000918:	fbb2 f5f7 	udiv	r5, r2, r7
 800091c:	fb07 2015 	mls	r0, r7, r5, r2
 8000920:	0c22      	lsrs	r2, r4, #16
 8000922:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000926:	fb0e f005 	mul.w	r0, lr, r5
 800092a:	4290      	cmp	r0, r2
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x124>
 800092e:	eb1c 0202 	adds.w	r2, ip, r2
 8000932:	f105 38ff 	add.w	r8, r5, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x122>
 8000938:	4290      	cmp	r0, r2
 800093a:	f200 80cb 	bhi.w	8000ad4 <__udivmoddi4+0x2b8>
 800093e:	4645      	mov	r5, r8
 8000940:	1a12      	subs	r2, r2, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb2 f0f7 	udiv	r0, r2, r7
 8000948:	fb07 2210 	mls	r2, r7, r0, r2
 800094c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000950:	fb0e fe00 	mul.w	lr, lr, r0
 8000954:	45a6      	cmp	lr, r4
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x14e>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000960:	d202      	bcs.n	8000968 <__udivmoddi4+0x14c>
 8000962:	45a6      	cmp	lr, r4
 8000964:	f200 80bb 	bhi.w	8000ade <__udivmoddi4+0x2c2>
 8000968:	4610      	mov	r0, r2
 800096a:	eba4 040e 	sub.w	r4, r4, lr
 800096e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000972:	e79f      	b.n	80008b4 <__udivmoddi4+0x98>
 8000974:	f1c1 0720 	rsb	r7, r1, #32
 8000978:	408b      	lsls	r3, r1
 800097a:	fa22 fc07 	lsr.w	ip, r2, r7
 800097e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000982:	fa05 f401 	lsl.w	r4, r5, r1
 8000986:	fa20 f307 	lsr.w	r3, r0, r7
 800098a:	40fd      	lsrs	r5, r7
 800098c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000990:	4323      	orrs	r3, r4
 8000992:	fbb5 f8f9 	udiv	r8, r5, r9
 8000996:	fa1f fe8c 	uxth.w	lr, ip
 800099a:	fb09 5518 	mls	r5, r9, r8, r5
 800099e:	0c1c      	lsrs	r4, r3, #16
 80009a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009a4:	fb08 f50e 	mul.w	r5, r8, lr
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	fa02 f201 	lsl.w	r2, r2, r1
 80009ae:	fa00 f001 	lsl.w	r0, r0, r1
 80009b2:	d90b      	bls.n	80009cc <__udivmoddi4+0x1b0>
 80009b4:	eb1c 0404 	adds.w	r4, ip, r4
 80009b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009bc:	f080 8088 	bcs.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c0:	42a5      	cmp	r5, r4
 80009c2:	f240 8085 	bls.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ca:	4464      	add	r4, ip
 80009cc:	1b64      	subs	r4, r4, r5
 80009ce:	b29d      	uxth	r5, r3
 80009d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d4:	fb09 4413 	mls	r4, r9, r3, r4
 80009d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x1da>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009ec:	d26c      	bcs.n	8000ac8 <__udivmoddi4+0x2ac>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	d96a      	bls.n	8000ac8 <__udivmoddi4+0x2ac>
 80009f2:	3b02      	subs	r3, #2
 80009f4:	4464      	add	r4, ip
 80009f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009fa:	fba3 9502 	umull	r9, r5, r3, r2
 80009fe:	eba4 040e 	sub.w	r4, r4, lr
 8000a02:	42ac      	cmp	r4, r5
 8000a04:	46c8      	mov	r8, r9
 8000a06:	46ae      	mov	lr, r5
 8000a08:	d356      	bcc.n	8000ab8 <__udivmoddi4+0x29c>
 8000a0a:	d053      	beq.n	8000ab4 <__udivmoddi4+0x298>
 8000a0c:	b156      	cbz	r6, 8000a24 <__udivmoddi4+0x208>
 8000a0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a12:	eb64 040e 	sbc.w	r4, r4, lr
 8000a16:	fa04 f707 	lsl.w	r7, r4, r7
 8000a1a:	40ca      	lsrs	r2, r1
 8000a1c:	40cc      	lsrs	r4, r1
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	e9c6 7400 	strd	r7, r4, [r6]
 8000a24:	4618      	mov	r0, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2c:	f1c3 0120 	rsb	r1, r3, #32
 8000a30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a34:	fa20 f201 	lsr.w	r2, r0, r1
 8000a38:	fa25 f101 	lsr.w	r1, r5, r1
 8000a3c:	409d      	lsls	r5, r3
 8000a3e:	432a      	orrs	r2, r5
 8000a40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a50:	0c11      	lsrs	r1, r2, #16
 8000a52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a56:	fb00 f50e 	mul.w	r5, r0, lr
 8000a5a:	428d      	cmp	r5, r1
 8000a5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x258>
 8000a62:	eb1c 0101 	adds.w	r1, ip, r1
 8000a66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a6a:	d22f      	bcs.n	8000acc <__udivmoddi4+0x2b0>
 8000a6c:	428d      	cmp	r5, r1
 8000a6e:	d92d      	bls.n	8000acc <__udivmoddi4+0x2b0>
 8000a70:	3802      	subs	r0, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1b49      	subs	r1, r1, r5
 8000a76:	b292      	uxth	r2, r2
 8000a78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a84:	fb05 f10e 	mul.w	r1, r5, lr
 8000a88:	4291      	cmp	r1, r2
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x282>
 8000a8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a94:	d216      	bcs.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a96:	4291      	cmp	r1, r2
 8000a98:	d914      	bls.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a9a:	3d02      	subs	r5, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a52      	subs	r2, r2, r1
 8000aa0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aa4:	e738      	b.n	8000918 <__udivmoddi4+0xfc>
 8000aa6:	4631      	mov	r1, r6
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	e708      	b.n	80008be <__udivmoddi4+0xa2>
 8000aac:	4639      	mov	r1, r7
 8000aae:	e6e6      	b.n	800087e <__udivmoddi4+0x62>
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	e6fb      	b.n	80008ac <__udivmoddi4+0x90>
 8000ab4:	4548      	cmp	r0, r9
 8000ab6:	d2a9      	bcs.n	8000a0c <__udivmoddi4+0x1f0>
 8000ab8:	ebb9 0802 	subs.w	r8, r9, r2
 8000abc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	e7a3      	b.n	8000a0c <__udivmoddi4+0x1f0>
 8000ac4:	4645      	mov	r5, r8
 8000ac6:	e7ea      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ac8:	462b      	mov	r3, r5
 8000aca:	e794      	b.n	80009f6 <__udivmoddi4+0x1da>
 8000acc:	4640      	mov	r0, r8
 8000ace:	e7d1      	b.n	8000a74 <__udivmoddi4+0x258>
 8000ad0:	46d0      	mov	r8, sl
 8000ad2:	e77b      	b.n	80009cc <__udivmoddi4+0x1b0>
 8000ad4:	3d02      	subs	r5, #2
 8000ad6:	4462      	add	r2, ip
 8000ad8:	e732      	b.n	8000940 <__udivmoddi4+0x124>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e70a      	b.n	80008f4 <__udivmoddi4+0xd8>
 8000ade:	4464      	add	r4, ip
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	e742      	b.n	800096a <__udivmoddi4+0x14e>

08000ae4 <__aeabi_idiv0>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <vApplicationGetIdleTaskMemory+0x30>)
 8000afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	20000090 	.word	0x20000090
 8000b1c:	00000000 	.word	0x00000000

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b096      	sub	sp, #88	; 0x58
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	counter_for_steps = 0;
 8000b26:	4b62      	ldr	r3, [pc, #392]	; (8000cb0 <main+0x190>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fcd4 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f8d4 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f9f6 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b38:	f000 f930 	bl	8000d9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b3c:	f000 f9c6 	bl	8000ecc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000b40:	485c      	ldr	r0, [pc, #368]	; (8000cb4 <main+0x194>)
 8000b42:	f001 fcdd 	bl	8002500 <HAL_TIM_Base_Start_IT>
  uint16_t base = 2000;
 8000b46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b4a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  TIM3->ARR = base;
 8000b4e:	4a5a      	ldr	r2, [pc, #360]	; (8000cb8 <main+0x198>)
 8000b50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000b54:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM3->CCR1 = (uint16_t) base*0.98;
 8000b56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fdbc 	bl	80006d8 <__aeabi_i2d>
 8000b60:	a351      	add	r3, pc, #324	; (adr r3, 8000ca8 <main+0x188>)
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	f7ff fb3b 	bl	80001e0 <__aeabi_dmul>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	4c52      	ldr	r4, [pc, #328]	; (8000cb8 <main+0x198>)
 8000b70:	4610      	mov	r0, r2
 8000b72:	4619      	mov	r1, r3
 8000b74:	f7ff fe1a 	bl	80007ac <__aeabi_d2uiz>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	6363      	str	r3, [r4, #52]	; 0x34
  TIM3->CCR2 = (uint16_t) base*0.98;
 8000b7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fda9 	bl	80006d8 <__aeabi_i2d>
 8000b86:	a348      	add	r3, pc, #288	; (adr r3, 8000ca8 <main+0x188>)
 8000b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8c:	f7ff fb28 	bl	80001e0 <__aeabi_dmul>
 8000b90:	4602      	mov	r2, r0
 8000b92:	460b      	mov	r3, r1
 8000b94:	4c48      	ldr	r4, [pc, #288]	; (8000cb8 <main+0x198>)
 8000b96:	4610      	mov	r0, r2
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f7ff fe07 	bl	80007ac <__aeabi_d2uiz>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM3->CCR3 = (uint16_t) base*0.98;
 8000ba2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fd96 	bl	80006d8 <__aeabi_i2d>
 8000bac:	a33e      	add	r3, pc, #248	; (adr r3, 8000ca8 <main+0x188>)
 8000bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb2:	f7ff fb15 	bl	80001e0 <__aeabi_dmul>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4c3f      	ldr	r4, [pc, #252]	; (8000cb8 <main+0x198>)
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f7ff fdf4 	bl	80007ac <__aeabi_d2uiz>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIM3->CCR4 = (uint16_t) base*0.98;
 8000bc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fd83 	bl	80006d8 <__aeabi_i2d>
 8000bd2:	a335      	add	r3, pc, #212	; (adr r3, 8000ca8 <main+0x188>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fb02 	bl	80001e0 <__aeabi_dmul>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4c35      	ldr	r4, [pc, #212]	; (8000cb8 <main+0x198>)
 8000be2:	4610      	mov	r0, r2
 8000be4:	4619      	mov	r1, r3
 8000be6:	f7ff fde1 	bl	80007ac <__aeabi_d2uiz>
 8000bea:	4603      	mov	r3, r0
 8000bec:	6423      	str	r3, [r4, #64]	; 0x40

  USART1->CR1 |= USART_CR1_RXNEIE;
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <main+0x19c>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <main+0x19c>)
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <main+0x19c>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <main+0x19c>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <main+0x19c>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	4a2c      	ldr	r2, [pc, #176]	; (8000cbc <main+0x19c>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <main+0x19c>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <main+0x19c>)
 8000c18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c1c:	60d3      	str	r3, [r2, #12]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(10, 1);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2101      	movs	r1, #1
 8000c22:	200a      	movs	r0, #10
 8000c24:	f003 fdf4 	bl	8004810 <xQueueGenericCreate>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <main+0x1a0>)
 8000c2c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 500);
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <main+0x1a4>)
 8000c30:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c34:	461d      	mov	r5, r3
 8000c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 8000c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 fc64 	bl	8004516 <osThreadCreate>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <main+0x1a8>)
 8000c52:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 500);
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <main+0x1ac>)
 8000c56:	f107 041c 	add.w	r4, r7, #28
 8000c5a:	461d      	mov	r5, r3
 8000c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 fc51 	bl	8004516 <osThreadCreate>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <main+0x1b0>)
 8000c78:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_comunication */
  osThreadDef(UART_comunication, uart_comunication, osPriorityNormal, 0, 160);
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <main+0x1b4>)
 8000c7c:	463c      	mov	r4, r7
 8000c7e:	461d      	mov	r5, r3
 8000c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_comunicationHandle = osThreadCreate(osThread(UART_comunication), NULL);
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fc40 	bl	8004516 <osThreadCreate>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <main+0x1b8>)
 8000c9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c9c:	f003 fc34 	bl	8004508 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <main+0x180>
 8000ca2:	bf00      	nop
 8000ca4:	f3af 8000 	nop.w
 8000ca8:	f5c28f5c 	.word	0xf5c28f5c
 8000cac:	3fef5c28 	.word	0x3fef5c28
 8000cb0:	20000328 	.word	0x20000328
 8000cb4:	20000290 	.word	0x20000290
 8000cb8:	40000400 	.word	0x40000400
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	2000032c 	.word	0x2000032c
 8000cc4:	08006458 	.word	0x08006458
 8000cc8:	2000031c 	.word	0x2000031c
 8000ccc:	08006480 	.word	0x08006480
 8000cd0:	20000320 	.word	0x20000320
 8000cd4:	080064b0 	.word	0x080064b0
 8000cd8:	20000324 	.word	0x20000324

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	; 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	; 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f005 fb66 	bl	80063bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SystemClock_Config+0xb8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <SystemClock_Config+0xb8>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <SystemClock_Config+0xb8>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <SystemClock_Config+0xbc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <SystemClock_Config+0xbc>)
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <SystemClock_Config+0xbc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d44:	2310      	movs	r3, #16
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fefb 	bl	8001b4c <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d5c:	f000 f9c2 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 f95e 	bl	800203c <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d86:	f000 f9ad 	bl	80010e4 <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3750      	adds	r7, #80	; 0x50
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dcc:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000dce:	4a3e      	ldr	r2, [pc, #248]	; (8000ec8 <MX_TIM3_Init+0x12c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000dde:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df2:	4834      	ldr	r0, [pc, #208]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000df4:	f001 fb34 	bl	8002460 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dfe:	f000 f971 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	482d      	ldr	r0, [pc, #180]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e10:	f001 ff10 	bl	8002c34 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e1a:	f000 f963 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e1e:	4829      	ldr	r0, [pc, #164]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e20:	f001 fbd0 	bl	80025c4 <HAL_TIM_PWM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e2a:	f000 f95b 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e3e:	f002 fab5 	bl	80033ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e48:	f000 f94c 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4c:	2360      	movs	r3, #96	; 0x60
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 980;
 8000e50:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e66:	f001 fe23 	bl	8002ab0 <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e70:	f000 f938 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2204      	movs	r2, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e7c:	f001 fe18 	bl	8002ab0 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000e86:	f000 f92d 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000e92:	f001 fe0d 	bl	8002ab0 <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000e9c:	f000 f922 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000ea8:	f001 fe02 	bl	8002ab0 <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000eb2:	f000 f917 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <MX_TIM3_Init+0x128>)
 8000eb8:	f000 f96e 	bl	8001198 <HAL_TIM_MspPostInit>

}
 8000ebc:	bf00      	nop
 8000ebe:	3738      	adds	r7, #56	; 0x38
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000290 	.word	0x20000290
 8000ec8:	40000400 	.word	0x40000400

08000ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <MX_USART1_UART_Init+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000ed8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000eee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART1_UART_Init+0x50>)
 8000f08:	f002 fad2 	bl	80034b0 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000f12:	f000 f8e7 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002d8 	.word	0x200002d8
 8000f20:	40011000 	.word	0x40011000

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_GPIO_Init+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <MX_GPIO_Init+0x4c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <MX_GPIO_Init+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_GPIO_Init+0x4c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <MX_GPIO_Init+0x4c>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_GPIO_Init+0x4c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <uart1_rx_callback>:

/* USER CODE BEGIN 4 */

void uart1_rx_callback(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <uart1_rx_callback+0x18>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4903      	ldr	r1, [pc, #12]	; (8000f90 <uart1_rx_callback+0x1c>)
 8000f82:	f003 fc9e 	bl	80048c2 <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 8000f86:	bf00      	nop

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000032c 	.word	0x2000032c
 8000f90:	40011004 	.word	0x40011004

08000f94 <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f003 fb06 	bl	80045ae <osDelay>
    char pData;
	xQueueReceive(uart_queue_rx, &pData, 100);
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <programing_mode+0x30>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f107 010f 	add.w	r1, r7, #15
 8000faa:	2264      	movs	r2, #100	; 0x64
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fd23 	bl	80049f8 <xQueueReceive>
	HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000fb2:	f107 010f 	add.w	r1, r7, #15
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <programing_mode+0x34>)
 8000fbc:	f002 fac5 	bl	800354a <HAL_UART_Transmit>
  {
 8000fc0:	e7ec      	b.n	8000f9c <programing_mode+0x8>
 8000fc2:	bf00      	nop
 8000fc4:	2000032c 	.word	0x2000032c
 8000fc8:	200002d8 	.word	0x200002d8

08000fcc <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f003 faea 	bl	80045ae <osDelay>
 8000fda:	e7fb      	b.n	8000fd4 <interpreter+0x8>

08000fdc <uart_comunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_comunication */
void uart_comunication(void const * argument)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_comunication */
  /* Infinite loop */
  for(;;)
 8000fe4:	e7fe      	b.n	8000fe4 <uart_comunication+0x8>
	...

08000fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d101      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ffa:	f000 fa8f 	bl	800151c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a35      	ldr	r2, [pc, #212]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d162      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0xe6>
		switch (counter_for_steps) {
 8001008:	4b34      	ldr	r3, [pc, #208]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d84f      	bhi.n	80010b0 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001010:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	08001029 	.word	0x08001029
 800101c:	0800104b 	.word	0x0800104b
 8001020:	0800106d 	.word	0x0800106d
 8001024:	0800108f 	.word	0x0800108f
			case 0:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001028:	2108      	movs	r1, #8
 800102a:	482d      	ldr	r0, [pc, #180]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800102c:	f001 fbd4 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001030:	210c      	movs	r1, #12
 8001032:	482b      	ldr	r0, [pc, #172]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001034:	f001 fbd0 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001038:	2100      	movs	r1, #0
 800103a:	4829      	ldr	r0, [pc, #164]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800103c:	f001 fb1c 	bl	8002678 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001040:	2104      	movs	r1, #4
 8001042:	4827      	ldr	r0, [pc, #156]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001044:	f001 fb18 	bl	8002678 <HAL_TIM_PWM_Start>
				break;
 8001048:	e033      	b.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0xca>
			case 1:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	4824      	ldr	r0, [pc, #144]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800104e:	f001 fbc3 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001052:	210c      	movs	r1, #12
 8001054:	4822      	ldr	r0, [pc, #136]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001056:	f001 fbbf 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800105a:	2104      	movs	r1, #4
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800105e:	f001 fb0b 	bl	8002678 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001062:	2108      	movs	r1, #8
 8001064:	481e      	ldr	r0, [pc, #120]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001066:	f001 fb07 	bl	8002678 <HAL_TIM_PWM_Start>
				break;
 800106a:	e022      	b.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0xca>
			case 2:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800106c:	2100      	movs	r1, #0
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001070:	f001 fbb2 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001074:	2104      	movs	r1, #4
 8001076:	481a      	ldr	r0, [pc, #104]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001078:	f001 fbae 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800107c:	2108      	movs	r1, #8
 800107e:	4818      	ldr	r0, [pc, #96]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001080:	f001 fafa 	bl	8002678 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001084:	210c      	movs	r1, #12
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001088:	f001 faf6 	bl	8002678 <HAL_TIM_PWM_Start>
				break;
 800108c:	e011      	b.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0xca>
			case 3:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800108e:	2104      	movs	r1, #4
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001092:	f001 fba1 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001096:	2108      	movs	r1, #8
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800109a:	f001 fb9d 	bl	80027d8 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800109e:	210c      	movs	r1, #12
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010a2:	f001 fae9 	bl	8002678 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010a6:	2100      	movs	r1, #0
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010aa:	f001 fae5 	bl	8002678 <HAL_TIM_PWM_Start>
				break;
 80010ae:	e000      	b.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0xca>
			default:
				break;
 80010b0:	bf00      	nop
		}
		counter_for_steps == 3 ? counter_for_steps = 0 : counter_for_steps++;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d103      	bne.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0xda>
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 80010c0:	e005      	b.n	80010ce <HAL_TIM_PeriodElapsedCallback+0xe6>
		counter_for_steps == 3 ? counter_for_steps = 0 : counter_for_steps++;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40000400 	.word	0x40000400
 80010dc:	20000328 	.word	0x20000328
 80010e0:	20000290 	.word	0x20000290

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_MspInit+0x54>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <HAL_MspInit+0x54>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x54>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_MspInit+0x54>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_MspInit+0x54>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_MspInit+0x54>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	210f      	movs	r1, #15
 8001132:	f06f 0001 	mvn.w	r0, #1
 8001136:	f000 fac9 	bl	80016cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_TIM_Base_MspInit+0x48>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d115      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_TIM_Base_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <HAL_TIM_Base_MspInit+0x4c>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_TIM_Base_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2106      	movs	r1, #6
 800117a:	201d      	movs	r0, #29
 800117c:	f000 faa6 	bl	80016cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001180:	201d      	movs	r0, #29
 8001182:	f000 fabf 	bl	8001704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40000400 	.word	0x40000400
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <HAL_TIM_MspPostInit+0xa4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d13b      	bne.n	8001232 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_TIM_MspPostInit+0xa8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_TIM_MspPostInit+0xa8>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_TIM_MspPostInit+0xa8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_TIM_MspPostInit+0xa8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_TIM_MspPostInit+0xa8>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_TIM_MspPostInit+0xa8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f2:	23c0      	movs	r3, #192	; 0xc0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001202:	2302      	movs	r3, #2
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <HAL_TIM_MspPostInit+0xac>)
 800120e:	f000 fb19 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001212:	2303      	movs	r3, #3
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <HAL_TIM_MspPostInit+0xb0>)
 800122e:	f000 fb09 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40000400 	.word	0x40000400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_UART_MspInit+0x94>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d134      	bne.n	80012d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_UART_MspInit+0x98>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b8:	2307      	movs	r3, #7
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_UART_MspInit+0x9c>)
 80012c4:	f000 fabe 	bl	8001844 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2105      	movs	r1, #5
 80012cc:	2025      	movs	r0, #37	; 0x25
 80012ce:	f000 f9fd 	bl	80016cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d2:	2025      	movs	r0, #37	; 0x25
 80012d4:	f000 fa16 	bl	8001704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40011000 	.word	0x40011000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_InitTick+0xe8>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <HAL_InitTick+0xe8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_InitTick+0xe8>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001318:	f107 0210 	add.w	r2, r7, #16
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f86a 	bl	80023fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001332:	f001 f83b 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8001336:	6378      	str	r0, [r7, #52]	; 0x34
 8001338:	e004      	b.n	8001344 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800133a:	f001 f837 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 800133e:	4603      	mov	r3, r0
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <HAL_InitTick+0xec>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	0c9b      	lsrs	r3, r3, #18
 800134e:	3b01      	subs	r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_InitTick+0xf0>)
 8001354:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001358:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_InitTick+0xf0>)
 800135c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001360:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_InitTick+0xf0>)
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_InitTick+0xf0>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_InitTick+0xf0>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_InitTick+0xf0>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <HAL_InitTick+0xf0>)
 800137c:	f001 f870 	bl	8002460 <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <HAL_InitTick+0xf0>)
 8001390:	f001 f8b6 	bl	8002500 <HAL_TIM_Base_Start_IT>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800139a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d111      	bne.n	80013c6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a2:	201c      	movs	r0, #28
 80013a4:	f000 f9ae 	bl	8001704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	d808      	bhi.n	80013c0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80013ae:	2200      	movs	r2, #0
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	201c      	movs	r0, #28
 80013b4:	f000 f98a 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b8:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_InitTick+0xf4>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e002      	b.n	80013c6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	20000330 	.word	0x20000330
 80013e0:	20000004 	.word	0x20000004

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM2_IRQHandler+0x10>)
 8001416:	f001 fa43 	bl	80028a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000330 	.word	0x20000330

08001424 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM3_IRQHandler+0x10>)
 800142a:	f001 fa39 	bl	80028a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000290 	.word	0x20000290

08001438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <USART1_IRQHandler+0x20>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 8001448:	f7ff fd94 	bl	8000f74 <uart1_rx_callback>
		__asm__ volatile("NOP");
 800144c:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <USART1_IRQHandler+0x24>)
 8001450:	f002 f90e 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40011000 	.word	0x40011000
 800145c:	200002d8 	.word	0x200002d8

08001460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a0:	4c0b      	ldr	r4, [pc, #44]	; (80014d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ae:	f7ff ffd7 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 ff8b 	bl	80063cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fb33 	bl	8000b20 <main>
  bx  lr    
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014c8:	080064fc 	.word	0x080064fc
  ldr r2, =_sbss
 80014cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014d0:	200040d0 	.word	0x200040d0

080014d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_Init+0x40>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_Init+0x40>)
 80014ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_Init+0x40>)
 80014fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f8d8 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fef0 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff fdf0 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023c00 	.word	0x40023c00

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000008 	.word	0x20000008
 8001540:	20000378 	.word	0x20000378

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000378 	.word	0x20000378

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff4c 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016de:	f7ff ff61 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7ff ffb1 	bl	8001650 <NVIC_EncodePriority>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff80 	bl	80015fc <__NVIC_SetPriority>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff54 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800172e:	f7ff ff09 	bl	8001544 <HAL_GetTick>
 8001732:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d008      	beq.n	8001752 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e052      	b.n	80017f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0216 	bic.w	r2, r2, #22
 8001760:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001770:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <HAL_DMA_Abort+0x62>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0208 	bic.w	r2, r2, #8
 8001790:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a2:	e013      	b.n	80017cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a4:	f7ff fece 	bl	8001544 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d90c      	bls.n	80017cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e015      	b.n	80017f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1e4      	bne.n	80017a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	223f      	movs	r2, #63	; 0x3f
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d004      	beq.n	800181e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e00c      	b.n	8001838 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2205      	movs	r2, #5
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e159      	b.n	8001b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8148 	bne.w	8001b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a2 	beq.w	8001b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x202>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1fe>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1f6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1f2>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ade:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f aea2 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40013c00 	.word	0x40013c00

08001b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e267      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d075      	beq.n	8001c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6a:	4b88      	ldr	r3, [pc, #544]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d00c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b76:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d05b      	beq.n	8001c54 <HAL_RCC_OscConfig+0x108>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d157      	bne.n	8001c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e242      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x74>
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a75      	ldr	r2, [pc, #468]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e01d      	b.n	8001bfc <HAL_RCC_OscConfig+0xb0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x98>
 8001bca:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6f      	ldr	r2, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6c      	ldr	r2, [pc, #432]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0xb0>
 8001be4:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a68      	ldr	r2, [pc, #416]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fc9e 	bl	8001544 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fc9a 	bl	8001544 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e207      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0xc0>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fc8a 	bl	8001544 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fc86 	bl	8001544 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1f3      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0xe8>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d063      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c62:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d11c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_RCC_OscConfig+0x152>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e1c7      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	e03a      	b.n	8001d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_OscConfig+0x244>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fc3f 	bl	8001544 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff fc3b 	bl	8001544 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1a8      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4925      	ldr	r1, [pc, #148]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x244>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fc1e 	bl	8001544 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc1a 	bl	8001544 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e187      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d036      	beq.n	8001da4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_RCC_OscConfig+0x248>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff fbfe 	bl	8001544 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fbfa 	bl	8001544 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e167      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_OscConfig+0x240>)
 8001d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x200>
 8001d6a:	e01b      	b.n	8001da4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_OscConfig+0x248>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fbe7 	bl	8001544 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	e00e      	b.n	8001d98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fbe3 	bl	8001544 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d907      	bls.n	8001d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e150      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	42470000 	.word	0x42470000
 8001d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ea      	bne.n	8001d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8097 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a7c      	ldr	r2, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b74      	ldr	r3, [pc, #464]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a73      	ldr	r2, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fba3 	bl	8001544 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7ff fb9f 	bl	8001544 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e10c      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_OscConfig+0x474>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x2ea>
 8001e28:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a63      	ldr	r2, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	e01c      	b.n	8001e70 <HAL_RCC_OscConfig+0x324>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x30c>
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a5b      	ldr	r2, [pc, #364]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0x324>
 8001e58:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4a54      	ldr	r2, [pc, #336]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e6a:	f023 0304 	bic.w	r3, r3, #4
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d015      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff fb64 	bl	8001544 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff fb60 	bl	8001544 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0cb      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0ee      	beq.n	8001e80 <HAL_RCC_OscConfig+0x334>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fb4e 	bl	8001544 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7ff fb4a 	bl	8001544 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0b5      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ee      	bne.n	8001eac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a38      	ldr	r2, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a1 	beq.w	800202c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d05c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d141      	bne.n	8001f82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_RCC_OscConfig+0x478>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb1e 	bl	8001544 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff fb1a 	bl	8001544 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e087      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	019b      	lsls	r3, r3, #6
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	041b      	lsls	r3, r3, #16
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	491b      	ldr	r1, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x478>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff faf3 	bl	8001544 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff faef 	bl	8001544 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e05c      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x416>
 8001f80:	e054      	b.n	800202c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_RCC_OscConfig+0x478>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fadc 	bl	8001544 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff fad8 	bl	8001544 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e045      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x470>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x444>
 8001fae:	e03d      	b.n	800202c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e038      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x4ec>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d028      	beq.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d121      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d11a      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002000:	4293      	cmp	r3, r2
 8002002:	d111      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	3b01      	subs	r3, #1
 8002012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0cc      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d90c      	bls.n	8002078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d044      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d119      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e067      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4934      	ldr	r1, [pc, #208]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7ff fa0a 	bl	8001544 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7ff fa06 	bl	8001544 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e04f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d20c      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 f821 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	490a      	ldr	r1, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f882 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00
 80021f8:	40023800 	.word	0x40023800
 80021fc:	080064d4 	.word	0x080064d4
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800220c:	b090      	sub	sp, #64	; 0x40
 800220e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
 8002214:	2300      	movs	r3, #0
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_GetSysClockFreq+0x180>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d00d      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x40>
 800222c:	2b08      	cmp	r3, #8
 800222e:	f200 80a1 	bhi.w	8002374 <HAL_RCC_GetSysClockFreq+0x16c>
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x34>
 8002236:	2b04      	cmp	r3, #4
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x3a>
 800223a:	e09b      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_GetSysClockFreq+0x184>)
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002240:	e09b      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002242:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_RCC_GetSysClockFreq+0x188>)
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002246:	e098      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002248:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002252:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_RCC_GetSysClockFreq+0x180>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d028      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225e:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_RCC_GetSysClockFreq+0x180>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	2200      	movs	r2, #0
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	627a      	str	r2, [r7, #36]	; 0x24
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002270:	2100      	movs	r1, #0
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_RCC_GetSysClockFreq+0x188>)
 8002274:	fb03 f201 	mul.w	r2, r3, r1
 8002278:	2300      	movs	r3, #0
 800227a:	fb00 f303 	mul.w	r3, r0, r3
 800227e:	4413      	add	r3, r2
 8002280:	4a43      	ldr	r2, [pc, #268]	; (8002390 <HAL_RCC_GetSysClockFreq+0x188>)
 8002282:	fba0 1202 	umull	r1, r2, r0, r2
 8002286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002288:	460a      	mov	r2, r1
 800228a:	62ba      	str	r2, [r7, #40]	; 0x28
 800228c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228e:	4413      	add	r3, r2
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	2200      	movs	r2, #0
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	61fa      	str	r2, [r7, #28]
 800229a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800229e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022a2:	f7fe faa3 	bl	80007ec <__aeabi_uldivmod>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4613      	mov	r3, r2
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ae:	e053      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	4b35      	ldr	r3, [pc, #212]	; (8002388 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	2200      	movs	r2, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	617a      	str	r2, [r7, #20]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022c2:	f04f 0b00 	mov.w	fp, #0
 80022c6:	4652      	mov	r2, sl
 80022c8:	465b      	mov	r3, fp
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	0159      	lsls	r1, r3, #5
 80022d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d8:	0150      	lsls	r0, r2, #5
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	ebb2 080a 	subs.w	r8, r2, sl
 80022e2:	eb63 090b 	sbc.w	r9, r3, fp
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022fa:	ebb2 0408 	subs.w	r4, r2, r8
 80022fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	00eb      	lsls	r3, r5, #3
 800230c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002310:	00e2      	lsls	r2, r4, #3
 8002312:	4614      	mov	r4, r2
 8002314:	461d      	mov	r5, r3
 8002316:	eb14 030a 	adds.w	r3, r4, sl
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	eb45 030b 	adc.w	r3, r5, fp
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800232e:	4629      	mov	r1, r5
 8002330:	028b      	lsls	r3, r1, #10
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002338:	4621      	mov	r1, r4
 800233a:	028a      	lsls	r2, r1, #10
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	2200      	movs	r2, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	60fa      	str	r2, [r7, #12]
 8002348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800234c:	f7fe fa4e 	bl	80007ec <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4613      	mov	r3, r2
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_GetSysClockFreq+0x180>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	3301      	adds	r3, #1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetSysClockFreq+0x184>)
 8002376:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800237c:	4618      	mov	r0, r3
 800237e:	3740      	adds	r7, #64	; 0x40
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	00f42400 	.word	0x00f42400
 8002390:	017d7840 	.word	0x017d7840

08002394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023b0:	f7ff fff0 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0a9b      	lsrs	r3, r3, #10
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	080064e4 	.word	0x080064e4

080023d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023d8:	f7ff ffdc 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0b5b      	lsrs	r3, r3, #13
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	080064e4 	.word	0x080064e4

080023fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	220f      	movs	r2, #15
 800240a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_RCC_GetClockConfig+0x60>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0207 	and.w	r2, r3, #7
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40023c00 	.word	0x40023c00

08002460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e041      	b.n	80024f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fe5e 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 fcb8 	bl	8002e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d001      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e044      	b.n	80025a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002542:	d013      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_TIM_Base_Start_IT+0xbc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d010      	beq.n	80025a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	e007      	b.n	80025a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	40014000 	.word	0x40014000

080025c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e041      	b.n	800265a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f839 	bl	8002662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f000 fc06 	bl	8002e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_TIM_PWM_Start+0x24>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e022      	b.n	80026e2 <HAL_TIM_PWM_Start+0x6a>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d109      	bne.n	80026b6 <HAL_TIM_PWM_Start+0x3e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	e015      	b.n	80026e2 <HAL_TIM_PWM_Start+0x6a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d109      	bne.n	80026d0 <HAL_TIM_PWM_Start+0x58>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e008      	b.n	80026e2 <HAL_TIM_PWM_Start+0x6a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	bf14      	ite	ne
 80026dc:	2301      	movne	r3, #1
 80026de:	2300      	moveq	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e068      	b.n	80027bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_PWM_Start+0x82>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f8:	e013      	b.n	8002722 <HAL_TIM_PWM_Start+0xaa>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0x92>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002708:	e00b      	b.n	8002722 <HAL_TIM_PWM_Start+0xaa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0xa2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002718:	e003      	b.n	8002722 <HAL_TIM_PWM_Start+0xaa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2201      	movs	r2, #1
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fe18 	bl	8003360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <HAL_TIM_PWM_Start+0x14c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d107      	bne.n	800274a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_TIM_PWM_Start+0x14c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d018      	beq.n	8002786 <HAL_TIM_PWM_Start+0x10e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d013      	beq.n	8002786 <HAL_TIM_PWM_Start+0x10e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_TIM_PWM_Start+0x150>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_TIM_PWM_Start+0x10e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_TIM_PWM_Start+0x154>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_TIM_PWM_Start+0x10e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_TIM_PWM_Start+0x158>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIM_PWM_Start+0x10e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIM_PWM_Start+0x15c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d111      	bne.n	80027aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d010      	beq.n	80027ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a8:	e007      	b.n	80027ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40010000 	.word	0x40010000
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40000800 	.word	0x40000800
 80027d0:	40000c00 	.word	0x40000c00
 80027d4:	40014000 	.word	0x40014000

080027d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fdb8 	bl	8003360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_TIM_PWM_Stop+0xc4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d117      	bne.n	800282a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	f241 1311 	movw	r3, #4369	; 0x1111
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <HAL_TIM_PWM_Stop+0x52>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	f240 4344 	movw	r3, #1092	; 0x444
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <HAL_TIM_PWM_Stop+0x52>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	f241 1311 	movw	r3, #4369	; 0x1111
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_TIM_PWM_Stop+0x82>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	f240 4344 	movw	r3, #1092	; 0x444
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d107      	bne.n	800285a <HAL_TIM_PWM_Stop+0x82>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_TIM_PWM_Stop+0x92>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	e013      	b.n	8002892 <HAL_TIM_PWM_Stop+0xba>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d104      	bne.n	800287a <HAL_TIM_PWM_Stop+0xa2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	e00b      	b.n	8002892 <HAL_TIM_PWM_Stop+0xba>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d104      	bne.n	800288a <HAL_TIM_PWM_Stop+0xb2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	e003      	b.n	8002892 <HAL_TIM_PWM_Stop+0xba>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40010000 	.word	0x40010000

080028a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d122      	bne.n	80028fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d11b      	bne.n	80028fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0202 	mvn.w	r2, #2
 80028cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa77 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa69 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fa7a 	bl	8002dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b04      	cmp	r3, #4
 8002908:	d122      	bne.n	8002950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0204 	mvn.w	r2, #4
 8002920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa4d 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa3f 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fa50 	bl	8002dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b08      	cmp	r3, #8
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0208 	mvn.w	r2, #8
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2204      	movs	r2, #4
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa23 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa15 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fa26 	bl	8002dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0210 	mvn.w	r2, #16
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2208      	movs	r2, #8
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9f9 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9eb 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f9fc 	bl	8002dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d10e      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0201 	mvn.w	r2, #1
 8002a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fae2 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b80      	cmp	r3, #128	; 0x80
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d107      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fd26 	bl	800349c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d107      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9c1 	bl	8002dfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0220 	mvn.w	r2, #32
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fcf0 	bl	8003488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0ae      	b.n	8002c2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	f200 809f 	bhi.w	8002c1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002c1d 	.word	0x08002c1d
 8002aec:	08002c1d 	.word	0x08002c1d
 8002af0:	08002c1d 	.word	0x08002c1d
 8002af4:	08002b59 	.word	0x08002b59
 8002af8:	08002c1d 	.word	0x08002c1d
 8002afc:	08002c1d 	.word	0x08002c1d
 8002b00:	08002c1d 	.word	0x08002c1d
 8002b04:	08002b9b 	.word	0x08002b9b
 8002b08:	08002c1d 	.word	0x08002c1d
 8002b0c:	08002c1d 	.word	0x08002c1d
 8002b10:	08002c1d 	.word	0x08002c1d
 8002b14:	08002bdb 	.word	0x08002bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f9f8 	bl	8002f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6999      	ldr	r1, [r3, #24]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	619a      	str	r2, [r3, #24]
      break;
 8002b56:	e064      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fa3e 	bl	8002fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	021a      	lsls	r2, r3, #8
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	619a      	str	r2, [r3, #24]
      break;
 8002b98:	e043      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fa89 	bl	80030b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0208 	orr.w	r2, r2, #8
 8002bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0204 	bic.w	r2, r2, #4
 8002bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]
      break;
 8002bd8:	e023      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fad3 	bl	800318c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69d9      	ldr	r1, [r3, #28]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	021a      	lsls	r2, r3, #8
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	61da      	str	r2, [r3, #28]
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIM_ConfigClockSource+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0b4      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x186>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c88:	d03e      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0xd4>
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8e:	f200 8087 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c96:	f000 8086 	beq.w	8002da6 <HAL_TIM_ConfigClockSource+0x172>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d87f      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d01a      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0xa6>
 8002ca4:	2b70      	cmp	r3, #112	; 0x70
 8002ca6:	d87b      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b60      	cmp	r3, #96	; 0x60
 8002caa:	d050      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x11a>
 8002cac:	2b60      	cmp	r3, #96	; 0x60
 8002cae:	d877      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d03c      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0xfa>
 8002cb4:	2b50      	cmp	r3, #80	; 0x50
 8002cb6:	d873      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d058      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x13a>
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d86f      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b30      	cmp	r3, #48	; 0x30
 8002cc2:	d064      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002cc4:	2b30      	cmp	r3, #48	; 0x30
 8002cc6:	d86b      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d060      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d867      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05c      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d05a      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	e062      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f000 fb19 	bl	8003320 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	609a      	str	r2, [r3, #8]
      break;
 8002d06:	e04f      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6899      	ldr	r1, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f000 fb02 	bl	8003320 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2a:	609a      	str	r2, [r3, #8]
      break;
 8002d2c:	e03c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 fa76 	bl	800322c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2150      	movs	r1, #80	; 0x50
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 facf 	bl	80032ea <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e02c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 fa95 	bl	800328a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2160      	movs	r1, #96	; 0x60
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fabf 	bl	80032ea <TIM_ITRx_SetConfig>
      break;
 8002d6c:	e01c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f000 fa56 	bl	800322c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2140      	movs	r1, #64	; 0x40
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 faaf 	bl	80032ea <TIM_ITRx_SetConfig>
      break;
 8002d8c:	e00c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f000 faa6 	bl	80032ea <TIM_ITRx_SetConfig>
      break;
 8002d9e:	e003      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e000      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <TIM_Base_SetConfig+0xe4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00f      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e32:	d00b      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a31      	ldr	r2, [pc, #196]	; (8002efc <TIM_Base_SetConfig+0xe8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <TIM_Base_SetConfig+0xec>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <TIM_Base_SetConfig+0xf0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <TIM_Base_SetConfig+0xe4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01b      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6c:	d017      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a22      	ldr	r2, [pc, #136]	; (8002efc <TIM_Base_SetConfig+0xe8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <TIM_Base_SetConfig+0xec>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00f      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <TIM_Base_SetConfig+0xf0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <TIM_Base_SetConfig+0xf4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <TIM_Base_SetConfig+0xf8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <TIM_Base_SetConfig+0xfc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d108      	bne.n	8002eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <TIM_Base_SetConfig+0xe4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d103      	bne.n	8002ee4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	615a      	str	r2, [r3, #20]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800
 8002f04:	40000c00 	.word	0x40000c00
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40014400 	.word	0x40014400
 8002f10:	40014800 	.word	0x40014800

08002f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0303 	bic.w	r3, r3, #3
 8002f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 0302 	bic.w	r3, r3, #2
 8002f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	; (8002fdc <TIM_OC1_SetConfig+0xc8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10c      	bne.n	8002f8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0308 	bic.w	r3, r3, #8
 8002f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <TIM_OC1_SetConfig+0xc8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d111      	bne.n	8002fb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40010000 	.word	0x40010000

08002fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0210 	bic.w	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0320 	bic.w	r3, r3, #32
 800302a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <TIM_OC2_SetConfig+0xd4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10d      	bne.n	800305c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <TIM_OC2_SetConfig+0xd4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d113      	bne.n	800308c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800306a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000

080030b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <TIM_OC3_SetConfig+0xd0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10d      	bne.n	8003132 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800311c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <TIM_OC3_SetConfig+0xd0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d113      	bne.n	8003162 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	621a      	str	r2, [r3, #32]
}
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40010000 	.word	0x40010000

0800318c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	031b      	lsls	r3, r3, #12
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <TIM_OC4_SetConfig+0x9c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d109      	bne.n	8003200 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	019b      	lsls	r3, r3, #6
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	621a      	str	r2, [r3, #32]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40010000 	.word	0x40010000

0800322c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0201 	bic.w	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f023 030a 	bic.w	r3, r3, #10
 8003268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800328a:	b480      	push	{r7}
 800328c:	b087      	sub	sp, #28
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0210 	bic.w	r2, r3, #16
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	031b      	lsls	r3, r3, #12
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	f043 0307 	orr.w	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	021a      	lsls	r2, r3, #8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	431a      	orrs	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	609a      	str	r2, [r3, #8]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2201      	movs	r2, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1a      	ldr	r2, [r3, #32]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	621a      	str	r2, [r3, #32]
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e050      	b.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d013      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10c      	bne.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40014000 	.word	0x40014000

08003488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03f      	b.n	8003542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd feb8 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fd7b 	bl	8003ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b08a      	sub	sp, #40	; 0x28
 800354e:	af02      	add	r7, sp, #8
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	d17c      	bne.n	8003664 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_UART_Transmit+0x2c>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e075      	b.n	8003666 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_UART_Transmit+0x3e>
 8003584:	2302      	movs	r3, #2
 8003586:	e06e      	b.n	8003666 <HAL_UART_Transmit+0x11c>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2221      	movs	r2, #33	; 0x21
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359e:	f7fd ffd1 	bl	8001544 <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d108      	bne.n	80035cc <HAL_UART_Transmit+0x82>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e003      	b.n	80035d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035dc:	e02a      	b.n	8003634 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 faf9 	bl	8003be0 <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e036      	b.n	8003666 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	3302      	adds	r3, #2
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	e007      	b.n	8003626 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1cf      	bne.n	80035de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fac9 	bl	8003be0 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e006      	b.n	8003666 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0ba      	sub	sp, #232	; 0xe8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_UART_IRQHandler+0x66>
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fbd3 	bl	8003e7a <UART_Receive_IT>
      return;
 80036d4:	e256      	b.n	8003b84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80de 	beq.w	800389c <HAL_UART_IRQHandler+0x22c>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80d1 	beq.w	800389c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_UART_IRQHandler+0xae>
 8003706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_UART_IRQHandler+0xd2>
 800372a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xf6>
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0204 	orr.w	r2, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d011      	beq.n	8003796 <HAL_UART_IRQHandler+0x126>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800377e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f043 0208 	orr.w	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 81ed 	beq.w	8003b7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_UART_IRQHandler+0x14e>
 80037ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb5e 	bl	8003e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_UART_IRQHandler+0x17a>
 80037e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d04f      	beq.n	800388a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa66 	bl	8003cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d141      	bne.n	8003882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800382a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800382e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1d9      	bne.n	80037fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	2b00      	cmp	r3, #0
 8003850:	d013      	beq.n	800387a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	4a7d      	ldr	r2, [pc, #500]	; (8003a4c <HAL_UART_IRQHandler+0x3dc>)
 8003858:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd ffce 	bl	8001800 <HAL_DMA_Abort_IT>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003874:	4610      	mov	r0, r2
 8003876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	e00e      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f99a 	bl	8003bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	e00a      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f996 	bl	8003bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e006      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f992 	bl	8003bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003896:	e170      	b.n	8003b7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	bf00      	nop
    return;
 800389a:	e16e      	b.n	8003b7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	f040 814a 	bne.w	8003b3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8143 	beq.w	8003b3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 813c 	beq.w	8003b3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	f040 80b4 	bne.w	8003a50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8140 	beq.w	8003b7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003906:	429a      	cmp	r2, r3
 8003908:	f080 8139 	bcs.w	8003b7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003912:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	f000 8088 	beq.w	8003a32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800393c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800394e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800395a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1d9      	bne.n	8003922 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800397e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003992:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003996:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800399a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e1      	bne.n	800396e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e3      	bne.n	80039aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a02:	f023 0310 	bic.w	r3, r3, #16
 8003a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a14:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e3      	bne.n	80039f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd fe77 	bl	8001720 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8c0 	bl	8003bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a48:	e099      	b.n	8003b7e <HAL_UART_IRQHandler+0x50e>
 8003a4a:	bf00      	nop
 8003a4c:	08003d83 	.word	0x08003d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 808b 	beq.w	8003b82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8086 	beq.w	8003b82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a9a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e3      	bne.n	8003a76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3314      	adds	r3, #20
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	623b      	str	r3, [r7, #32]
   return(result);
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3314      	adds	r3, #20
 8003ace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ad2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e3      	bne.n	8003aae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0310 	bic.w	r3, r3, #16
 8003b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	330c      	adds	r3, #12
 8003b14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b18:	61fa      	str	r2, [r7, #28]
 8003b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	69b9      	ldr	r1, [r7, #24]
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	617b      	str	r3, [r7, #20]
   return(result);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e3      	bne.n	8003af4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f848 	bl	8003bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b38:	e023      	b.n	8003b82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_UART_IRQHandler+0x4ea>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f929 	bl	8003daa <UART_Transmit_IT>
    return;
 8003b58:	e014      	b.n	8003b84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <HAL_UART_IRQHandler+0x514>
 8003b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f969 	bl	8003e4a <UART_EndTransmit_IT>
    return;
 8003b78:	e004      	b.n	8003b84 <HAL_UART_IRQHandler+0x514>
    return;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <HAL_UART_IRQHandler+0x514>
      return;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <HAL_UART_IRQHandler+0x514>
      return;
 8003b82:	bf00      	nop
  }
}
 8003b84:	37e8      	adds	r7, #232	; 0xe8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop

08003b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b090      	sub	sp, #64	; 0x40
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf0:	e050      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d04c      	beq.n	8003c94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c00:	f7fd fca0 	bl	8001544 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d241      	bcs.n	8003c94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c30:	637a      	str	r2, [r7, #52]	; 0x34
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e5      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	613b      	str	r3, [r7, #16]
   return(result);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c64:	623a      	str	r2, [r7, #32]
 8003c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	69f9      	ldr	r1, [r7, #28]
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e00f      	b.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d09f      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3740      	adds	r7, #64	; 0x40
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b095      	sub	sp, #84	; 0x54
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d119      	bne.n	8003d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d54:	61ba      	str	r2, [r7, #24]
 8003d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6979      	ldr	r1, [r7, #20]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d76:	bf00      	nop
 8003d78:	3754      	adds	r7, #84	; 0x54
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff ff09 	bl	8003bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b21      	cmp	r3, #33	; 0x21
 8003dbc:	d13e      	bne.n	8003e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d114      	bne.n	8003df2 <UART_Transmit_IT+0x48>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d110      	bne.n	8003df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	621a      	str	r2, [r3, #32]
 8003df0:	e008      	b.n	8003e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6211      	str	r1, [r2, #32]
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fe8e 	bl	8003b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b08c      	sub	sp, #48	; 0x30
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b22      	cmp	r3, #34	; 0x22
 8003e8c:	f040 80ab 	bne.w	8003fe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d117      	bne.n	8003eca <UART_Receive_IT+0x50>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d113      	bne.n	8003eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec8:	e026      	b.n	8003f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	d007      	beq.n	8003eee <UART_Receive_IT+0x74>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <UART_Receive_IT+0x82>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	e008      	b.n	8003f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4619      	mov	r1, r3
 8003f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d15a      	bne.n	8003fe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0220 	bic.w	r2, r2, #32
 8003f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d135      	bne.n	8003fd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	623a      	str	r2, [r7, #32]
 8003f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	69f9      	ldr	r1, [r7, #28]
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d10a      	bne.n	8003fca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fdf9 	bl	8003bc8 <HAL_UARTEx_RxEventCallback>
 8003fd6:	e002      	b.n	8003fde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fde1 	bl	8003ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e002      	b.n	8003fe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3730      	adds	r7, #48	; 0x30
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b0c0      	sub	sp, #256	; 0x100
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	68d9      	ldr	r1, [r3, #12]
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	ea40 0301 	orr.w	r3, r0, r1
 8004018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	431a      	orrs	r2, r3
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	431a      	orrs	r2, r3
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004048:	f021 010c 	bic.w	r1, r1, #12
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004056:	430b      	orrs	r3, r1
 8004058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	6999      	ldr	r1, [r3, #24]
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	ea40 0301 	orr.w	r3, r0, r1
 8004076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b8f      	ldr	r3, [pc, #572]	; (80042bc <UART_SetConfig+0x2cc>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d005      	beq.n	8004090 <UART_SetConfig+0xa0>
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b8d      	ldr	r3, [pc, #564]	; (80042c0 <UART_SetConfig+0x2d0>)
 800408c:	429a      	cmp	r2, r3
 800408e:	d104      	bne.n	800409a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004090:	f7fe f9a0 	bl	80023d4 <HAL_RCC_GetPCLK2Freq>
 8004094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004098:	e003      	b.n	80040a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800409a:	f7fe f987 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 800409e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ac:	f040 810c 	bne.w	80042c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ca:	415b      	adcs	r3, r3
 80040cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040d2:	4621      	mov	r1, r4
 80040d4:	eb12 0801 	adds.w	r8, r2, r1
 80040d8:	4629      	mov	r1, r5
 80040da:	eb43 0901 	adc.w	r9, r3, r1
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040f2:	4690      	mov	r8, r2
 80040f4:	4699      	mov	r9, r3
 80040f6:	4623      	mov	r3, r4
 80040f8:	eb18 0303 	adds.w	r3, r8, r3
 80040fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004100:	462b      	mov	r3, r5
 8004102:	eb49 0303 	adc.w	r3, r9, r3
 8004106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800411a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800411e:	460b      	mov	r3, r1
 8004120:	18db      	adds	r3, r3, r3
 8004122:	653b      	str	r3, [r7, #80]	; 0x50
 8004124:	4613      	mov	r3, r2
 8004126:	eb42 0303 	adc.w	r3, r2, r3
 800412a:	657b      	str	r3, [r7, #84]	; 0x54
 800412c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004134:	f7fc fb5a 	bl	80007ec <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <UART_SetConfig+0x2d4>)
 800413e:	fba3 2302 	umull	r2, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	011c      	lsls	r4, r3, #4
 8004146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004158:	4642      	mov	r2, r8
 800415a:	464b      	mov	r3, r9
 800415c:	1891      	adds	r1, r2, r2
 800415e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004160:	415b      	adcs	r3, r3
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004168:	4641      	mov	r1, r8
 800416a:	eb12 0a01 	adds.w	sl, r2, r1
 800416e:	4649      	mov	r1, r9
 8004170:	eb43 0b01 	adc.w	fp, r3, r1
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004188:	4692      	mov	sl, r2
 800418a:	469b      	mov	fp, r3
 800418c:	4643      	mov	r3, r8
 800418e:	eb1a 0303 	adds.w	r3, sl, r3
 8004192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004196:	464b      	mov	r3, r9
 8004198:	eb4b 0303 	adc.w	r3, fp, r3
 800419c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041b4:	460b      	mov	r3, r1
 80041b6:	18db      	adds	r3, r3, r3
 80041b8:	643b      	str	r3, [r7, #64]	; 0x40
 80041ba:	4613      	mov	r3, r2
 80041bc:	eb42 0303 	adc.w	r3, r2, r3
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
 80041c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ca:	f7fc fb0f 	bl	80007ec <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <UART_SetConfig+0x2d4>)
 80041d6:	fba3 2301 	umull	r2, r3, r3, r1
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2264      	movs	r2, #100	; 0x64
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	1acb      	subs	r3, r1, r3
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ea:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <UART_SetConfig+0x2d4>)
 80041ec:	fba3 2302 	umull	r2, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041f8:	441c      	add	r4, r3
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	63b9      	str	r1, [r7, #56]	; 0x38
 8004214:	415b      	adcs	r3, r3
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800421c:	4641      	mov	r1, r8
 800421e:	1851      	adds	r1, r2, r1
 8004220:	6339      	str	r1, [r7, #48]	; 0x30
 8004222:	4649      	mov	r1, r9
 8004224:	414b      	adcs	r3, r1
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004234:	4659      	mov	r1, fp
 8004236:	00cb      	lsls	r3, r1, #3
 8004238:	4651      	mov	r1, sl
 800423a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423e:	4651      	mov	r1, sl
 8004240:	00ca      	lsls	r2, r1, #3
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	4603      	mov	r3, r0
 8004248:	4642      	mov	r2, r8
 800424a:	189b      	adds	r3, r3, r2
 800424c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004250:	464b      	mov	r3, r9
 8004252:	460a      	mov	r2, r1
 8004254:	eb42 0303 	adc.w	r3, r2, r3
 8004258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800426c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004270:	460b      	mov	r3, r1
 8004272:	18db      	adds	r3, r3, r3
 8004274:	62bb      	str	r3, [r7, #40]	; 0x28
 8004276:	4613      	mov	r3, r2
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004286:	f7fc fab1 	bl	80007ec <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <UART_SetConfig+0x2d4>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <UART_SetConfig+0x2d4>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 0207 	and.w	r2, r3, #7
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4422      	add	r2, r4
 80042b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042b8:	e106      	b.n	80044c8 <UART_SetConfig+0x4d8>
 80042ba:	bf00      	nop
 80042bc:	40011000 	.word	0x40011000
 80042c0:	40011400 	.word	0x40011400
 80042c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042da:	4642      	mov	r2, r8
 80042dc:	464b      	mov	r3, r9
 80042de:	1891      	adds	r1, r2, r2
 80042e0:	6239      	str	r1, [r7, #32]
 80042e2:	415b      	adcs	r3, r3
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ea:	4641      	mov	r1, r8
 80042ec:	1854      	adds	r4, r2, r1
 80042ee:	4649      	mov	r1, r9
 80042f0:	eb43 0501 	adc.w	r5, r3, r1
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	00eb      	lsls	r3, r5, #3
 80042fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004302:	00e2      	lsls	r2, r4, #3
 8004304:	4614      	mov	r4, r2
 8004306:	461d      	mov	r5, r3
 8004308:	4643      	mov	r3, r8
 800430a:	18e3      	adds	r3, r4, r3
 800430c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004310:	464b      	mov	r3, r9
 8004312:	eb45 0303 	adc.w	r3, r5, r3
 8004316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004336:	4629      	mov	r1, r5
 8004338:	008b      	lsls	r3, r1, #2
 800433a:	4621      	mov	r1, r4
 800433c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004340:	4621      	mov	r1, r4
 8004342:	008a      	lsls	r2, r1, #2
 8004344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004348:	f7fc fa50 	bl	80007ec <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b60      	ldr	r3, [pc, #384]	; (80044d4 <UART_SetConfig+0x4e4>)
 8004352:	fba3 2302 	umull	r2, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	011c      	lsls	r4, r3, #4
 800435a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	61b9      	str	r1, [r7, #24]
 8004374:	415b      	adcs	r3, r3
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437c:	4641      	mov	r1, r8
 800437e:	1851      	adds	r1, r2, r1
 8004380:	6139      	str	r1, [r7, #16]
 8004382:	4649      	mov	r1, r9
 8004384:	414b      	adcs	r3, r1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004394:	4659      	mov	r1, fp
 8004396:	00cb      	lsls	r3, r1, #3
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439e:	4651      	mov	r1, sl
 80043a0:	00ca      	lsls	r2, r1, #3
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	4642      	mov	r2, r8
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043b0:	464b      	mov	r3, r9
 80043b2:	460a      	mov	r2, r1
 80043b4:	eb42 0303 	adc.w	r3, r2, r3
 80043b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043d4:	4649      	mov	r1, r9
 80043d6:	008b      	lsls	r3, r1, #2
 80043d8:	4641      	mov	r1, r8
 80043da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043de:	4641      	mov	r1, r8
 80043e0:	008a      	lsls	r2, r1, #2
 80043e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043e6:	f7fc fa01 	bl	80007ec <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <UART_SetConfig+0x4e4>)
 80043f2:	fba3 2301 	umull	r2, r3, r3, r1
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2264      	movs	r2, #100	; 0x64
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	1acb      	subs	r3, r1, r3
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	3332      	adds	r3, #50	; 0x32
 8004404:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <UART_SetConfig+0x4e4>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004410:	441c      	add	r4, r3
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	673b      	str	r3, [r7, #112]	; 0x70
 800441a:	677a      	str	r2, [r7, #116]	; 0x74
 800441c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	415b      	adcs	r3, r3
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	6039      	str	r1, [r7, #0]
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68
 8004462:	464b      	mov	r3, r9
 8004464:	460a      	mov	r2, r1
 8004466:	eb42 0303 	adc.w	r3, r2, r3
 800446a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	663b      	str	r3, [r7, #96]	; 0x60
 8004476:	667a      	str	r2, [r7, #100]	; 0x64
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004484:	4649      	mov	r1, r9
 8004486:	008b      	lsls	r3, r1, #2
 8004488:	4641      	mov	r1, r8
 800448a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448e:	4641      	mov	r1, r8
 8004490:	008a      	lsls	r2, r1, #2
 8004492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004496:	f7fc f9a9 	bl	80007ec <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <UART_SetConfig+0x4e4>)
 80044a0:	fba3 1302 	umull	r1, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	2164      	movs	r1, #100	; 0x64
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	3332      	adds	r3, #50	; 0x32
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <UART_SetConfig+0x4e4>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4422      	add	r2, r4
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	bf00      	nop
 80044ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044ce:	46bd      	mov	sp, r7
 80044d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d4:	51eb851f 	.word	0x51eb851f

080044d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ea:	2b84      	cmp	r3, #132	; 0x84
 80044ec:	d005      	beq.n	80044fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	3303      	adds	r3, #3
 80044f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800450c:	f000 fe14 	bl	8005138 <vTaskStartScheduler>
  
  return osOK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	bd80      	pop	{r7, pc}

08004516 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004518:	b089      	sub	sp, #36	; 0x24
 800451a:	af04      	add	r7, sp, #16
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <osThreadCreate+0x54>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01c      	beq.n	800456a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685c      	ldr	r4, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691e      	ldr	r6, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff ffc8 	bl	80044d8 <makeFreeRtosPriority>
 8004548:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004552:	9202      	str	r2, [sp, #8]
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	9100      	str	r1, [sp, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4632      	mov	r2, r6
 800455c:	4629      	mov	r1, r5
 800455e:	4620      	mov	r0, r4
 8004560:	f000 fc22 	bl	8004da8 <xTaskCreateStatic>
 8004564:	4603      	mov	r3, r0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e01c      	b.n	80045a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685c      	ldr	r4, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004576:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ffaa 	bl	80044d8 <makeFreeRtosPriority>
 8004584:	4602      	mov	r2, r0
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	9200      	str	r2, [sp, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	4632      	mov	r2, r6
 8004592:	4629      	mov	r1, r5
 8004594:	4620      	mov	r0, r4
 8004596:	f000 fc64 	bl	8004e62 <xTaskCreate>
 800459a:	4603      	mov	r3, r0
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045a4:	68fb      	ldr	r3, [r7, #12]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <osDelay+0x16>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	e000      	b.n	80045c6 <osDelay+0x18>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fd82 	bl	80050d0 <vTaskDelay>
  
  return osOK;
 80045cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f103 0208 	add.w	r2, r3, #8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f103 0208 	add.w	r2, r3, #8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f103 0208 	add.w	r2, r3, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	601a      	str	r2, [r3, #0]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d103      	bne.n	8004698 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e00c      	b.n	80046b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3308      	adds	r3, #8
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e002      	b.n	80046a6 <vListInsert+0x2e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d2f6      	bcs.n	80046a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6892      	ldr	r2, [r2, #8]
 8004700:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6852      	ldr	r2, [r2, #4]
 800470a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d103      	bne.n	800471e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	1e5a      	subs	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800476a:	f001 fb1b 	bl	8005da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	441a      	add	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	3b01      	subs	r3, #1
 800479c:	68f9      	ldr	r1, [r7, #12]
 800479e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d114      	bne.n	80047ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3310      	adds	r3, #16
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fef5 	bl	80055bc <xTaskRemoveFromEventList>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <xQueueGenericReset+0xcc>)
 80047da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	e009      	b.n	80047fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3310      	adds	r3, #16
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fef1 	bl	80045d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3324      	adds	r3, #36	; 0x24
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff feec 	bl	80045d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047fe:	f001 fb01 	bl	8005e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004802:	2301      	movs	r3, #1
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	; 0x28
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	613b      	str	r3, [r7, #16]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	3348      	adds	r3, #72	; 0x48
 8004848:	4618      	mov	r0, r3
 800484a:	f001 fbcd 	bl	8005fe8 <pvPortMalloc>
 800484e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d011      	beq.n	800487a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3348      	adds	r3, #72	; 0x48
 800485e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004868:	79fa      	ldrb	r2, [r7, #7]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f805 	bl	8004884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800487a:	69bb      	ldr	r3, [r7, #24]
	}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e002      	b.n	80048a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048b2:	2101      	movs	r1, #1
 80048b4:	69b8      	ldr	r0, [r7, #24]
 80048b6:	f7ff ff43 	bl	8004740 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b090      	sub	sp, #64	; 0x40
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <xQueueGenericSendFromISR+0x3c>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <xQueueGenericSendFromISR+0x40>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <xQueueGenericSendFromISR+0x42>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d103      	bne.n	800492c <xQueueGenericSendFromISR+0x6a>
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <xQueueGenericSendFromISR+0x6e>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueGenericSendFromISR+0x70>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	623b      	str	r3, [r7, #32]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800494c:	f001 fb0c 	bl	8005f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004950:	f3ef 8211 	mrs	r2, BASEPRI
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	61fa      	str	r2, [r7, #28]
 8004966:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004968:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800496a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <xQueueGenericSendFromISR+0xbc>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d12f      	bne.n	80049de <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004994:	f000 f910 	bl	8004bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004998:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d112      	bne.n	80049c8 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	3324      	adds	r3, #36	; 0x24
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fe04 	bl	80055bc <xTaskRemoveFromEventList>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00e      	beq.n	80049d8 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e007      	b.n	80049d8 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049cc:	3301      	adds	r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	b25a      	sxtb	r2, r3
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049d8:	2301      	movs	r3, #1
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049dc:	e001      	b.n	80049e2 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3740      	adds	r7, #64	; 0x40
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08c      	sub	sp, #48	; 0x30
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <xQueueReceive+0x30>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	623b      	str	r3, [r7, #32]
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <xQueueReceive+0x3e>
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <xQueueReceive+0x42>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueReceive+0x44>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <xQueueReceive+0x5e>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61fb      	str	r3, [r7, #28]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a56:	f000 ff6d 	bl	8005934 <xTaskGetSchedulerState>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <xQueueReceive+0x6e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <xQueueReceive+0x72>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueReceive+0x74>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueReceive+0x8e>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61bb      	str	r3, [r7, #24]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a86:	f001 f98d 	bl	8005da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01f      	beq.n	8004ad6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9a:	f000 f8f7 	bl	8004c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00f      	beq.n	8004ace <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	3310      	adds	r3, #16
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fd82 	bl	80055bc <xTaskRemoveFromEventList>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004abe:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <xQueueReceive+0x1bc>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ace:	f001 f999 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e069      	b.n	8004baa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004adc:	f001 f992 	bl	8005e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e062      	b.n	8004baa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aea:	f107 0310 	add.w	r3, r7, #16
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fdc6 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004af8:	f001 f984 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004afc:	f000 fb7c 	bl	80051f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b00:	f001 f950 	bl	8005da4 <vPortEnterCritical>
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0a:	b25b      	sxtb	r3, r3
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d103      	bne.n	8004b1a <xQueueReceive+0x122>
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d103      	bne.n	8004b30 <xQueueReceive+0x138>
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b30:	f001 f968 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b34:	1d3a      	adds	r2, r7, #4
 8004b36:	f107 0310 	add.w	r3, r7, #16
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fdb5 	bl	80056ac <xTaskCheckForTimeOut>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d123      	bne.n	8004b90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4a:	f000 f917 	bl	8004d7c <prvIsQueueEmpty>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d017      	beq.n	8004b84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	3324      	adds	r3, #36	; 0x24
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fd09 	bl	8005574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b64:	f000 f8b8 	bl	8004cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b68:	f000 fb54 	bl	8005214 <xTaskResumeAll>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d189      	bne.n	8004a86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <xQueueReceive+0x1bc>)
 8004b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	e780      	b.n	8004a86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b86:	f000 f8a7 	bl	8004cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b8a:	f000 fb43 	bl	8005214 <xTaskResumeAll>
 8004b8e:	e77a      	b.n	8004a86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b92:	f000 f8a1 	bl	8004cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b96:	f000 fb3d 	bl	8005214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9c:	f000 f8ee 	bl	8004d7c <prvIsQueueEmpty>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f43f af6f 	beq.w	8004a86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3730      	adds	r7, #48	; 0x30
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10d      	bne.n	8004bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d14d      	bne.n	8004c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fec4 	bl	8005970 <xTaskPriorityDisinherit>
 8004be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	e043      	b.n	8004c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d119      	bne.n	8004c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6858      	ldr	r0, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	461a      	mov	r2, r3
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	f001 fc06 	bl	8006414 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	441a      	add	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d32b      	bcc.n	8004c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	e026      	b.n	8004c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68d8      	ldr	r0, [r3, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	461a      	mov	r2, r3
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	f001 fbec 	bl	8006414 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	425b      	negs	r3, r3
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d207      	bcs.n	8004c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	425b      	negs	r3, r3
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d105      	bne.n	8004c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c82:	697b      	ldr	r3, [r7, #20]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d303      	bcc.n	8004cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68d9      	ldr	r1, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6838      	ldr	r0, [r7, #0]
 8004ccc:	f001 fba2 	bl	8006414 <memcpy>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ce0:	f001 f860 	bl	8005da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cec:	e011      	b.n	8004d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d012      	beq.n	8004d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3324      	adds	r3, #36	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fc5e 	bl	80055bc <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d06:	f000 fd33 	bl	8005770 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dce9      	bgt.n	8004cee <prvUnlockQueue+0x16>
 8004d1a:	e000      	b.n	8004d1e <prvUnlockQueue+0x46>
					break;
 8004d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	22ff      	movs	r2, #255	; 0xff
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d26:	f001 f86d 	bl	8005e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d2a:	f001 f83b 	bl	8005da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d36:	e011      	b.n	8004d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d012      	beq.n	8004d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3310      	adds	r3, #16
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fc39 	bl	80055bc <xTaskRemoveFromEventList>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d50:	f000 fd0e 	bl	8005770 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d54:	7bbb      	ldrb	r3, [r7, #14]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dce9      	bgt.n	8004d38 <prvUnlockQueue+0x60>
 8004d64:	e000      	b.n	8004d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d70:	f001 f848 	bl	8005e04 <vPortExitCritical>
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d84:	f001 f80e 	bl	8005da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e001      	b.n	8004d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d9a:	f001 f833 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	; 0x38
 8004dac:	af04      	add	r7, sp, #16
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	623b      	str	r3, [r7, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xTaskCreateStatic+0x46>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61fb      	str	r3, [r7, #28]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dee:	2364      	movs	r3, #100	; 0x64
 8004df0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d00a      	beq.n	8004e0e <xTaskCreateStatic+0x66>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	61bb      	str	r3, [r7, #24]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01e      	beq.n	8004e54 <xTaskCreateStatic+0xac>
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	9302      	str	r3, [sp, #8]
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f850 	bl	8004eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e4e:	f000 f8d5 	bl	8004ffc <prvAddNewTaskToReadyList>
 8004e52:	e001      	b.n	8004e58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e58:	697b      	ldr	r3, [r7, #20]
	}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3728      	adds	r7, #40	; 0x28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08c      	sub	sp, #48	; 0x30
 8004e66:	af04      	add	r7, sp, #16
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f8b6 	bl	8005fe8 <pvPortMalloc>
 8004e7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e84:	2064      	movs	r0, #100	; 0x64
 8004e86:	f001 f8af 	bl	8005fe8 <pvPortMalloc>
 8004e8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
 8004e98:	e005      	b.n	8004ea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e9a:	6978      	ldr	r0, [r7, #20]
 8004e9c:	f001 f970 	bl	8006180 <vPortFree>
 8004ea0:	e001      	b.n	8004ea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d017      	beq.n	8004edc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9303      	str	r3, [sp, #12]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f80e 	bl	8004eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed0:	69f8      	ldr	r0, [r7, #28]
 8004ed2:	f000 f893 	bl	8004ffc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	e002      	b.n	8004ee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004edc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f04:	3b01      	subs	r3, #1
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f023 0307 	bic.w	r3, r3, #7
 8004f12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	617b      	str	r3, [r7, #20]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01f      	beq.n	8004f7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e012      	b.n	8004f66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	7819      	ldrb	r1, [r3, #0]
 8004f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3334      	adds	r3, #52	; 0x34
 8004f50:	460a      	mov	r2, r1
 8004f52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	3301      	adds	r3, #1
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b1f      	cmp	r3, #31
 8004f6a:	d9e9      	bls.n	8004f40 <prvInitialiseNewTask+0x54>
 8004f6c:	e000      	b.n	8004f70 <prvInitialiseNewTask+0x84>
			{
				break;
 8004f6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004f78:	e003      	b.n	8004f82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	d901      	bls.n	8004f8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f88:	2306      	movs	r3, #6
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fb37 	bl	8004616 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	3318      	adds	r3, #24
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fb32 	bl	8004616 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	f1c3 0207 	rsb	r2, r3, #7
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	2200      	movs	r2, #0
 8004fcc:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	68f9      	ldr	r1, [r7, #12]
 8004fda:	69b8      	ldr	r0, [r7, #24]
 8004fdc:	f000 fdb4 	bl	8005b48 <pxPortInitialiseStack>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff2:	bf00      	nop
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005004:	f000 fece 	bl	8005da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <prvAddNewTaskToReadyList+0xb8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <prvAddNewTaskToReadyList+0xb8>)
 8005010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800501a:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <prvAddNewTaskToReadyList+0xb8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d110      	bne.n	800504a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005028:	f000 fbc6 	bl	80057b8 <prvInitialiseTaskLists>
 800502c:	e00d      	b.n	800504a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800502e:	4b23      	ldr	r3, [pc, #140]	; (80050bc <prvAddNewTaskToReadyList+0xc0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	429a      	cmp	r2, r3
 8005042:	d802      	bhi.n	800504a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <prvAddNewTaskToReadyList+0xc4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <prvAddNewTaskToReadyList+0xc4>)
 8005052:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	2201      	movs	r2, #1
 800505a:	409a      	lsls	r2, r3
 800505c:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <prvAddNewTaskToReadyList+0xc8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4313      	orrs	r3, r2
 8005062:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <prvAddNewTaskToReadyList+0xc8>)
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <prvAddNewTaskToReadyList+0xcc>)
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7ff fad7 	bl	8004630 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005082:	f000 febf 	bl	8005e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <prvAddNewTaskToReadyList+0xc0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00e      	beq.n	80050ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d207      	bcs.n	80050ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <prvAddNewTaskToReadyList+0xd0>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	2000047c 	.word	0x2000047c
 80050b8:	2000037c 	.word	0x2000037c
 80050bc:	20000488 	.word	0x20000488
 80050c0:	20000498 	.word	0x20000498
 80050c4:	20000484 	.word	0x20000484
 80050c8:	20000380 	.word	0x20000380
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d017      	beq.n	8005112 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050e2:	4b13      	ldr	r3, [pc, #76]	; (8005130 <vTaskDelay+0x60>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <vTaskDelay+0x30>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	60bb      	str	r3, [r7, #8]
}
 80050fc:	bf00      	nop
 80050fe:	e7fe      	b.n	80050fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005100:	f000 f87a 	bl	80051f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005104:	2100      	movs	r1, #0
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fcb8 	bl	8005a7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800510c:	f000 f882 	bl	8005214 <xTaskResumeAll>
 8005110:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <vTaskDelay+0x64>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	200004a4 	.word	0x200004a4
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005146:	463a      	mov	r2, r7
 8005148:	1d39      	adds	r1, r7, #4
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f7fb fcca 	bl	8000ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	9202      	str	r2, [sp, #8]
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	460a      	mov	r2, r1
 8005166:	491e      	ldr	r1, [pc, #120]	; (80051e0 <vTaskStartScheduler+0xa8>)
 8005168:	481e      	ldr	r0, [pc, #120]	; (80051e4 <vTaskStartScheduler+0xac>)
 800516a:	f7ff fe1d 	bl	8004da8 <xTaskCreateStatic>
 800516e:	4603      	mov	r3, r0
 8005170:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <vTaskStartScheduler+0xb0>)
 8005172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <vTaskStartScheduler+0xb0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e001      	b.n	8005186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d116      	bne.n	80051ba <vTaskStartScheduler+0x82>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	613b      	str	r3, [r7, #16]
}
 800519e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051a0:	4b12      	ldr	r3, [pc, #72]	; (80051ec <vTaskStartScheduler+0xb4>)
 80051a2:	f04f 32ff 	mov.w	r2, #4294967295
 80051a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <vTaskStartScheduler+0xb8>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <vTaskStartScheduler+0xbc>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051b4:	f000 fd54 	bl	8005c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051b8:	e00e      	b.n	80051d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d10a      	bne.n	80051d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60fb      	str	r3, [r7, #12]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <vTaskStartScheduler+0x9e>
}
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	080064cc 	.word	0x080064cc
 80051e4:	08005789 	.word	0x08005789
 80051e8:	200004a0 	.word	0x200004a0
 80051ec:	2000049c 	.word	0x2000049c
 80051f0:	20000488 	.word	0x20000488
 80051f4:	20000480 	.word	0x20000480

080051f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <vTaskSuspendAll+0x18>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a03      	ldr	r2, [pc, #12]	; (8005210 <vTaskSuspendAll+0x18>)
 8005204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005206:	bf00      	nop
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	200004a4 	.word	0x200004a4

08005214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005222:	4b41      	ldr	r3, [pc, #260]	; (8005328 <xTaskResumeAll+0x114>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <xTaskResumeAll+0x2c>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	603b      	str	r3, [r7, #0]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005240:	f000 fdb0 	bl	8005da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005244:	4b38      	ldr	r3, [pc, #224]	; (8005328 <xTaskResumeAll+0x114>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	4a37      	ldr	r2, [pc, #220]	; (8005328 <xTaskResumeAll+0x114>)
 800524c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800524e:	4b36      	ldr	r3, [pc, #216]	; (8005328 <xTaskResumeAll+0x114>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d161      	bne.n	800531a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005256:	4b35      	ldr	r3, [pc, #212]	; (800532c <xTaskResumeAll+0x118>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d05d      	beq.n	800531a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525e:	e02e      	b.n	80052be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005260:	4b33      	ldr	r3, [pc, #204]	; (8005330 <xTaskResumeAll+0x11c>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3318      	adds	r3, #24
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fa3c 	bl	80046ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fa37 	bl	80046ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	2201      	movs	r2, #1
 8005282:	409a      	lsls	r2, r3
 8005284:	4b2b      	ldr	r3, [pc, #172]	; (8005334 <xTaskResumeAll+0x120>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4313      	orrs	r3, r2
 800528a:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <xTaskResumeAll+0x120>)
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4a27      	ldr	r2, [pc, #156]	; (8005338 <xTaskResumeAll+0x124>)
 800529c:	441a      	add	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f7ff f9c3 	bl	8004630 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <xTaskResumeAll+0x128>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d302      	bcc.n	80052be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80052b8:	4b21      	ldr	r3, [pc, #132]	; (8005340 <xTaskResumeAll+0x12c>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052be:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <xTaskResumeAll+0x11c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1cc      	bne.n	8005260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052cc:	f000 fb12 	bl	80058f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052d0:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <xTaskResumeAll+0x130>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d010      	beq.n	80052fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052dc:	f000 f836 	bl	800534c <xTaskIncrementTick>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80052e6:	4b16      	ldr	r3, [pc, #88]	; (8005340 <xTaskResumeAll+0x12c>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f1      	bne.n	80052dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80052f8:	4b12      	ldr	r3, [pc, #72]	; (8005344 <xTaskResumeAll+0x130>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <xTaskResumeAll+0x12c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005306:	2301      	movs	r3, #1
 8005308:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <xTaskResumeAll+0x134>)
 800530c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800531a:	f000 fd73 	bl	8005e04 <vPortExitCritical>

	return xAlreadyYielded;
 800531e:	68bb      	ldr	r3, [r7, #8]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	200004a4 	.word	0x200004a4
 800532c:	2000047c 	.word	0x2000047c
 8005330:	2000043c 	.word	0x2000043c
 8005334:	20000484 	.word	0x20000484
 8005338:	20000380 	.word	0x20000380
 800533c:	2000037c 	.word	0x2000037c
 8005340:	20000490 	.word	0x20000490
 8005344:	2000048c 	.word	0x2000048c
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005356:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <xTaskIncrementTick+0x144>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f040 808e 	bne.w	800547c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005360:	4b4c      	ldr	r3, [pc, #304]	; (8005494 <xTaskIncrementTick+0x148>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005368:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <xTaskIncrementTick+0x148>)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d120      	bne.n	80053b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005374:	4b48      	ldr	r3, [pc, #288]	; (8005498 <xTaskIncrementTick+0x14c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <xTaskIncrementTick+0x48>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	603b      	str	r3, [r7, #0]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <xTaskIncrementTick+0x46>
 8005394:	4b40      	ldr	r3, [pc, #256]	; (8005498 <xTaskIncrementTick+0x14c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	4b40      	ldr	r3, [pc, #256]	; (800549c <xTaskIncrementTick+0x150>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a3e      	ldr	r2, [pc, #248]	; (8005498 <xTaskIncrementTick+0x14c>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	4a3e      	ldr	r2, [pc, #248]	; (800549c <xTaskIncrementTick+0x150>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <xTaskIncrementTick+0x154>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	4a3c      	ldr	r2, [pc, #240]	; (80054a0 <xTaskIncrementTick+0x154>)
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	f000 fa9f 	bl	80058f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <xTaskIncrementTick+0x158>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d348      	bcc.n	8005452 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c0:	4b35      	ldr	r3, [pc, #212]	; (8005498 <xTaskIncrementTick+0x14c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <xTaskIncrementTick+0x158>)
 80053cc:	f04f 32ff 	mov.w	r2, #4294967295
 80053d0:	601a      	str	r2, [r3, #0]
					break;
 80053d2:	e03e      	b.n	8005452 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	4b30      	ldr	r3, [pc, #192]	; (8005498 <xTaskIncrementTick+0x14c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d203      	bcs.n	80053f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053ec:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <xTaskIncrementTick+0x158>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053f2:	e02e      	b.n	8005452 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff f976 	bl	80046ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3318      	adds	r3, #24
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff f96d 	bl	80046ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	409a      	lsls	r2, r3
 8005418:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <xTaskIncrementTick+0x15c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <xTaskIncrementTick+0x15c>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <xTaskIncrementTick+0x160>)
 8005430:	441a      	add	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7ff f8f9 	bl	8004630 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <xTaskIncrementTick+0x164>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	429a      	cmp	r2, r3
 800544a:	d3b9      	bcc.n	80053c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005450:	e7b6      	b.n	80053c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005452:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <xTaskIncrementTick+0x164>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4914      	ldr	r1, [pc, #80]	; (80054ac <xTaskIncrementTick+0x160>)
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d901      	bls.n	800546e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800546a:	2301      	movs	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <xTaskIncrementTick+0x168>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e004      	b.n	8005486 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <xTaskIncrementTick+0x16c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <xTaskIncrementTick+0x16c>)
 8005484:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005486:	697b      	ldr	r3, [r7, #20]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	200004a4 	.word	0x200004a4
 8005494:	20000480 	.word	0x20000480
 8005498:	20000434 	.word	0x20000434
 800549c:	20000438 	.word	0x20000438
 80054a0:	20000494 	.word	0x20000494
 80054a4:	2000049c 	.word	0x2000049c
 80054a8:	20000484 	.word	0x20000484
 80054ac:	20000380 	.word	0x20000380
 80054b0:	2000037c 	.word	0x2000037c
 80054b4:	20000490 	.word	0x20000490
 80054b8:	2000048c 	.word	0x2000048c

080054bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054c2:	4b27      	ldr	r3, [pc, #156]	; (8005560 <vTaskSwitchContext+0xa4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054ca:	4b26      	ldr	r3, [pc, #152]	; (8005564 <vTaskSwitchContext+0xa8>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054d0:	e03f      	b.n	8005552 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <vTaskSwitchContext+0xa8>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d8:	4b23      	ldr	r3, [pc, #140]	; (8005568 <vTaskSwitchContext+0xac>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80054e6:	7afb      	ldrb	r3, [r7, #11]
 80054e8:	f1c3 031f 	rsb	r3, r3, #31
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	491f      	ldr	r1, [pc, #124]	; (800556c <vTaskSwitchContext+0xb0>)
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	607b      	str	r3, [r7, #4]
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <vTaskSwitchContext+0x5a>
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4a12      	ldr	r2, [pc, #72]	; (800556c <vTaskSwitchContext+0xb0>)
 8005524:	4413      	add	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3308      	adds	r3, #8
 800553a:	429a      	cmp	r2, r3
 800553c:	d104      	bne.n	8005548 <vTaskSwitchContext+0x8c>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	4a08      	ldr	r2, [pc, #32]	; (8005570 <vTaskSwitchContext+0xb4>)
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	200004a4 	.word	0x200004a4
 8005564:	20000490 	.word	0x20000490
 8005568:	20000484 	.word	0x20000484
 800556c:	20000380 	.word	0x20000380
 8005570:	2000037c 	.word	0x2000037c

08005574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60fb      	str	r3, [r7, #12]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <vTaskPlaceOnEventList+0x44>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3318      	adds	r3, #24
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff f868 	bl	8004678 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055a8:	2101      	movs	r1, #1
 80055aa:	6838      	ldr	r0, [r7, #0]
 80055ac:	f000 fa66 	bl	8005a7c <prvAddCurrentTaskToDelayedList>
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	2000037c 	.word	0x2000037c

080055bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	60fb      	str	r3, [r7, #12]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	3318      	adds	r3, #24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff f87c 	bl	80046ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <xTaskRemoveFromEventList+0xac>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11c      	bne.n	8005634 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff f873 	bl	80046ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	2201      	movs	r2, #1
 800560a:	409a      	lsls	r2, r3
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <xTaskRemoveFromEventList+0xb0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	4a16      	ldr	r2, [pc, #88]	; (800566c <xTaskRemoveFromEventList+0xb0>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a13      	ldr	r2, [pc, #76]	; (8005670 <xTaskRemoveFromEventList+0xb4>)
 8005624:	441a      	add	r2, r3
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7fe ffff 	bl	8004630 <vListInsertEnd>
 8005632:	e005      	b.n	8005640 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	3318      	adds	r3, #24
 8005638:	4619      	mov	r1, r3
 800563a:	480e      	ldr	r0, [pc, #56]	; (8005674 <xTaskRemoveFromEventList+0xb8>)
 800563c:	f7fe fff8 	bl	8004630 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <xTaskRemoveFromEventList+0xbc>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	429a      	cmp	r2, r3
 800564c:	d905      	bls.n	800565a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800564e:	2301      	movs	r3, #1
 8005650:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <xTaskRemoveFromEventList+0xc0>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e001      	b.n	800565e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800565e:	697b      	ldr	r3, [r7, #20]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200004a4 	.word	0x200004a4
 800566c:	20000484 	.word	0x20000484
 8005670:	20000380 	.word	0x20000380
 8005674:	2000043c 	.word	0x2000043c
 8005678:	2000037c 	.word	0x2000037c
 800567c:	20000490 	.word	0x20000490

08005680 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <vTaskInternalSetTimeOutState+0x24>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <vTaskInternalSetTimeOutState+0x28>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	605a      	str	r2, [r3, #4]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000494 	.word	0x20000494
 80056a8:	20000480 	.word	0x20000480

080056ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	613b      	str	r3, [r7, #16]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60fb      	str	r3, [r7, #12]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056ee:	f000 fb59 	bl	8005da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <xTaskCheckForTimeOut+0xbc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d102      	bne.n	8005712 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e023      	b.n	800575a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b15      	ldr	r3, [pc, #84]	; (800576c <xTaskCheckForTimeOut+0xc0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d007      	beq.n	800572e <xTaskCheckForTimeOut+0x82>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	e015      	b.n	800575a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	429a      	cmp	r2, r3
 8005736:	d20b      	bcs.n	8005750 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ff9b 	bl	8005680 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e004      	b.n	800575a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800575a:	f000 fb53 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 800575e:	69fb      	ldr	r3, [r7, #28]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000480 	.word	0x20000480
 800576c:	20000494 	.word	0x20000494

08005770 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005774:	4b03      	ldr	r3, [pc, #12]	; (8005784 <vTaskMissedYield+0x14>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]
}
 800577a:	bf00      	nop
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20000490 	.word	0x20000490

08005788 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005790:	f000 f852 	bl	8005838 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <prvIdleTask+0x28>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d9f9      	bls.n	8005790 <prvIdleTask+0x8>
			{
				taskYIELD();
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <prvIdleTask+0x2c>)
 800579e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057ac:	e7f0      	b.n	8005790 <prvIdleTask+0x8>
 80057ae:	bf00      	nop
 80057b0:	20000380 	.word	0x20000380
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	e00c      	b.n	80057de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4a12      	ldr	r2, [pc, #72]	; (8005818 <prvInitialiseTaskLists+0x60>)
 80057d0:	4413      	add	r3, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe feff 	bl	80045d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3301      	adds	r3, #1
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d9ef      	bls.n	80057c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057e4:	480d      	ldr	r0, [pc, #52]	; (800581c <prvInitialiseTaskLists+0x64>)
 80057e6:	f7fe fef6 	bl	80045d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ea:	480d      	ldr	r0, [pc, #52]	; (8005820 <prvInitialiseTaskLists+0x68>)
 80057ec:	f7fe fef3 	bl	80045d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057f0:	480c      	ldr	r0, [pc, #48]	; (8005824 <prvInitialiseTaskLists+0x6c>)
 80057f2:	f7fe fef0 	bl	80045d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057f6:	480c      	ldr	r0, [pc, #48]	; (8005828 <prvInitialiseTaskLists+0x70>)
 80057f8:	f7fe feed 	bl	80045d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057fc:	480b      	ldr	r0, [pc, #44]	; (800582c <prvInitialiseTaskLists+0x74>)
 80057fe:	f7fe feea 	bl	80045d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <prvInitialiseTaskLists+0x78>)
 8005804:	4a05      	ldr	r2, [pc, #20]	; (800581c <prvInitialiseTaskLists+0x64>)
 8005806:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <prvInitialiseTaskLists+0x7c>)
 800580a:	4a05      	ldr	r2, [pc, #20]	; (8005820 <prvInitialiseTaskLists+0x68>)
 800580c:	601a      	str	r2, [r3, #0]
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000380 	.word	0x20000380
 800581c:	2000040c 	.word	0x2000040c
 8005820:	20000420 	.word	0x20000420
 8005824:	2000043c 	.word	0x2000043c
 8005828:	20000450 	.word	0x20000450
 800582c:	20000468 	.word	0x20000468
 8005830:	20000434 	.word	0x20000434
 8005834:	20000438 	.word	0x20000438

08005838 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800583e:	e019      	b.n	8005874 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005840:	f000 fab0 	bl	8005da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005844:	4b10      	ldr	r3, [pc, #64]	; (8005888 <prvCheckTasksWaitingTermination+0x50>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe ff4a 	bl	80046ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <prvCheckTasksWaitingTermination+0x54>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3b01      	subs	r3, #1
 800585c:	4a0b      	ldr	r2, [pc, #44]	; (800588c <prvCheckTasksWaitingTermination+0x54>)
 800585e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <prvCheckTasksWaitingTermination+0x58>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3b01      	subs	r3, #1
 8005866:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <prvCheckTasksWaitingTermination+0x58>)
 8005868:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800586a:	f000 facb 	bl	8005e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f810 	bl	8005894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <prvCheckTasksWaitingTermination+0x58>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e1      	bne.n	8005840 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000450 	.word	0x20000450
 800588c:	2000047c 	.word	0x2000047c
 8005890:	20000464 	.word	0x20000464

08005894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fc68 	bl	8006180 <vPortFree>
				vPortFree( pxTCB );
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fc65 	bl	8006180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058b6:	e018      	b.n	80058ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d103      	bne.n	80058ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fc5c 	bl	8006180 <vPortFree>
	}
 80058c8:	e00f      	b.n	80058ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d00a      	beq.n	80058ea <prvDeleteTCB+0x56>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	60fb      	str	r3, [r7, #12]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <prvDeleteTCB+0x54>
	}
 80058ea:	bf00      	nop
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <prvResetNextTaskUnblockTime+0x38>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <prvResetNextTaskUnblockTime+0x3c>)
 8005906:	f04f 32ff 	mov.w	r2, #4294967295
 800590a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800590c:	e008      	b.n	8005920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <prvResetNextTaskUnblockTime+0x38>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4a04      	ldr	r2, [pc, #16]	; (8005930 <prvResetNextTaskUnblockTime+0x3c>)
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000434 	.word	0x20000434
 8005930:	2000049c 	.word	0x2000049c

08005934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <xTaskGetSchedulerState+0x34>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005942:	2301      	movs	r3, #1
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e008      	b.n	800595a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005948:	4b08      	ldr	r3, [pc, #32]	; (800596c <xTaskGetSchedulerState+0x38>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005950:	2302      	movs	r3, #2
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	e001      	b.n	800595a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800595a:	687b      	ldr	r3, [r7, #4]
	}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	20000488 	.word	0x20000488
 800596c:	200004a4 	.word	0x200004a4

08005970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d06e      	beq.n	8005a64 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005986:	4b3a      	ldr	r3, [pc, #232]	; (8005a70 <xTaskPriorityDisinherit+0x100>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d00a      	beq.n	80059a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	60bb      	str	r3, [r7, #8]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	1e5a      	subs	r2, r3, #1
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d044      	beq.n	8005a64 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d140      	bne.n	8005a64 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fe7f 	bl	80046ea <uxListRemove>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d115      	bne.n	8005a1e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	491f      	ldr	r1, [pc, #124]	; (8005a74 <xTaskPriorityDisinherit+0x104>)
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <xTaskPriorityDisinherit+0xae>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43da      	mvns	r2, r3
 8005a14:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <xTaskPriorityDisinherit+0x108>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <xTaskPriorityDisinherit+0x108>)
 8005a1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f1c3 0207 	rsb	r2, r3, #7
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	2201      	movs	r2, #1
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <xTaskPriorityDisinherit+0x108>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <xTaskPriorityDisinherit+0x108>)
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <xTaskPriorityDisinherit+0x104>)
 8005a52:	441a      	add	r2, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f7fe fde8 	bl	8004630 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a60:	2301      	movs	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a64:	697b      	ldr	r3, [r7, #20]
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000037c 	.word	0x2000037c
 8005a74:	20000380 	.word	0x20000380
 8005a78:	20000484 	.word	0x20000484

08005a7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a8c:	4b28      	ldr	r3, [pc, #160]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fe29 	bl	80046ea <uxListRemove>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a9e:	4b24      	ldr	r3, [pc, #144]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	43da      	mvns	r2, r3
 8005aac:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	4a20      	ldr	r2, [pc, #128]	; (8005b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ab4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d10a      	bne.n	8005ad4 <prvAddCurrentTaskToDelayedList+0x58>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	481a      	ldr	r0, [pc, #104]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ace:	f7fe fdaf 	bl	8004630 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad2:	e026      	b.n	8005b22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005adc:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d209      	bcs.n	8005b00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aec:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7fe fdbd 	bl	8004678 <vListInsert>
}
 8005afe:	e010      	b.n	8005b22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fe fdb3 	bl	8004678 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d202      	bcs.n	8005b22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6013      	str	r3, [r2, #0]
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000480 	.word	0x20000480
 8005b30:	2000037c 	.word	0x2000037c
 8005b34:	20000484 	.word	0x20000484
 8005b38:	20000468 	.word	0x20000468
 8005b3c:	20000438 	.word	0x20000438
 8005b40:	20000434 	.word	0x20000434
 8005b44:	2000049c 	.word	0x2000049c

08005b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3b04      	subs	r3, #4
 8005b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3b04      	subs	r3, #4
 8005b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 0201 	bic.w	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3b04      	subs	r3, #4
 8005b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b78:	4a0c      	ldr	r2, [pc, #48]	; (8005bac <pxPortInitialiseStack+0x64>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b14      	subs	r3, #20
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b04      	subs	r3, #4
 8005b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f06f 0202 	mvn.w	r2, #2
 8005b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3b20      	subs	r3, #32
 8005b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	08005bb1 	.word	0x08005bb1

08005bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <prvTaskExitError+0x54>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d00a      	beq.n	8005bda <prvTaskExitError+0x2a>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <prvTaskExitError+0x28>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60bb      	str	r3, [r7, #8]
}
 8005bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bee:	bf00      	nop
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0fc      	beq.n	8005bf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	2000000c 	.word	0x2000000c
	...

08005c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	4770      	bx	lr
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst2>:
 8005c30:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c38:	4808      	ldr	r0, [pc, #32]	; (8005c5c <prvPortStartFirstTask+0x24>)
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f380 8808 	msr	MSP, r0
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8814 	msr	CONTROL, r0
 8005c4a:	b662      	cpsie	i
 8005c4c:	b661      	cpsie	f
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	df00      	svc	0
 8005c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed08 	.word	0xe000ed08

08005c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c66:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a46      	ldr	r2, [pc, #280]	; (8005d84 <xPortStartScheduler+0x124>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10a      	bne.n	8005c86 <xPortStartScheduler+0x26>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c86:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a3f      	ldr	r2, [pc, #252]	; (8005d88 <xPortStartScheduler+0x128>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10a      	bne.n	8005ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	22ff      	movs	r2, #255	; 0xff
 8005cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <xPortStartScheduler+0x130>)
 8005ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cce:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cd0:	2207      	movs	r2, #7
 8005cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd4:	e009      	b.n	8005cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	4a2d      	ldr	r2, [pc, #180]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d0ef      	beq.n	8005cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cf6:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1c3 0307 	rsb	r3, r3, #7
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d00a      	beq.n	8005d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60bb      	str	r3, [r7, #8]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d4e:	f000 f8dd 	bl	8005f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <xPortStartScheduler+0x13c>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d58:	f000 f8fc 	bl	8005f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d5c:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <xPortStartScheduler+0x140>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <xPortStartScheduler+0x140>)
 8005d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d68:	f7ff ff66 	bl	8005c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d6c:	f7ff fba6 	bl	80054bc <vTaskSwitchContext>
	prvTaskExitError();
 8005d70:	f7ff ff1e 	bl	8005bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	e000ed00 	.word	0xe000ed00
 8005d84:	410fc271 	.word	0x410fc271
 8005d88:	410fc270 	.word	0x410fc270
 8005d8c:	e000e400 	.word	0xe000e400
 8005d90:	200004a8 	.word	0x200004a8
 8005d94:	200004ac 	.word	0x200004ac
 8005d98:	e000ed20 	.word	0xe000ed20
 8005d9c:	2000000c 	.word	0x2000000c
 8005da0:	e000ef34 	.word	0xe000ef34

08005da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	607b      	str	r3, [r7, #4]
}
 8005dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d10f      	bne.n	8005df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortEnterCritical+0x5c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	603b      	str	r3, [r7, #0]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <vPortEnterCritical+0x4a>
	}
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	2000000c 	.word	0x2000000c
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <vPortExitCritical+0x50>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <vPortExitCritical+0x24>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <vPortExitCritical+0x50>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <vPortExitCritical+0x50>)
 8005e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <vPortExitCritical+0x50>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <vPortExitCritical+0x42>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f383 8811 	msr	BASEPRI, r3
}
 8005e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000000c 	.word	0x2000000c
	...

08005e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e60:	f3ef 8009 	mrs	r0, PSP
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <pxCurrentTCBConst>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f01e 0f10 	tst.w	lr, #16
 8005e70:	bf08      	it	eq
 8005e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	6010      	str	r0, [r2, #0]
 8005e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e84:	f380 8811 	msr	BASEPRI, r0
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f7ff fb14 	bl	80054bc <vTaskSwitchContext>
 8005e94:	f04f 0000 	mov.w	r0, #0
 8005e98:	f380 8811 	msr	BASEPRI, r0
 8005e9c:	bc09      	pop	{r0, r3}
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea6:	f01e 0f10 	tst.w	lr, #16
 8005eaa:	bf08      	it	eq
 8005eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005eb0:	f380 8809 	msr	PSP, r0
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w

08005ec0 <pxCurrentTCBConst>:
 8005ec0:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ee2:	f7ff fa33 	bl	800534c <xTaskIncrementTick>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <SysTick_Handler+0x40>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f383 8811 	msr	BASEPRI, r3
}
 8005efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortSetupTimerInterrupt+0x34>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <vPortSetupTimerInterrupt+0x38>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <vPortSetupTimerInterrupt+0x3c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <vPortSetupTimerInterrupt+0x40>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <vPortSetupTimerInterrupt+0x44>)
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f2e:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <vPortSetupTimerInterrupt+0x34>)
 8005f30:	2207      	movs	r2, #7
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000e010 	.word	0xe000e010
 8005f44:	e000e018 	.word	0xe000e018
 8005f48:	20000000 	.word	0x20000000
 8005f4c:	10624dd3 	.word	0x10624dd3
 8005f50:	e000e014 	.word	0xe000e014

08005f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f64 <vPortEnableVFP+0x10>
 8005f58:	6801      	ldr	r1, [r0, #0]
 8005f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f5e:	6001      	str	r1, [r0, #0]
 8005f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f62:	bf00      	nop
 8005f64:	e000ed88 	.word	0xe000ed88

08005f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f6e:	f3ef 8305 	mrs	r3, IPSR
 8005f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b0f      	cmp	r3, #15
 8005f78:	d914      	bls.n	8005fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f7a:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <vPortValidateInterruptPriority+0x70>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <vPortValidateInterruptPriority+0x74>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	7afa      	ldrb	r2, [r7, #11]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d20a      	bcs.n	8005fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	607b      	str	r3, [r7, #4]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <vPortValidateInterruptPriority+0x78>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <vPortValidateInterruptPriority+0x7c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d90a      	bls.n	8005fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	603b      	str	r3, [r7, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <vPortValidateInterruptPriority+0x60>
	}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	e000e3f0 	.word	0xe000e3f0
 8005fdc:	200004a8 	.word	0x200004a8
 8005fe0:	e000ed0c 	.word	0xe000ed0c
 8005fe4:	200004ac 	.word	0x200004ac

08005fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ff4:	f7ff f900 	bl	80051f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ff8:	4b5b      	ldr	r3, [pc, #364]	; (8006168 <pvPortMalloc+0x180>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006000:	f000 f920 	bl	8006244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006004:	4b59      	ldr	r3, [pc, #356]	; (800616c <pvPortMalloc+0x184>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 8093 	bne.w	8006138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01d      	beq.n	8006054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006018:	2208      	movs	r2, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	3308      	adds	r3, #8
 8006032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <pvPortMalloc+0x6c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	617b      	str	r3, [r7, #20]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d06e      	beq.n	8006138 <pvPortMalloc+0x150>
 800605a:	4b45      	ldr	r3, [pc, #276]	; (8006170 <pvPortMalloc+0x188>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d869      	bhi.n	8006138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006064:	4b43      	ldr	r3, [pc, #268]	; (8006174 <pvPortMalloc+0x18c>)
 8006066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006068:	4b42      	ldr	r3, [pc, #264]	; (8006174 <pvPortMalloc+0x18c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800606e:	e004      	b.n	800607a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d903      	bls.n	800608c <pvPortMalloc+0xa4>
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f1      	bne.n	8006070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800608c:	4b36      	ldr	r3, [pc, #216]	; (8006168 <pvPortMalloc+0x180>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	429a      	cmp	r2, r3
 8006094:	d050      	beq.n	8006138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2208      	movs	r2, #8
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	2308      	movs	r3, #8
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d91f      	bls.n	80060f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <pvPortMalloc+0xf8>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	613b      	str	r3, [r7, #16]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060f2:	69b8      	ldr	r0, [r7, #24]
 80060f4:	f000 f908 	bl	8006308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <pvPortMalloc+0x188>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <pvPortMalloc+0x188>)
 8006104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <pvPortMalloc+0x188>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <pvPortMalloc+0x190>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d203      	bcs.n	800611a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <pvPortMalloc+0x188>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <pvPortMalloc+0x190>)
 8006118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b13      	ldr	r3, [pc, #76]	; (800616c <pvPortMalloc+0x184>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	431a      	orrs	r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <pvPortMalloc+0x194>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a11      	ldr	r2, [pc, #68]	; (800617c <pvPortMalloc+0x194>)
 8006136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006138:	f7ff f86c 	bl	8005214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <pvPortMalloc+0x174>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <pvPortMalloc+0x172>
	return pvReturn;
 800615c:	69fb      	ldr	r3, [r7, #28]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3728      	adds	r7, #40	; 0x28
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200040b8 	.word	0x200040b8
 800616c:	200040cc 	.word	0x200040cc
 8006170:	200040bc 	.word	0x200040bc
 8006174:	200040b0 	.word	0x200040b0
 8006178:	200040c0 	.word	0x200040c0
 800617c:	200040c4 	.word	0x200040c4

08006180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04d      	beq.n	800622e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006192:	2308      	movs	r3, #8
 8006194:	425b      	negs	r3, r3
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <vPortFree+0xb8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <vPortFree+0x44>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60fb      	str	r3, [r7, #12]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <vPortFree+0x62>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60bb      	str	r3, [r7, #8]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <vPortFree+0xb8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01e      	beq.n	800622e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11a      	bne.n	800622e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <vPortFree+0xb8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006208:	f7fe fff6 	bl	80051f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <vPortFree+0xbc>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4413      	add	r3, r2
 8006216:	4a09      	ldr	r2, [pc, #36]	; (800623c <vPortFree+0xbc>)
 8006218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800621a:	6938      	ldr	r0, [r7, #16]
 800621c:	f000 f874 	bl	8006308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <vPortFree+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a06      	ldr	r2, [pc, #24]	; (8006240 <vPortFree+0xc0>)
 8006228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800622a:	f7fe fff3 	bl	8005214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800622e:	bf00      	nop
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	200040cc 	.word	0x200040cc
 800623c:	200040bc 	.word	0x200040bc
 8006240:	200040c8 	.word	0x200040c8

08006244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800624a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800624e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <prvHeapInit+0xac>)
 8006252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00c      	beq.n	8006278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3307      	adds	r3, #7
 8006262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <prvHeapInit+0xac>)
 8006274:	4413      	add	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <prvHeapInit+0xb0>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <prvHeapInit+0xb0>)
 8006284:	2200      	movs	r2, #0
 8006286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006290:	2208      	movs	r2, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0307 	bic.w	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <prvHeapInit+0xb4>)
 80062a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <prvHeapInit+0xb4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <prvHeapInit+0xb4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	1ad2      	subs	r2, r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062c4:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <prvHeapInit+0xb4>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <prvHeapInit+0xb8>)
 80062d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a09      	ldr	r2, [pc, #36]	; (8006300 <prvHeapInit+0xbc>)
 80062da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <prvHeapInit+0xc0>)
 80062de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	200004b0 	.word	0x200004b0
 80062f4:	200040b0 	.word	0x200040b0
 80062f8:	200040b8 	.word	0x200040b8
 80062fc:	200040c0 	.word	0x200040c0
 8006300:	200040bc 	.word	0x200040bc
 8006304:	200040cc 	.word	0x200040cc

08006308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <prvInsertBlockIntoFreeList+0xac>)
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e002      	b.n	800631c <prvInsertBlockIntoFreeList+0x14>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d8f7      	bhi.n	8006316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	4413      	add	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d108      	bne.n	800634a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d118      	bne.n	8006390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d00d      	beq.n	8006386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e008      	b.n	8006398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e003      	b.n	8006398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d002      	beq.n	80063a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	200040b0 	.word	0x200040b0
 80063b8:	200040b8 	.word	0x200040b8

080063bc <memset>:
 80063bc:	4402      	add	r2, r0
 80063be:	4603      	mov	r3, r0
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d100      	bne.n	80063c6 <memset+0xa>
 80063c4:	4770      	bx	lr
 80063c6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ca:	e7f9      	b.n	80063c0 <memset+0x4>

080063cc <__libc_init_array>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4d0d      	ldr	r5, [pc, #52]	; (8006404 <__libc_init_array+0x38>)
 80063d0:	4c0d      	ldr	r4, [pc, #52]	; (8006408 <__libc_init_array+0x3c>)
 80063d2:	1b64      	subs	r4, r4, r5
 80063d4:	10a4      	asrs	r4, r4, #2
 80063d6:	2600      	movs	r6, #0
 80063d8:	42a6      	cmp	r6, r4
 80063da:	d109      	bne.n	80063f0 <__libc_init_array+0x24>
 80063dc:	4d0b      	ldr	r5, [pc, #44]	; (800640c <__libc_init_array+0x40>)
 80063de:	4c0c      	ldr	r4, [pc, #48]	; (8006410 <__libc_init_array+0x44>)
 80063e0:	f000 f826 	bl	8006430 <_init>
 80063e4:	1b64      	subs	r4, r4, r5
 80063e6:	10a4      	asrs	r4, r4, #2
 80063e8:	2600      	movs	r6, #0
 80063ea:	42a6      	cmp	r6, r4
 80063ec:	d105      	bne.n	80063fa <__libc_init_array+0x2e>
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f4:	4798      	blx	r3
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7ee      	b.n	80063d8 <__libc_init_array+0xc>
 80063fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fe:	4798      	blx	r3
 8006400:	3601      	adds	r6, #1
 8006402:	e7f2      	b.n	80063ea <__libc_init_array+0x1e>
 8006404:	080064f4 	.word	0x080064f4
 8006408:	080064f4 	.word	0x080064f4
 800640c:	080064f4 	.word	0x080064f4
 8006410:	080064f8 	.word	0x080064f8

08006414 <memcpy>:
 8006414:	440a      	add	r2, r1
 8006416:	4291      	cmp	r1, r2
 8006418:	f100 33ff 	add.w	r3, r0, #4294967295
 800641c:	d100      	bne.n	8006420 <memcpy+0xc>
 800641e:	4770      	bx	lr
 8006420:	b510      	push	{r4, lr}
 8006422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800642a:	4291      	cmp	r1, r2
 800642c:	d1f9      	bne.n	8006422 <memcpy+0xe>
 800642e:	bd10      	pop	{r4, pc}

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

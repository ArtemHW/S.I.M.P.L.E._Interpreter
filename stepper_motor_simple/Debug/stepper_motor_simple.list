
stepper_motor_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007880  08007880  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007888  08007888  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004710  20000010  080078a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004720  080078a0  00024720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c3b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035dc  00000000  00000000  00035cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  000392a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f43  00000000  00000000  0003a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017be0  00000000  00000000  0003b583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001623b  00000000  00000000  00053163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000964b0  00000000  00000000  0006939e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d4  00000000  00000000  000ff850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00104b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007760 	.word	0x08007760

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08007760 	.word	0x08007760

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b970 	b.w	8000ae4 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9e08      	ldr	r6, [sp, #32]
 8000822:	460d      	mov	r5, r1
 8000824:	4604      	mov	r4, r0
 8000826:	460f      	mov	r7, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4694      	mov	ip, r2
 8000830:	d965      	bls.n	80008fe <__udivmoddi4+0xe2>
 8000832:	fab2 f382 	clz	r3, r2
 8000836:	b143      	cbz	r3, 800084a <__udivmoddi4+0x2e>
 8000838:	fa02 fc03 	lsl.w	ip, r2, r3
 800083c:	f1c3 0220 	rsb	r2, r3, #32
 8000840:	409f      	lsls	r7, r3
 8000842:	fa20 f202 	lsr.w	r2, r0, r2
 8000846:	4317      	orrs	r7, r2
 8000848:	409c      	lsls	r4, r3
 800084a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800084e:	fa1f f58c 	uxth.w	r5, ip
 8000852:	fbb7 f1fe 	udiv	r1, r7, lr
 8000856:	0c22      	lsrs	r2, r4, #16
 8000858:	fb0e 7711 	mls	r7, lr, r1, r7
 800085c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000860:	fb01 f005 	mul.w	r0, r1, r5
 8000864:	4290      	cmp	r0, r2
 8000866:	d90a      	bls.n	800087e <__udivmoddi4+0x62>
 8000868:	eb1c 0202 	adds.w	r2, ip, r2
 800086c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000870:	f080 811c 	bcs.w	8000aac <__udivmoddi4+0x290>
 8000874:	4290      	cmp	r0, r2
 8000876:	f240 8119 	bls.w	8000aac <__udivmoddi4+0x290>
 800087a:	3902      	subs	r1, #2
 800087c:	4462      	add	r2, ip
 800087e:	1a12      	subs	r2, r2, r0
 8000880:	b2a4      	uxth	r4, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800088e:	fb00 f505 	mul.w	r5, r0, r5
 8000892:	42a5      	cmp	r5, r4
 8000894:	d90a      	bls.n	80008ac <__udivmoddi4+0x90>
 8000896:	eb1c 0404 	adds.w	r4, ip, r4
 800089a:	f100 32ff 	add.w	r2, r0, #4294967295
 800089e:	f080 8107 	bcs.w	8000ab0 <__udivmoddi4+0x294>
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	f240 8104 	bls.w	8000ab0 <__udivmoddi4+0x294>
 80008a8:	4464      	add	r4, ip
 80008aa:	3802      	subs	r0, #2
 80008ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b0:	1b64      	subs	r4, r4, r5
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11e      	cbz	r6, 80008be <__udivmoddi4+0xa2>
 80008b6:	40dc      	lsrs	r4, r3
 80008b8:	2300      	movs	r3, #0
 80008ba:	e9c6 4300 	strd	r4, r3, [r6]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0xbc>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	f000 80ed 	beq.w	8000aa6 <__udivmoddi4+0x28a>
 80008cc:	2100      	movs	r1, #0
 80008ce:	e9c6 0500 	strd	r0, r5, [r6]
 80008d2:	4608      	mov	r0, r1
 80008d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d8:	fab3 f183 	clz	r1, r3
 80008dc:	2900      	cmp	r1, #0
 80008de:	d149      	bne.n	8000974 <__udivmoddi4+0x158>
 80008e0:	42ab      	cmp	r3, r5
 80008e2:	d302      	bcc.n	80008ea <__udivmoddi4+0xce>
 80008e4:	4282      	cmp	r2, r0
 80008e6:	f200 80f8 	bhi.w	8000ada <__udivmoddi4+0x2be>
 80008ea:	1a84      	subs	r4, r0, r2
 80008ec:	eb65 0203 	sbc.w	r2, r5, r3
 80008f0:	2001      	movs	r0, #1
 80008f2:	4617      	mov	r7, r2
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0e2      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f8:	e9c6 4700 	strd	r4, r7, [r6]
 80008fc:	e7df      	b.n	80008be <__udivmoddi4+0xa2>
 80008fe:	b902      	cbnz	r2, 8000902 <__udivmoddi4+0xe6>
 8000900:	deff      	udf	#255	; 0xff
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8090 	bne.w	8000a2c <__udivmoddi4+0x210>
 800090c:	1a8a      	subs	r2, r1, r2
 800090e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000912:	fa1f fe8c 	uxth.w	lr, ip
 8000916:	2101      	movs	r1, #1
 8000918:	fbb2 f5f7 	udiv	r5, r2, r7
 800091c:	fb07 2015 	mls	r0, r7, r5, r2
 8000920:	0c22      	lsrs	r2, r4, #16
 8000922:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000926:	fb0e f005 	mul.w	r0, lr, r5
 800092a:	4290      	cmp	r0, r2
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x124>
 800092e:	eb1c 0202 	adds.w	r2, ip, r2
 8000932:	f105 38ff 	add.w	r8, r5, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x122>
 8000938:	4290      	cmp	r0, r2
 800093a:	f200 80cb 	bhi.w	8000ad4 <__udivmoddi4+0x2b8>
 800093e:	4645      	mov	r5, r8
 8000940:	1a12      	subs	r2, r2, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb2 f0f7 	udiv	r0, r2, r7
 8000948:	fb07 2210 	mls	r2, r7, r0, r2
 800094c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000950:	fb0e fe00 	mul.w	lr, lr, r0
 8000954:	45a6      	cmp	lr, r4
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x14e>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000960:	d202      	bcs.n	8000968 <__udivmoddi4+0x14c>
 8000962:	45a6      	cmp	lr, r4
 8000964:	f200 80bb 	bhi.w	8000ade <__udivmoddi4+0x2c2>
 8000968:	4610      	mov	r0, r2
 800096a:	eba4 040e 	sub.w	r4, r4, lr
 800096e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000972:	e79f      	b.n	80008b4 <__udivmoddi4+0x98>
 8000974:	f1c1 0720 	rsb	r7, r1, #32
 8000978:	408b      	lsls	r3, r1
 800097a:	fa22 fc07 	lsr.w	ip, r2, r7
 800097e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000982:	fa05 f401 	lsl.w	r4, r5, r1
 8000986:	fa20 f307 	lsr.w	r3, r0, r7
 800098a:	40fd      	lsrs	r5, r7
 800098c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000990:	4323      	orrs	r3, r4
 8000992:	fbb5 f8f9 	udiv	r8, r5, r9
 8000996:	fa1f fe8c 	uxth.w	lr, ip
 800099a:	fb09 5518 	mls	r5, r9, r8, r5
 800099e:	0c1c      	lsrs	r4, r3, #16
 80009a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009a4:	fb08 f50e 	mul.w	r5, r8, lr
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	fa02 f201 	lsl.w	r2, r2, r1
 80009ae:	fa00 f001 	lsl.w	r0, r0, r1
 80009b2:	d90b      	bls.n	80009cc <__udivmoddi4+0x1b0>
 80009b4:	eb1c 0404 	adds.w	r4, ip, r4
 80009b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009bc:	f080 8088 	bcs.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c0:	42a5      	cmp	r5, r4
 80009c2:	f240 8085 	bls.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ca:	4464      	add	r4, ip
 80009cc:	1b64      	subs	r4, r4, r5
 80009ce:	b29d      	uxth	r5, r3
 80009d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d4:	fb09 4413 	mls	r4, r9, r3, r4
 80009d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x1da>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009ec:	d26c      	bcs.n	8000ac8 <__udivmoddi4+0x2ac>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	d96a      	bls.n	8000ac8 <__udivmoddi4+0x2ac>
 80009f2:	3b02      	subs	r3, #2
 80009f4:	4464      	add	r4, ip
 80009f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009fa:	fba3 9502 	umull	r9, r5, r3, r2
 80009fe:	eba4 040e 	sub.w	r4, r4, lr
 8000a02:	42ac      	cmp	r4, r5
 8000a04:	46c8      	mov	r8, r9
 8000a06:	46ae      	mov	lr, r5
 8000a08:	d356      	bcc.n	8000ab8 <__udivmoddi4+0x29c>
 8000a0a:	d053      	beq.n	8000ab4 <__udivmoddi4+0x298>
 8000a0c:	b156      	cbz	r6, 8000a24 <__udivmoddi4+0x208>
 8000a0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a12:	eb64 040e 	sbc.w	r4, r4, lr
 8000a16:	fa04 f707 	lsl.w	r7, r4, r7
 8000a1a:	40ca      	lsrs	r2, r1
 8000a1c:	40cc      	lsrs	r4, r1
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	e9c6 7400 	strd	r7, r4, [r6]
 8000a24:	4618      	mov	r0, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2c:	f1c3 0120 	rsb	r1, r3, #32
 8000a30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a34:	fa20 f201 	lsr.w	r2, r0, r1
 8000a38:	fa25 f101 	lsr.w	r1, r5, r1
 8000a3c:	409d      	lsls	r5, r3
 8000a3e:	432a      	orrs	r2, r5
 8000a40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a50:	0c11      	lsrs	r1, r2, #16
 8000a52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a56:	fb00 f50e 	mul.w	r5, r0, lr
 8000a5a:	428d      	cmp	r5, r1
 8000a5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x258>
 8000a62:	eb1c 0101 	adds.w	r1, ip, r1
 8000a66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a6a:	d22f      	bcs.n	8000acc <__udivmoddi4+0x2b0>
 8000a6c:	428d      	cmp	r5, r1
 8000a6e:	d92d      	bls.n	8000acc <__udivmoddi4+0x2b0>
 8000a70:	3802      	subs	r0, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1b49      	subs	r1, r1, r5
 8000a76:	b292      	uxth	r2, r2
 8000a78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a84:	fb05 f10e 	mul.w	r1, r5, lr
 8000a88:	4291      	cmp	r1, r2
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x282>
 8000a8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a94:	d216      	bcs.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a96:	4291      	cmp	r1, r2
 8000a98:	d914      	bls.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a9a:	3d02      	subs	r5, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a52      	subs	r2, r2, r1
 8000aa0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aa4:	e738      	b.n	8000918 <__udivmoddi4+0xfc>
 8000aa6:	4631      	mov	r1, r6
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	e708      	b.n	80008be <__udivmoddi4+0xa2>
 8000aac:	4639      	mov	r1, r7
 8000aae:	e6e6      	b.n	800087e <__udivmoddi4+0x62>
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	e6fb      	b.n	80008ac <__udivmoddi4+0x90>
 8000ab4:	4548      	cmp	r0, r9
 8000ab6:	d2a9      	bcs.n	8000a0c <__udivmoddi4+0x1f0>
 8000ab8:	ebb9 0802 	subs.w	r8, r9, r2
 8000abc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	e7a3      	b.n	8000a0c <__udivmoddi4+0x1f0>
 8000ac4:	4645      	mov	r5, r8
 8000ac6:	e7ea      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ac8:	462b      	mov	r3, r5
 8000aca:	e794      	b.n	80009f6 <__udivmoddi4+0x1da>
 8000acc:	4640      	mov	r0, r8
 8000ace:	e7d1      	b.n	8000a74 <__udivmoddi4+0x258>
 8000ad0:	46d0      	mov	r8, sl
 8000ad2:	e77b      	b.n	80009cc <__udivmoddi4+0x1b0>
 8000ad4:	3d02      	subs	r5, #2
 8000ad6:	4462      	add	r2, ip
 8000ad8:	e732      	b.n	8000940 <__udivmoddi4+0x124>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e70a      	b.n	80008f4 <__udivmoddi4+0xd8>
 8000ade:	4464      	add	r4, ip
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	e742      	b.n	800096a <__udivmoddi4+0x14e>

08000ae4 <__aeabi_idiv0>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <vApplicationGetIdleTaskMemory+0x30>)
 8000afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	20000090 	.word	0x20000090

08000b1c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <vApplicationGetTimerTaskMemory+0x30>)
 8000b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20000290 	.word	0x20000290
 8000b4c:	200002f4 	.word	0x200002f4

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b09e      	sub	sp, #120	; 0x78
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	counter_for_steps = 0;
 8000b56:	4b7e      	ldr	r3, [pc, #504]	; (8000d50 <main+0x200>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	677b      	str	r3, [r7, #116]	; 0x74
 8000b60:	e007      	b.n	8000b72 <main+0x22>
		exm.execution_memory[i] = 0;
 8000b62:	4a7c      	ldr	r2, [pc, #496]	; (8000d54 <main+0x204>)
 8000b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b66:	4413      	add	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b6e:	3301      	adds	r3, #1
 8000b70:	677b      	str	r3, [r7, #116]	; 0x74
 8000b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b74:	2b76      	cmp	r3, #118	; 0x76
 8000b76:	d9f4      	bls.n	8000b62 <main+0x12>
	}
	exm.position = 0;
 8000b78:	4b76      	ldr	r3, [pc, #472]	; (8000d54 <main+0x204>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	exm.size_of_instruction = 0;
 8000b80:	4b74      	ldr	r3, [pc, #464]	; (8000d54 <main+0x204>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	exm.start_of_instruction = 0;
 8000b88:	4b72      	ldr	r3, [pc, #456]	; (8000d54 <main+0x204>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	exm.function_pointer_S = function_of_S;
 8000b90:	4b70      	ldr	r3, [pc, #448]	; (8000d54 <main+0x204>)
 8000b92:	4a71      	ldr	r2, [pc, #452]	; (8000d58 <main+0x208>)
 8000b94:	67da      	str	r2, [r3, #124]	; 0x7c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fe4d 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f8f9 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 fa1b 	bl	8000fd8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ba2:	f000 f955 	bl	8000e50 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ba6:	f000 f9eb 	bl	8000f80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000baa:	486c      	ldr	r0, [pc, #432]	; (8000d5c <main+0x20c>)
 8000bac:	f001 fe56 	bl	800285c <HAL_TIM_Base_Start_IT>
  uint16_t base = 2000;
 8000bb0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bb4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
  TIM3->ARR = base;
 8000bb8:	4a69      	ldr	r2, [pc, #420]	; (8000d60 <main+0x210>)
 8000bba:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM3->CCR1 = (uint16_t) base*0.98;
 8000bc0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd87 	bl	80006d8 <__aeabi_i2d>
 8000bca:	a35f      	add	r3, pc, #380	; (adr r3, 8000d48 <main+0x1f8>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fb06 	bl	80001e0 <__aeabi_dmul>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4c61      	ldr	r4, [pc, #388]	; (8000d60 <main+0x210>)
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f7ff fde5 	bl	80007ac <__aeabi_d2uiz>
 8000be2:	4603      	mov	r3, r0
 8000be4:	6363      	str	r3, [r4, #52]	; 0x34
  TIM3->CCR2 = (uint16_t) base*0.98;
 8000be6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd74 	bl	80006d8 <__aeabi_i2d>
 8000bf0:	a355      	add	r3, pc, #340	; (adr r3, 8000d48 <main+0x1f8>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff faf3 	bl	80001e0 <__aeabi_dmul>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4c58      	ldr	r4, [pc, #352]	; (8000d60 <main+0x210>)
 8000c00:	4610      	mov	r0, r2
 8000c02:	4619      	mov	r1, r3
 8000c04:	f7ff fdd2 	bl	80007ac <__aeabi_d2uiz>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM3->CCR3 = (uint16_t) base*0.98;
 8000c0c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fd61 	bl	80006d8 <__aeabi_i2d>
 8000c16:	a34c      	add	r3, pc, #304	; (adr r3, 8000d48 <main+0x1f8>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fae0 	bl	80001e0 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4c4e      	ldr	r4, [pc, #312]	; (8000d60 <main+0x210>)
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff fdbf 	bl	80007ac <__aeabi_d2uiz>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIM3->CCR4 = (uint16_t) base*0.98;
 8000c32:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd4e 	bl	80006d8 <__aeabi_i2d>
 8000c3c:	a342      	add	r3, pc, #264	; (adr r3, 8000d48 <main+0x1f8>)
 8000c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c42:	f7ff facd 	bl	80001e0 <__aeabi_dmul>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4c45      	ldr	r4, [pc, #276]	; (8000d60 <main+0x210>)
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f7ff fdac 	bl	80007ac <__aeabi_d2uiz>
 8000c54:	4603      	mov	r3, r0
 8000c56:	6423      	str	r3, [r4, #64]	; 0x40

  USART1->CR1 |= USART_CR1_RXNEIE;
 8000c58:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <main+0x214>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <main+0x214>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <main+0x214>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a3e      	ldr	r2, [pc, #248]	; (8000d64 <main+0x214>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 8000c70:	4b3c      	ldr	r3, [pc, #240]	; (8000d64 <main+0x214>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a3b      	ldr	r2, [pc, #236]	; (8000d64 <main+0x214>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 8000c7c:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <main+0x214>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <main+0x214>)
 8000c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c86:	60d3      	str	r3, [r2, #12]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 8000c88:	f003 fe3f 	bl	800490a <xEventGroupCreate>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <main+0x218>)
 8000c90:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <main+0x218>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2140      	movs	r1, #64	; 0x40
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 ff57 	bl	8004b4c <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(10, 1);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f004 f994 	bl	8004fd0 <xQueueGenericCreate>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <main+0x21c>)
 8000cac:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 500);
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <main+0x220>)
 8000cb0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 8000cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fdd2 	bl	8004872 <osThreadCreate>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <main+0x224>)
 8000cd2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 500);
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <main+0x228>)
 8000cd6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000cda:	461d      	mov	r5, r3
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 8000ce8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 fdbf 	bl	8004872 <osThreadCreate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <main+0x22c>)
 8000cf8:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_comunication */
  osThreadDef(UART_comunication, uart_comunication, osPriorityNormal, 0, 160);
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <main+0x230>)
 8000cfc:	f107 041c 	add.w	r4, r7, #28
 8000d00:	461d      	mov	r5, r3
 8000d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_comunicationHandle = osThreadCreate(osThread(UART_comunication), NULL);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 fdac 	bl	8004872 <osThreadCreate>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <main+0x234>)
 8000d1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 500);
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <main+0x238>)
 8000d22:	463c      	mov	r4, r7
 8000d24:	461d      	mov	r5, r3
 8000d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 8000d32:	463b      	mov	r3, r7
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fd9b 	bl	8004872 <osThreadCreate>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <main+0x23c>)
 8000d40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d42:	f003 fd8f 	bl	8004864 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x1f6>
 8000d48:	f5c28f5c 	.word	0xf5c28f5c
 8000d4c:	3fef5c28 	.word	0x3fef5c28
 8000d50:	20000790 	.word	0x20000790
 8000d54:	20000798 	.word	0x20000798
 8000d58:	08001049 	.word	0x08001049
 8000d5c:	200006f4 	.word	0x200006f4
 8000d60:	40000400 	.word	0x40000400
 8000d64:	40011000 	.word	0x40011000
 8000d68:	20000818 	.word	0x20000818
 8000d6c:	20000794 	.word	0x20000794
 8000d70:	08007788 	.word	0x08007788
 8000d74:	20000780 	.word	0x20000780
 8000d78:	080077b0 	.word	0x080077b0
 8000d7c:	20000784 	.word	0x20000784
 8000d80:	080077e0 	.word	0x080077e0
 8000d84:	20000788 	.word	0x20000788
 8000d88:	08007810 	.word	0x08007810
 8000d8c:	2000078c 	.word	0x2000078c

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 fca4 	bl	80076ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <SystemClock_Config+0xb8>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <SystemClock_Config+0xb8>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <SystemClock_Config+0xb8>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <SystemClock_Config+0xbc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <SystemClock_Config+0xbc>)
 8000dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <SystemClock_Config+0xbc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f84f 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e10:	f000 fb16 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fab2 	bl	8002398 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e3a:	f000 fb01 	bl	8001440 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	; 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000e82:	4a3e      	ldr	r2, [pc, #248]	; (8000f7c <MX_TIM3_Init+0x12c>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000e88:	220f      	movs	r2, #15
 8000e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea6:	4834      	ldr	r0, [pc, #208]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000ea8:	f001 fc88 	bl	80027bc <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000eb2:	f000 fac5 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	482d      	ldr	r0, [pc, #180]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000ec4:	f002 f864 	bl	8002f90 <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ece:	f000 fab7 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000ed4:	f001 fd24 	bl	8002920 <HAL_TIM_PWM_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ede:	f000 faaf 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4821      	ldr	r0, [pc, #132]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000ef2:	f002 fc09 	bl	8003708 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000efc:	f000 faa0 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f00:	2360      	movs	r3, #96	; 0x60
 8000f02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 980;
 8000f04:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8000f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4817      	ldr	r0, [pc, #92]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000f1a:	f001 ff77 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f24:	f000 fa8c 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4812      	ldr	r0, [pc, #72]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000f30:	f001 ff6c 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f3a:	f000 fa81 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2208      	movs	r2, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000f46:	f001 ff61 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f50:	f000 fa76 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	220c      	movs	r2, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000f5c:	f001 ff56 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000f66:	f000 fa6b 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <MX_TIM3_Init+0x128>)
 8000f6c:	f000 fac2 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000f70:	bf00      	nop
 8000f72:	3738      	adds	r7, #56	; 0x38
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200006f4 	.word	0x200006f4
 8000f7c:	40000400 	.word	0x40000400

08000f80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <MX_USART1_UART_Init+0x54>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000fa2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_USART1_UART_Init+0x50>)
 8000fbc:	f002 fc26 	bl	800380c <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000fc6:	f000 fa3b 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000073c 	.word	0x2000073c
 8000fd4:	40011000 	.word	0x40011000

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_GPIO_Init+0x4c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <MX_GPIO_Init+0x4c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_GPIO_Init+0x4c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_GPIO_Init+0x4c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <MX_GPIO_Init+0x4c>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_GPIO_Init+0x4c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <uart1_rx_callback>:

/* USER CODE BEGIN 4 */

void uart1_rx_callback(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <uart1_rx_callback+0x18>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	2300      	movs	r3, #0
 8001032:	2201      	movs	r2, #1
 8001034:	4903      	ldr	r1, [pc, #12]	; (8001044 <uart1_rx_callback+0x1c>)
 8001036:	f004 f923 	bl	8005280 <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 800103a:	bf00      	nop

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000794 	.word	0x20000794
 8001044:	40011004 	.word	0x40011004

08001048 <function_of_S>:

void function_of_S(){
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
	uint32_t base = 1000000/exm.start_speed_value; // Speed of HCLK is 16MHz but prescaler for TIM3 is 15 (15+1) so you receive 1MHz clock for TIM3
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <function_of_S+0xc8>)
 8001050:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001054:	461a      	mov	r2, r3
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <function_of_S+0xcc>)
 8001058:	fb93 f3f2 	sdiv	r3, r3, r2
 800105c:	607b      	str	r3, [r7, #4]
	  TIM3->ARR = base;
 800105e:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <function_of_S+0xd0>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	62d3      	str	r3, [r2, #44]	; 0x2c
	  TIM3->CCR1 = (uint16_t) base*0.99;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fb35 	bl	80006d8 <__aeabi_i2d>
 800106e:	a326      	add	r3, pc, #152	; (adr r3, 8001108 <function_of_S+0xc0>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff f8b4 	bl	80001e0 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4c26      	ldr	r4, [pc, #152]	; (8001118 <function_of_S+0xd0>)
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fb93 	bl	80007ac <__aeabi_d2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM3->CCR2 = (uint16_t) base*0.99;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fb22 	bl	80006d8 <__aeabi_i2d>
 8001094:	a31c      	add	r3, pc, #112	; (adr r3, 8001108 <function_of_S+0xc0>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff f8a1 	bl	80001e0 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4c1d      	ldr	r4, [pc, #116]	; (8001118 <function_of_S+0xd0>)
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fb80 	bl	80007ac <__aeabi_d2uiz>
 80010ac:	4603      	mov	r3, r0
 80010ae:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM3->CCR3 = (uint16_t) base*0.99;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fb0f 	bl	80006d8 <__aeabi_i2d>
 80010ba:	a313      	add	r3, pc, #76	; (adr r3, 8001108 <function_of_S+0xc0>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff f88e 	bl	80001e0 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4c13      	ldr	r4, [pc, #76]	; (8001118 <function_of_S+0xd0>)
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fb6d 	bl	80007ac <__aeabi_d2uiz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM3->CCR4 = (uint16_t) base*0.99;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fafc 	bl	80006d8 <__aeabi_i2d>
 80010e0:	a309      	add	r3, pc, #36	; (adr r3, 8001108 <function_of_S+0xc0>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff f87b 	bl	80001e0 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <function_of_S+0xd0>)
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fb5a 	bl	80007ac <__aeabi_d2uiz>
 80010f8:	4603      	mov	r3, r0
 80010fa:	6423      	str	r3, [r4, #64]	; 0x40
	__asm__ volatile("NOP");
 80010fc:	bf00      	nop
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	bf00      	nop
 8001108:	7ae147ae 	.word	0x7ae147ae
 800110c:	3fefae14 	.word	0x3fefae14
 8001110:	20000798 	.word	0x20000798
 8001114:	000f4240 	.word	0x000f4240
 8001118:	40000400 	.word	0x40000400

0800111c <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <programing_mode+0x30>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	2200      	movs	r2, #0
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	f003 fc04 	bl	8004940 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2211      	movs	r2, #17
 800113c:	4904      	ldr	r1, [pc, #16]	; (8001150 <programing_mode+0x34>)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <programing_mode+0x38>)
 8001140:	f002 fbb1 	bl	80038a6 <HAL_UART_Transmit>
	  vTaskDelay(200);
 8001144:	20c8      	movs	r0, #200	; 0xc8
 8001146:	f004 fd19 	bl	8005b7c <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 800114a:	e7eb      	b.n	8001124 <programing_mode+0x8>
 800114c:	20000818 	.word	0x20000818
 8001150:	0800782c 	.word	0x0800782c
 8001154:	2000073c 	.word	0x2000073c

08001158 <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <interpreter+0x194>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f107 010b 	add.w	r1, r7, #11
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	4618      	mov	r0, r3
 800116e:	f004 f923 	bl	80053b8 <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8001172:	f107 010b 	add.w	r1, r7, #11
 8001176:	230a      	movs	r3, #10
 8001178:	2201      	movs	r2, #1
 800117a:	485d      	ldr	r0, [pc, #372]	; (80012f0 <interpreter+0x198>)
 800117c:	f002 fb93 	bl	80038a6 <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	da04      	bge.n	8001192 <interpreter+0x3a>
		  pData &= ~(1<<7);
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800118e:	b2db      	uxtb	r3, r3
 8001190:	72fb      	strb	r3, [r7, #11]
	  }
	  __asm__ volatile("NOP");
 8001192:	bf00      	nop
	  switch (pData) {
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	2b53      	cmp	r3, #83	; 0x53
 8001198:	d054      	beq.n	8001244 <interpreter+0xec>
 800119a:	2b53      	cmp	r3, #83	; 0x53
 800119c:	f300 809e 	bgt.w	80012dc <interpreter+0x184>
 80011a0:	2b50      	cmp	r3, #80	; 0x50
 80011a2:	d008      	beq.n	80011b6 <interpreter+0x5e>
 80011a4:	2b50      	cmp	r3, #80	; 0x50
 80011a6:	f300 8099 	bgt.w	80012dc <interpreter+0x184>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8098 	beq.w	80012e0 <interpreter+0x188>
 80011b0:	2b45      	cmp	r3, #69	; 0x45
 80011b2:	d03a      	beq.n	800122a <interpreter+0xd2>
			__asm__ volatile("NOP");
			break;
	    case 0:
			break;
		default:
			break;
 80011b4:	e092      	b.n	80012dc <interpreter+0x184>
			xQueueReceive(uart_queue_rx, &pData, 5);
 80011b6:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <interpreter+0x194>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f107 010b 	add.w	r1, r7, #11
 80011be:	2205      	movs	r2, #5
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 f8f9 	bl	80053b8 <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 80011c6:	f107 010b 	add.w	r1, r7, #11
 80011ca:	230a      	movs	r3, #10
 80011cc:	2201      	movs	r2, #1
 80011ce:	4848      	ldr	r0, [pc, #288]	; (80012f0 <interpreter+0x198>)
 80011d0:	f002 fb69 	bl	80038a6 <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da04      	bge.n	80011e6 <interpreter+0x8e>
					  pData &= ~(1<<7);
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	72fb      	strb	r3, [r7, #11]
			__asm__ volatile("NOP");
 80011e6:	bf00      	nop
			switch (pData) {
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	2b6f      	cmp	r3, #111	; 0x6f
 80011ec:	d002      	beq.n	80011f4 <interpreter+0x9c>
 80011ee:	2b78      	cmp	r3, #120	; 0x78
 80011f0:	d00d      	beq.n	800120e <interpreter+0xb6>
					break;
 80011f2:	e019      	b.n	8001228 <interpreter+0xd0>
					xEventGroupClearBits(EventGroup, 0x40);
 80011f4:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <interpreter+0x19c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fc6e 	bl	8004adc <xEventGroupClearBits>
					xEventGroupSetBits(EventGroup, 0x80);
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <interpreter+0x19c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fca0 	bl	8004b4c <xEventGroupSetBits>
					break;
 800120c:	e00c      	b.n	8001228 <interpreter+0xd0>
					xEventGroupClearBits(EventGroup, 0x80);
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <interpreter+0x19c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fc61 	bl	8004adc <xEventGroupClearBits>
					xEventGroupSetBits(EventGroup, 0x40);
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <interpreter+0x19c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2140      	movs	r1, #64	; 0x40
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fc93 	bl	8004b4c <xEventGroupSetBits>
					break;
 8001226:	bf00      	nop
			break;
 8001228:	e05d      	b.n	80012e6 <interpreter+0x18e>
	    	xEventGroupClearBits(EventGroup, 0x80);
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <interpreter+0x19c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fc53 	bl	8004adc <xEventGroupClearBits>
	    	xEventGroupSetBits(EventGroup, 0x40);
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <interpreter+0x19c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2140      	movs	r1, #64	; 0x40
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fc85 	bl	8004b4c <xEventGroupSetBits>
	    	break;
 8001242:	e050      	b.n	80012e6 <interpreter+0x18e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <interpreter+0x19c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fc46 	bl	8004adc <xEventGroupClearBits>
 8001250:	4603      	mov	r3, r0
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	2b80      	cmp	r3, #128	; 0x80
 8001258:	d144      	bne.n	80012e4 <interpreter+0x18c>
			exm.start_speed_value = 0;
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <interpreter+0x1a0>)
 800125c:	2200      	movs	r2, #0
 800125e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			char temp = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	e030      	b.n	80012ce <interpreter+0x176>
				xQueueReceive(uart_queue_rx, &temp, 5);
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <interpreter+0x194>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f107 010a 	add.w	r1, r7, #10
 8001274:	2205      	movs	r2, #5
 8001276:	4618      	mov	r0, r3
 8001278:	f004 f89e 	bl	80053b8 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 800127c:	7abb      	ldrb	r3, [r7, #10]
 800127e:	2b0d      	cmp	r3, #13
 8001280:	d02a      	beq.n	80012d8 <interpreter+0x180>
 8001282:	7abb      	ldrb	r3, [r7, #10]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d027      	beq.n	80012d8 <interpreter+0x180>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d024      	beq.n	80012d8 <interpreter+0x180>
				if(i == 3) break;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d020      	beq.n	80012d6 <interpreter+0x17e>
				if ((temp & (1<<7)) == 0x80){
 8001294:	7abb      	ldrb	r3, [r7, #10]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	da04      	bge.n	80012a6 <interpreter+0x14e>
					temp &= ~(1<<7);
 800129c:	7abb      	ldrb	r3, [r7, #10]
 800129e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	72bb      	strb	r3, [r7, #10]
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <interpreter+0x1a0>)
 80012a8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80012ac:	461a      	mov	r2, r3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	7abb      	ldrb	r3, [r7, #10]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b30      	subs	r3, #48	; 0x30
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <interpreter+0x1a0>)
 80012c4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			for(int i = 0; i < 4; i++){
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	ddcb      	ble.n	800126c <interpreter+0x114>
 80012d4:	e000      	b.n	80012d8 <interpreter+0x180>
				if(i == 3) break;
 80012d6:	bf00      	nop
			__asm__ volatile("NOP");
 80012d8:	bf00      	nop
			break;
 80012da:	e004      	b.n	80012e6 <interpreter+0x18e>
			break;
 80012dc:	bf00      	nop
 80012de:	e002      	b.n	80012e6 <interpreter+0x18e>
			break;
 80012e0:	bf00      	nop
 80012e2:	e000      	b.n	80012e6 <interpreter+0x18e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 80012e4:	bf00      	nop
	}

	  pData = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	72fb      	strb	r3, [r7, #11]
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 80012ea:	e739      	b.n	8001160 <interpreter+0x8>
 80012ec:	20000794 	.word	0x20000794
 80012f0:	2000073c 	.word	0x2000073c
 80012f4:	20000818 	.word	0x20000818
 80012f8:	20000798 	.word	0x20000798

080012fc <uart_comunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_comunication */
void uart_comunication(void const * argument)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_comunication */
  /* Infinite loop */
  for(;;)
 8001304:	e7fe      	b.n	8001304 <uart_comunication+0x8>
	...

08001308 <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <execution_from_memory+0x30>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2200      	movs	r2, #0
 800131e:	2140      	movs	r1, #64	; 0x40
 8001320:	f003 fb0e 	bl	8004940 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	220f      	movs	r2, #15
 8001328:	4904      	ldr	r1, [pc, #16]	; (800133c <execution_from_memory+0x34>)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <execution_from_memory+0x38>)
 800132c:	f002 fabb 	bl	80038a6 <HAL_UART_Transmit>


	  vTaskDelay(200);
 8001330:	20c8      	movs	r0, #200	; 0xc8
 8001332:	f004 fc23 	bl	8005b7c <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8001336:	e7eb      	b.n	8001310 <execution_from_memory+0x8>
 8001338:	20000818 	.word	0x20000818
 800133c:	08007840 	.word	0x08007840
 8001340:	2000073c 	.word	0x2000073c

08001344 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d101      	bne.n	800135a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001356:	f000 fa8f 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a35      	ldr	r2, [pc, #212]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d162      	bne.n	800142a <HAL_TIM_PeriodElapsedCallback+0xe6>
		switch (counter_for_steps) {
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d84f      	bhi.n	800140c <HAL_TIM_PeriodElapsedCallback+0xc8>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001385 	.word	0x08001385
 8001378:	080013a7 	.word	0x080013a7
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013eb 	.word	0x080013eb
			case 0:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001384:	2108      	movs	r1, #8
 8001386:	482d      	ldr	r0, [pc, #180]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001388:	f001 fbd4 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800138c:	210c      	movs	r1, #12
 800138e:	482b      	ldr	r0, [pc, #172]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001390:	f001 fbd0 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001394:	2100      	movs	r1, #0
 8001396:	4829      	ldr	r0, [pc, #164]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001398:	f001 fb1c 	bl	80029d4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800139c:	2104      	movs	r1, #4
 800139e:	4827      	ldr	r0, [pc, #156]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013a0:	f001 fb18 	bl	80029d4 <HAL_TIM_PWM_Start>
				break;
 80013a4:	e033      	b.n	800140e <HAL_TIM_PeriodElapsedCallback+0xca>
			case 1:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80013a6:	2100      	movs	r1, #0
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013aa:	f001 fbc3 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80013ae:	210c      	movs	r1, #12
 80013b0:	4822      	ldr	r0, [pc, #136]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013b2:	f001 fbbf 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013b6:	2104      	movs	r1, #4
 80013b8:	4820      	ldr	r0, [pc, #128]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013ba:	f001 fb0b 	bl	80029d4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80013be:	2108      	movs	r1, #8
 80013c0:	481e      	ldr	r0, [pc, #120]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013c2:	f001 fb07 	bl	80029d4 <HAL_TIM_PWM_Start>
				break;
 80013c6:	e022      	b.n	800140e <HAL_TIM_PeriodElapsedCallback+0xca>
			case 2:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013cc:	f001 fbb2 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80013d0:	2104      	movs	r1, #4
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013d4:	f001 fbae 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80013d8:	2108      	movs	r1, #8
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013dc:	f001 fafa 	bl	80029d4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80013e0:	210c      	movs	r1, #12
 80013e2:	4816      	ldr	r0, [pc, #88]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013e4:	f001 faf6 	bl	80029d4 <HAL_TIM_PWM_Start>
				break;
 80013e8:	e011      	b.n	800140e <HAL_TIM_PeriodElapsedCallback+0xca>
			case 3:
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013ee:	f001 fba1 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80013f2:	2108      	movs	r1, #8
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013f6:	f001 fb9d 	bl	8002b34 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80013fa:	210c      	movs	r1, #12
 80013fc:	480f      	ldr	r0, [pc, #60]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80013fe:	f001 fae9 	bl	80029d4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001406:	f001 fae5 	bl	80029d4 <HAL_TIM_PWM_Start>
				break;
 800140a:	e000      	b.n	800140e <HAL_TIM_PeriodElapsedCallback+0xca>
			default:
				break;
 800140c:	bf00      	nop
		}
		counter_for_steps == 3 ? counter_for_steps = 0 : counter_for_steps++;
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d103      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0xda>
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 800141c:	e005      	b.n	800142a <HAL_TIM_PeriodElapsedCallback+0xe6>
		counter_for_steps == 3 ? counter_for_steps = 0 : counter_for_steps++;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40000400 	.word	0x40000400
 8001438:	20000790 	.word	0x20000790
 800143c:	200006f4 	.word	0x200006f4

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_MspInit+0x54>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_MspInit+0x54>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_MspInit+0x54>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_MspInit+0x54>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_MspInit+0x54>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_MspInit+0x54>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	210f      	movs	r1, #15
 800148e:	f06f 0001 	mvn.w	r0, #1
 8001492:	f000 fac9 	bl	8001a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d115      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_TIM_Base_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_TIM_Base_MspInit+0x4c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_TIM_Base_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2106      	movs	r1, #6
 80014d6:	201d      	movs	r0, #29
 80014d8:	f000 faa6 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014dc:	201d      	movs	r0, #29
 80014de:	f000 fabf 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <HAL_TIM_MspPostInit+0xa4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d13b      	bne.n	800158e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_TIM_MspPostInit+0xa8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_TIM_MspPostInit+0xa8>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_TIM_MspPostInit+0xa8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_TIM_MspPostInit+0xa8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_TIM_MspPostInit+0xa8>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_TIM_MspPostInit+0xa8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800154e:	23c0      	movs	r3, #192	; 0xc0
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800155e:	2302      	movs	r3, #2
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <HAL_TIM_MspPostInit+0xac>)
 800156a:	f000 fb19 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800156e:	2303      	movs	r3, #3
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800157e:	2302      	movs	r3, #2
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 800158a:	f000 fb09 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40000400 	.word	0x40000400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_UART_MspInit+0x94>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d134      	bne.n	8001634 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001614:	2307      	movs	r3, #7
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <HAL_UART_MspInit+0x9c>)
 8001620:	f000 fabe 	bl	8001ba0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2105      	movs	r1, #5
 8001628:	2025      	movs	r0, #37	; 0x25
 800162a:	f000 f9fd 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800162e:	2025      	movs	r0, #37	; 0x25
 8001630:	f000 fa16 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40011000 	.word	0x40011000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	; 0x38
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_InitTick+0xe8>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a33      	ldr	r2, [pc, #204]	; (8001730 <HAL_InitTick+0xe8>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_InitTick+0xe8>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001674:	f107 0210 	add.w	r2, r7, #16
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f001 f86a 	bl	8002758 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800168e:	f001 f83b 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8001692:	6378      	str	r0, [r7, #52]	; 0x34
 8001694:	e004      	b.n	80016a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001696:	f001 f837 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 800169a:	4603      	mov	r3, r0
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a2:	4a24      	ldr	r2, [pc, #144]	; (8001734 <HAL_InitTick+0xec>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	3b01      	subs	r3, #1
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_InitTick+0xf0>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_InitTick+0xf0>)
 80016b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016bc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <HAL_InitTick+0xf0>)
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_InitTick+0xf0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_InitTick+0xf0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_InitTick+0xf0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80016d6:	4818      	ldr	r0, [pc, #96]	; (8001738 <HAL_InitTick+0xf0>)
 80016d8:	f001 f870 	bl	80027bc <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11b      	bne.n	8001722 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80016ea:	4813      	ldr	r0, [pc, #76]	; (8001738 <HAL_InitTick+0xf0>)
 80016ec:	f001 f8b6 	bl	800285c <HAL_TIM_Base_Start_IT>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d111      	bne.n	8001722 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016fe:	201c      	movs	r0, #28
 8001700:	f000 f9ae 	bl	8001a60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d808      	bhi.n	800171c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800170a:	2200      	movs	r2, #0
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	201c      	movs	r0, #28
 8001710:	f000 f98a 	bl	8001a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_InitTick+0xf4>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e002      	b.n	8001722 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001726:	4618      	mov	r0, r3
 8001728:	3738      	adds	r7, #56	; 0x38
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	431bde83 	.word	0x431bde83
 8001738:	2000081c 	.word	0x2000081c
 800173c:	20000004 	.word	0x20000004

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM2_IRQHandler+0x10>)
 8001772:	f001 fa43 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000081c 	.word	0x2000081c

08001780 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <TIM3_IRQHandler+0x10>)
 8001786:	f001 fa39 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200006f4 	.word	0x200006f4

08001794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <USART1_IRQHandler+0x20>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 80017a4:	f7ff fc40 	bl	8001028 <uart1_rx_callback>
		__asm__ volatile("NOP");
 80017a8:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <USART1_IRQHandler+0x24>)
 80017ac:	f002 f90e 	bl	80039cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40011000 	.word	0x40011000
 80017b8:	2000073c 	.word	0x2000073c

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180a:	f7ff ffd7 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f005 ff75 	bl	80076fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff f99d 	bl	8000b50 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001818:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001824:	08007890 	.word	0x08007890
  ldr r2, =_sbss
 8001828:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800182c:	20004720 	.word	0x20004720

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f8d8 	bl	8001a12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fef0 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fdf0 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000864 	.word	0x20000864

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000864 	.word	0x20000864

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff4c 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3a:	f7ff ff61 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f7ff ffb1 	bl	80019ac <NVIC_EncodePriority>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff80 	bl	8001958 <__NVIC_SetPriority>
}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff54 	bl	800191c <__NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a8a:	f7ff ff09 	bl	80018a0 <HAL_GetTick>
 8001a8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d008      	beq.n	8001aae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e052      	b.n	8001b54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0216 	bic.w	r2, r2, #22
 8001abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001acc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <HAL_DMA_Abort+0x62>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0208 	bic.w	r2, r2, #8
 8001aec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afe:	e013      	b.n	8001b28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b00:	f7ff fece 	bl	80018a0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d90c      	bls.n	8001b28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2203      	movs	r2, #3
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e015      	b.n	8001b54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e4      	bne.n	8001b00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	223f      	movs	r2, #63	; 0x3f
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d004      	beq.n	8001b7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2280      	movs	r2, #128	; 0x80
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00c      	b.n	8001b94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e159      	b.n	8001e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8148 	bne.w	8001e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a2 	beq.w	8001e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x202>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x1fe>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x1f6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a45      	ldr	r2, [pc, #276]	; (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x1f2>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f aea2 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e267      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b85      	ldr	r3, [pc, #532]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e242      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x74>
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a75      	ldr	r2, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6f      	ldr	r2, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6c      	ldr	r2, [pc, #432]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f40:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc9e 	bl	80018a0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fc9a 	bl	80018a0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e207      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fc8a 	bl	80018a0 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fc86 	bl	80018a0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1f3      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1c7      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x244>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fc3f 	bl	80018a0 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fc3b 	bl	80018a0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1a8      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x244>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fc1e 	bl	80018a0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff fc1a 	bl	80018a0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e187      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d036      	beq.n	8002100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x248>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff fbfe 	bl	80018a0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fbfa 	bl	80018a0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e167      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x200>
 80020c6:	e01b      	b.n	8002100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_OscConfig+0x248>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fbe7 	bl	80018a0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e00e      	b.n	80020f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff fbe3 	bl	80018a0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d907      	bls.n	80020f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e150      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	42470000 	.word	0x42470000
 80020f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ea      	bne.n	80020d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8097 	beq.w	800223c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a7c      	ldr	r2, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b7a      	ldr	r3, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b77      	ldr	r3, [pc, #476]	; (800231c <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b74      	ldr	r3, [pc, #464]	; (800231c <HAL_RCC_OscConfig+0x474>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a73      	ldr	r2, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x474>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff fba3 	bl	80018a0 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff fb9f 	bl	80018a0 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e10c      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x474>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x2ea>
 8002184:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a63      	ldr	r2, [pc, #396]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x324>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x30c>
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5e      	ldr	r2, [pc, #376]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a5b      	ldr	r2, [pc, #364]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0x324>
 80021b4:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a54      	ldr	r2, [pc, #336]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff fb64 	bl	80018a0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff fb60 	bl	80018a0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0cb      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ee      	beq.n	80021dc <HAL_RCC_OscConfig+0x334>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff fb4e 	bl	80018a0 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff fb4a 	bl	80018a0 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0b5      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a38      	ldr	r2, [pc, #224]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a1 	beq.w	8002388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d05c      	beq.n	800230c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d141      	bne.n	80022de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCC_OscConfig+0x478>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fb1e 	bl	80018a0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff fb1a 	bl	80018a0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e087      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	019b      	lsls	r3, r3, #6
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	491b      	ldr	r1, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x478>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff faf3 	bl	80018a0 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff faef 	bl	80018a0 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e05c      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x416>
 80022dc:	e054      	b.n	8002388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x478>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fadc 	bl	80018a0 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fad8 	bl	80018a0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e045      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x444>
 800230a:	e03d      	b.n	8002388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e038      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000
 8002320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x4ec>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d028      	beq.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d121      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d11a      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800235a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800235c:	4293      	cmp	r3, r2
 800235e:	d111      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	3b01      	subs	r3, #1
 800236e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0cc      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d90c      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800240e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	494d      	ldr	r1, [pc, #308]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d044      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d119      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d003      	beq.n	8002456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e067      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4934      	ldr	r1, [pc, #208]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7ff fa0a 	bl	80018a0 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7ff fa06 	bl	80018a0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e04f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d20c      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e032      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4916      	ldr	r1, [pc, #88]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800251e:	f000 f821 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490a      	ldr	r1, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f882 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	08007868 	.word	0x08007868
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002568:	b090      	sub	sp, #64	; 0x40
 800256a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
 8002570:	2300      	movs	r3, #0
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d00d      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002588:	2b08      	cmp	r3, #8
 800258a:	f200 80a1 	bhi.w	80026d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 8002592:	2b04      	cmp	r3, #4
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x3a>
 8002596:	e09b      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800259c:	e09b      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259e:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_GetSysClockFreq+0x188>)
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025a2:	e098      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ae:	4b4d      	ldr	r3, [pc, #308]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d028      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	2200      	movs	r2, #0
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	627a      	str	r2, [r7, #36]	; 0x24
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025cc:	2100      	movs	r1, #0
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_GetSysClockFreq+0x188>)
 80025d0:	fb03 f201 	mul.w	r2, r3, r1
 80025d4:	2300      	movs	r3, #0
 80025d6:	fb00 f303 	mul.w	r3, r0, r3
 80025da:	4413      	add	r3, r2
 80025dc:	4a43      	ldr	r2, [pc, #268]	; (80026ec <HAL_RCC_GetSysClockFreq+0x188>)
 80025de:	fba0 1202 	umull	r1, r2, r0, r2
 80025e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e4:	460a      	mov	r2, r1
 80025e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80025e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ea:	4413      	add	r3, r2
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	2200      	movs	r2, #0
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	61fa      	str	r2, [r7, #28]
 80025f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025fe:	f7fe f8f5 	bl	80007ec <__aeabi_uldivmod>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4613      	mov	r3, r2
 8002608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260a:	e053      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	2200      	movs	r2, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	617a      	str	r2, [r7, #20]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800261e:	f04f 0b00 	mov.w	fp, #0
 8002622:	4652      	mov	r2, sl
 8002624:	465b      	mov	r3, fp
 8002626:	f04f 0000 	mov.w	r0, #0
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	0159      	lsls	r1, r3, #5
 8002630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002634:	0150      	lsls	r0, r2, #5
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	ebb2 080a 	subs.w	r8, r2, sl
 800263e:	eb63 090b 	sbc.w	r9, r3, fp
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800264e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002652:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002656:	ebb2 0408 	subs.w	r4, r2, r8
 800265a:	eb63 0509 	sbc.w	r5, r3, r9
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	00eb      	lsls	r3, r5, #3
 8002668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800266c:	00e2      	lsls	r2, r4, #3
 800266e:	4614      	mov	r4, r2
 8002670:	461d      	mov	r5, r3
 8002672:	eb14 030a 	adds.w	r3, r4, sl
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	eb45 030b 	adc.w	r3, r5, fp
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800268a:	4629      	mov	r1, r5
 800268c:	028b      	lsls	r3, r1, #10
 800268e:	4621      	mov	r1, r4
 8002690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002694:	4621      	mov	r1, r4
 8002696:	028a      	lsls	r2, r1, #10
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	2200      	movs	r2, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	60fa      	str	r2, [r7, #12]
 80026a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a8:	f7fe f8a0 	bl	80007ec <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4613      	mov	r3, r2
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	3301      	adds	r3, #1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3740      	adds	r7, #64	; 0x40
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	017d7840 	.word	0x017d7840

080026f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800270c:	f7ff fff0 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0a9b      	lsrs	r3, r3, #10
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	08007878 	.word	0x08007878

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002734:	f7ff ffdc 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0b5b      	lsrs	r3, r3, #13
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08007878 	.word	0x08007878

08002758 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	220f      	movs	r2, #15
 8002766:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_GetClockConfig+0x5c>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0203 	and.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	08db      	lsrs	r3, r3, #3
 8002792:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_RCC_GetClockConfig+0x60>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0207 	and.w	r2, r3, #7
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40023c00 	.word	0x40023c00

080027bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e041      	b.n	8002852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fe5e 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f000 fcb8 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d001      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e044      	b.n	80028fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_TIM_Base_Start_IT+0xb0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d013      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <HAL_TIM_Base_Start_IT+0xb4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_TIM_Base_Start_IT+0xb8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_TIM_Base_Start_IT+0xbc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a16      	ldr	r2, [pc, #88]	; (800291c <HAL_TIM_Base_Start_IT+0xc0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d010      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	e007      	b.n	80028fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40000c00 	.word	0x40000c00
 800291c:	40014000 	.word	0x40014000

08002920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e041      	b.n	80029b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f839 	bl	80029be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 fc06 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_TIM_PWM_Start+0x24>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e022      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d109      	bne.n	8002a12 <HAL_TIM_PWM_Start+0x3e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	e015      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d109      	bne.n	8002a2c <HAL_TIM_PWM_Start+0x58>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e008      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e068      	b.n	8002b18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x82>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x92>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Start+0xa2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fe18 	bl	80036bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <HAL_TIM_PWM_Start+0x14c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_TIM_PWM_Start+0x14c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_TIM_PWM_Start+0x150>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_TIM_PWM_Start+0x154>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_TIM_PWM_Start+0x158>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_TIM_PWM_Start+0x15c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d111      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d010      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e007      	b.n	8002b16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	40014000 	.word	0x40014000

08002b34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fdb8 	bl	80036bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <HAL_TIM_PWM_Stop+0xc4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d117      	bne.n	8002b86 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_TIM_PWM_Stop+0x52>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	f240 4344 	movw	r3, #1092	; 0x444
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_PWM_Stop+0x52>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_TIM_PWM_Stop+0x82>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a1a      	ldr	r2, [r3, #32]
 8002b9c:	f240 4344 	movw	r3, #1092	; 0x444
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_PWM_Stop+0x82>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Stop+0x92>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	e013      	b.n	8002bee <HAL_TIM_PWM_Stop+0xba>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Stop+0xa2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_PWM_Stop+0xba>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Stop+0xb2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be4:	e003      	b.n	8002bee <HAL_TIM_PWM_Stop+0xba>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40010000 	.word	0x40010000

08002bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0202 	mvn.w	r2, #2
 8002c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa77 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa69 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa7a 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0204 	mvn.w	r2, #4
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa4d 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa3f 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa50 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0208 	mvn.w	r2, #8
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa23 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa15 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa26 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0210 	mvn.w	r2, #16
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9f9 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f9eb 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f9fc 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0201 	mvn.w	r2, #1
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fae2 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b80      	cmp	r3, #128	; 0x80
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fd26 	bl	80037f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9c1 	bl	800315a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d10e      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d107      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0220 	mvn.w	r2, #32
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fcf0 	bl	80037e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e0ae      	b.n	8002f88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	f200 809f 	bhi.w	8002f78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e3a:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002f79 	.word	0x08002f79
 8002e48:	08002f79 	.word	0x08002f79
 8002e4c:	08002f79 	.word	0x08002f79
 8002e50:	08002eb5 	.word	0x08002eb5
 8002e54:	08002f79 	.word	0x08002f79
 8002e58:	08002f79 	.word	0x08002f79
 8002e5c:	08002f79 	.word	0x08002f79
 8002e60:	08002ef7 	.word	0x08002ef7
 8002e64:	08002f79 	.word	0x08002f79
 8002e68:	08002f79 	.word	0x08002f79
 8002e6c:	08002f79 	.word	0x08002f79
 8002e70:	08002f37 	.word	0x08002f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f9f8 	bl	8003270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0208 	orr.w	r2, r2, #8
 8002e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	619a      	str	r2, [r3, #24]
      break;
 8002eb2:	e064      	b.n	8002f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fa3e 	bl	800333c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6999      	ldr	r1, [r3, #24]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	021a      	lsls	r2, r3, #8
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	619a      	str	r2, [r3, #24]
      break;
 8002ef4:	e043      	b.n	8002f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fa89 	bl	8003414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0208 	orr.w	r2, r2, #8
 8002f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0204 	bic.w	r2, r2, #4
 8002f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69d9      	ldr	r1, [r3, #28]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]
      break;
 8002f34:	e023      	b.n	8002f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fad3 	bl	80034e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	61da      	str	r2, [r3, #28]
      break;
 8002f76:	e002      	b.n	8002f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIM_ConfigClockSource+0x1c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0b4      	b.n	8003116 <HAL_TIM_ConfigClockSource+0x186>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d03e      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0xd4>
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	f200 8087 	bhi.w	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	f000 8086 	beq.w	8003102 <HAL_TIM_ConfigClockSource+0x172>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d87f      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b70      	cmp	r3, #112	; 0x70
 8002ffe:	d01a      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0xa6>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d87b      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b60      	cmp	r3, #96	; 0x60
 8003006:	d050      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x11a>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d877      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b50      	cmp	r3, #80	; 0x50
 800300e:	d03c      	beq.n	800308a <HAL_TIM_ConfigClockSource+0xfa>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d873      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d058      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x13a>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d86f      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d064      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x15a>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d86b      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d060      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x15a>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d867      	bhi.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05c      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	2b10      	cmp	r3, #16
 8003032:	d05a      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	e062      	b.n	80030fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f000 fb19 	bl	800367c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	609a      	str	r2, [r3, #8]
      break;
 8003062:	e04f      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6899      	ldr	r1, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f000 fb02 	bl	800367c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003086:	609a      	str	r2, [r3, #8]
      break;
 8003088:	e03c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	461a      	mov	r2, r3
 8003098:	f000 fa76 	bl	8003588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2150      	movs	r1, #80	; 0x50
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 facf 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80030a8:	e02c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 fa95 	bl	80035e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2160      	movs	r1, #96	; 0x60
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fabf 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80030c8:	e01c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fa56 	bl	8003588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 faaf 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f000 faa6 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 80030fa:	e003      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003100:	e000      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a34      	ldr	r2, [pc, #208]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00f      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d00b      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a31      	ldr	r2, [pc, #196]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d007      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a30      	ldr	r2, [pc, #192]	; (800325c <TIM_Base_SetConfig+0xec>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_Base_SetConfig+0x38>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <TIM_Base_SetConfig+0xf0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d108      	bne.n	80031ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a25      	ldr	r2, [pc, #148]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d017      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a21      	ldr	r2, [pc, #132]	; (800325c <TIM_Base_SetConfig+0xec>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a20      	ldr	r2, [pc, #128]	; (8003260 <TIM_Base_SetConfig+0xf0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <TIM_Base_SetConfig+0xf4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <TIM_Base_SetConfig+0xf8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <TIM_Base_SetConfig+0xfc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	615a      	str	r2, [r3, #20]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <TIM_OC1_SetConfig+0xc8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0308 	bic.w	r3, r3, #8
 80032d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <TIM_OC1_SetConfig+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d111      	bne.n	8003312 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40010000 	.word	0x40010000

0800333c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0210 	bic.w	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0320 	bic.w	r3, r3, #32
 8003386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <TIM_OC2_SetConfig+0xd4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10d      	bne.n	80033b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a15      	ldr	r2, [pc, #84]	; (8003410 <TIM_OC2_SetConfig+0xd4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d113      	bne.n	80033e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000

08003414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800345c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <TIM_OC3_SetConfig+0xd0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10d      	bne.n	800348e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <TIM_OC3_SetConfig+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d113      	bne.n	80034be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800349c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	621a      	str	r2, [r3, #32]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40010000 	.word	0x40010000

080034e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <TIM_OC4_SetConfig+0x9c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d109      	bne.n	800355c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	019b      	lsls	r3, r3, #6
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000

08003588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 030a 	bic.w	r3, r3, #10
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0210 	bic.w	r2, r3, #16
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	f043 0307 	orr.w	r3, r3, #7
 8003668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	431a      	orrs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2201      	movs	r2, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800371c:	2302      	movs	r3, #2
 800371e:	e050      	b.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d018      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d013      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d009      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a15      	ldr	r2, [pc, #84]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10c      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800
 80037dc:	40000c00 	.word	0x40000c00
 80037e0:	40014000 	.word	0x40014000

080037e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e03f      	b.n	800389e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd feb8 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800384e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fd7b 	bl	800434c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	; 0x28
 80038aa:	af02      	add	r7, sp, #8
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d17c      	bne.n	80039c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_UART_Transmit+0x2c>
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e075      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_UART_Transmit+0x3e>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e06e      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2221      	movs	r2, #33	; 0x21
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fa:	f7fd ffd1 	bl	80018a0 <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d108      	bne.n	8003928 <HAL_UART_Transmit+0x82>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003938:	e02a      	b.n	8003990 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 faf9 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e036      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3302      	adds	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e007      	b.n	8003982 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3301      	adds	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1cf      	bne.n	800393a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2140      	movs	r1, #64	; 0x40
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fac9 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e006      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b0ba      	sub	sp, #232	; 0xe8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_UART_IRQHandler+0x66>
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fbd3 	bl	80041d6 <UART_Receive_IT>
      return;
 8003a30:	e256      	b.n	8003ee0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80de 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x22c>
 8003a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80d1 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_UART_IRQHandler+0xae>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_UART_IRQHandler+0xd2>
 8003a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0202 	orr.w	r2, r3, #2
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xf6>
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d011      	beq.n	8003af2 <HAL_UART_IRQHandler+0x126>
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0208 	orr.w	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 81ed 	beq.w	8003ed6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_UART_IRQHandler+0x14e>
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fb5e 	bl	80041d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_UART_IRQHandler+0x17a>
 8003b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04f      	beq.n	8003be6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa66 	bl	8004018 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d141      	bne.n	8003bde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3314      	adds	r3, #20
 8003b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1d9      	bne.n	8003b5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d013      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	4a7d      	ldr	r2, [pc, #500]	; (8003da8 <HAL_UART_IRQHandler+0x3dc>)
 8003bb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd ffce 	bl	8001b5c <HAL_DMA_Abort_IT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	e00e      	b.n	8003bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f99a 	bl	8003f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	e00a      	b.n	8003bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f996 	bl	8003f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	e006      	b.n	8003bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f992 	bl	8003f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bf2:	e170      	b.n	8003ed6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	bf00      	nop
    return;
 8003bf6:	e16e      	b.n	8003ed6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 814a 	bne.w	8003e96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8143 	beq.w	8003e96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 813c 	beq.w	8003e96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	f040 80b4 	bne.w	8003dac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8140 	beq.w	8003eda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c62:	429a      	cmp	r2, r3
 8003c64:	f080 8139 	bcs.w	8003eda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7a:	f000 8088 	beq.w	8003d8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003caa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1d9      	bne.n	8003c7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3314      	adds	r3, #20
 8003cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e1      	bne.n	8003cca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3314      	adds	r3, #20
 8003d0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e3      	bne.n	8003d06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5e:	f023 0310 	bic.w	r3, r3, #16
 8003d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d70:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e3      	bne.n	8003d4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fd fe77 	bl	8001a7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8c0 	bl	8003f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da4:	e099      	b.n	8003eda <HAL_UART_IRQHandler+0x50e>
 8003da6:	bf00      	nop
 8003da8:	080040df 	.word	0x080040df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 808b 	beq.w	8003ede <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8086 	beq.w	8003ede <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003df6:	647a      	str	r2, [r7, #68]	; 0x44
 8003df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e3      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	623b      	str	r3, [r7, #32]
   return(result);
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e3      	bne.n	8003e0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	330c      	adds	r3, #12
 8003e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0310 	bic.w	r3, r3, #16
 8003e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e74:	61fa      	str	r2, [r7, #28]
 8003e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	617b      	str	r3, [r7, #20]
   return(result);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e3      	bne.n	8003e50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f848 	bl	8003f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e94:	e023      	b.n	8003ede <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x4ea>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f929 	bl	8004106 <UART_Transmit_IT>
    return;
 8003eb4:	e014      	b.n	8003ee0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x514>
 8003ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f969 	bl	80041a6 <UART_EndTransmit_IT>
    return;
 8003ed4:	e004      	b.n	8003ee0 <HAL_UART_IRQHandler+0x514>
    return;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_UART_IRQHandler+0x514>
      return;
 8003ede:	bf00      	nop
  }
}
 8003ee0:	37e8      	adds	r7, #232	; 0xe8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop

08003ee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b090      	sub	sp, #64	; 0x40
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	e050      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d04c      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f5c:	f7fd fca0 	bl	80018a0 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d241      	bcs.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f8c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3314      	adds	r3, #20
 8003fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc0:	623a      	str	r2, [r7, #32]
 8003fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	69f9      	ldr	r1, [r7, #28]
 8003fc6:	6a3a      	ldr	r2, [r7, #32]
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e00f      	b.n	8004010 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	429a      	cmp	r2, r3
 800400c:	d09f      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3740      	adds	r7, #64	; 0x40
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b095      	sub	sp, #84	; 0x54
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004040:	643a      	str	r2, [r7, #64]	; 0x40
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	61fb      	str	r3, [r7, #28]
   return(result);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3314      	adds	r3, #20
 8004072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800407a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	2b01      	cmp	r3, #1
 800408e:	d119      	bne.n	80040c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f023 0310 	bic.w	r3, r3, #16
 80040a6:	647b      	str	r3, [r7, #68]	; 0x44
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b0:	61ba      	str	r2, [r7, #24]
 80040b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6979      	ldr	r1, [r7, #20]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	613b      	str	r3, [r7, #16]
   return(result);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e5      	bne.n	8004090 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040d2:	bf00      	nop
 80040d4:	3754      	adds	r7, #84	; 0x54
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7ff ff09 	bl	8003f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b21      	cmp	r3, #33	; 0x21
 8004118:	d13e      	bne.n	8004198 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004122:	d114      	bne.n	800414e <UART_Transmit_IT+0x48>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d110      	bne.n	800414e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004140:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	621a      	str	r2, [r3, #32]
 800414c:	e008      	b.n	8004160 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	1c59      	adds	r1, r3, #1
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6211      	str	r1, [r2, #32]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29b      	uxth	r3, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4619      	mov	r1, r3
 800416e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10f      	bne.n	8004194 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004182:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004192:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fe8e 	bl	8003ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b08c      	sub	sp, #48	; 0x30
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b22      	cmp	r3, #34	; 0x22
 80041e8:	f040 80ab 	bne.w	8004342 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d117      	bne.n	8004226 <UART_Receive_IT+0x50>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d113      	bne.n	8004226 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	b29a      	uxth	r2, r3
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	1c9a      	adds	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
 8004224:	e026      	b.n	8004274 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800422c:	2300      	movs	r3, #0
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	d007      	beq.n	800424a <UART_Receive_IT+0x74>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <UART_Receive_IT+0x82>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e008      	b.n	800426a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004264:	b2da      	uxtb	r2, r3
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004284:	2b00      	cmp	r3, #0
 8004286:	d15a      	bne.n	800433e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0220 	bic.w	r2, r2, #32
 8004296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d135      	bne.n	8004334 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	613b      	str	r3, [r7, #16]
   return(result);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f023 0310 	bic.w	r3, r3, #16
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	330c      	adds	r3, #12
 80042ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ee:	623a      	str	r2, [r7, #32]
 80042f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	69f9      	ldr	r1, [r7, #28]
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e5      	bne.n	80042ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b10      	cmp	r3, #16
 800430e:	d10a      	bne.n	8004326 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff fdf9 	bl	8003f24 <HAL_UARTEx_RxEventCallback>
 8004332:	e002      	b.n	800433a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fde1 	bl	8003efc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e002      	b.n	8004344 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
  }
}
 8004344:	4618      	mov	r0, r3
 8004346:	3730      	adds	r7, #48	; 0x30
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b0c0      	sub	sp, #256	; 0x100
 8004352:	af00      	add	r7, sp, #0
 8004354:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	68d9      	ldr	r1, [r3, #12]
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	ea40 0301 	orr.w	r3, r0, r1
 8004374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	431a      	orrs	r2, r3
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043a4:	f021 010c 	bic.w	r1, r1, #12
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043b2:	430b      	orrs	r3, r1
 80043b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	6999      	ldr	r1, [r3, #24]
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	ea40 0301 	orr.w	r3, r0, r1
 80043d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b8f      	ldr	r3, [pc, #572]	; (8004618 <UART_SetConfig+0x2cc>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d005      	beq.n	80043ec <UART_SetConfig+0xa0>
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b8d      	ldr	r3, [pc, #564]	; (800461c <UART_SetConfig+0x2d0>)
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d104      	bne.n	80043f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fe f9a0 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 80043f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043f4:	e003      	b.n	80043fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f6:	f7fe f987 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 80043fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004408:	f040 810c 	bne.w	8004624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800440c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004410:	2200      	movs	r2, #0
 8004412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004416:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800441a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	1891      	adds	r1, r2, r2
 8004424:	65b9      	str	r1, [r7, #88]	; 0x58
 8004426:	415b      	adcs	r3, r3
 8004428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800442a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800442e:	4621      	mov	r1, r4
 8004430:	eb12 0801 	adds.w	r8, r2, r1
 8004434:	4629      	mov	r1, r5
 8004436:	eb43 0901 	adc.w	r9, r3, r1
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800444a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444e:	4690      	mov	r8, r2
 8004450:	4699      	mov	r9, r3
 8004452:	4623      	mov	r3, r4
 8004454:	eb18 0303 	adds.w	r3, r8, r3
 8004458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800445c:	462b      	mov	r3, r5
 800445e:	eb49 0303 	adc.w	r3, r9, r3
 8004462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800447a:	460b      	mov	r3, r1
 800447c:	18db      	adds	r3, r3, r3
 800447e:	653b      	str	r3, [r7, #80]	; 0x50
 8004480:	4613      	mov	r3, r2
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	657b      	str	r3, [r7, #84]	; 0x54
 8004488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800448c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004490:	f7fc f9ac 	bl	80007ec <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b61      	ldr	r3, [pc, #388]	; (8004620 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80044bc:	415b      	adcs	r3, r3
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044c4:	4641      	mov	r1, r8
 80044c6:	eb12 0a01 	adds.w	sl, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb43 0b01 	adc.w	fp, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e4:	4692      	mov	sl, r2
 80044e6:	469b      	mov	fp, r3
 80044e8:	4643      	mov	r3, r8
 80044ea:	eb1a 0303 	adds.w	r3, sl, r3
 80044ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f2:	464b      	mov	r3, r9
 80044f4:	eb4b 0303 	adc.w	r3, fp, r3
 80044f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004508:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800450c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004510:	460b      	mov	r3, r1
 8004512:	18db      	adds	r3, r3, r3
 8004514:	643b      	str	r3, [r7, #64]	; 0x40
 8004516:	4613      	mov	r3, r2
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	647b      	str	r3, [r7, #68]	; 0x44
 800451e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004526:	f7fc f961 	bl	80007ec <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4611      	mov	r1, r2
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <UART_SetConfig+0x2d4>)
 8004532:	fba3 2301 	umull	r2, r3, r3, r1
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2264      	movs	r2, #100	; 0x64
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	1acb      	subs	r3, r1, r3
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <UART_SetConfig+0x2d4>)
 8004548:	fba3 2302 	umull	r2, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004554:	441c      	add	r4, r3
 8004556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004560:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004568:	4642      	mov	r2, r8
 800456a:	464b      	mov	r3, r9
 800456c:	1891      	adds	r1, r2, r2
 800456e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004570:	415b      	adcs	r3, r3
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004578:	4641      	mov	r1, r8
 800457a:	1851      	adds	r1, r2, r1
 800457c:	6339      	str	r1, [r7, #48]	; 0x30
 800457e:	4649      	mov	r1, r9
 8004580:	414b      	adcs	r3, r1
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004590:	4659      	mov	r1, fp
 8004592:	00cb      	lsls	r3, r1, #3
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800459a:	4651      	mov	r1, sl
 800459c:	00ca      	lsls	r2, r1, #3
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	4642      	mov	r2, r8
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045ac:	464b      	mov	r3, r9
 80045ae:	460a      	mov	r2, r1
 80045b0:	eb42 0303 	adc.w	r3, r2, r3
 80045b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045cc:	460b      	mov	r3, r1
 80045ce:	18db      	adds	r3, r3, r3
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d2:	4613      	mov	r3, r2
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045e2:	f7fc f903 	bl	80007ec <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <UART_SetConfig+0x2d4>)
 80045ec:	fba3 1302 	umull	r1, r3, r3, r2
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	2164      	movs	r1, #100	; 0x64
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	3332      	adds	r3, #50	; 0x32
 80045fe:	4a08      	ldr	r2, [pc, #32]	; (8004620 <UART_SetConfig+0x2d4>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	f003 0207 	and.w	r2, r3, #7
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4422      	add	r2, r4
 8004612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004614:	e106      	b.n	8004824 <UART_SetConfig+0x4d8>
 8004616:	bf00      	nop
 8004618:	40011000 	.word	0x40011000
 800461c:	40011400 	.word	0x40011400
 8004620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800462e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004636:	4642      	mov	r2, r8
 8004638:	464b      	mov	r3, r9
 800463a:	1891      	adds	r1, r2, r2
 800463c:	6239      	str	r1, [r7, #32]
 800463e:	415b      	adcs	r3, r3
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004646:	4641      	mov	r1, r8
 8004648:	1854      	adds	r4, r2, r1
 800464a:	4649      	mov	r1, r9
 800464c:	eb43 0501 	adc.w	r5, r3, r1
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	00eb      	lsls	r3, r5, #3
 800465a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800465e:	00e2      	lsls	r2, r4, #3
 8004660:	4614      	mov	r4, r2
 8004662:	461d      	mov	r5, r3
 8004664:	4643      	mov	r3, r8
 8004666:	18e3      	adds	r3, r4, r3
 8004668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800466c:	464b      	mov	r3, r9
 800466e:	eb45 0303 	adc.w	r3, r5, r3
 8004672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004692:	4629      	mov	r1, r5
 8004694:	008b      	lsls	r3, r1, #2
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469c:	4621      	mov	r1, r4
 800469e:	008a      	lsls	r2, r1, #2
 80046a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046a4:	f7fc f8a2 	bl	80007ec <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b60      	ldr	r3, [pc, #384]	; (8004830 <UART_SetConfig+0x4e4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	61b9      	str	r1, [r7, #24]
 80046d0:	415b      	adcs	r3, r3
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6139      	str	r1, [r7, #16]
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800470c:	464b      	mov	r3, r9
 800470e:	460a      	mov	r2, r1
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	67bb      	str	r3, [r7, #120]	; 0x78
 8004722:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004730:	4649      	mov	r1, r9
 8004732:	008b      	lsls	r3, r1, #2
 8004734:	4641      	mov	r1, r8
 8004736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800473a:	4641      	mov	r1, r8
 800473c:	008a      	lsls	r2, r1, #2
 800473e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004742:	f7fc f853 	bl	80007ec <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4611      	mov	r1, r2
 800474c:	4b38      	ldr	r3, [pc, #224]	; (8004830 <UART_SetConfig+0x4e4>)
 800474e:	fba3 2301 	umull	r2, r3, r3, r1
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2264      	movs	r2, #100	; 0x64
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	1acb      	subs	r3, r1, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	3332      	adds	r3, #50	; 0x32
 8004760:	4a33      	ldr	r2, [pc, #204]	; (8004830 <UART_SetConfig+0x4e4>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476c:	441c      	add	r4, r3
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	673b      	str	r3, [r7, #112]	; 0x70
 8004776:	677a      	str	r2, [r7, #116]	; 0x74
 8004778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	415b      	adcs	r3, r3
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047be:	464b      	mov	r3, r9
 80047c0:	460a      	mov	r2, r1
 80047c2:	eb42 0303 	adc.w	r3, r2, r3
 80047c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	663b      	str	r3, [r7, #96]	; 0x60
 80047d2:	667a      	str	r2, [r7, #100]	; 0x64
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047e0:	4649      	mov	r1, r9
 80047e2:	008b      	lsls	r3, r1, #2
 80047e4:	4641      	mov	r1, r8
 80047e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ea:	4641      	mov	r1, r8
 80047ec:	008a      	lsls	r2, r1, #2
 80047ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047f2:	f7fb fffb 	bl	80007ec <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <UART_SetConfig+0x4e4>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2164      	movs	r1, #100	; 0x64
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	3332      	adds	r3, #50	; 0x32
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <UART_SetConfig+0x4e4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4422      	add	r2, r4
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800482a:	46bd      	mov	sp, r7
 800482c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004830:	51eb851f 	.word	0x51eb851f

08004834 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004846:	2b84      	cmp	r3, #132	; 0x84
 8004848:	d005      	beq.n	8004856 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800484a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	3303      	adds	r3, #3
 8004854:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004856:	68fb      	ldr	r3, [r7, #12]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004868:	f001 f9bc 	bl	8005be4 <vTaskStartScheduler>
  
  return osOK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	bd80      	pop	{r7, pc}

08004872 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004874:	b089      	sub	sp, #36	; 0x24
 8004876:	af04      	add	r7, sp, #16
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <osThreadCreate+0x54>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01c      	beq.n	80048c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685c      	ldr	r4, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691e      	ldr	r6, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff ffc8 	bl	8004834 <makeFreeRtosPriority>
 80048a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ae:	9202      	str	r2, [sp, #8]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	9100      	str	r1, [sp, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4632      	mov	r2, r6
 80048b8:	4629      	mov	r1, r5
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 ffca 	bl	8005854 <xTaskCreateStatic>
 80048c0:	4603      	mov	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e01c      	b.n	8004900 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685c      	ldr	r4, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ffaa 	bl	8004834 <makeFreeRtosPriority>
 80048e0:	4602      	mov	r2, r0
 80048e2:	f107 030c 	add.w	r3, r7, #12
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	9200      	str	r2, [sp, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	4632      	mov	r2, r6
 80048ee:	4629      	mov	r1, r5
 80048f0:	4620      	mov	r0, r4
 80048f2:	f001 f80c 	bl	800590e <xTaskCreate>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d001      	beq.n	8004900 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004900:	68fb      	ldr	r3, [r7, #12]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800490a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004910:	201c      	movs	r0, #28
 8004912:	f002 fd01 	bl	8007318 <pvPortMalloc>
 8004916:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f9bc 	bl	8004ca6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004934:	687b      	ldr	r3, [r7, #4]
	}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b090      	sub	sp, #64	; 0x40
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	61fb      	str	r3, [r7, #28]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xEventGroupWaitBits+0x72>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	61bb      	str	r3, [r7, #24]
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049b2:	f001 fdf5 	bl	80065a0 <xTaskGetSchedulerState>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <xEventGroupWaitBits+0x82>
 80049bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <xEventGroupWaitBits+0x86>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <xEventGroupWaitBits+0x88>
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	617b      	str	r3, [r7, #20]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80049e2:	f001 f965 	bl	8005cb0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80049e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049f2:	f000 f936 	bl	8004c62 <prvTestWaitCondition>
 80049f6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d028      	beq.n	8004a5e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	401a      	ands	r2, r3
 8004a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e020      	b.n	8004a5e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2a:	e018      	b.n	8004a5e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a46:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4a:	1d18      	adds	r0, r3, #4
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	4313      	orrs	r3, r2
 8004a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a54:	4619      	mov	r1, r3
 8004a56:	f001 fb1d 	bl	8006094 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004a5e:	f001 f935 	bl	8005ccc <xTaskResumeAll>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d031      	beq.n	8004ace <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <xEventGroupWaitBits+0x198>)
 8004a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004a80:	f001 fe32 	bl	80066e8 <uxTaskResetEventItemValue>
 8004a84:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11a      	bne.n	8004ac6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004a90:	f002 fb20 	bl	80070d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004aa0:	f000 f8df 	bl	8004c62 <prvTestWaitCondition>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d006      	beq.n	8004abe <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	401a      	ands	r2, r3
 8004aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004ac2:	f002 fb37 	bl	8007134 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3740      	adds	r7, #64	; 0x40
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xEventGroupClearBits+0x2a>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <xEventGroupClearBits+0x4a>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60bb      	str	r3, [r7, #8]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004b26:	f002 fad5 	bl	80070d4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	43db      	mvns	r3, r3
 8004b38:	401a      	ands	r2, r3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004b3e:	f002 faf9 	bl	8007134 <vPortExitCritical>

	return uxReturn;
 8004b42:	693b      	ldr	r3, [r7, #16]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004b56:	2300      	movs	r3, #0
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xEventGroupSetBits+0x32>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	613b      	str	r3, [r7, #16]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <xEventGroupSetBits+0x52>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60fb      	str	r3, [r7, #12]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004baa:	f001 f881 	bl	8005cb0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004bc0:	e03c      	b.n	8004c3c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bd8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004be0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d108      	bne.n	8004bfe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfc:	e008      	b.n	8004c10 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d101      	bne.n	8004c10 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c30:	4619      	mov	r1, r3
 8004c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c34:	f001 faf8 	bl	8006228 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1be      	bne.n	8004bc2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	401a      	ands	r2, r3
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004c52:	f001 f83b 	bl	8005ccc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	681b      	ldr	r3, [r3, #0]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3738      	adds	r7, #56	; 0x38
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e007      	b.n	8004c98 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d101      	bne.n	8004c98 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004c98:	697b      	ldr	r3, [r7, #20]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f103 0208 	add.w	r2, r3, #8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f103 0208 	add.w	r2, r3, #8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f103 0208 	add.w	r2, r3, #8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d103      	bne.n	8004d68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e00c      	b.n	8004d82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e002      	b.n	8004d76 <vListInsert+0x2e>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d2f6      	bcs.n	8004d70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6892      	ldr	r2, [r2, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6852      	ldr	r2, [r2, #4]
 8004dda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d103      	bne.n	8004dee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xQueueGenericReset+0x2a>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	60bb      	str	r3, [r7, #8]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e3a:	f002 f94b 	bl	80070d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	441a      	add	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	68f9      	ldr	r1, [r7, #12]
 8004e6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	441a      	add	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	22ff      	movs	r2, #255	; 0xff
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d114      	bne.n	8004eba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01a      	beq.n	8004ece <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3310      	adds	r3, #16
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f961 	bl	8006164 <xTaskRemoveFromEventList>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <xQueueGenericReset+0xcc>)
 8004eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	e009      	b.n	8004ece <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3310      	adds	r3, #16
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fef1 	bl	8004ca6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3324      	adds	r3, #36	; 0x24
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff feec 	bl	8004ca6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ece:	f002 f931 	bl	8007134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ed2:	2301      	movs	r3, #1
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	e000ed04 	.word	0xe000ed04

08004ee0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08e      	sub	sp, #56	; 0x38
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <xQueueGenericCreateStatic+0x52>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <xQueueGenericCreateStatic+0x56>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericCreateStatic+0x58>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <xQueueGenericCreateStatic+0x7e>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <xQueueGenericCreateStatic+0x82>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <xQueueGenericCreateStatic+0x84>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	61fb      	str	r3, [r7, #28]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f7e:	2348      	movs	r3, #72	; 0x48
 8004f80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b48      	cmp	r3, #72	; 0x48
 8004f86:	d00a      	beq.n	8004f9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61bb      	str	r3, [r7, #24]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f83f 	bl	8005044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3730      	adds	r7, #48	; 0x30
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueGenericCreate+0x2a>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	613b      	str	r3, [r7, #16]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3348      	adds	r3, #72	; 0x48
 8005008:	4618      	mov	r0, r3
 800500a:	f002 f985 	bl	8007318 <pvPortMalloc>
 800500e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	3348      	adds	r3, #72	; 0x48
 800501e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005028:	79fa      	ldrb	r2, [r7, #7]
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f805 	bl	8005044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800503a:	69bb      	ldr	r3, [r7, #24]
	}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e002      	b.n	8005066 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005072:	2101      	movs	r1, #1
 8005074:	69b8      	ldr	r0, [r7, #24]
 8005076:	f7ff fecb 	bl	8004e10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08e      	sub	sp, #56	; 0x38
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005092:	2300      	movs	r3, #0
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xQueueGenericSend+0x32>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <xQueueGenericSend+0x40>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <xQueueGenericSend+0x44>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <xQueueGenericSend+0x46>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <xQueueGenericSend+0x60>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSend+0x6e>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <xQueueGenericSend+0x72>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueGenericSend+0x74>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueGenericSend+0x8e>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005112:	f001 fa45 	bl	80065a0 <xTaskGetSchedulerState>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d102      	bne.n	8005122 <xQueueGenericSend+0x9e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <xQueueGenericSend+0xa2>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <xQueueGenericSend+0xa4>
 8005126:	2300      	movs	r3, #0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <xQueueGenericSend+0xbe>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	61fb      	str	r3, [r7, #28]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005142:	f001 ffc7 	bl	80070d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <xQueueGenericSend+0xd4>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d129      	bne.n	80051ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800515e:	f000 fa0b 	bl	8005578 <prvCopyDataToQueue>
 8005162:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fff7 	bl	8006164 <xTaskRemoveFromEventList>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d013      	beq.n	80051a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800517c:	4b3f      	ldr	r3, [pc, #252]	; (800527c <xQueueGenericSend+0x1f8>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	e00a      	b.n	80051a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <xQueueGenericSend+0x1f8>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051a4:	f001 ffc6 	bl	8007134 <vPortExitCritical>
				return pdPASS;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e063      	b.n	8005274 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051b2:	f001 ffbf 	bl	8007134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e05c      	b.n	8005274 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051c0:	f107 0314 	add.w	r3, r7, #20
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f891 	bl	80062ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ce:	f001 ffb1 	bl	8007134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051d2:	f000 fd6d 	bl	8005cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d6:	f001 ff7d 	bl	80070d4 <vPortEnterCritical>
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d103      	bne.n	80051f0 <xQueueGenericSend+0x16c>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d103      	bne.n	8005206 <xQueueGenericSend+0x182>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005206:	f001 ff95 	bl	8007134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800520a:	1d3a      	adds	r2, r7, #4
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f880 	bl	8006318 <xTaskCheckForTimeOut>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d124      	bne.n	8005268 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800521e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005220:	f000 faa2 	bl	8005768 <prvIsQueueFull>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d018      	beq.n	800525c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	3310      	adds	r3, #16
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f000 ff0a 	bl	800604c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800523a:	f000 fa2d 	bl	8005698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800523e:	f000 fd45 	bl	8005ccc <xTaskResumeAll>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	f47f af7c 	bne.w	8005142 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <xQueueGenericSend+0x1f8>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	e772      	b.n	8005142 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800525c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525e:	f000 fa1b 	bl	8005698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005262:	f000 fd33 	bl	8005ccc <xTaskResumeAll>
 8005266:	e76c      	b.n	8005142 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800526a:	f000 fa15 	bl	8005698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800526e:	f000 fd2d 	bl	8005ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005274:	4618      	mov	r0, r3
 8005276:	3738      	adds	r7, #56	; 0x38
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b090      	sub	sp, #64	; 0x40
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <xQueueGenericSendFromISR+0x3c>
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <xQueueGenericSendFromISR+0x40>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <xQueueGenericSendFromISR+0x42>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d103      	bne.n	80052ea <xQueueGenericSendFromISR+0x6a>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <xQueueGenericSendFromISR+0x6e>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <xQueueGenericSendFromISR+0x70>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	623b      	str	r3, [r7, #32]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800530a:	f001 ffc5 	bl	8007298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800530e:	f3ef 8211 	mrs	r2, BASEPRI
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	61fa      	str	r2, [r7, #28]
 8005324:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005326:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <xQueueGenericSendFromISR+0xbc>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d12f      	bne.n	800539c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005352:	f000 f911 	bl	8005578 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005356:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d112      	bne.n	8005386 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d016      	beq.n	8005396 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	3324      	adds	r3, #36	; 0x24
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fef9 	bl	8006164 <xTaskRemoveFromEventList>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00e      	beq.n	8005396 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e007      	b.n	8005396 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800538a:	3301      	adds	r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	b25a      	sxtb	r2, r3
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005396:	2301      	movs	r3, #1
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800539a:	e001      	b.n	80053a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800539c:	2300      	movs	r3, #0
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3740      	adds	r7, #64	; 0x40
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <xQueueReceive+0x30>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	623b      	str	r3, [r7, #32]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <xQueueReceive+0x3e>
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueReceive+0x42>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueReceive+0x44>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueReceive+0x5e>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	61fb      	str	r3, [r7, #28]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005416:	f001 f8c3 	bl	80065a0 <xTaskGetSchedulerState>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <xQueueReceive+0x6e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueReceive+0x72>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueReceive+0x74>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueReceive+0x8e>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61bb      	str	r3, [r7, #24]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005446:	f001 fe45 	bl	80070d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01f      	beq.n	8005496 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545a:	f000 f8f7 	bl	800564c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00f      	beq.n	800548e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	3310      	adds	r3, #16
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fe76 	bl	8006164 <xTaskRemoveFromEventList>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800547e:	4b3d      	ldr	r3, [pc, #244]	; (8005574 <xQueueReceive+0x1bc>)
 8005480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800548e:	f001 fe51 	bl	8007134 <vPortExitCritical>
				return pdPASS;
 8005492:	2301      	movs	r3, #1
 8005494:	e069      	b.n	800556a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d103      	bne.n	80054a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549c:	f001 fe4a 	bl	8007134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e062      	b.n	800556a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054aa:	f107 0310 	add.w	r3, r7, #16
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ff1c 	bl	80062ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054b8:	f001 fe3c 	bl	8007134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054bc:	f000 fbf8 	bl	8005cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c0:	f001 fe08 	bl	80070d4 <vPortEnterCritical>
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d103      	bne.n	80054da <xQueueReceive+0x122>
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e0:	b25b      	sxtb	r3, r3
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	d103      	bne.n	80054f0 <xQueueReceive+0x138>
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f0:	f001 fe20 	bl	8007134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f4:	1d3a      	adds	r2, r7, #4
 80054f6:	f107 0310 	add.w	r3, r7, #16
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 ff0b 	bl	8006318 <xTaskCheckForTimeOut>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d123      	bne.n	8005550 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800550a:	f000 f917 	bl	800573c <prvIsQueueEmpty>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d017      	beq.n	8005544 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	3324      	adds	r3, #36	; 0x24
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	4611      	mov	r1, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fd95 	bl	800604c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005524:	f000 f8b8 	bl	8005698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005528:	f000 fbd0 	bl	8005ccc <xTaskResumeAll>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d189      	bne.n	8005446 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <xQueueReceive+0x1bc>)
 8005534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	e780      	b.n	8005446 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005546:	f000 f8a7 	bl	8005698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800554a:	f000 fbbf 	bl	8005ccc <xTaskResumeAll>
 800554e:	e77a      	b.n	8005446 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005552:	f000 f8a1 	bl	8005698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005556:	f000 fbb9 	bl	8005ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555c:	f000 f8ee 	bl	800573c <prvIsQueueEmpty>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f43f af6f 	beq.w	8005446 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800556a:	4618      	mov	r0, r3
 800556c:	3730      	adds	r7, #48	; 0x30
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10d      	bne.n	80055b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d14d      	bne.n	800563a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 f81a 	bl	80065dc <xTaskPriorityDisinherit>
 80055a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	e043      	b.n	800563a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d119      	bne.n	80055ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6858      	ldr	r0, [r3, #4]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	461a      	mov	r2, r3
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	f002 f8be 	bl	8007744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	441a      	add	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d32b      	bcc.n	800563a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	e026      	b.n	800563a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68d8      	ldr	r0, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	461a      	mov	r2, r3
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	f002 f8a4 	bl	8007744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	425b      	negs	r3, r3
 8005606:	441a      	add	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d207      	bcs.n	8005628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	425b      	negs	r3, r3
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d105      	bne.n	800563a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	3b01      	subs	r3, #1
 8005638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005642:	697b      	ldr	r3, [r7, #20]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d018      	beq.n	8005690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	441a      	add	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	d303      	bcc.n	8005680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68d9      	ldr	r1, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	461a      	mov	r2, r3
 800568a:	6838      	ldr	r0, [r7, #0]
 800568c:	f002 f85a 	bl	8007744 <memcpy>
	}
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056a0:	f001 fd18 	bl	80070d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ac:	e011      	b.n	80056d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d012      	beq.n	80056dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3324      	adds	r3, #36	; 0x24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fd52 	bl	8006164 <xTaskRemoveFromEventList>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056c6:	f000 fe89 	bl	80063dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dce9      	bgt.n	80056ae <prvUnlockQueue+0x16>
 80056da:	e000      	b.n	80056de <prvUnlockQueue+0x46>
					break;
 80056dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056e6:	f001 fd25 	bl	8007134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ea:	f001 fcf3 	bl	80070d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f6:	e011      	b.n	800571c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d012      	beq.n	8005726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3310      	adds	r3, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fd2d 	bl	8006164 <xTaskRemoveFromEventList>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005710:	f000 fe64 	bl	80063dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	3b01      	subs	r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dce9      	bgt.n	80056f8 <prvUnlockQueue+0x60>
 8005724:	e000      	b.n	8005728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	22ff      	movs	r2, #255	; 0xff
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005730:	f001 fd00 	bl	8007134 <vPortExitCritical>
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005744:	f001 fcc6 	bl	80070d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e001      	b.n	800575a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575a:	f001 fceb 	bl	8007134 <vPortExitCritical>

	return xReturn;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005770:	f001 fcb0 	bl	80070d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	429a      	cmp	r2, r3
 800577e:	d102      	bne.n	8005786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e001      	b.n	800578a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800578a:	f001 fcd3 	bl	8007134 <vPortExitCritical>

	return xReturn;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e014      	b.n	80057d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057a8:	4a0f      	ldr	r2, [pc, #60]	; (80057e8 <vQueueAddToRegistry+0x50>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057b4:	490c      	ldr	r1, [pc, #48]	; (80057e8 <vQueueAddToRegistry+0x50>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057be:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <vQueueAddToRegistry+0x50>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057ca:	e006      	b.n	80057da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	d9e7      	bls.n	80057a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000868 	.word	0x20000868

080057ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057fc:	f001 fc6a 	bl	80070d4 <vPortEnterCritical>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005806:	b25b      	sxtb	r3, r3
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d103      	bne.n	8005816 <vQueueWaitForMessageRestricted+0x2a>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800581c:	b25b      	sxtb	r3, r3
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d103      	bne.n	800582c <vQueueWaitForMessageRestricted+0x40>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800582c:	f001 fc82 	bl	8007134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	3324      	adds	r3, #36	; 0x24
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fc63 	bl	800610c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7ff ff26 	bl	8005698 <prvUnlockQueue>
	}
 800584c:	bf00      	nop
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08e      	sub	sp, #56	; 0x38
 8005858:	af04      	add	r7, sp, #16
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	623b      	str	r3, [r7, #32]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xTaskCreateStatic+0x46>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61fb      	str	r3, [r7, #28]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800589a:	2364      	movs	r3, #100	; 0x64
 800589c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b64      	cmp	r3, #100	; 0x64
 80058a2:	d00a      	beq.n	80058ba <xTaskCreateStatic+0x66>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	61bb      	str	r3, [r7, #24]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01e      	beq.n	8005900 <xTaskCreateStatic+0xac>
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058da:	2300      	movs	r3, #0
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	f107 0314 	add.w	r3, r7, #20
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f850 	bl	8005998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058fa:	f000 f8d5 	bl	8005aa8 <prvAddNewTaskToReadyList>
 80058fe:	e001      	b.n	8005904 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005904:	697b      	ldr	r3, [r7, #20]
	}
 8005906:	4618      	mov	r0, r3
 8005908:	3728      	adds	r7, #40	; 0x28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800590e:	b580      	push	{r7, lr}
 8005910:	b08c      	sub	sp, #48	; 0x30
 8005912:	af04      	add	r7, sp, #16
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4618      	mov	r0, r3
 8005924:	f001 fcf8 	bl	8007318 <pvPortMalloc>
 8005928:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005930:	2064      	movs	r0, #100	; 0x64
 8005932:	f001 fcf1 	bl	8007318 <pvPortMalloc>
 8005936:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
 8005944:	e005      	b.n	8005952 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005946:	6978      	ldr	r0, [r7, #20]
 8005948:	f001 fdb2 	bl	80074b0 <vPortFree>
 800594c:	e001      	b.n	8005952 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d017      	beq.n	8005988 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005960:	88fa      	ldrh	r2, [r7, #6]
 8005962:	2300      	movs	r3, #0
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	9302      	str	r3, [sp, #8]
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f80e 	bl	8005998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800597c:	69f8      	ldr	r0, [r7, #28]
 800597e:	f000 f893 	bl	8005aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005982:	2301      	movs	r3, #1
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e002      	b.n	800598e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005988:	f04f 33ff 	mov.w	r3, #4294967295
 800598c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800598e:	69bb      	ldr	r3, [r7, #24]
	}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059b0:	3b01      	subs	r3, #1
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f023 0307 	bic.w	r3, r3, #7
 80059be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	617b      	str	r3, [r7, #20]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01f      	beq.n	8005a26 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	e012      	b.n	8005a12 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	7819      	ldrb	r1, [r3, #0]
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	3334      	adds	r3, #52	; 0x34
 80059fc:	460a      	mov	r2, r1
 80059fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	61fb      	str	r3, [r7, #28]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b1f      	cmp	r3, #31
 8005a16:	d9e9      	bls.n	80059ec <prvInitialiseNewTask+0x54>
 8005a18:	e000      	b.n	8005a1c <prvInitialiseNewTask+0x84>
			{
				break;
 8005a1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005a24:	e003      	b.n	8005a2e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d901      	bls.n	8005a38 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a34:	2306      	movs	r3, #6
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff f949 	bl	8004ce6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	3318      	adds	r3, #24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff f944 	bl	8004ce6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	f1c3 0207 	rsb	r2, r3, #7
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2200      	movs	r2, #0
 8005a78:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68f9      	ldr	r1, [r7, #12]
 8005a86:	69b8      	ldr	r0, [r7, #24]
 8005a88:	f001 f9fa 	bl	8006e80 <pxPortInitialiseStack>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ab0:	f001 fb10 	bl	80070d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005abc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005abe:	4b29      	ldr	r3, [pc, #164]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ac6:	4a27      	ldr	r2, [pc, #156]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005acc:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <prvAddNewTaskToReadyList+0xb8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d110      	bne.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ad4:	f000 fca6 	bl	8006424 <prvInitialiseTaskLists>
 8005ad8:	e00d      	b.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <prvAddNewTaskToReadyList+0xc0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ae2:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d802      	bhi.n	8005af6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005af0:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005af6:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <prvAddNewTaskToReadyList+0xc4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <prvAddNewTaskToReadyList+0xc4>)
 8005afe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2201      	movs	r2, #1
 8005b06:	409a      	lsls	r2, r3
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <prvAddNewTaskToReadyList+0xc8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <prvAddNewTaskToReadyList+0xc8>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <prvAddNewTaskToReadyList+0xcc>)
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7ff f8e9 	bl	8004d00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b2e:	f001 fb01 	bl	8007134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <prvAddNewTaskToReadyList+0xc0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvAddNewTaskToReadyList+0xbc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d207      	bcs.n	8005b58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <prvAddNewTaskToReadyList+0xd0>)
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200009a8 	.word	0x200009a8
 8005b64:	200008a8 	.word	0x200008a8
 8005b68:	200009b4 	.word	0x200009b4
 8005b6c:	200009c4 	.word	0x200009c4
 8005b70:	200009b0 	.word	0x200009b0
 8005b74:	200008ac 	.word	0x200008ac
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d017      	beq.n	8005bbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <vTaskDelay+0x60>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <vTaskDelay+0x30>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	60bb      	str	r3, [r7, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bac:	f000 f880 	bl	8005cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fdb0 	bl	8006718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb8:	f000 f888 	bl	8005ccc <xTaskResumeAll>
 8005bbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <vTaskDelay+0x64>)
 8005bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	200009d0 	.word	0x200009d0
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	1d39      	adds	r1, r7, #4
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa ff74 	bl	8000ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	9202      	str	r2, [sp, #8]
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	460a      	mov	r2, r1
 8005c12:	4921      	ldr	r1, [pc, #132]	; (8005c98 <vTaskStartScheduler+0xb4>)
 8005c14:	4821      	ldr	r0, [pc, #132]	; (8005c9c <vTaskStartScheduler+0xb8>)
 8005c16:	f7ff fe1d 	bl	8005854 <xTaskCreateStatic>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4a20      	ldr	r2, [pc, #128]	; (8005ca0 <vTaskStartScheduler+0xbc>)
 8005c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c20:	4b1f      	ldr	r3, [pc, #124]	; (8005ca0 <vTaskStartScheduler+0xbc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e001      	b.n	8005c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d102      	bne.n	8005c3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c38:	f000 fdd4 	bl	80067e4 <xTimerCreateTimerTask>
 8005c3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d116      	bne.n	8005c72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	613b      	str	r3, [r7, #16]
}
 8005c56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c58:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <vTaskStartScheduler+0xc0>)
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <vTaskStartScheduler+0xc4>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c66:	4b11      	ldr	r3, [pc, #68]	; (8005cac <vTaskStartScheduler+0xc8>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c6c:	f001 f990 	bl	8006f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c70:	e00e      	b.n	8005c90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d10a      	bne.n	8005c90 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	60fb      	str	r3, [r7, #12]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <vTaskStartScheduler+0xaa>
}
 8005c90:	bf00      	nop
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	08007850 	.word	0x08007850
 8005c9c:	080063f5 	.word	0x080063f5
 8005ca0:	200009cc 	.word	0x200009cc
 8005ca4:	200009c8 	.word	0x200009c8
 8005ca8:	200009b4 	.word	0x200009b4
 8005cac:	200009ac 	.word	0x200009ac

08005cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <vTaskSuspendAll+0x18>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	4a03      	ldr	r2, [pc, #12]	; (8005cc8 <vTaskSuspendAll+0x18>)
 8005cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cbe:	bf00      	nop
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	200009d0 	.word	0x200009d0

08005ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <xTaskResumeAll+0x114>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	603b      	str	r3, [r7, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cf8:	f001 f9ec 	bl	80070d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cfc:	4b38      	ldr	r3, [pc, #224]	; (8005de0 <xTaskResumeAll+0x114>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	4a37      	ldr	r2, [pc, #220]	; (8005de0 <xTaskResumeAll+0x114>)
 8005d04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d06:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <xTaskResumeAll+0x114>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d161      	bne.n	8005dd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d0e:	4b35      	ldr	r3, [pc, #212]	; (8005de4 <xTaskResumeAll+0x118>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d05d      	beq.n	8005dd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d16:	e02e      	b.n	8005d76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d18:	4b33      	ldr	r3, [pc, #204]	; (8005de8 <xTaskResumeAll+0x11c>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3318      	adds	r3, #24
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff f848 	bl	8004dba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff f843 	bl	8004dba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	2201      	movs	r2, #1
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <xTaskResumeAll+0x120>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	4a2a      	ldr	r2, [pc, #168]	; (8005dec <xTaskResumeAll+0x120>)
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4a27      	ldr	r2, [pc, #156]	; (8005df0 <xTaskResumeAll+0x124>)
 8005d54:	441a      	add	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f7fe ffcf 	bl	8004d00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	4b23      	ldr	r3, [pc, #140]	; (8005df4 <xTaskResumeAll+0x128>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d302      	bcc.n	8005d76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d70:	4b21      	ldr	r3, [pc, #132]	; (8005df8 <xTaskResumeAll+0x12c>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d76:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <xTaskResumeAll+0x11c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1cc      	bne.n	8005d18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d84:	f000 fbec 	bl	8006560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d88:	4b1c      	ldr	r3, [pc, #112]	; (8005dfc <xTaskResumeAll+0x130>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d94:	f000 f846 	bl	8005e24 <xTaskIncrementTick>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d9e:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <xTaskResumeAll+0x12c>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1f1      	bne.n	8005d94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005db0:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <xTaskResumeAll+0x130>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005db6:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <xTaskResumeAll+0x12c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <xTaskResumeAll+0x134>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dd2:	f001 f9af 	bl	8007134 <vPortExitCritical>

	return xAlreadyYielded;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	200009d0 	.word	0x200009d0
 8005de4:	200009a8 	.word	0x200009a8
 8005de8:	20000968 	.word	0x20000968
 8005dec:	200009b0 	.word	0x200009b0
 8005df0:	200008ac 	.word	0x200008ac
 8005df4:	200008a8 	.word	0x200008a8
 8005df8:	200009bc 	.word	0x200009bc
 8005dfc:	200009b8 	.word	0x200009b8
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <xTaskGetTickCount+0x1c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e10:	687b      	ldr	r3, [r7, #4]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	200009ac 	.word	0x200009ac

08005e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e2e:	4b4e      	ldr	r3, [pc, #312]	; (8005f68 <xTaskIncrementTick+0x144>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 808e 	bne.w	8005f54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e38:	4b4c      	ldr	r3, [pc, #304]	; (8005f6c <xTaskIncrementTick+0x148>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e40:	4a4a      	ldr	r2, [pc, #296]	; (8005f6c <xTaskIncrementTick+0x148>)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d120      	bne.n	8005e8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e4c:	4b48      	ldr	r3, [pc, #288]	; (8005f70 <xTaskIncrementTick+0x14c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <xTaskIncrementTick+0x48>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	603b      	str	r3, [r7, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xTaskIncrementTick+0x46>
 8005e6c:	4b40      	ldr	r3, [pc, #256]	; (8005f70 <xTaskIncrementTick+0x14c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	4b40      	ldr	r3, [pc, #256]	; (8005f74 <xTaskIncrementTick+0x150>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a3e      	ldr	r2, [pc, #248]	; (8005f70 <xTaskIncrementTick+0x14c>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4a3e      	ldr	r2, [pc, #248]	; (8005f74 <xTaskIncrementTick+0x150>)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b3d      	ldr	r3, [pc, #244]	; (8005f78 <xTaskIncrementTick+0x154>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	4a3c      	ldr	r2, [pc, #240]	; (8005f78 <xTaskIncrementTick+0x154>)
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	f000 fb69 	bl	8006560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e8e:	4b3b      	ldr	r3, [pc, #236]	; (8005f7c <xTaskIncrementTick+0x158>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d348      	bcc.n	8005f2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e98:	4b35      	ldr	r3, [pc, #212]	; (8005f70 <xTaskIncrementTick+0x14c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea2:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <xTaskIncrementTick+0x158>)
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea8:	601a      	str	r2, [r3, #0]
					break;
 8005eaa:	e03e      	b.n	8005f2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eac:	4b30      	ldr	r3, [pc, #192]	; (8005f70 <xTaskIncrementTick+0x14c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d203      	bcs.n	8005ecc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ec4:	4a2d      	ldr	r2, [pc, #180]	; (8005f7c <xTaskIncrementTick+0x158>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eca:	e02e      	b.n	8005f2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe ff72 	bl	8004dba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d004      	beq.n	8005ee8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	3318      	adds	r3, #24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe ff69 	bl	8004dba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <xTaskIncrementTick+0x15c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <xTaskIncrementTick+0x15c>)
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <xTaskIncrementTick+0x160>)
 8005f08:	441a      	add	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe fef5 	bl	8004d00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1a:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <xTaskIncrementTick+0x164>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d3b9      	bcc.n	8005e98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f28:	e7b6      	b.n	8005e98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f2a:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <xTaskIncrementTick+0x164>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4914      	ldr	r1, [pc, #80]	; (8005f84 <xTaskIncrementTick+0x160>)
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d901      	bls.n	8005f46 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <xTaskIncrementTick+0x168>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e004      	b.n	8005f5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <xTaskIncrementTick+0x16c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	4a0d      	ldr	r2, [pc, #52]	; (8005f90 <xTaskIncrementTick+0x16c>)
 8005f5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	200009d0 	.word	0x200009d0
 8005f6c:	200009ac 	.word	0x200009ac
 8005f70:	20000960 	.word	0x20000960
 8005f74:	20000964 	.word	0x20000964
 8005f78:	200009c0 	.word	0x200009c0
 8005f7c:	200009c8 	.word	0x200009c8
 8005f80:	200009b0 	.word	0x200009b0
 8005f84:	200008ac 	.word	0x200008ac
 8005f88:	200008a8 	.word	0x200008a8
 8005f8c:	200009bc 	.word	0x200009bc
 8005f90:	200009b8 	.word	0x200009b8

08005f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f9a:	4b27      	ldr	r3, [pc, #156]	; (8006038 <vTaskSwitchContext+0xa4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <vTaskSwitchContext+0xa8>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fa8:	e03f      	b.n	800602a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005faa:	4b24      	ldr	r3, [pc, #144]	; (800603c <vTaskSwitchContext+0xa8>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <vTaskSwitchContext+0xac>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	fab3 f383 	clz	r3, r3
 8005fbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	f1c3 031f 	rsb	r3, r3, #31
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	491f      	ldr	r1, [pc, #124]	; (8006044 <vTaskSwitchContext+0xb0>)
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	607b      	str	r3, [r7, #4]
}
 8005fec:	bf00      	nop
 8005fee:	e7fe      	b.n	8005fee <vTaskSwitchContext+0x5a>
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4a12      	ldr	r2, [pc, #72]	; (8006044 <vTaskSwitchContext+0xb0>)
 8005ffc:	4413      	add	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3308      	adds	r3, #8
 8006012:	429a      	cmp	r2, r3
 8006014:	d104      	bne.n	8006020 <vTaskSwitchContext+0x8c>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4a08      	ldr	r2, [pc, #32]	; (8006048 <vTaskSwitchContext+0xb4>)
 8006028:	6013      	str	r3, [r2, #0]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	200009d0 	.word	0x200009d0
 800603c:	200009bc 	.word	0x200009bc
 8006040:	200009b0 	.word	0x200009b0
 8006044:	200008ac 	.word	0x200008ac
 8006048:	200008a8 	.word	0x200008a8

0800604c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60fb      	str	r3, [r7, #12]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <vTaskPlaceOnEventList+0x44>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3318      	adds	r3, #24
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fe fe64 	bl	8004d48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006080:	2101      	movs	r1, #1
 8006082:	6838      	ldr	r0, [r7, #0]
 8006084:	f000 fb48 	bl	8006718 <prvAddCurrentTaskToDelayedList>
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	200008a8 	.word	0x200008a8

08006094 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	617b      	str	r3, [r7, #20]
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80060bc:	4b11      	ldr	r3, [pc, #68]	; (8006104 <vTaskPlaceOnUnorderedEventList+0x70>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	613b      	str	r3, [r7, #16]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80060da:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <vTaskPlaceOnUnorderedEventList+0x74>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060e6:	4b08      	ldr	r3, [pc, #32]	; (8006108 <vTaskPlaceOnUnorderedEventList+0x74>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3318      	adds	r3, #24
 80060ec:	4619      	mov	r1, r3
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7fe fe06 	bl	8004d00 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb0e 	bl	8006718 <prvAddCurrentTaskToDelayedList>
}
 80060fc:	bf00      	nop
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	200009d0 	.word	0x200009d0
 8006108:	200008a8 	.word	0x200008a8

0800610c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	617b      	str	r3, [r7, #20]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <vTaskPlaceOnEventListRestricted+0x54>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3318      	adds	r3, #24
 800613a:	4619      	mov	r1, r3
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7fe fddf 	bl	8004d00 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	68b8      	ldr	r0, [r7, #8]
 8006152:	f000 fae1 	bl	8006718 <prvAddCurrentTaskToDelayedList>
	}
 8006156:	bf00      	nop
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200008a8 	.word	0x200008a8

08006164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	60fb      	str	r3, [r7, #12]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3318      	adds	r3, #24
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fe10 	bl	8004dba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800619a:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <xTaskRemoveFromEventList+0xac>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d11c      	bne.n	80061dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fe07 	bl	8004dba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	2201      	movs	r2, #1
 80061b2:	409a      	lsls	r2, r3
 80061b4:	4b17      	ldr	r3, [pc, #92]	; (8006214 <xTaskRemoveFromEventList+0xb0>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	4a16      	ldr	r2, [pc, #88]	; (8006214 <xTaskRemoveFromEventList+0xb0>)
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4a13      	ldr	r2, [pc, #76]	; (8006218 <xTaskRemoveFromEventList+0xb4>)
 80061cc:	441a      	add	r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7fe fd93 	bl	8004d00 <vListInsertEnd>
 80061da:	e005      	b.n	80061e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3318      	adds	r3, #24
 80061e0:	4619      	mov	r1, r3
 80061e2:	480e      	ldr	r0, [pc, #56]	; (800621c <xTaskRemoveFromEventList+0xb8>)
 80061e4:	f7fe fd8c 	bl	8004d00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <xTaskRemoveFromEventList+0xbc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d905      	bls.n	8006202 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061f6:	2301      	movs	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <xTaskRemoveFromEventList+0xc0>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	e001      	b.n	8006206 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006206:	697b      	ldr	r3, [r7, #20]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	200009d0 	.word	0x200009d0
 8006214:	200009b0 	.word	0x200009b0
 8006218:	200008ac 	.word	0x200008ac
 800621c:	20000968 	.word	0x20000968
 8006220:	200008a8 	.word	0x200008a8
 8006224:	200009bc 	.word	0x200009bc

08006228 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006232:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	613b      	str	r3, [r7, #16]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60fb      	str	r3, [r7, #12]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fe fd9c 	bl	8004dba <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	3304      	adds	r3, #4
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fd97 	bl	8004dba <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4313      	orrs	r3, r2
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80062ac:	441a      	add	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f7fe fd23 	bl	8004d00 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d902      	bls.n	80062ce <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80062c8:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
	}
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200009d0 	.word	0x200009d0
 80062dc:	200009b0 	.word	0x200009b0
 80062e0:	200008ac 	.word	0x200008ac
 80062e4:	200008a8 	.word	0x200008a8
 80062e8:	200009bc 	.word	0x200009bc

080062ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <vTaskInternalSetTimeOutState+0x24>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <vTaskInternalSetTimeOutState+0x28>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	200009c0 	.word	0x200009c0
 8006314:	200009ac 	.word	0x200009ac

08006318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	613b      	str	r3, [r7, #16]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	60fb      	str	r3, [r7, #12]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800635a:	f000 febb 	bl	80070d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800635e:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <xTaskCheckForTimeOut+0xbc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006376:	d102      	bne.n	800637e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e023      	b.n	80063c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <xTaskCheckForTimeOut+0xc0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d007      	beq.n	800639a <xTaskCheckForTimeOut+0x82>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	429a      	cmp	r2, r3
 8006392:	d302      	bcc.n	800639a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006394:	2301      	movs	r3, #1
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	e015      	b.n	80063c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d20b      	bcs.n	80063bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff ff9b 	bl	80062ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	e004      	b.n	80063c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063c6:	f000 feb5 	bl	8007134 <vPortExitCritical>

	return xReturn;
 80063ca:	69fb      	ldr	r3, [r7, #28]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3720      	adds	r7, #32
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200009ac 	.word	0x200009ac
 80063d8:	200009c0 	.word	0x200009c0

080063dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063e0:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <vTaskMissedYield+0x14>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	601a      	str	r2, [r3, #0]
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	200009bc 	.word	0x200009bc

080063f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063fc:	f000 f852 	bl	80064a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <prvIdleTask+0x28>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d9f9      	bls.n	80063fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <prvIdleTask+0x2c>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006418:	e7f0      	b.n	80063fc <prvIdleTask+0x8>
 800641a:	bf00      	nop
 800641c:	200008ac 	.word	0x200008ac
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800642a:	2300      	movs	r3, #0
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	e00c      	b.n	800644a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4a12      	ldr	r2, [pc, #72]	; (8006484 <prvInitialiseTaskLists+0x60>)
 800643c:	4413      	add	r3, r2
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fc31 	bl	8004ca6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3301      	adds	r3, #1
 8006448:	607b      	str	r3, [r7, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b06      	cmp	r3, #6
 800644e:	d9ef      	bls.n	8006430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006450:	480d      	ldr	r0, [pc, #52]	; (8006488 <prvInitialiseTaskLists+0x64>)
 8006452:	f7fe fc28 	bl	8004ca6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006456:	480d      	ldr	r0, [pc, #52]	; (800648c <prvInitialiseTaskLists+0x68>)
 8006458:	f7fe fc25 	bl	8004ca6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800645c:	480c      	ldr	r0, [pc, #48]	; (8006490 <prvInitialiseTaskLists+0x6c>)
 800645e:	f7fe fc22 	bl	8004ca6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006462:	480c      	ldr	r0, [pc, #48]	; (8006494 <prvInitialiseTaskLists+0x70>)
 8006464:	f7fe fc1f 	bl	8004ca6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006468:	480b      	ldr	r0, [pc, #44]	; (8006498 <prvInitialiseTaskLists+0x74>)
 800646a:	f7fe fc1c 	bl	8004ca6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800646e:	4b0b      	ldr	r3, [pc, #44]	; (800649c <prvInitialiseTaskLists+0x78>)
 8006470:	4a05      	ldr	r2, [pc, #20]	; (8006488 <prvInitialiseTaskLists+0x64>)
 8006472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006474:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <prvInitialiseTaskLists+0x7c>)
 8006476:	4a05      	ldr	r2, [pc, #20]	; (800648c <prvInitialiseTaskLists+0x68>)
 8006478:	601a      	str	r2, [r3, #0]
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	200008ac 	.word	0x200008ac
 8006488:	20000938 	.word	0x20000938
 800648c:	2000094c 	.word	0x2000094c
 8006490:	20000968 	.word	0x20000968
 8006494:	2000097c 	.word	0x2000097c
 8006498:	20000994 	.word	0x20000994
 800649c:	20000960 	.word	0x20000960
 80064a0:	20000964 	.word	0x20000964

080064a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064aa:	e019      	b.n	80064e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064ac:	f000 fe12 	bl	80070d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b0:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <prvCheckTasksWaitingTermination+0x50>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe fc7c 	bl	8004dba <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064c2:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <prvCheckTasksWaitingTermination+0x54>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	4a0b      	ldr	r2, [pc, #44]	; (80064f8 <prvCheckTasksWaitingTermination+0x54>)
 80064ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <prvCheckTasksWaitingTermination+0x58>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <prvCheckTasksWaitingTermination+0x58>)
 80064d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064d6:	f000 fe2d 	bl	8007134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f810 	bl	8006500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <prvCheckTasksWaitingTermination+0x58>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e1      	bne.n	80064ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	2000097c 	.word	0x2000097c
 80064f8:	200009a8 	.word	0x200009a8
 80064fc:	20000990 	.word	0x20000990

08006500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800650e:	2b00      	cmp	r3, #0
 8006510:	d108      	bne.n	8006524 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	4618      	mov	r0, r3
 8006518:	f000 ffca 	bl	80074b0 <vPortFree>
				vPortFree( pxTCB );
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 ffc7 	bl	80074b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006522:	e018      	b.n	8006556 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800652a:	2b01      	cmp	r3, #1
 800652c:	d103      	bne.n	8006536 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 ffbe 	bl	80074b0 <vPortFree>
	}
 8006534:	e00f      	b.n	8006556 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800653c:	2b02      	cmp	r3, #2
 800653e:	d00a      	beq.n	8006556 <prvDeleteTCB+0x56>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	60fb      	str	r3, [r7, #12]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <prvDeleteTCB+0x54>
	}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <prvResetNextTaskUnblockTime+0x38>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <prvResetNextTaskUnblockTime+0x3c>)
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006578:	e008      	b.n	800658c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <prvResetNextTaskUnblockTime+0x38>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4a04      	ldr	r2, [pc, #16]	; (800659c <prvResetNextTaskUnblockTime+0x3c>)
 800658a:	6013      	str	r3, [r2, #0]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20000960 	.word	0x20000960
 800659c:	200009c8 	.word	0x200009c8

080065a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065a6:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <xTaskGetSchedulerState+0x34>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065ae:	2301      	movs	r3, #1
 80065b0:	607b      	str	r3, [r7, #4]
 80065b2:	e008      	b.n	80065c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b4:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <xTaskGetSchedulerState+0x38>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065bc:	2302      	movs	r3, #2
 80065be:	607b      	str	r3, [r7, #4]
 80065c0:	e001      	b.n	80065c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065c2:	2300      	movs	r3, #0
 80065c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065c6:	687b      	ldr	r3, [r7, #4]
	}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	200009b4 	.word	0x200009b4
 80065d8:	200009d0 	.word	0x200009d0

080065dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d06e      	beq.n	80066d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065f2:	4b3a      	ldr	r3, [pc, #232]	; (80066dc <xTaskPriorityDisinherit+0x100>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d00a      	beq.n	8006612 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	60fb      	str	r3, [r7, #12]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60bb      	str	r3, [r7, #8]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006634:	1e5a      	subs	r2, r3, #1
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	429a      	cmp	r2, r3
 8006644:	d044      	beq.n	80066d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664a:	2b00      	cmp	r3, #0
 800664c:	d140      	bne.n	80066d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3304      	adds	r3, #4
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fbb1 	bl	8004dba <uxListRemove>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d115      	bne.n	800668a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	491f      	ldr	r1, [pc, #124]	; (80066e0 <xTaskPriorityDisinherit+0x104>)
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <xTaskPriorityDisinherit+0xae>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	2201      	movs	r2, #1
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43da      	mvns	r2, r3
 8006680:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <xTaskPriorityDisinherit+0x108>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4013      	ands	r3, r2
 8006686:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <xTaskPriorityDisinherit+0x108>)
 8006688:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	f1c3 0207 	rsb	r2, r3, #7
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	2201      	movs	r2, #1
 80066a4:	409a      	lsls	r2, r3
 80066a6:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <xTaskPriorityDisinherit+0x108>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	4a0d      	ldr	r2, [pc, #52]	; (80066e4 <xTaskPriorityDisinherit+0x108>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a08      	ldr	r2, [pc, #32]	; (80066e0 <xTaskPriorityDisinherit+0x104>)
 80066be:	441a      	add	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fe fb1a 	bl	8004d00 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066cc:	2301      	movs	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066d0:	697b      	ldr	r3, [r7, #20]
	}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200008a8 	.word	0x200008a8
 80066e0:	200008ac 	.word	0x200008ac
 80066e4:	200009b0 	.word	0x200009b0

080066e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <uxTaskResetEventItemValue+0x2c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <uxTaskResetEventItemValue+0x2c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <uxTaskResetEventItemValue+0x2c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1c2 0207 	rsb	r2, r2, #7
 8006704:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006706:	687b      	ldr	r3, [r7, #4]
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	200008a8 	.word	0x200008a8

08006718 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006722:	4b29      	ldr	r3, [pc, #164]	; (80067c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006728:	4b28      	ldr	r3, [pc, #160]	; (80067cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fb43 	bl	8004dba <uxListRemove>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800673a:	4b24      	ldr	r3, [pc, #144]	; (80067cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	2201      	movs	r2, #1
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43da      	mvns	r2, r3
 8006748:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4013      	ands	r3, r2
 800674e:	4a20      	ldr	r2, [pc, #128]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006750:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d10a      	bne.n	8006770 <prvAddCurrentTaskToDelayedList+0x58>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006760:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3304      	adds	r3, #4
 8006766:	4619      	mov	r1, r3
 8006768:	481a      	ldr	r0, [pc, #104]	; (80067d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800676a:	f7fe fac9 	bl	8004d00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800676e:	e026      	b.n	80067be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006778:	4b14      	ldr	r3, [pc, #80]	; (80067cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	429a      	cmp	r2, r3
 8006786:	d209      	bcs.n	800679c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f7fe fad7 	bl	8004d48 <vListInsert>
}
 800679a:	e010      	b.n	80067be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800679c:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7fe facd 	bl	8004d48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d202      	bcs.n	80067be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067b8:	4a09      	ldr	r2, [pc, #36]	; (80067e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6013      	str	r3, [r2, #0]
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200009ac 	.word	0x200009ac
 80067cc:	200008a8 	.word	0x200008a8
 80067d0:	200009b0 	.word	0x200009b0
 80067d4:	20000994 	.word	0x20000994
 80067d8:	20000964 	.word	0x20000964
 80067dc:	20000960 	.word	0x20000960
 80067e0:	200009c8 	.word	0x200009c8

080067e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	; 0x28
 80067e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067ee:	f000 fb07 	bl	8006e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <xTimerCreateTimerTask+0x80>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d021      	beq.n	800683e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006802:	1d3a      	adds	r2, r7, #4
 8006804:	f107 0108 	add.w	r1, r7, #8
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	4618      	mov	r0, r3
 800680e:	f7fa f985 	bl	8000b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	9202      	str	r2, [sp, #8]
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	2302      	movs	r3, #2
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	2300      	movs	r3, #0
 8006822:	460a      	mov	r2, r1
 8006824:	4910      	ldr	r1, [pc, #64]	; (8006868 <xTimerCreateTimerTask+0x84>)
 8006826:	4811      	ldr	r0, [pc, #68]	; (800686c <xTimerCreateTimerTask+0x88>)
 8006828:	f7ff f814 	bl	8005854 <xTaskCreateStatic>
 800682c:	4603      	mov	r3, r0
 800682e:	4a10      	ldr	r2, [pc, #64]	; (8006870 <xTimerCreateTimerTask+0x8c>)
 8006830:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006832:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <xTimerCreateTimerTask+0x8c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800683a:	2301      	movs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	613b      	str	r3, [r7, #16]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800685a:	697b      	ldr	r3, [r7, #20]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000a04 	.word	0x20000a04
 8006868:	08007858 	.word	0x08007858
 800686c:	080069a9 	.word	0x080069a9
 8006870:	20000a08 	.word	0x20000a08

08006874 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	623b      	str	r3, [r7, #32]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068a2:	4b1a      	ldr	r3, [pc, #104]	; (800690c <xTimerGenericCommand+0x98>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d02a      	beq.n	8006900 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	dc18      	bgt.n	80068ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068bc:	f7ff fe70 	bl	80065a0 <xTaskGetSchedulerState>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d109      	bne.n	80068da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <xTimerGenericCommand+0x98>)
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f107 0110 	add.w	r1, r7, #16
 80068ce:	2300      	movs	r3, #0
 80068d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d2:	f7fe fbd7 	bl	8005084 <xQueueGenericSend>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24
 80068d8:	e012      	b.n	8006900 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <xTimerGenericCommand+0x98>)
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	f107 0110 	add.w	r1, r7, #16
 80068e2:	2300      	movs	r3, #0
 80068e4:	2200      	movs	r2, #0
 80068e6:	f7fe fbcd 	bl	8005084 <xQueueGenericSend>
 80068ea:	6278      	str	r0, [r7, #36]	; 0x24
 80068ec:	e008      	b.n	8006900 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <xTimerGenericCommand+0x98>)
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	f107 0110 	add.w	r1, r7, #16
 80068f6:	2300      	movs	r3, #0
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	f7fe fcc1 	bl	8005280 <xQueueGenericSendFromISR>
 80068fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006902:	4618      	mov	r0, r3
 8006904:	3728      	adds	r7, #40	; 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000a04 	.word	0x20000a04

08006910 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691a:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <prvProcessExpiredTimer+0x94>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3304      	adds	r3, #4
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe fa46 	bl	8004dba <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d022      	beq.n	8006982 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	18d1      	adds	r1, r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	6978      	ldr	r0, [r7, #20]
 800694a:	f000 f8d1 	bl	8006af0 <prvInsertTimerInActiveList>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01f      	beq.n	8006994 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006954:	2300      	movs	r3, #0
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	2300      	movs	r3, #0
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	2100      	movs	r1, #0
 800695e:	6978      	ldr	r0, [r7, #20]
 8006960:	f7ff ff88 	bl	8006874 <xTimerGenericCommand>
 8006964:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d113      	bne.n	8006994 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	6978      	ldr	r0, [r7, #20]
 800699a:	4798      	blx	r3
}
 800699c:	bf00      	nop
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	200009fc 	.word	0x200009fc

080069a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069b0:	f107 0308 	add.w	r3, r7, #8
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 f857 	bl	8006a68 <prvGetNextExpireTime>
 80069ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f803 	bl	80069cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069c6:	f000 f8d5 	bl	8006b74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ca:	e7f1      	b.n	80069b0 <prvTimerTask+0x8>

080069cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069d6:	f7ff f96b 	bl	8005cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069da:	f107 0308 	add.w	r3, r7, #8
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f866 	bl	8006ab0 <prvSampleTimeNow>
 80069e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d130      	bne.n	8006a4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <prvProcessTimerOrBlockTask+0x3c>
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d806      	bhi.n	8006a08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069fa:	f7ff f967 	bl	8005ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ff85 	bl	8006910 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a06:	e024      	b.n	8006a52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d008      	beq.n	8006a20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a0e:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <prvProcessTimerOrBlockTask+0x90>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <prvProcessTimerOrBlockTask+0x50>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <prvProcessTimerOrBlockTask+0x52>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a20:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <prvProcessTimerOrBlockTask+0x94>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f7fe fedd 	bl	80057ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a32:	f7ff f94b 	bl	8005ccc <xTaskResumeAll>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <prvProcessTimerOrBlockTask+0x98>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
}
 8006a4c:	e001      	b.n	8006a52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a4e:	f7ff f93d 	bl	8005ccc <xTaskResumeAll>
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000a00 	.word	0x20000a00
 8006a60:	20000a04 	.word	0x20000a04
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <prvGetNextExpireTime+0x44>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <prvGetNextExpireTime+0x16>
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	e000      	b.n	8006a80 <prvGetNextExpireTime+0x18>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a8c:	4b07      	ldr	r3, [pc, #28]	; (8006aac <prvGetNextExpireTime+0x44>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e001      	b.n	8006a9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	200009fc 	.word	0x200009fc

08006ab0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ab8:	f7ff f9a4 	bl	8005e04 <xTaskGetTickCount>
 8006abc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006abe:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <prvSampleTimeNow+0x3c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d205      	bcs.n	8006ad4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ac8:	f000 f936 	bl	8006d38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e002      	b.n	8006ada <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ada:	4a04      	ldr	r2, [pc, #16]	; (8006aec <prvSampleTimeNow+0x3c>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000a0c 	.word	0x20000a0c

08006af0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d812      	bhi.n	8006b3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e01b      	b.n	8006b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b2a:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <prvInsertTimerInActiveList+0x7c>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f7fe f907 	bl	8004d48 <vListInsert>
 8006b3a:	e012      	b.n	8006b62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d206      	bcs.n	8006b52 <prvInsertTimerInActiveList+0x62>
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e007      	b.n	8006b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b52:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <prvInsertTimerInActiveList+0x80>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7fe f8f3 	bl	8004d48 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b62:	697b      	ldr	r3, [r7, #20]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000a00 	.word	0x20000a00
 8006b70:	200009fc 	.word	0x200009fc

08006b74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08e      	sub	sp, #56	; 0x38
 8006b78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b7a:	e0ca      	b.n	8006d12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da18      	bge.n	8006bb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	3304      	adds	r3, #4
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	61fb      	str	r3, [r7, #28]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006baa:	6850      	ldr	r0, [r2, #4]
 8006bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bae:	6892      	ldr	r2, [r2, #8]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f2c0 80ab 	blt.w	8006d12 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe f8f4 	bl	8004dba <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff ff6b 	bl	8006ab0 <prvSampleTimeNow>
 8006bda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	f200 8096 	bhi.w	8006d10 <prvProcessReceivedCommands+0x19c>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <prvProcessReceivedCommands+0x78>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c15 	.word	0x08006c15
 8006bf8:	08006c89 	.word	0x08006c89
 8006bfc:	08006c9d 	.word	0x08006c9d
 8006c00:	08006ce7 	.word	0x08006ce7
 8006c04:	08006c15 	.word	0x08006c15
 8006c08:	08006c15 	.word	0x08006c15
 8006c0c:	08006c89 	.word	0x08006c89
 8006c10:	08006c9d 	.word	0x08006c9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	18d1      	adds	r1, r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c34:	f7ff ff5c 	bl	8006af0 <prvInsertTimerInActiveList>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d069      	beq.n	8006d12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d05e      	beq.n	8006d12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	441a      	add	r2, r3
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	2300      	movs	r3, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c66:	f7ff fe05 	bl	8006874 <xTimerGenericCommand>
 8006c6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d14f      	bne.n	8006d12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	61bb      	str	r3, [r7, #24]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8006c9a:	e03a      	b.n	8006d12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	617b      	str	r3, [r7, #20]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	18d1      	adds	r1, r2, r3
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce0:	f7ff ff06 	bl	8006af0 <prvInsertTimerInActiveList>
					break;
 8006ce4:	e015      	b.n	8006d12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d103      	bne.n	8006cfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf6:	f000 fbdb 	bl	80074b0 <vPortFree>
 8006cfa:	e00a      	b.n	8006d12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d0e:	e000      	b.n	8006d12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006d10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <prvProcessReceivedCommands+0x1c0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	1d39      	adds	r1, r7, #4
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fb4c 	bl	80053b8 <xQueueReceive>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f47f af2a 	bne.w	8006b7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	3730      	adds	r7, #48	; 0x30
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000a04 	.word	0x20000a04

08006d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d3e:	e048      	b.n	8006dd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d40:	4b2d      	ldr	r3, [pc, #180]	; (8006df8 <prvSwitchTimerLists+0xc0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4a:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <prvSwitchTimerLists+0xc0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe f82e 	bl	8004dba <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d02e      	beq.n	8006dd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d90e      	bls.n	8006da4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d92:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <prvSwitchTimerLists+0xc0>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f7fd ffd3 	bl	8004d48 <vListInsert>
 8006da2:	e016      	b.n	8006dd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006da4:	2300      	movs	r3, #0
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	2300      	movs	r3, #0
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	2100      	movs	r1, #0
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7ff fd60 	bl	8006874 <xTimerGenericCommand>
 8006db4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	603b      	str	r3, [r7, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <prvSwitchTimerLists+0xc0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1b1      	bne.n	8006d40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <prvSwitchTimerLists+0xc0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <prvSwitchTimerLists+0xc4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a04      	ldr	r2, [pc, #16]	; (8006df8 <prvSwitchTimerLists+0xc0>)
 8006de8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dea:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <prvSwitchTimerLists+0xc4>)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	6013      	str	r3, [r2, #0]
}
 8006df0:	bf00      	nop
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	200009fc 	.word	0x200009fc
 8006dfc:	20000a00 	.word	0x20000a00

08006e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e06:	f000 f965 	bl	80070d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e0a:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d120      	bne.n	8006e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e12:	4814      	ldr	r0, [pc, #80]	; (8006e64 <prvCheckForValidListAndQueue+0x64>)
 8006e14:	f7fd ff47 	bl	8004ca6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e18:	4813      	ldr	r0, [pc, #76]	; (8006e68 <prvCheckForValidListAndQueue+0x68>)
 8006e1a:	f7fd ff44 	bl	8004ca6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e1e:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <prvCheckForValidListAndQueue+0x6c>)
 8006e20:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <prvCheckForValidListAndQueue+0x64>)
 8006e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e24:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <prvCheckForValidListAndQueue+0x70>)
 8006e26:	4a10      	ldr	r2, [pc, #64]	; (8006e68 <prvCheckForValidListAndQueue+0x68>)
 8006e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <prvCheckForValidListAndQueue+0x74>)
 8006e30:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <prvCheckForValidListAndQueue+0x78>)
 8006e32:	2110      	movs	r1, #16
 8006e34:	200a      	movs	r0, #10
 8006e36:	f7fe f853 	bl	8004ee0 <xQueueGenericCreateStatic>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	490b      	ldr	r1, [pc, #44]	; (8006e7c <prvCheckForValidListAndQueue+0x7c>)
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fca2 	bl	8005798 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e54:	f000 f96e 	bl	8007134 <vPortExitCritical>
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000a04 	.word	0x20000a04
 8006e64:	200009d4 	.word	0x200009d4
 8006e68:	200009e8 	.word	0x200009e8
 8006e6c:	200009fc 	.word	0x200009fc
 8006e70:	20000a00 	.word	0x20000a00
 8006e74:	20000ab0 	.word	0x20000ab0
 8006e78:	20000a10 	.word	0x20000a10
 8006e7c:	08007860 	.word	0x08007860

08006e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3b04      	subs	r3, #4
 8006e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3b04      	subs	r3, #4
 8006e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3b04      	subs	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ee4 <pxPortInitialiseStack+0x64>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3b14      	subs	r3, #20
 8006eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3b04      	subs	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f06f 0202 	mvn.w	r2, #2
 8006ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3b20      	subs	r3, #32
 8006ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	08006ee9 	.word	0x08006ee9

08006ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ef2:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <prvTaskExitError+0x54>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efa:	d00a      	beq.n	8006f12 <prvTaskExitError+0x2a>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60fb      	str	r3, [r7, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <prvTaskExitError+0x28>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60bb      	str	r3, [r7, #8]
}
 8006f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f26:	bf00      	nop
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0fc      	beq.n	8006f28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	2000000c 	.word	0x2000000c

08006f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <pxCurrentTCBConst2>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	f380 8809 	msr	PSP, r0
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	4770      	bx	lr
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst2>:
 8006f60:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f68:	4808      	ldr	r0, [pc, #32]	; (8006f8c <prvPortStartFirstTask+0x24>)
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f380 8808 	msr	MSP, r0
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8814 	msr	CONTROL, r0
 8006f7a:	b662      	cpsie	i
 8006f7c:	b661      	cpsie	f
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	df00      	svc	0
 8006f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f8a:	bf00      	nop
 8006f8c:	e000ed08 	.word	0xe000ed08

08006f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f96:	4b46      	ldr	r3, [pc, #280]	; (80070b0 <xPortStartScheduler+0x120>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a46      	ldr	r2, [pc, #280]	; (80070b4 <xPortStartScheduler+0x124>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d10a      	bne.n	8006fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	613b      	str	r3, [r7, #16]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fb6:	4b3e      	ldr	r3, [pc, #248]	; (80070b0 <xPortStartScheduler+0x120>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3f      	ldr	r2, [pc, #252]	; (80070b8 <xPortStartScheduler+0x128>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10a      	bne.n	8006fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60fb      	str	r3, [r7, #12]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <xPortStartScheduler+0x12c>)
 8006fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	22ff      	movs	r2, #255	; 0xff
 8006fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	4b31      	ldr	r3, [pc, #196]	; (80070c0 <xPortStartScheduler+0x130>)
 8006ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ffe:	4b31      	ldr	r3, [pc, #196]	; (80070c4 <xPortStartScheduler+0x134>)
 8007000:	2207      	movs	r2, #7
 8007002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007004:	e009      	b.n	800701a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007006:	4b2f      	ldr	r3, [pc, #188]	; (80070c4 <xPortStartScheduler+0x134>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3b01      	subs	r3, #1
 800700c:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <xPortStartScheduler+0x134>)
 800700e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b80      	cmp	r3, #128	; 0x80
 8007024:	d0ef      	beq.n	8007006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007026:	4b27      	ldr	r3, [pc, #156]	; (80070c4 <xPortStartScheduler+0x134>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f1c3 0307 	rsb	r3, r3, #7
 800702e:	2b04      	cmp	r3, #4
 8007030:	d00a      	beq.n	8007048 <xPortStartScheduler+0xb8>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	60bb      	str	r3, [r7, #8]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007048:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <xPortStartScheduler+0x134>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	4a1d      	ldr	r2, [pc, #116]	; (80070c4 <xPortStartScheduler+0x134>)
 8007050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007052:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <xPortStartScheduler+0x134>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800705a:	4a1a      	ldr	r2, [pc, #104]	; (80070c4 <xPortStartScheduler+0x134>)
 800705c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007066:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <xPortStartScheduler+0x138>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a17      	ldr	r2, [pc, #92]	; (80070c8 <xPortStartScheduler+0x138>)
 800706c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <xPortStartScheduler+0x138>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <xPortStartScheduler+0x138>)
 8007078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800707c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800707e:	f000 f8dd 	bl	800723c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <xPortStartScheduler+0x13c>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007088:	f000 f8fc 	bl	8007284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <xPortStartScheduler+0x140>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <xPortStartScheduler+0x140>)
 8007092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007098:	f7ff ff66 	bl	8006f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800709c:	f7fe ff7a 	bl	8005f94 <vTaskSwitchContext>
	prvTaskExitError();
 80070a0:	f7ff ff22 	bl	8006ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	e000ed00 	.word	0xe000ed00
 80070b4:	410fc271 	.word	0x410fc271
 80070b8:	410fc270 	.word	0x410fc270
 80070bc:	e000e400 	.word	0xe000e400
 80070c0:	20000af8 	.word	0x20000af8
 80070c4:	20000afc 	.word	0x20000afc
 80070c8:	e000ed20 	.word	0xe000ed20
 80070cc:	2000000c 	.word	0x2000000c
 80070d0:	e000ef34 	.word	0xe000ef34

080070d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	607b      	str	r3, [r7, #4]
}
 80070ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070ee:	4b0f      	ldr	r3, [pc, #60]	; (800712c <vPortEnterCritical+0x58>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	4a0d      	ldr	r2, [pc, #52]	; (800712c <vPortEnterCritical+0x58>)
 80070f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <vPortEnterCritical+0x58>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d10f      	bne.n	8007120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <vPortEnterCritical+0x5c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <vPortEnterCritical+0x4c>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	603b      	str	r3, [r7, #0]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <vPortEnterCritical+0x4a>
	}
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	2000000c 	.word	0x2000000c
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800713a:	4b12      	ldr	r3, [pc, #72]	; (8007184 <vPortExitCritical+0x50>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <vPortExitCritical+0x24>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	607b      	str	r3, [r7, #4]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <vPortExitCritical+0x50>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3b01      	subs	r3, #1
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <vPortExitCritical+0x50>)
 8007160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007162:	4b08      	ldr	r3, [pc, #32]	; (8007184 <vPortExitCritical+0x50>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <vPortExitCritical+0x42>
 800716a:	2300      	movs	r3, #0
 800716c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f383 8811 	msr	BASEPRI, r3
}
 8007174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	2000000c 	.word	0x2000000c
	...

08007190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007190:	f3ef 8009 	mrs	r0, PSP
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <pxCurrentTCBConst>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	f01e 0f10 	tst.w	lr, #16
 80071a0:	bf08      	it	eq
 80071a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071aa:	6010      	str	r0, [r2, #0]
 80071ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071b4:	f380 8811 	msr	BASEPRI, r0
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f7fe fee8 	bl	8005f94 <vTaskSwitchContext>
 80071c4:	f04f 0000 	mov.w	r0, #0
 80071c8:	f380 8811 	msr	BASEPRI, r0
 80071cc:	bc09      	pop	{r0, r3}
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	6808      	ldr	r0, [r1, #0]
 80071d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d6:	f01e 0f10 	tst.w	lr, #16
 80071da:	bf08      	it	eq
 80071dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071e0:	f380 8809 	msr	PSP, r0
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	f3af 8000 	nop.w

080071f0 <pxCurrentTCBConst>:
 80071f0:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop

080071f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	607b      	str	r3, [r7, #4]
}
 8007210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007212:	f7fe fe07 	bl	8005e24 <xTaskIncrementTick>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <SysTick_Handler+0x40>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f383 8811 	msr	BASEPRI, r3
}
 800722e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <vPortSetupTimerInterrupt+0x34>)
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <vPortSetupTimerInterrupt+0x38>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <vPortSetupTimerInterrupt+0x3c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a0a      	ldr	r2, [pc, #40]	; (800727c <vPortSetupTimerInterrupt+0x40>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	099b      	lsrs	r3, r3, #6
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <vPortSetupTimerInterrupt+0x44>)
 800725a:	3b01      	subs	r3, #1
 800725c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <vPortSetupTimerInterrupt+0x34>)
 8007260:	2207      	movs	r2, #7
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	e000e010 	.word	0xe000e010
 8007274:	e000e018 	.word	0xe000e018
 8007278:	20000000 	.word	0x20000000
 800727c:	10624dd3 	.word	0x10624dd3
 8007280:	e000e014 	.word	0xe000e014

08007284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007294 <vPortEnableVFP+0x10>
 8007288:	6801      	ldr	r1, [r0, #0]
 800728a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800728e:	6001      	str	r1, [r0, #0]
 8007290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007292:	bf00      	nop
 8007294:	e000ed88 	.word	0xe000ed88

08007298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800729e:	f3ef 8305 	mrs	r3, IPSR
 80072a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d914      	bls.n	80072d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072aa:	4a17      	ldr	r2, [pc, #92]	; (8007308 <vPortValidateInterruptPriority+0x70>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072b4:	4b15      	ldr	r3, [pc, #84]	; (800730c <vPortValidateInterruptPriority+0x74>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	7afa      	ldrb	r2, [r7, #11]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d20a      	bcs.n	80072d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <vPortValidateInterruptPriority+0x78>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072dc:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <vPortValidateInterruptPriority+0x7c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d90a      	bls.n	80072fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	603b      	str	r3, [r7, #0]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <vPortValidateInterruptPriority+0x60>
	}
 80072fa:	bf00      	nop
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	e000e3f0 	.word	0xe000e3f0
 800730c:	20000af8 	.word	0x20000af8
 8007310:	e000ed0c 	.word	0xe000ed0c
 8007314:	20000afc 	.word	0x20000afc

08007318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007324:	f7fe fcc4 	bl	8005cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007328:	4b5b      	ldr	r3, [pc, #364]	; (8007498 <pvPortMalloc+0x180>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007330:	f000 f920 	bl	8007574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007334:	4b59      	ldr	r3, [pc, #356]	; (800749c <pvPortMalloc+0x184>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 8093 	bne.w	8007468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01d      	beq.n	8007384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007348:	2208      	movs	r2, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	3308      	adds	r3, #8
 8007362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <pvPortMalloc+0x6c>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	617b      	str	r3, [r7, #20]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d06e      	beq.n	8007468 <pvPortMalloc+0x150>
 800738a:	4b45      	ldr	r3, [pc, #276]	; (80074a0 <pvPortMalloc+0x188>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d869      	bhi.n	8007468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007394:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <pvPortMalloc+0x18c>)
 8007396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007398:	4b42      	ldr	r3, [pc, #264]	; (80074a4 <pvPortMalloc+0x18c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800739e:	e004      	b.n	80073aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <pvPortMalloc+0xa4>
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f1      	bne.n	80073a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073bc:	4b36      	ldr	r3, [pc, #216]	; (8007498 <pvPortMalloc+0x180>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d050      	beq.n	8007468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2208      	movs	r2, #8
 80073cc:	4413      	add	r3, r2
 80073ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	2308      	movs	r3, #8
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d91f      	bls.n	8007428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <pvPortMalloc+0xf8>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	613b      	str	r3, [r7, #16]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007422:	69b8      	ldr	r0, [r7, #24]
 8007424:	f000 f908 	bl	8007638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007428:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <pvPortMalloc+0x188>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1b      	ldr	r2, [pc, #108]	; (80074a0 <pvPortMalloc+0x188>)
 8007434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007436:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <pvPortMalloc+0x188>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <pvPortMalloc+0x190>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d203      	bcs.n	800744a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007442:	4b17      	ldr	r3, [pc, #92]	; (80074a0 <pvPortMalloc+0x188>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <pvPortMalloc+0x190>)
 8007448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <pvPortMalloc+0x184>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	431a      	orrs	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800745e:	4b13      	ldr	r3, [pc, #76]	; (80074ac <pvPortMalloc+0x194>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	4a11      	ldr	r2, [pc, #68]	; (80074ac <pvPortMalloc+0x194>)
 8007466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007468:	f7fe fc30 	bl	8005ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <pvPortMalloc+0x174>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60fb      	str	r3, [r7, #12]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <pvPortMalloc+0x172>
	return pvReturn;
 800748c:	69fb      	ldr	r3, [r7, #28]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3728      	adds	r7, #40	; 0x28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20004708 	.word	0x20004708
 800749c:	2000471c 	.word	0x2000471c
 80074a0:	2000470c 	.word	0x2000470c
 80074a4:	20004700 	.word	0x20004700
 80074a8:	20004710 	.word	0x20004710
 80074ac:	20004714 	.word	0x20004714

080074b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d04d      	beq.n	800755e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074c2:	2308      	movs	r3, #8
 80074c4:	425b      	negs	r3, r3
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <vPortFree+0xb8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4013      	ands	r3, r2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <vPortFree+0x44>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	60fb      	str	r3, [r7, #12]
}
 80074f0:	bf00      	nop
 80074f2:	e7fe      	b.n	80074f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <vPortFree+0x62>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	60bb      	str	r3, [r7, #8]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <vPortFree+0xb8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01e      	beq.n	800755e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11a      	bne.n	800755e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <vPortFree+0xb8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	43db      	mvns	r3, r3
 8007532:	401a      	ands	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007538:	f7fe fbba 	bl	8005cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <vPortFree+0xbc>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4413      	add	r3, r2
 8007546:	4a09      	ldr	r2, [pc, #36]	; (800756c <vPortFree+0xbc>)
 8007548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800754a:	6938      	ldr	r0, [r7, #16]
 800754c:	f000 f874 	bl	8007638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <vPortFree+0xc0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	4a06      	ldr	r2, [pc, #24]	; (8007570 <vPortFree+0xc0>)
 8007558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800755a:	f7fe fbb7 	bl	8005ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800755e:	bf00      	nop
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	2000471c 	.word	0x2000471c
 800756c:	2000470c 	.word	0x2000470c
 8007570:	20004718 	.word	0x20004718

08007574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800757a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800757e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007580:	4b27      	ldr	r3, [pc, #156]	; (8007620 <prvHeapInit+0xac>)
 8007582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	4a1f      	ldr	r2, [pc, #124]	; (8007620 <prvHeapInit+0xac>)
 80075a4:	4413      	add	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ac:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <prvHeapInit+0xb0>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <prvHeapInit+0xb0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075c0:	2208      	movs	r2, #8
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0307 	bic.w	r3, r3, #7
 80075ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a15      	ldr	r2, [pc, #84]	; (8007628 <prvHeapInit+0xb4>)
 80075d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <prvHeapInit+0xb4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075de:	4b12      	ldr	r3, [pc, #72]	; (8007628 <prvHeapInit+0xb4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <prvHeapInit+0xb4>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <prvHeapInit+0xb8>)
 8007602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <prvHeapInit+0xbc>)
 800760a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800760c:	4b09      	ldr	r3, [pc, #36]	; (8007634 <prvHeapInit+0xc0>)
 800760e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	20000b00 	.word	0x20000b00
 8007624:	20004700 	.word	0x20004700
 8007628:	20004708 	.word	0x20004708
 800762c:	20004710 	.word	0x20004710
 8007630:	2000470c 	.word	0x2000470c
 8007634:	2000471c 	.word	0x2000471c

08007638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007640:	4b28      	ldr	r3, [pc, #160]	; (80076e4 <prvInsertBlockIntoFreeList+0xac>)
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e002      	b.n	800764c <prvInsertBlockIntoFreeList+0x14>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d8f7      	bhi.n	8007646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	4413      	add	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d108      	bne.n	800767a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d118      	bne.n	80076c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d00d      	beq.n	80076b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e008      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <prvInsertBlockIntoFreeList+0xb0>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e003      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d002      	beq.n	80076d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20004700 	.word	0x20004700
 80076e8:	20004708 	.word	0x20004708

080076ec <memset>:
 80076ec:	4402      	add	r2, r0
 80076ee:	4603      	mov	r3, r0
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d100      	bne.n	80076f6 <memset+0xa>
 80076f4:	4770      	bx	lr
 80076f6:	f803 1b01 	strb.w	r1, [r3], #1
 80076fa:	e7f9      	b.n	80076f0 <memset+0x4>

080076fc <__libc_init_array>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	4d0d      	ldr	r5, [pc, #52]	; (8007734 <__libc_init_array+0x38>)
 8007700:	4c0d      	ldr	r4, [pc, #52]	; (8007738 <__libc_init_array+0x3c>)
 8007702:	1b64      	subs	r4, r4, r5
 8007704:	10a4      	asrs	r4, r4, #2
 8007706:	2600      	movs	r6, #0
 8007708:	42a6      	cmp	r6, r4
 800770a:	d109      	bne.n	8007720 <__libc_init_array+0x24>
 800770c:	4d0b      	ldr	r5, [pc, #44]	; (800773c <__libc_init_array+0x40>)
 800770e:	4c0c      	ldr	r4, [pc, #48]	; (8007740 <__libc_init_array+0x44>)
 8007710:	f000 f826 	bl	8007760 <_init>
 8007714:	1b64      	subs	r4, r4, r5
 8007716:	10a4      	asrs	r4, r4, #2
 8007718:	2600      	movs	r6, #0
 800771a:	42a6      	cmp	r6, r4
 800771c:	d105      	bne.n	800772a <__libc_init_array+0x2e>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	f855 3b04 	ldr.w	r3, [r5], #4
 8007724:	4798      	blx	r3
 8007726:	3601      	adds	r6, #1
 8007728:	e7ee      	b.n	8007708 <__libc_init_array+0xc>
 800772a:	f855 3b04 	ldr.w	r3, [r5], #4
 800772e:	4798      	blx	r3
 8007730:	3601      	adds	r6, #1
 8007732:	e7f2      	b.n	800771a <__libc_init_array+0x1e>
 8007734:	08007888 	.word	0x08007888
 8007738:	08007888 	.word	0x08007888
 800773c:	08007888 	.word	0x08007888
 8007740:	0800788c 	.word	0x0800788c

08007744 <memcpy>:
 8007744:	440a      	add	r2, r1
 8007746:	4291      	cmp	r1, r2
 8007748:	f100 33ff 	add.w	r3, r0, #4294967295
 800774c:	d100      	bne.n	8007750 <memcpy+0xc>
 800774e:	4770      	bx	lr
 8007750:	b510      	push	{r4, lr}
 8007752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800775a:	4291      	cmp	r1, r2
 800775c:	d1f9      	bne.n	8007752 <memcpy+0xe>
 800775e:	bd10      	pop	{r4, pc}

08007760 <_init>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr

0800776c <_fini>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr


SimpleF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007774  08007774  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007774  08007774  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007774  08007774  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800777c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002364  20000010  0800778c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002374  0800778c  00022374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001679e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000383f  00000000  00000000  0003681a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b7  00000000  00000000  0003b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001941b  00000000  00000000  0003c68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001789b  00000000  00000000  00055aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094ea6  00000000  00000000  0006d345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005994  00000000  00000000  001021ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00107b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08007650 	.word	0x08007650

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08007650 	.word	0x08007650

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000090 	.word	0x20000090

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	; (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000290 	.word	0x20000290
 80001b0:	200002f4 	.word	0x200002f4

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b5b0      	push	{r4, r5, r7, lr}
 80001b6:	b098      	sub	sp, #96	; 0x60
 80001b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80001be:	e007      	b.n	80001d0 <main+0x1c>
		exm.execution_memory[i] = 0;
 80001c0:	4a65      	ldr	r2, [pc, #404]	; (8000358 <main+0x1a4>)
 80001c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001c4:	4413      	add	r3, r2
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 80001ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001cc:	3301      	adds	r3, #1
 80001ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80001d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001d2:	2b76      	cmp	r3, #118	; 0x76
 80001d4:	d9f4      	bls.n	80001c0 <main+0xc>
	}
	exm.memory_pointer = exm.execution_memory;
 80001d6:	4b60      	ldr	r3, [pc, #384]	; (8000358 <main+0x1a4>)
 80001d8:	4a5f      	ldr	r2, [pc, #380]	; (8000358 <main+0x1a4>)
 80001da:	679a      	str	r2, [r3, #120]	; 0x78
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 80001dc:	2300      	movs	r3, #0
 80001de:	65bb      	str	r3, [r7, #88]	; 0x58
 80001e0:	e008      	b.n	80001f4 <main+0x40>
		exm.sizes_of_instruction[i] = 1;
 80001e2:	4a5d      	ldr	r2, [pc, #372]	; (8000358 <main+0x1a4>)
 80001e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80001e6:	4413      	add	r3, r2
 80001e8:	337c      	adds	r3, #124	; 0x7c
 80001ea:	2201      	movs	r2, #1
 80001ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 80001ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80001f0:	3301      	adds	r3, #1
 80001f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80001f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80001f6:	2b3b      	cmp	r3, #59	; 0x3b
 80001f8:	d9f3      	bls.n	80001e2 <main+0x2e>
	}
	exm.sizes_pointer = exm.sizes_of_instruction;
 80001fa:	4b57      	ldr	r3, [pc, #348]	; (8000358 <main+0x1a4>)
 80001fc:	4a57      	ldr	r2, [pc, #348]	; (800035c <main+0x1a8>)
 80001fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000202:	2300      	movs	r3, #0
 8000204:	657b      	str	r3, [r7, #84]	; 0x54
 8000206:	e008      	b.n	800021a <main+0x66>
		exm.current_instruction[i] = 0;
 8000208:	4a53      	ldr	r2, [pc, #332]	; (8000358 <main+0x1a4>)
 800020a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800020c:	4413      	add	r3, r2
 800020e:	33bc      	adds	r3, #188	; 0xbc
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000216:	3301      	adds	r3, #1
 8000218:	657b      	str	r3, [r7, #84]	; 0x54
 800021a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800021c:	2b03      	cmp	r3, #3
 800021e:	d9f3      	bls.n	8000208 <main+0x54>
	}
	exm.start_speed_value = 0;
 8000220:	4b4d      	ldr	r3, [pc, #308]	; (8000358 <main+0x1a4>)
 8000222:	2200      	movs	r2, #0
 8000224:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 8000228:	4b4b      	ldr	r3, [pc, #300]	; (8000358 <main+0x1a4>)
 800022a:	2200      	movs	r2, #0
 800022c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 8000230:	4b49      	ldr	r3, [pc, #292]	; (8000358 <main+0x1a4>)
 8000232:	2200      	movs	r2, #0
 8000234:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 8000238:	4b47      	ldr	r3, [pc, #284]	; (8000358 <main+0x1a4>)
 800023a:	2200      	movs	r2, #0
 800023c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	exm.step_counter_second_part = 0;
 8000240:	4b45      	ldr	r3, [pc, #276]	; (8000358 <main+0x1a4>)
 8000242:	2200      	movs	r2, #0
 8000244:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	exm.position = 0; // temporary
 8000248:	4b43      	ldr	r3, [pc, #268]	; (8000358 <main+0x1a4>)
 800024a:	2200      	movs	r2, #0
 800024c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f001 fba6 	bl	80019a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f89c 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f000 fa04 	bl	8000664 <MX_GPIO_Init>
  MX_SPI1_Init();
 800025c:	f000 f8d8 	bl	8000410 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000260:	f000 f90c 	bl	800047c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000264:	f000 f95a 	bl	800051c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000268:	f000 f9d0 	bl	800060c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 800026c:	4b3c      	ldr	r3, [pc, #240]	; (8000360 <main+0x1ac>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a3b      	ldr	r2, [pc, #236]	; (8000360 <main+0x1ac>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 8000278:	4b39      	ldr	r3, [pc, #228]	; (8000360 <main+0x1ac>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a38      	ldr	r2, [pc, #224]	; (8000360 <main+0x1ac>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 8000284:	4b36      	ldr	r3, [pc, #216]	; (8000360 <main+0x1ac>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a35      	ldr	r2, [pc, #212]	; (8000360 <main+0x1ac>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 8000290:	4b33      	ldr	r3, [pc, #204]	; (8000360 <main+0x1ac>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a32      	ldr	r2, [pc, #200]	; (8000360 <main+0x1ac>)
 8000296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029a:	60d3      	str	r3, [r2, #12]

  GPIOB->ODR &= ~GPIO_ODR_ODR10; //Enable stepper driver
 800029c:	4b31      	ldr	r3, [pc, #196]	; (8000364 <main+0x1b0>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a30      	ldr	r2, [pc, #192]	; (8000364 <main+0x1b0>)
 80002a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002a6:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start_IT(&htim3);
 80002a8:	482f      	ldr	r0, [pc, #188]	; (8000368 <main+0x1b4>)
 80002aa:	f002 fc05 	bl	8002ab8 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 80002ae:	f004 fb0d 	bl	80048cc <xEventGroupCreate>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a2d      	ldr	r2, [pc, #180]	; (800036c <main+0x1b8>)
 80002b6:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 80002b8:	4b2c      	ldr	r3, [pc, #176]	; (800036c <main+0x1b8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2140      	movs	r1, #64	; 0x40
 80002be:	4618      	mov	r0, r3
 80002c0:	f004 fc47 	bl	8004b52 <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(32, 1);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	2020      	movs	r0, #32
 80002ca:	f004 fe8a 	bl	8004fe2 <xQueueGenericCreate>
 80002ce:	4603      	mov	r3, r0
 80002d0:	4a27      	ldr	r2, [pc, #156]	; (8000370 <main+0x1bc>)
 80002d2:	6013      	str	r3, [r2, #0]
  programing_queue = xQueueCreate(64, 1);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2101      	movs	r1, #1
 80002d8:	2040      	movs	r0, #64	; 0x40
 80002da:	f004 fe82 	bl	8004fe2 <xQueueGenericCreate>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a24      	ldr	r2, [pc, #144]	; (8000374 <main+0x1c0>)
 80002e2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 350);
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0x1c4>)
 80002e6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002ea:	461d      	mov	r5, r3
 80002ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 80002f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 fa98 	bl	8004834 <osThreadCreate>
 8000304:	4603      	mov	r3, r0
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <main+0x1c8>)
 8000308:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 450);
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <main+0x1cc>)
 800030c:	f107 041c 	add.w	r4, r7, #28
 8000310:	461d      	mov	r5, r3
 8000312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800031a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 800031e:	f107 031c 	add.w	r3, r7, #28
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f004 fa85 	bl	8004834 <osThreadCreate>
 800032a:	4603      	mov	r3, r0
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <main+0x1d0>)
 800032e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 400);
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0x1d4>)
 8000332:	463c      	mov	r4, r7
 8000334:	461d      	mov	r5, r3
 8000336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800033a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 8000342:	463b      	mov	r3, r7
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f004 fa74 	bl	8004834 <osThreadCreate>
 800034c:	4603      	mov	r3, r0
 800034e:	4a0f      	ldr	r2, [pc, #60]	; (800038c <main+0x1d8>)
 8000350:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000352:	f004 fa68 	bl	8004826 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000356:	e7fe      	b.n	8000356 <main+0x1a2>
 8000358:	20000838 	.word	0x20000838
 800035c:	200008b4 	.word	0x200008b4
 8000360:	40013800 	.word	0x40013800
 8000364:	40010c00 	.word	0x40010c00
 8000368:	2000074c 	.word	0x2000074c
 800036c:	20000904 	.word	0x20000904
 8000370:	20000830 	.word	0x20000830
 8000374:	20000834 	.word	0x20000834
 8000378:	08007678 	.word	0x08007678
 800037c:	20000824 	.word	0x20000824
 8000380:	080076a0 	.word	0x080076a0
 8000384:	20000828 	.word	0x20000828
 8000388:	080076d0 	.word	0x080076d0
 800038c:	2000082c 	.word	0x2000082c

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	; 0x40
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f007 f91c 	bl	80075dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ba:	2310      	movs	r3, #16
 80003bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003c2:	2300      	movs	r3, #0
 80003c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fe5d 	bl	8002090 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003dc:	f001 f892 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2302      	movs	r3, #2
 80003e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 f8cb 	bl	8002594 <HAL_RCC_ClockConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000404:	f001 f87e 	bl	8001504 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3740      	adds	r7, #64	; 0x40
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_SPI1_Init+0x64>)
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <MX_SPI1_Init+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_SPI1_Init+0x64>)
 800041c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_SPI1_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_SPI1_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_SPI1_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_SPI1_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_SPI1_Init+0x64>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_SPI1_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <MX_SPI1_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_SPI1_Init+0x64>)
 800045c:	220a      	movs	r2, #10
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_SPI1_Init+0x64>)
 8000462:	f002 fa55 	bl	8002910 <HAL_SPI_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800046c:	f001 f84a 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200006f4 	.word	0x200006f4
 8000478:	40013000 	.word	0x40013000

0800047c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_TIM3_Init+0x98>)
 800049c:	4a1e      	ldr	r2, [pc, #120]	; (8000518 <MX_TIM3_Init+0x9c>)
 800049e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <MX_TIM3_Init+0x98>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_TIM3_Init+0x98>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <MX_TIM3_Init+0x98>)
 80004ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <MX_TIM3_Init+0x98>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004ba:	4b16      	ldr	r3, [pc, #88]	; (8000514 <MX_TIM3_Init+0x98>)
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <MX_TIM3_Init+0x98>)
 80004c2:	f002 faa9 	bl	8002a18 <HAL_TIM_Base_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80004cc:	f001 f81a 	bl	8001504 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80004d0:	2307      	movs	r3, #7
 80004d2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80004d4:	2330      	movs	r3, #48	; 0x30
 80004d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80004d8:	f107 030c 	add.w	r3, r7, #12
 80004dc:	4619      	mov	r1, r3
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <MX_TIM3_Init+0x98>)
 80004e0:	f002 ff59 	bl	8003396 <HAL_TIM_SlaveConfigSynchro>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80004ea:	f001 f80b 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_TIM3_Init+0x98>)
 80004fc:	f003 fae8 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000506:	f000 fffd 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000074c 	.word	0x2000074c
 8000518:	40000400 	.word	0x40000400

0800051c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08e      	sub	sp, #56	; 0x38
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000530:	f107 0320 	add.w	r3, r7, #32
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
 8000548:	615a      	str	r2, [r3, #20]
 800054a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800054c:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <MX_TIM4_Init+0xe8>)
 800054e:	4a2e      	ldr	r2, [pc, #184]	; (8000608 <MX_TIM4_Init+0xec>)
 8000550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000554:	220f      	movs	r2, #15
 8000556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <MX_TIM4_Init+0xe8>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000560:	f242 7210 	movw	r2, #10000	; 0x2710
 8000564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <MX_TIM4_Init+0xe8>)
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000572:	4824      	ldr	r0, [pc, #144]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000574:	f002 fa50 	bl	8002a18 <HAL_TIM_Base_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800057e:	f000 ffc1 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058c:	4619      	mov	r1, r3
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000590:	f002 fe3a 	bl	8003208 <HAL_TIM_ConfigClockSource>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800059a:	f000 ffb3 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800059e:	4819      	ldr	r0, [pc, #100]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005a0:	f002 fb0a 	bl	8002bb8 <HAL_TIM_PWM_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80005aa:	f000 ffab 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005ae:	2320      	movs	r3, #32
 80005b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4619      	mov	r1, r3
 80005bc:	4811      	ldr	r0, [pc, #68]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005be:	f003 fa87 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80005c8:	f000 ff9c 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005cc:	2360      	movs	r3, #96	; 0x60
 80005ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80005d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80005d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005e6:	f002 fd4d 	bl	8003084 <HAL_TIM_PWM_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80005f0:	f000 ff88 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005f6:	f001 f84f 	bl	8001698 <HAL_TIM_MspPostInit>

}
 80005fa:	bf00      	nop
 80005fc:	3738      	adds	r7, #56	; 0x38
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000794 	.word	0x20000794
 8000608:	40000800 	.word	0x40000800

0800060c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_USART1_UART_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800061c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800062a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART1_UART_Init+0x50>)
 800062e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART1_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000648:	f003 fab2 	bl	8003bb0 <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000652:	f000 ff57 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200007dc 	.word	0x200007dc
 8000660:	40013800 	.word	0x40013800

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b58      	ldr	r3, [pc, #352]	; (80007dc <MX_GPIO_Init+0x178>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a57      	ldr	r2, [pc, #348]	; (80007dc <MX_GPIO_Init+0x178>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b55      	ldr	r3, [pc, #340]	; (80007dc <MX_GPIO_Init+0x178>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	4b52      	ldr	r3, [pc, #328]	; (80007dc <MX_GPIO_Init+0x178>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a51      	ldr	r2, [pc, #324]	; (80007dc <MX_GPIO_Init+0x178>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b4f      	ldr	r3, [pc, #316]	; (80007dc <MX_GPIO_Init+0x178>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0308 	and.w	r3, r3, #8
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOV_Pin|RAMP_Pin|RDY_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	211a      	movs	r1, #26
 80006ac:	484c      	ldr	r0, [pc, #304]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80006ae:	f001 fcbf 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|E_MUX_Pin|ENA_stepper_Pin|S0_MUX_Pin
 80006b2:	2200      	movs	r2, #0
 80006b4:	f24f 6106 	movw	r1, #62982	; 0xf606
 80006b8:	484a      	ldr	r0, [pc, #296]	; (80007e4 <MX_GPIO_Init+0x180>)
 80006ba:	f001 fcb9 	bl	8002030 <HAL_GPIO_WritePin>
                          |S1_MUX_Pin|S2_MUX_Pin|S3_MUX_Pin|DIR_stepper_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HOME_Pin MOVE_EN_Pin */
  GPIO_InitStruct.Pin = HOME_Pin|MOVE_EN_Pin;
 80006be:	2305      	movs	r3, #5
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c2:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <MX_GPIO_Init+0x184>)
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4619      	mov	r1, r3
 80006d0:	4843      	ldr	r0, [pc, #268]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80006d2:	f001 fb29 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOV_Pin */
  GPIO_InitStruct.Pin = MOV_Pin;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOV_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4619      	mov	r1, r3
 80006ec:	483c      	ldr	r0, [pc, #240]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80006ee:	f001 fb1b 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RAMP_Pin RDY_Pin */
  GPIO_InitStruct.Pin = RAMP_Pin|RDY_Pin;
 80006f2:	2318      	movs	r3, #24
 80006f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2302      	movs	r3, #2
 8000700:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	4835      	ldr	r0, [pc, #212]	; (80007e0 <MX_GPIO_Init+0x17c>)
 800070a:	f001 fb0d 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : REC_Pin */
  GPIO_InitStruct.Pin = REC_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000716:	2301      	movs	r3, #1
 8000718:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(REC_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4619      	mov	r1, r3
 8000720:	4830      	ldr	r0, [pc, #192]	; (80007e4 <MX_GPIO_Init+0x180>)
 8000722:	f001 fb01 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000726:	2302      	movs	r3, #2
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	4829      	ldr	r0, [pc, #164]	; (80007e4 <MX_GPIO_Init+0x180>)
 800073e:	f001 faf3 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_MUX_Pin */
  GPIO_InitStruct.Pin = E_MUX_Pin;
 8000742:	2304      	movs	r3, #4
 8000744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(E_MUX_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	4822      	ldr	r0, [pc, #136]	; (80007e4 <MX_GPIO_Init+0x180>)
 800075a:	f001 fae5 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA_stepper_Pin DIR_stepper_Pin */
  GPIO_InitStruct.Pin = ENA_stepper_Pin|DIR_stepper_Pin;
 800075e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	4619      	mov	r1, r3
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <MX_GPIO_Init+0x180>)
 8000778:	f001 fad6 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_MUX_Pin S1_MUX_Pin S2_MUX_Pin S3_MUX_Pin */
  GPIO_InitStruct.Pin = S0_MUX_Pin|S1_MUX_Pin|S2_MUX_Pin|S3_MUX_Pin;
 800077c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4619      	mov	r1, r3
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <MX_GPIO_Init+0x180>)
 8000796:	f001 fac7 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : COM_IO_MUX_Pin */
  GPIO_InitStruct.Pin = COM_IO_MUX_Pin;
 800079a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COM_IO_MUX_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	4619      	mov	r1, r3
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80007b0:	f001 faba 	bl	8001d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2105      	movs	r1, #5
 80007b8:	2006      	movs	r0, #6
 80007ba:	f001 f9d8 	bl	8001b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007be:	2006      	movs	r0, #6
 80007c0:	f001 f9f1 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2105      	movs	r1, #5
 80007c8:	2008      	movs	r0, #8
 80007ca:	f001 f9d0 	bl	8001b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007ce:	2008      	movs	r0, #8
 80007d0:	f001 f9e9 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00
 80007e8:	10110000 	.word	0x10110000

080007ec <uart1_rx_callback>:

/* USER CODE BEGIN 4 */
void uart1_rx_callback(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <uart1_rx_callback+0x18>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	2300      	movs	r3, #0
 80007f6:	2201      	movs	r2, #1
 80007f8:	4903      	ldr	r1, [pc, #12]	; (8000808 <uart1_rx_callback+0x1c>)
 80007fa:	f004 fd4d 	bl	8005298 <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 80007fe:	bf00      	nop

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000830 	.word	0x20000830
 8000808:	40013804 	.word	0x40013804

0800080c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) // HOME position
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d109      	bne.n	8000830 <HAL_GPIO_EXTI_Callback+0x24>
	{
		HAL_UART_Transmit(&huart1, "HOME", 5, 100);
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2205      	movs	r2, #5
 8000820:	4905      	ldr	r1, [pc, #20]	; (8000838 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <HAL_GPIO_EXTI_Callback+0x30>)
 8000824:	f003 fa14 	bl	8003c50 <HAL_UART_Transmit>
		exm.position = 0;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_GPIO_EXTI_Callback+0x34>)
 800082a:	2200      	movs	r2, #0
 800082c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	}
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	080076ec 	.word	0x080076ec
 800083c:	200007dc 	.word	0x200007dc
 8000840:	20000838 	.word	0x20000838

08000844 <enter_programing>:

void enter_programing()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x40);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <enter_programing+0x34>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f923 	bl	8004a9c <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <enter_programing+0x38>)
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <enter_programing+0x38>)
 800085a:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <enter_programing+0x38>)
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <enter_programing+0x3c>)
 8000860:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	erase_exm();
 8000864:	f000 f8de 	bl	8000a24 <erase_exm>
	xEventGroupSetBits(EventGroup, 0x80);
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <enter_programing+0x34>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	4618      	mov	r0, r3
 8000870:	f004 f96f 	bl	8004b52 <xEventGroupSetBits>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000904 	.word	0x20000904
 800087c:	20000838 	.word	0x20000838
 8000880:	200008b4 	.word	0x200008b4

08000884 <exit_programing>:

void exit_programing()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x80);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <exit_programing+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000890:	4618      	mov	r0, r3
 8000892:	f004 f903 	bl	8004a9c <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <exit_programing+0x54>)
 8000898:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <exit_programing+0x54>)
 800089a:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <exit_programing+0x54>)
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <exit_programing+0x58>)
 80008a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	exm.start_speed_value = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <exit_programing+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <exit_programing+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <exit_programing+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <exit_programing+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

	xEventGroupSetBits(EventGroup, 0x40);
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <exit_programing+0x50>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 f941 	bl	8004b52 <xEventGroupSetBits>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000904 	.word	0x20000904
 80008d8:	20000838 	.word	0x20000838
 80008dc:	200008b4 	.word	0x200008b4

080008e0 <write_to_exm>:

void write_to_exm(uint8_t* start_of_data, uint8_t size_of_data)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size_of_data; i++){
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	e017      	b.n	8000922 <write_to_exm+0x42>
//		exm.execution_memory[exm.memory_pointer] = start_of_data[i];
		*exm.memory_pointer = start_of_data[i];
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	441a      	add	r2, r3
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <write_to_exm+0x80>)
 80008fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <write_to_exm+0x80>)
 8000902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000904:	3301      	adds	r3, #1
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <write_to_exm+0x80>)
 8000908:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <write_to_exm+0x80>)
 800090c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <write_to_exm+0x84>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d303      	bcc.n	800091c <write_to_exm+0x3c>
			exm.memory_pointer = exm.execution_memory + 118;
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <write_to_exm+0x88>)
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <write_to_exm+0x80>)
 8000918:	679a      	str	r2, [r3, #120]	; 0x78
			return;
 800091a:	e01d      	b.n	8000958 <write_to_exm+0x78>
	for(int i = 0; i < size_of_data; i++){
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	429a      	cmp	r2, r3
 8000928:	dbe3      	blt.n	80008f2 <write_to_exm+0x12>
		}
	}
//	exm.sizes_of_instruction[exm.sizes_pointer] = size_of_data;
	*exm.sizes_pointer = size_of_data;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <write_to_exm+0x80>)
 800092c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000930:	78fa      	ldrb	r2, [r7, #3]
 8000932:	701a      	strb	r2, [r3, #0]
	exm.sizes_pointer++;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <write_to_exm+0x80>)
 8000936:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800093a:	3301      	adds	r3, #1
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <write_to_exm+0x80>)
 800093e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <write_to_exm+0x80>)
 8000944:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000948:	4a08      	ldr	r2, [pc, #32]	; (800096c <write_to_exm+0x8c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d304      	bcc.n	8000958 <write_to_exm+0x78>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <write_to_exm+0x90>)
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <write_to_exm+0x80>)
 8000952:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return;
 8000956:	bf00      	nop
	}
}
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000838 	.word	0x20000838
 8000964:	200008af 	.word	0x200008af
 8000968:	200008ae 	.word	0x200008ae
 800096c:	200008f0 	.word	0x200008f0
 8000970:	200008ef 	.word	0x200008ef

08000974 <read_from_exm>:

void read_from_exm()
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e008      	b.n	8000992 <read_from_exm+0x1e>
		exm.current_instruction[i] = 0;
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <read_from_exm+0x9c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	33bc      	adds	r3, #188	; 0xbc
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3301      	adds	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b03      	cmp	r3, #3
 8000996:	ddf3      	ble.n	8000980 <read_from_exm+0xc>
	}
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000998:	2300      	movs	r3, #0
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	e019      	b.n	80009d2 <read_from_exm+0x5e>
		exm.current_instruction[i] = *exm.memory_pointer;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <read_from_exm+0x9c>)
 80009a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009a2:	7819      	ldrb	r1, [r3, #0]
 80009a4:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <read_from_exm+0x9c>)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	33bc      	adds	r3, #188	; 0xbc
 80009ac:	460a      	mov	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <read_from_exm+0x9c>)
 80009b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <read_from_exm+0x9c>)
 80009b8:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <read_from_exm+0x9c>)
 80009bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <read_from_exm+0xa0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d303      	bcc.n	80009cc <read_from_exm+0x58>
			exm.memory_pointer = exm.execution_memory + 118;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <read_from_exm+0xa4>)
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <read_from_exm+0x9c>)
 80009c8:	679a      	str	r2, [r3, #120]	; 0x78
			return ;
 80009ca:	e01d      	b.n	8000a08 <read_from_exm+0x94>
	for(int i = 0; i < *exm.sizes_pointer; i++){
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <read_from_exm+0x9c>)
 80009d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	4293      	cmp	r3, r2
 80009e0:	dbdd      	blt.n	800099e <read_from_exm+0x2a>
		}
	}
	exm.sizes_pointer++;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <read_from_exm+0x9c>)
 80009e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <read_from_exm+0x9c>)
 80009ec:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <read_from_exm+0x9c>)
 80009f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <read_from_exm+0xa8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d304      	bcc.n	8000a06 <read_from_exm+0x92>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 80009fc:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <read_from_exm+0xac>)
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <read_from_exm+0x9c>)
 8000a00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return ;
 8000a04:	e000      	b.n	8000a08 <read_from_exm+0x94>
	}
	return ;
 8000a06:	bf00      	nop
}
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000838 	.word	0x20000838
 8000a14:	200008af 	.word	0x200008af
 8000a18:	200008ae 	.word	0x200008ae
 8000a1c:	200008f0 	.word	0x200008f0
 8000a20:	200008ef 	.word	0x200008ef

08000a24 <erase_exm>:

void erase_exm()
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e007      	b.n	8000a40 <erase_exm+0x1c>
		exm.execution_memory[i] = 0;
 8000a30:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <erase_exm+0x4c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b76      	cmp	r3, #118	; 0x76
 8000a44:	d9f4      	bls.n	8000a30 <erase_exm+0xc>
	}
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	e008      	b.n	8000a5e <erase_exm+0x3a>
		exm.sizes_of_instruction[i] = 1;
 8000a4c:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <erase_exm+0x4c>)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	337c      	adds	r3, #124	; 0x7c
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	2b3b      	cmp	r3, #59	; 0x3b
 8000a62:	d9f3      	bls.n	8000a4c <erase_exm+0x28>
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	20000838 	.word	0x20000838

08000a74 <start_motor>:

void start_motor()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	if(exm.start_speed_value == 0) return;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <start_motor+0x48>)
 8000a7c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d017      	beq.n	8000ab4 <start_motor+0x40>
	HAL_TIM_Base_Start_IT(&htim4);
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <start_motor+0x4c>)
 8000a86:	f002 f817 	bl	8002ab8 <HAL_TIM_Base_Start_IT>
	uint16_t temp = (uint16_t)(CK_CNT / exm.start_speed_value);
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <start_motor+0x48>)
 8000a8c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <start_motor+0x50>)
 8000a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a98:	80fb      	strh	r3, [r7, #6]
	TIM4->ARR = temp;
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <start_motor+0x54>)
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CCR1 = temp/2;
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	085b      	lsrs	r3, r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <start_motor+0x54>)
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <start_motor+0x4c>)
 8000aae:	f002 f8db 	bl	8002c68 <HAL_TIM_PWM_Start>
 8000ab2:	e000      	b.n	8000ab6 <start_motor+0x42>
	if(exm.start_speed_value == 0) return;
 8000ab4:	bf00      	nop
}
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000838 	.word	0x20000838
 8000ac0:	20000794 	.word	0x20000794
 8000ac4:	000f4240 	.word	0x000f4240
 8000ac8:	40000800 	.word	0x40000800

08000acc <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8000ad4:	4b66      	ldr	r3, [pc, #408]	; (8000c70 <programing_mode+0x1a4>)
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	f003 ff0c 	bl	8004900 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8000ae8:	2364      	movs	r3, #100	; 0x64
 8000aea:	2211      	movs	r2, #17
 8000aec:	4961      	ldr	r1, [pc, #388]	; (8000c74 <programing_mode+0x1a8>)
 8000aee:	4862      	ldr	r0, [pc, #392]	; (8000c78 <programing_mode+0x1ac>)
 8000af0:	f003 f8ae 	bl	8003c50 <HAL_UART_Transmit>
	  //vTaskDelay(200);
	  char instruction_for_programing = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	77fb      	strb	r3, [r7, #31]
	  xQueueReceive(programing_queue, &instruction_for_programing, portMAX_DELAY);
 8000af8:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <programing_mode+0x1b0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f107 011f 	add.w	r1, r7, #31
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fc5f 	bl	80053c8 <xQueueReceive>
	  switch (instruction_for_programing) {
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	3b47      	subs	r3, #71	; 0x47
 8000b0e:	2b0d      	cmp	r3, #13
 8000b10:	f200 80ac 	bhi.w	8000c6c <programing_mode+0x1a0>
 8000b14:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <programing_mode+0x50>)
 8000b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1a:	bf00      	nop
 8000b1c:	08000bdf 	.word	0x08000bdf
 8000b20:	08000c6d 	.word	0x08000c6d
 8000b24:	08000c6d 	.word	0x08000c6d
 8000b28:	08000c6d 	.word	0x08000c6d
 8000b2c:	08000c6d 	.word	0x08000c6d
 8000b30:	08000c6d 	.word	0x08000c6d
 8000b34:	08000c6d 	.word	0x08000c6d
 8000b38:	08000c6d 	.word	0x08000c6d
 8000b3c:	08000c6d 	.word	0x08000c6d
 8000b40:	08000c6d 	.word	0x08000c6d
 8000b44:	08000c6d 	.word	0x08000c6d
 8000b48:	08000bb1 	.word	0x08000bb1
 8000b4c:	08000b55 	.word	0x08000b55
 8000b50:	08000b83 	.word	0x08000b83
		case 'S':
			uint8_t data1[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
 8000b54:	2353      	movs	r3, #83	; 0x53
 8000b56:	763b      	strb	r3, [r7, #24]
 8000b58:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <programing_mode+0x1b4>)
 8000b5a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	767b      	strb	r3, [r7, #25]
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <programing_mode+0x1b4>)
 8000b64:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	76bb      	strb	r3, [r7, #26]
 8000b70:	2300      	movs	r3, #0
 8000b72:	76fb      	strb	r3, [r7, #27]
			write_to_exm(data1, sizeof(data1));
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff feb0 	bl	80008e0 <write_to_exm>
			break;
 8000b80:	e075      	b.n	8000c6e <programing_mode+0x1a2>
		case 'T':
			uint8_t data2[4] = {'T', (uint8_t)(exm.top_speed_value), (uint8_t)((exm.top_speed_value>>8)), 0};
 8000b82:	2354      	movs	r3, #84	; 0x54
 8000b84:	753b      	strb	r3, [r7, #20]
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <programing_mode+0x1b4>)
 8000b88:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	757b      	strb	r3, [r7, #21]
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <programing_mode+0x1b4>)
 8000b92:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	75bb      	strb	r3, [r7, #22]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	75fb      	strb	r3, [r7, #23]
			write_to_exm(data2, sizeof(data2));
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe99 	bl	80008e0 <write_to_exm>
			break;
 8000bae:	e05e      	b.n	8000c6e <programing_mode+0x1a2>
		case 'R':
			uint8_t data3[4] = {'R', (uint8_t)(exm.ramp_value), (uint8_t)((exm.ramp_value>>8)), 0};
 8000bb0:	2352      	movs	r3, #82	; 0x52
 8000bb2:	743b      	strb	r3, [r7, #16]
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <programing_mode+0x1b4>)
 8000bb6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	747b      	strb	r3, [r7, #17]
 8000bbe:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <programing_mode+0x1b4>)
 8000bc0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	74bb      	strb	r3, [r7, #18]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	74fb      	strb	r3, [r7, #19]
			write_to_exm(data3, sizeof(data3));
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe82 	bl	80008e0 <write_to_exm>
			break;
 8000bdc:	e047      	b.n	8000c6e <programing_mode+0x1a2>
		case 'G':
			instruction_for_programing = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	77fb      	strb	r3, [r7, #31]
			  xQueueReceive(programing_queue, &instruction_for_programing, 5);
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <programing_mode+0x1b0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f107 011f 	add.w	r1, r7, #31
 8000bea:	2205      	movs	r2, #5
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 fbeb 	bl	80053c8 <xQueueReceive>
			  switch (instruction_for_programing) {
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	2b2b      	cmp	r3, #43	; 0x2b
 8000bf6:	d002      	beq.n	8000bfe <programing_mode+0x132>
 8000bf8:	2b2d      	cmp	r3, #45	; 0x2d
 8000bfa:	d01b      	beq.n	8000c34 <programing_mode+0x168>
			  	  case '-':
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
						write_to_exm(data5, sizeof(data5));
			  		  break;
			  }
			break;
 8000bfc:	e037      	b.n	8000c6e <programing_mode+0x1a2>
						uint8_t data4[4] = {('G'+'+'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8000bfe:	2372      	movs	r3, #114	; 0x72
 8000c00:	733b      	strb	r3, [r7, #12]
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <programing_mode+0x1b4>)
 8000c04:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	737b      	strb	r3, [r7, #13]
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <programing_mode+0x1b4>)
 8000c0e:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c12:	0a1b      	lsrs	r3, r3, #8
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	73bb      	strb	r3, [r7, #14]
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <programing_mode+0x1b4>)
 8000c1c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c20:	141b      	asrs	r3, r3, #16
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	73fb      	strb	r3, [r7, #15]
						write_to_exm(data4, sizeof(data4));
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe57 	bl	80008e0 <write_to_exm>
			  		  break;
 8000c32:	e01a      	b.n	8000c6a <programing_mode+0x19e>
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8000c34:	2374      	movs	r3, #116	; 0x74
 8000c36:	723b      	strb	r3, [r7, #8]
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <programing_mode+0x1b4>)
 8000c3a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	727b      	strb	r3, [r7, #9]
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <programing_mode+0x1b4>)
 8000c44:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	72bb      	strb	r3, [r7, #10]
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <programing_mode+0x1b4>)
 8000c52:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c56:	141b      	asrs	r3, r3, #16
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	72fb      	strb	r3, [r7, #11]
						write_to_exm(data5, sizeof(data5));
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2104      	movs	r1, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fe3c 	bl	80008e0 <write_to_exm>
			  		  break;
 8000c68:	bf00      	nop
			break;
 8000c6a:	e000      	b.n	8000c6e <programing_mode+0x1a2>
		default:
			break;
 8000c6c:	bf00      	nop
  {
 8000c6e:	e731      	b.n	8000ad4 <programing_mode+0x8>
 8000c70:	20000904 	.word	0x20000904
 8000c74:	080076f4 	.word	0x080076f4
 8000c78:	200007dc 	.word	0x200007dc
 8000c7c:	20000834 	.word	0x20000834
 8000c80:	20000838 	.word	0x20000838

08000c84 <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8000c8c:	4b98      	ldr	r3, [pc, #608]	; (8000ef0 <interpreter+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f107 010b 	add.w	r1, r7, #11
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fb95 	bl	80053c8 <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000c9e:	f107 010b 	add.w	r1, r7, #11
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4893      	ldr	r0, [pc, #588]	; (8000ef4 <interpreter+0x270>)
 8000ca8:	f002 ffd2 	bl	8003c50 <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 8000cac:	7afb      	ldrb	r3, [r7, #11]
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da04      	bge.n	8000cbe <interpreter+0x3a>
		  pData &= ~(1<<7);
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	72fb      	strb	r3, [r7, #11]
	  }
	  __asm__ volatile("NOP");
 8000cbe:	bf00      	nop
	  char temp = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	72bb      	strb	r3, [r7, #10]
	  switch (pData) {
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8218 	beq.w	80010fc <interpreter+0x478>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f2c0 8217 	blt.w	8001100 <interpreter+0x47c>
 8000cd2:	2b54      	cmp	r3, #84	; 0x54
 8000cd4:	f300 8214 	bgt.w	8001100 <interpreter+0x47c>
 8000cd8:	2b45      	cmp	r3, #69	; 0x45
 8000cda:	f2c0 8211 	blt.w	8001100 <interpreter+0x47c>
 8000cde:	3b45      	subs	r3, #69	; 0x45
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	f200 820d 	bhi.w	8001100 <interpreter+0x47c>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <interpreter+0x68>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000d79 	.word	0x08000d79
 8000cf0:	08001101 	.word	0x08001101
 8000cf4:	08000f8b 	.word	0x08000f8b
 8000cf8:	08001101 	.word	0x08001101
 8000cfc:	08001101 	.word	0x08001101
 8000d00:	08001101 	.word	0x08001101
 8000d04:	08001101 	.word	0x08001101
 8000d08:	08001101 	.word	0x08001101
 8000d0c:	08001101 	.word	0x08001101
 8000d10:	08001101 	.word	0x08001101
 8000d14:	08001101 	.word	0x08001101
 8000d18:	08000d2d 	.word	0x08000d2d
 8000d1c:	08001101 	.word	0x08001101
 8000d20:	08000ec5 	.word	0x08000ec5
 8000d24:	08000d7f 	.word	0x08000d7f
 8000d28:	08000e1d 	.word	0x08000e1d
		case 'P':
			xQueueReceive(uart_queue_rx, &pData, 5);
 8000d2c:	4b70      	ldr	r3, [pc, #448]	; (8000ef0 <interpreter+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f107 010b 	add.w	r1, r7, #11
 8000d34:	2205      	movs	r2, #5
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fb46 	bl	80053c8 <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000d3c:	f107 010b 	add.w	r1, r7, #11
 8000d40:	230a      	movs	r3, #10
 8000d42:	2201      	movs	r2, #1
 8000d44:	486b      	ldr	r0, [pc, #428]	; (8000ef4 <interpreter+0x270>)
 8000d46:	f002 ff83 	bl	8003c50 <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da04      	bge.n	8000d5c <interpreter+0xd8>
					  pData &= ~(1<<7);
 8000d52:	7afb      	ldrb	r3, [r7, #11]
 8000d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	72fb      	strb	r3, [r7, #11]
				  }
			__asm__ volatile("NOP");
 8000d5c:	bf00      	nop
			switch (pData) {
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	2b6f      	cmp	r3, #111	; 0x6f
 8000d62:	d002      	beq.n	8000d6a <interpreter+0xe6>
 8000d64:	2b78      	cmp	r3, #120	; 0x78
 8000d66:	d003      	beq.n	8000d70 <interpreter+0xec>
					break;
				case 'x':
					exit_programing();
					break;
				default:
					break;
 8000d68:	e005      	b.n	8000d76 <interpreter+0xf2>
					enter_programing();
 8000d6a:	f7ff fd6b 	bl	8000844 <enter_programing>
					break;
 8000d6e:	e002      	b.n	8000d76 <interpreter+0xf2>
					exit_programing();
 8000d70:	f7ff fd88 	bl	8000884 <exit_programing>
					break;
 8000d74:	bf00      	nop
			}
			break;
 8000d76:	e1cc      	b.n	8001112 <interpreter+0x48e>
	    case 'E':
	    	exit_programing();
 8000d78:	f7ff fd84 	bl	8000884 <exit_programing>
	    	break;
 8000d7c:	e1c9      	b.n	8001112 <interpreter+0x48e>
		case 'S':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000d7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <interpreter+0x274>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fe89 	bl	8004a9c <xEventGroupClearBits>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d90:	2b80      	cmp	r3, #128	; 0x80
 8000d92:	f040 81b7 	bne.w	8001104 <interpreter+0x480>
			exm.start_speed_value = 0;
 8000d96:	4b59      	ldr	r3, [pc, #356]	; (8000efc <interpreter+0x278>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			temp = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 5; i++){
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e02d      	b.n	8000e04 <interpreter+0x180>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000da8:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <interpreter+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f107 010a 	add.w	r1, r7, #10
 8000db0:	2205      	movs	r2, #5
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fb08 	bl	80053c8 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 4)) break;
 8000db8:	7abb      	ldrb	r3, [r7, #10]
 8000dba:	2b0d      	cmp	r3, #13
 8000dbc:	d025      	beq.n	8000e0a <interpreter+0x186>
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d022      	beq.n	8000e0a <interpreter+0x186>
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d01f      	beq.n	8000e0a <interpreter+0x186>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000dca:	7abb      	ldrb	r3, [r7, #10]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da04      	bge.n	8000ddc <interpreter+0x158>
					temp &= ~(1<<7);
 8000dd2:	7abb      	ldrb	r3, [r7, #10]
 8000dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	72bb      	strb	r3, [r7, #10]
			    }
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 8000ddc:	4b47      	ldr	r3, [pc, #284]	; (8000efc <interpreter+0x278>)
 8000dde:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000de2:	461a      	mov	r2, r3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	7abb      	ldrb	r3, [r7, #10]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	3b30      	subs	r3, #48	; 0x30
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b40      	ldr	r3, [pc, #256]	; (8000efc <interpreter+0x278>)
 8000dfa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			for(int i = 0; i < 5; i++){
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	ddce      	ble.n	8000da8 <interpreter+0x124>
			}
			xQueueSendToBack(programing_queue, (void*)"S", 100);
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <interpreter+0x27c>)
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2264      	movs	r2, #100	; 0x64
 8000e12:	493c      	ldr	r1, [pc, #240]	; (8000f04 <interpreter+0x280>)
 8000e14:	f004 f942 	bl	800509c <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000e18:	bf00      	nop
			break;
 8000e1a:	e17a      	b.n	8001112 <interpreter+0x48e>
		case 'T':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <interpreter+0x274>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fe3a 	bl	8004a9c <xEventGroupClearBits>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	2b80      	cmp	r3, #128	; 0x80
 8000e30:	f040 816a 	bne.w	8001108 <interpreter+0x484>
			exm.top_speed_value = 0;
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <interpreter+0x278>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			temp = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	e030      	b.n	8000ea8 <interpreter+0x224>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <interpreter+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f107 010a 	add.w	r1, r7, #10
 8000e4e:	2205      	movs	r2, #5
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fab9 	bl	80053c8 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8000e56:	7abb      	ldrb	r3, [r7, #10]
 8000e58:	2b0d      	cmp	r3, #13
 8000e5a:	d02a      	beq.n	8000eb2 <interpreter+0x22e>
 8000e5c:	7abb      	ldrb	r3, [r7, #10]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d027      	beq.n	8000eb2 <interpreter+0x22e>
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d024      	beq.n	8000eb2 <interpreter+0x22e>
				if(i == 3) break;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d020      	beq.n	8000eb0 <interpreter+0x22c>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000e6e:	7abb      	ldrb	r3, [r7, #10]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da04      	bge.n	8000e80 <interpreter+0x1fc>
					temp &= ~(1<<7);
 8000e76:	7abb      	ldrb	r3, [r7, #10]
 8000e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	72bb      	strb	r3, [r7, #10]
			    }
				exm.top_speed_value = (exm.top_speed_value*10) + (temp - 48);
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <interpreter+0x278>)
 8000e82:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000e86:	461a      	mov	r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	7abb      	ldrb	r3, [r7, #10]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3b30      	subs	r3, #48	; 0x30
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <interpreter+0x278>)
 8000e9e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			for(int i = 0; i < 4; i++){
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	ddcb      	ble.n	8000e46 <interpreter+0x1c2>
 8000eae:	e000      	b.n	8000eb2 <interpreter+0x22e>
				if(i == 3) break;
 8000eb0:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"T", 100);
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <interpreter+0x27c>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2264      	movs	r2, #100	; 0x64
 8000eba:	4913      	ldr	r1, [pc, #76]	; (8000f08 <interpreter+0x284>)
 8000ebc:	f004 f8ee 	bl	800509c <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000ec0:	bf00      	nop
			break;
 8000ec2:	e126      	b.n	8001112 <interpreter+0x48e>
		case 'R':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <interpreter+0x274>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fde6 	bl	8004a9c <xEventGroupClearBits>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	2b80      	cmp	r3, #128	; 0x80
 8000ed8:	f040 8118 	bne.w	800110c <interpreter+0x488>
			exm.ramp_value = 0;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <interpreter+0x278>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			temp = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e03f      	b.n	8000f6e <interpreter+0x2ea>
 8000eee:	bf00      	nop
 8000ef0:	20000830 	.word	0x20000830
 8000ef4:	200007dc 	.word	0x200007dc
 8000ef8:	20000904 	.word	0x20000904
 8000efc:	20000838 	.word	0x20000838
 8000f00:	20000834 	.word	0x20000834
 8000f04:	08007708 	.word	0x08007708
 8000f08:	0800770c 	.word	0x0800770c
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000f0c:	4b82      	ldr	r3, [pc, #520]	; (8001118 <interpreter+0x494>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f107 010a 	add.w	r1, r7, #10
 8000f14:	2205      	movs	r2, #5
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fa56 	bl	80053c8 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8000f1c:	7abb      	ldrb	r3, [r7, #10]
 8000f1e:	2b0d      	cmp	r3, #13
 8000f20:	d02a      	beq.n	8000f78 <interpreter+0x2f4>
 8000f22:	7abb      	ldrb	r3, [r7, #10]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d027      	beq.n	8000f78 <interpreter+0x2f4>
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d024      	beq.n	8000f78 <interpreter+0x2f4>
				if(i == 3) break;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d020      	beq.n	8000f76 <interpreter+0x2f2>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000f34:	7abb      	ldrb	r3, [r7, #10]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da04      	bge.n	8000f46 <interpreter+0x2c2>
					temp &= ~(1<<7);
 8000f3c:	7abb      	ldrb	r3, [r7, #10]
 8000f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	72bb      	strb	r3, [r7, #10]
			    }
				exm.ramp_value = (exm.ramp_value*10) + (temp - 48);
 8000f46:	4b75      	ldr	r3, [pc, #468]	; (800111c <interpreter+0x498>)
 8000f48:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	7abb      	ldrb	r3, [r7, #10]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b30      	subs	r3, #48	; 0x30
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b6e      	ldr	r3, [pc, #440]	; (800111c <interpreter+0x498>)
 8000f64:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			for(int i = 0; i < 4; i++){
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	ddcb      	ble.n	8000f0c <interpreter+0x288>
 8000f74:	e000      	b.n	8000f78 <interpreter+0x2f4>
				if(i == 3) break;
 8000f76:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"R", 100);
 8000f78:	4b69      	ldr	r3, [pc, #420]	; (8001120 <interpreter+0x49c>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	4968      	ldr	r1, [pc, #416]	; (8001124 <interpreter+0x4a0>)
 8000f82:	f004 f88b 	bl	800509c <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000f86:	bf00      	nop
			break;
 8000f88:	e0c3      	b.n	8001112 <interpreter+0x48e>
		case 'G':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000f8a:	4b67      	ldr	r3, [pc, #412]	; (8001128 <interpreter+0x4a4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fd83 	bl	8004a9c <xEventGroupClearBits>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9c:	2b80      	cmp	r3, #128	; 0x80
 8000f9e:	f040 80b7 	bne.w	8001110 <interpreter+0x48c>
			xQueueReceive(uart_queue_rx, &pData, 5);
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <interpreter+0x494>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f107 010b 	add.w	r1, r7, #11
 8000faa:	2205      	movs	r2, #5
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fa0b 	bl	80053c8 <xQueueReceive>
			  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da04      	bge.n	8000fc4 <interpreter+0x340>
				  pData &= ~(1<<7);
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	72fb      	strb	r3, [r7, #11]
			  }
			__asm__ volatile("NOP");
 8000fc4:	bf00      	nop
			switch (pData) {
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	2b2b      	cmp	r3, #43	; 0x2b
 8000fca:	d002      	beq.n	8000fd2 <interpreter+0x34e>
 8000fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8000fce:	d04a      	beq.n	8001066 <interpreter+0x3e2>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
					xQueueSendToBack(programing_queue, (void*)"-", 100);
					__asm__ volatile("NOP");
					break;
				default:
					break;
 8000fd0:	e093      	b.n	80010fa <interpreter+0x476>
					exm.G_sign_value = 0;
 8000fd2:	4b52      	ldr	r3, [pc, #328]	; (800111c <interpreter+0x498>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e02d      	b.n	8001040 <interpreter+0x3bc>
						xQueueReceive(uart_queue_rx, &temp, 5);
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <interpreter+0x494>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f107 010a 	add.w	r1, r7, #10
 8000fec:	2205      	movs	r2, #5
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 f9ea 	bl	80053c8 <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 8000ff4:	7abb      	ldrb	r3, [r7, #10]
 8000ff6:	2b0d      	cmp	r3, #13
 8000ff8:	d025      	beq.n	8001046 <interpreter+0x3c2>
 8000ffa:	7abb      	ldrb	r3, [r7, #10]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d022      	beq.n	8001046 <interpreter+0x3c2>
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d01f      	beq.n	8001046 <interpreter+0x3c2>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	da04      	bge.n	8001018 <interpreter+0x394>
							temp &= ~(1<<7);
 800100e:	7abb      	ldrb	r3, [r7, #10]
 8001010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 8001018:	4b40      	ldr	r3, [pc, #256]	; (800111c <interpreter+0x498>)
 800101a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800101e:	461a      	mov	r2, r3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	7abb      	ldrb	r3, [r7, #10]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4413      	add	r3, r2
 800102e:	b29b      	uxth	r3, r3
 8001030:	3b30      	subs	r3, #48	; 0x30
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <interpreter+0x498>)
 8001036:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3301      	adds	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b07      	cmp	r3, #7
 8001044:	ddce      	ble.n	8000fe4 <interpreter+0x360>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <interpreter+0x49c>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	2264      	movs	r2, #100	; 0x64
 800104e:	4937      	ldr	r1, [pc, #220]	; (800112c <interpreter+0x4a8>)
 8001050:	f004 f824 	bl	800509c <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"+", 100);
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <interpreter+0x49c>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	2264      	movs	r2, #100	; 0x64
 800105c:	4934      	ldr	r1, [pc, #208]	; (8001130 <interpreter+0x4ac>)
 800105e:	f004 f81d 	bl	800509c <xQueueGenericSend>
					__asm__ volatile("NOP");
 8001062:	bf00      	nop
					break;
 8001064:	e049      	b.n	80010fa <interpreter+0x476>
					exm.G_sign_value = 0;
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <interpreter+0x498>)
 8001068:	2200      	movs	r2, #0
 800106a:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e02d      	b.n	80010d4 <interpreter+0x450>
						xQueueReceive(uart_queue_rx, &temp, 5);
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <interpreter+0x494>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f107 010a 	add.w	r1, r7, #10
 8001080:	2205      	movs	r2, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f004 f9a0 	bl	80053c8 <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 8001088:	7abb      	ldrb	r3, [r7, #10]
 800108a:	2b0d      	cmp	r3, #13
 800108c:	d025      	beq.n	80010da <interpreter+0x456>
 800108e:	7abb      	ldrb	r3, [r7, #10]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d022      	beq.n	80010da <interpreter+0x456>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b07      	cmp	r3, #7
 8001098:	d01f      	beq.n	80010da <interpreter+0x456>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da04      	bge.n	80010ac <interpreter+0x428>
							temp &= ~(1<<7);
 80010a2:	7abb      	ldrb	r3, [r7, #10]
 80010a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <interpreter+0x498>)
 80010ae:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80010b2:	461a      	mov	r2, r3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	7abb      	ldrb	r3, [r7, #10]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3b30      	subs	r3, #48	; 0x30
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <interpreter+0x498>)
 80010ca:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	ddce      	ble.n	8001078 <interpreter+0x3f4>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <interpreter+0x49c>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	2264      	movs	r2, #100	; 0x64
 80010e2:	4912      	ldr	r1, [pc, #72]	; (800112c <interpreter+0x4a8>)
 80010e4:	f003 ffda 	bl	800509c <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"-", 100);
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <interpreter+0x49c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <interpreter+0x4b0>)
 80010f2:	f003 ffd3 	bl	800509c <xQueueGenericSend>
					__asm__ volatile("NOP");
 80010f6:	bf00      	nop
					break;
 80010f8:	bf00      	nop
			}
			break;
 80010fa:	e00a      	b.n	8001112 <interpreter+0x48e>
	    case 0:
			break;
 80010fc:	bf00      	nop
 80010fe:	e008      	b.n	8001112 <interpreter+0x48e>
		default:
			break;
 8001100:	bf00      	nop
 8001102:	e006      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001104:	bf00      	nop
 8001106:	e004      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001108:	bf00      	nop
 800110a:	e002      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 800110c:	bf00      	nop
 800110e:	e000      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001110:	bf00      	nop
	}

	  pData = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	72fb      	strb	r3, [r7, #11]
  {
 8001116:	e5b9      	b.n	8000c8c <interpreter+0x8>
 8001118:	20000830 	.word	0x20000830
 800111c:	20000838 	.word	0x20000838
 8001120:	20000834 	.word	0x20000834
 8001124:	08007710 	.word	0x08007710
 8001128:	20000904 	.word	0x20000904
 800112c:	08007714 	.word	0x08007714
 8001130:	08007718 	.word	0x08007718
 8001134:	0800771c 	.word	0x0800771c

08001138 <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8001140:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <execution_from_memory+0x298>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	2200      	movs	r2, #0
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	f003 fbd6 	bl	8004900 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	220f      	movs	r2, #15
 8001158:	499e      	ldr	r1, [pc, #632]	; (80013d4 <execution_from_memory+0x29c>)
 800115a:	489f      	ldr	r0, [pc, #636]	; (80013d8 <execution_from_memory+0x2a0>)
 800115c:	f002 fd78 	bl	8003c50 <HAL_UART_Transmit>
	  read_from_exm();
 8001160:	f7ff fc08 	bl	8000974 <read_from_exm>
	  HAL_UART_Transmit(&huart1, exm.current_instruction, sizeof(exm.current_instruction), 100);
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	2204      	movs	r2, #4
 8001168:	499c      	ldr	r1, [pc, #624]	; (80013dc <execution_from_memory+0x2a4>)
 800116a:	489b      	ldr	r0, [pc, #620]	; (80013d8 <execution_from_memory+0x2a0>)
 800116c:	f002 fd70 	bl	8003c50 <HAL_UART_Transmit>
	  switch (exm.current_instruction[0]) {
 8001170:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <execution_from_memory+0x2a8>)
 8001172:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001176:	3b52      	subs	r3, #82	; 0x52
 8001178:	2b22      	cmp	r3, #34	; 0x22
 800117a:	f200 811b 	bhi.w	80013b4 <execution_from_memory+0x27c>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <execution_from_memory+0x4c>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001261 	.word	0x08001261
 8001188:	08001211 	.word	0x08001211
 800118c:	08001239 	.word	0x08001239
 8001190:	080013b5 	.word	0x080013b5
 8001194:	080013b5 	.word	0x080013b5
 8001198:	080013b5 	.word	0x080013b5
 800119c:	080013b5 	.word	0x080013b5
 80011a0:	080013b5 	.word	0x080013b5
 80011a4:	080013b5 	.word	0x080013b5
 80011a8:	080013b5 	.word	0x080013b5
 80011ac:	080013b5 	.word	0x080013b5
 80011b0:	080013b5 	.word	0x080013b5
 80011b4:	080013b5 	.word	0x080013b5
 80011b8:	080013b5 	.word	0x080013b5
 80011bc:	080013b5 	.word	0x080013b5
 80011c0:	080013b5 	.word	0x080013b5
 80011c4:	080013b5 	.word	0x080013b5
 80011c8:	080013b5 	.word	0x080013b5
 80011cc:	080013b5 	.word	0x080013b5
 80011d0:	080013b5 	.word	0x080013b5
 80011d4:	080013b5 	.word	0x080013b5
 80011d8:	080013b5 	.word	0x080013b5
 80011dc:	080013b5 	.word	0x080013b5
 80011e0:	080013b5 	.word	0x080013b5
 80011e4:	080013b5 	.word	0x080013b5
 80011e8:	080013b5 	.word	0x080013b5
 80011ec:	080013b5 	.word	0x080013b5
 80011f0:	080013b5 	.word	0x080013b5
 80011f4:	080013b5 	.word	0x080013b5
 80011f8:	080013b5 	.word	0x080013b5
 80011fc:	080013b5 	.word	0x080013b5
 8001200:	080013b5 	.word	0x080013b5
 8001204:	08001289 	.word	0x08001289
 8001208:	080013b5 	.word	0x080013b5
 800120c:	0800131d 	.word	0x0800131d
		case 'S':
			exm.start_speed_value = 0;
 8001210:	4b73      	ldr	r3, [pc, #460]	; (80013e0 <execution_from_memory+0x2a8>)
 8001212:	2200      	movs	r2, #0
 8001214:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			exm.start_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001218:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <execution_from_memory+0x2a8>)
 800121a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <execution_from_memory+0x2a8>)
 8001222:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001226:	b29b      	uxth	r3, r3
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <execution_from_memory+0x2a8>)
 8001232:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			break;
 8001236:	e0c6      	b.n	80013c6 <execution_from_memory+0x28e>
		case 'T':
			exm.top_speed_value = 0;
 8001238:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <execution_from_memory+0x2a8>)
 800123a:	2200      	movs	r2, #0
 800123c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			exm.top_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001240:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <execution_from_memory+0x2a8>)
 8001242:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <execution_from_memory+0x2a8>)
 800124a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800124e:	b29b      	uxth	r3, r3
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <execution_from_memory+0x2a8>)
 800125a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			break;
 800125e:	e0b2      	b.n	80013c6 <execution_from_memory+0x28e>
		case 'R':
			exm.ramp_value = 0;
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <execution_from_memory+0x2a8>)
 8001262:	2200      	movs	r2, #0
 8001264:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			exm.ramp_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001268:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <execution_from_memory+0x2a8>)
 800126a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <execution_from_memory+0x2a8>)
 8001272:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001276:	b29b      	uxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b29b      	uxth	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <execution_from_memory+0x2a8>)
 8001282:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			break;
 8001286:	e09e      	b.n	80013c6 <execution_from_memory+0x28e>
		case ('G'+'+'):
			exm.G_sign_value = 0;
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <execution_from_memory+0x2a8>)
 800128a:	2200      	movs	r2, #0
 800128c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <execution_from_memory+0x2a8>)
 8001292:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <execution_from_memory+0x2a8>)
 800129a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800129e:	b29b      	uxth	r3, r3
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <execution_from_memory+0x2a8>)
 80012aa:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == exm.G_sign_value) break;
 80012ae:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <execution_from_memory+0x2a8>)
 80012b0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <execution_from_memory+0x2a8>)
 80012b8:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80012bc:	429a      	cmp	r2, r3
 80012be:	d07b      	beq.n	80013b8 <execution_from_memory+0x280>
			else if(exm.position > exm.G_sign_value){
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <execution_from_memory+0x2a8>)
 80012c2:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <execution_from_memory+0x2a8>)
 80012ca:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dd06      	ble.n	80012e0 <execution_from_memory+0x1a8>
				GPIOB->ODR |= GPIO_ODR_ODR9; //counterclockwise
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <execution_from_memory+0x2ac>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <execution_from_memory+0x2ac>)
 80012d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012dc:	60d3      	str	r3, [r2, #12]
 80012de:	e005      	b.n	80012ec <execution_from_memory+0x1b4>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_ODR9; //clockwise
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <execution_from_memory+0x2ac>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4a3f      	ldr	r2, [pc, #252]	; (80013e4 <execution_from_memory+0x2ac>)
 80012e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012ea:	60d3      	str	r3, [r2, #12]
			}
			if(exm.start_speed_value == 0) break;
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <execution_from_memory+0x2a8>)
 80012ee:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d062      	beq.n	80013bc <execution_from_memory+0x284>
			start_motor();
 80012f6:	f7ff fbbd 	bl	8000a74 <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <execution_from_memory+0x298>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	2200      	movs	r2, #0
 8001308:	2150      	movs	r1, #80	; 0x50
 800130a:	f003 faf9 	bl	8004900 <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <execution_from_memory+0x298>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2110      	movs	r1, #16
 8001314:	4618      	mov	r0, r3
 8001316:	f003 fbc1 	bl	8004a9c <xEventGroupClearBits>
			break;
 800131a:	e054      	b.n	80013c6 <execution_from_memory+0x28e>
		case ('G'+'-'):
			exm.G_sign_value = 0;
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <execution_from_memory+0x2a8>)
 800131e:	2200      	movs	r2, #0
 8001320:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <execution_from_memory+0x2a8>)
 8001326:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <execution_from_memory+0x2a8>)
 800132e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001332:	b29b      	uxth	r3, r3
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	4413      	add	r3, r2
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <execution_from_memory+0x2a8>)
 800133e:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == (0-exm.G_sign_value)) break;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <execution_from_memory+0x2a8>)
 8001344:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001348:	461a      	mov	r2, r3
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <execution_from_memory+0x2a8>)
 800134c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001350:	425b      	negs	r3, r3
 8001352:	429a      	cmp	r2, r3
 8001354:	d034      	beq.n	80013c0 <execution_from_memory+0x288>
			else if(exm.position > (0-exm.G_sign_value)){
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <execution_from_memory+0x2a8>)
 8001358:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800135c:	461a      	mov	r2, r3
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <execution_from_memory+0x2a8>)
 8001360:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001364:	425b      	negs	r3, r3
 8001366:	429a      	cmp	r2, r3
 8001368:	dd06      	ble.n	8001378 <execution_from_memory+0x240>
				GPIOB->ODR |= GPIO_ODR_ODR9; //counterclockwise
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <execution_from_memory+0x2ac>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <execution_from_memory+0x2ac>)
 8001370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001374:	60d3      	str	r3, [r2, #12]
 8001376:	e005      	b.n	8001384 <execution_from_memory+0x24c>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_ODR9; //clockwise
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <execution_from_memory+0x2ac>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <execution_from_memory+0x2ac>)
 800137e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001382:	60d3      	str	r3, [r2, #12]
			}
//			  HAL_TIM_Base_Start_IT(&htim4);
//			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			if(exm.start_speed_value == 0) break;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <execution_from_memory+0x2a8>)
 8001386:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01a      	beq.n	80013c4 <execution_from_memory+0x28c>
			start_motor();
 800138e:	f7ff fb71 	bl	8000a74 <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <execution_from_memory+0x298>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2200      	movs	r2, #0
 80013a0:	2150      	movs	r1, #80	; 0x50
 80013a2:	f003 faad 	bl	8004900 <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <execution_from_memory+0x298>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2110      	movs	r1, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fb75 	bl	8004a9c <xEventGroupClearBits>
			break;
 80013b2:	e008      	b.n	80013c6 <execution_from_memory+0x28e>
		default:
			break;
 80013b4:	bf00      	nop
 80013b6:	e006      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.position == exm.G_sign_value) break;
 80013b8:	bf00      	nop
 80013ba:	e004      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80013bc:	bf00      	nop
 80013be:	e002      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.position == (0-exm.G_sign_value)) break;
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80013c4:	bf00      	nop
	}
	  vTaskDelay(200);
 80013c6:	20c8      	movs	r0, #200	; 0xc8
 80013c8:	f004 fbd4 	bl	8005b74 <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 80013cc:	e6b8      	b.n	8001140 <execution_from_memory+0x8>
 80013ce:	bf00      	nop
 80013d0:	20000904 	.word	0x20000904
 80013d4:	08007720 	.word	0x08007720
 80013d8:	200007dc 	.word	0x200007dc
 80013dc:	200008f4 	.word	0x200008f4
 80013e0:	20000838 	.word	0x20000838
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a3c      	ldr	r2, [pc, #240]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d107      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x22>
		exm.step_counter_second_part++;
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 80013fc:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001400:	3301      	adds	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001406:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	}

	if (htim->Instance == TIM4) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d15d      	bne.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		if((xEventGroupGetBitsFromISR(EventGroup) & (1<<7)) != 0x80) { // if  Programming mode is OFF
 8001414:	4b37      	ldr	r3, [pc, #220]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fb77 	bl	8004b0c <xEventGroupGetBitsFromISR>
 800141e:	4603      	mov	r3, r0
 8001420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001424:	2b80      	cmp	r3, #128	; 0x80
 8001426:	d053      	beq.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
			switch ((GPIOB->ODR & (GPIO_ODR_ODR9))) {
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001430:	2b00      	cmp	r3, #0
 8001432:	d026      	beq.n	8001482 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001438:	d145      	bne.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0xde>
				case (1<<9): //counterclockwise
					exm.position--;
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 800143c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 800144a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
				if(exm.position == 0-((int16_t)exm.G_sign_value)){
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001450:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001454:	461a      	mov	r2, r3
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001458:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800145c:	b21b      	sxth	r3, r3
 800145e:	425b      	negs	r3, r3
 8001460:	429a      	cmp	r2, r3
 8001462:	d132      	bne.n	80014ca <HAL_TIM_PeriodElapsedCallback+0xe2>
				  HAL_TIM_Base_Stop_IT(&htim4);
 8001464:	4825      	ldr	r0, [pc, #148]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001466:	f001 fb79 	bl	8002b5c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800146a:	2100      	movs	r1, #0
 800146c:	4823      	ldr	r0, [pc, #140]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800146e:	f001 fc9d 	bl	8002dac <HAL_TIM_PWM_Stop>
				xEventGroupSetBitsFromISR(EventGroup, 0x10, pdTRUE);
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	2210      	movs	r2, #16
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800147c:	f005 fcc6 	bl	8006e0c <xTimerPendFunctionCallFromISR>
				}
					break;
 8001480:	e023      	b.n	80014ca <HAL_TIM_PeriodElapsedCallback+0xe2>
				case (0<<9): //clockwise
					exm.position++;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001484:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	b21a      	sxth	r2, r3
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001492:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
					if(exm.position == exm.G_sign_value){
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001498:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800149c:	461a      	mov	r2, r3
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014a0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d112      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0xe6>
					  HAL_TIM_Base_Stop_IT(&htim4);
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014aa:	f001 fb57 	bl	8002b5c <HAL_TIM_Base_Stop_IT>
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80014ae:	2100      	movs	r1, #0
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014b2:	f001 fc7b 	bl	8002dac <HAL_TIM_PWM_Stop>
					xEventGroupSetBitsFromISR(EventGroup, 0x10, pdTRUE);
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014b8:	6819      	ldr	r1, [r3, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2210      	movs	r2, #16
 80014be:	4810      	ldr	r0, [pc, #64]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80014c0:	f005 fca4 	bl	8006e0c <xTimerPendFunctionCallFromISR>
					}
					break;
 80014c4:	e003      	b.n	80014ce <HAL_TIM_PeriodElapsedCallback+0xe6>
				default:
					break;
 80014c6:	bf00      	nop
 80014c8:	e002      	b.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80014ca:	bf00      	nop
 80014cc:	e000      	b.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80014ce:	bf00      	nop
			}
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0xf6>
    HAL_IncTick();
 80014da:	f000 fa77 	bl	80019cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40000400 	.word	0x40000400
 80014ec:	20000838 	.word	0x20000838
 80014f0:	40000800 	.word	0x40000800
 80014f4:	20000904 	.word	0x20000904
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	20000794 	.word	0x20000794
 8001500:	08004c69 	.word	0x08004c69

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_MspInit+0x68>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_MspInit+0x68>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_MspInit+0x68>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_MspInit+0x68>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_MspInit+0x68>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x68>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	210f      	movs	r1, #15
 800154a:	f06f 0001 	mvn.w	r0, #1
 800154e:	f000 fb0e 	bl	8001b6e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_MspInit+0x6c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_MspInit+0x6c>)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000

08001580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_SPI_MspInit+0x88>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d12f      	bne.n	8001600 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a13      	ldr	r2, [pc, #76]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015d0:	23a0      	movs	r3, #160	; 0xa0
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_SPI_MspInit+0x90>)
 80015e4:	f000 fba0 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_SPI_MspInit+0x90>)
 80015fc:	f000 fb94 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013000 	.word	0x40013000
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_TIM_Base_MspInit+0x78>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d114      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2105      	movs	r1, #5
 8001642:	201d      	movs	r0, #29
 8001644:	f000 fa93 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001648:	201d      	movs	r0, #29
 800164a:	f000 faac 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800164e:	e018      	b.n	8001682 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_TIM_Base_MspInit+0x80>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d113      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2105      	movs	r1, #5
 8001676:	201e      	movs	r0, #30
 8001678:	f000 fa79 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800167c:	201e      	movs	r0, #30
 800167e:	f000 fa92 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40000400 	.word	0x40000400
 8001690:	40021000 	.word	0x40021000
 8001694:	40000800 	.word	0x40000800

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_TIM_MspPostInit+0x58>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d117      	bne.n	80016e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PUL_stepper_Pin;
 80016d0:	2340      	movs	r3, #64	; 0x40
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUL_stepper_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_TIM_MspPostInit+0x60>)
 80016e4:	f000 fb20 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40000800 	.word	0x40000800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010c00 	.word	0x40010c00

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <HAL_UART_MspInit+0x9c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d139      	bne.n	8001790 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_UART_MspInit+0xa0>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_UART_MspInit+0xa0>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_UART_MspInit+0xa0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_UART_MspInit+0xa0>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_UART_MspInit+0xa0>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_UART_MspInit+0xa0>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800174c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4619      	mov	r1, r3
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <HAL_UART_MspInit+0xa4>)
 8001762:	f000 fae1 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_UART_MspInit+0xa4>)
 800177c:	f000 fad4 	bl	8001d28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2025      	movs	r0, #37	; 0x25
 8001786:	f000 f9f2 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800178a:	2025      	movs	r0, #37	; 0x25
 800178c:	f000 fa0b 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013800 	.word	0x40013800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800

080017a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_InitTick+0xe8>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <HAL_InitTick+0xe8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_InitTick+0xe8>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d2:	f107 0210 	add.w	r2, r7, #16
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 f849 	bl	8002874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ec:	f001 f81a 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 80017f0:	6378      	str	r0, [r7, #52]	; 0x34
 80017f2:	e004      	b.n	80017fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017f4:	f001 f816 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 80017f8:	4603      	mov	r3, r0
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_InitTick+0xec>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	3b01      	subs	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_InitTick+0xf0>)
 800180e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001812:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_InitTick+0xf0>)
 8001816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_InitTick+0xf0>)
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_InitTick+0xf0>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_InitTick+0xf0>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_InitTick+0xf0>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001834:	4817      	ldr	r0, [pc, #92]	; (8001894 <HAL_InitTick+0xf0>)
 8001836:	f001 f8ef 	bl	8002a18 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11b      	bne.n	8001880 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001848:	4812      	ldr	r0, [pc, #72]	; (8001894 <HAL_InitTick+0xf0>)
 800184a:	f001 f935 	bl	8002ab8 <HAL_TIM_Base_Start_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001854:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001858:	2b00      	cmp	r3, #0
 800185a:	d111      	bne.n	8001880 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800185c:	201c      	movs	r0, #28
 800185e:	f000 f9a2 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d808      	bhi.n	800187a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	201c      	movs	r0, #28
 800186e:	f000 f97e 	bl	8001b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_InitTick+0xf4>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e002      	b.n	8001880 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001884:	4618      	mov	r0, r3
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	431bde83 	.word	0x431bde83
 8001894:	20000908 	.word	0x20000908
 8001898:	20000004 	.word	0x20000004

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 fbc8 	bl	8002060 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOVE_EN_Pin);
 80018d8:	2004      	movs	r0, #4
 80018da:	f000 fbc1 	bl	8002060 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <TIM2_IRQHandler+0x10>)
 80018ea:	f001 fac3 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000908 	.word	0x20000908

080018f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TIM3_IRQHandler+0x10>)
 80018fe:	f001 fab9 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000074c 	.word	0x2000074c

0800190c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM4_IRQHandler+0x10>)
 8001912:	f001 faaf 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000794 	.word	0x20000794

08001920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <USART1_IRQHandler+0x20>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 8001930:	f7fe ff5c 	bl	80007ec <uart1_rx_callback>
		__asm__ volatile("NOP");
 8001934:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <USART1_IRQHandler+0x24>)
 8001938:	f002 fa0e 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40013800 	.word	0x40013800
 8001944:	200007dc 	.word	0x200007dc

08001948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001954:	f7ff fff8 	bl	8001948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800195a:	490c      	ldr	r1, [pc, #48]	; (800198c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800195c:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <LoopFillZerobss+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001970:	4c09      	ldr	r4, [pc, #36]	; (8001998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f005 fe35 	bl	80075ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001982:	f7fe fc17 	bl	80001b4 <main>
  bx lr
 8001986:	4770      	bx	lr
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001990:	0800777c 	.word	0x0800777c
  ldr r2, =_sbss
 8001994:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001998:	20002374 	.word	0x20002374

0800199c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_2_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x28>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x28>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f8d1 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7ff fef4 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fda8 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x1c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_IncTick+0x20>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000950 	.word	0x20000950

080019f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <HAL_GetTick+0x10>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	20000950 	.word	0x20000950

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4906      	ldr	r1, [pc, #24]	; (8001a9c <__NVIC_EnableIRQ+0x34>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff4f 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff64 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ffb2 	bl	8001af4 <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff81 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff57 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e020      	b.n	8001c2e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020e 	bic.w	r2, r2, #14
 8001bfa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	2101      	movs	r1, #1
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d005      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2204      	movs	r2, #4
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	e051      	b.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_DMA_Abort_IT+0xd4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d029      	beq.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_DMA_Abort_IT+0xd8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0x9e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_DMA_Abort_IT+0xdc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01a      	beq.n	8001cd0 <HAL_DMA_Abort_IT+0x98>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_DMA_Abort_IT+0xe0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_Abort_IT+0x92>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_DMA_Abort_IT+0xe4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00a      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x8c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_DMA_Abort_IT+0xe8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_DMA_Abort_IT+0x86>
 8001cb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cbc:	e00e      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc2:	e00b      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc8:	e008      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	e005      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	e002      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	e000      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_DMA_Abort_IT+0xec>)
 8001cde:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
    } 
  }
  return status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40020008 	.word	0x40020008
 8001d10:	4002001c 	.word	0x4002001c
 8001d14:	40020030 	.word	0x40020030
 8001d18:	40020044 	.word	0x40020044
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	4002006c 	.word	0x4002006c
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b08b      	sub	sp, #44	; 0x2c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e169      	b.n	8002010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8158 	bne.w	800200a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a9a      	ldr	r2, [pc, #616]	; (8001fc8 <HAL_GPIO_Init+0x2a0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d05e      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d64:	4a98      	ldr	r2, [pc, #608]	; (8001fc8 <HAL_GPIO_Init+0x2a0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d875      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d6a:	4a98      	ldr	r2, [pc, #608]	; (8001fcc <HAL_GPIO_Init+0x2a4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d058      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d70:	4a96      	ldr	r2, [pc, #600]	; (8001fcc <HAL_GPIO_Init+0x2a4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d86f      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d76:	4a96      	ldr	r2, [pc, #600]	; (8001fd0 <HAL_GPIO_Init+0x2a8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d052      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a94      	ldr	r2, [pc, #592]	; (8001fd0 <HAL_GPIO_Init+0x2a8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d869      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d82:	4a94      	ldr	r2, [pc, #592]	; (8001fd4 <HAL_GPIO_Init+0x2ac>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04c      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d88:	4a92      	ldr	r2, [pc, #584]	; (8001fd4 <HAL_GPIO_Init+0x2ac>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d863      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a92      	ldr	r2, [pc, #584]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d046      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d94:	4a90      	ldr	r2, [pc, #576]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d85d      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d82a      	bhi.n	8001df4 <HAL_GPIO_Init+0xcc>
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	d859      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_GPIO_Init+0x80>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001e23 	.word	0x08001e23
 8001dac:	08001dfd 	.word	0x08001dfd
 8001db0:	08001e0f 	.word	0x08001e0f
 8001db4:	08001e51 	.word	0x08001e51
 8001db8:	08001e57 	.word	0x08001e57
 8001dbc:	08001e57 	.word	0x08001e57
 8001dc0:	08001e57 	.word	0x08001e57
 8001dc4:	08001e57 	.word	0x08001e57
 8001dc8:	08001e57 	.word	0x08001e57
 8001dcc:	08001e57 	.word	0x08001e57
 8001dd0:	08001e57 	.word	0x08001e57
 8001dd4:	08001e57 	.word	0x08001e57
 8001dd8:	08001e57 	.word	0x08001e57
 8001ddc:	08001e57 	.word	0x08001e57
 8001de0:	08001e57 	.word	0x08001e57
 8001de4:	08001e57 	.word	0x08001e57
 8001de8:	08001e57 	.word	0x08001e57
 8001dec:	08001e05 	.word	0x08001e05
 8001df0:	08001e19 	.word	0x08001e19
 8001df4:	4a79      	ldr	r2, [pc, #484]	; (8001fdc <HAL_GPIO_Init+0x2b4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dfa:	e02c      	b.n	8001e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e029      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e024      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	3308      	adds	r3, #8
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e01f      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	330c      	adds	r3, #12
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e01a      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e013      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	611a      	str	r2, [r3, #16]
          break;
 8001e42:	e009      	b.n	8001e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	615a      	str	r2, [r3, #20]
          break;
 8001e4e:	e003      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          break;
 8001e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d801      	bhi.n	8001e62 <HAL_GPIO_Init+0x13a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_Init+0x13e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	d802      	bhi.n	8001e74 <HAL_GPIO_Init+0x14c>
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	e002      	b.n	8001e7a <HAL_GPIO_Init+0x152>
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3b08      	subs	r3, #8
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	210f      	movs	r1, #15
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80b1 	beq.w	800200a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec0:	4a48      	ldr	r2, [pc, #288]	; (8001fe4 <HAL_GPIO_Init+0x2bc>)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_GPIO_Init+0x1ec>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3f      	ldr	r2, [pc, #252]	; (8001fec <HAL_GPIO_Init+0x2c4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <HAL_GPIO_Init+0x1e8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3e      	ldr	r2, [pc, #248]	; (8001ff0 <HAL_GPIO_Init+0x2c8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_Init+0x1e4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3d      	ldr	r2, [pc, #244]	; (8001ff4 <HAL_GPIO_Init+0x2cc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_GPIO_Init+0x1e0>
 8001f04:	2303      	movs	r3, #3
 8001f06:	e006      	b.n	8001f16 <HAL_GPIO_Init+0x1ee>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e004      	b.n	8001f16 <HAL_GPIO_Init+0x1ee>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x1ee>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_GPIO_Init+0x1ee>
 8001f14:	2300      	movs	r3, #0
 8001f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f18:	f002 0203 	and.w	r2, r2, #3
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f26:	492f      	ldr	r1, [pc, #188]	; (8001fe4 <HAL_GPIO_Init+0x2bc>)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	492c      	ldr	r1, [pc, #176]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4928      	ldr	r1, [pc, #160]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	4922      	ldr	r1, [pc, #136]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	491e      	ldr	r1, [pc, #120]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4918      	ldr	r1, [pc, #96]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4914      	ldr	r1, [pc, #80]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d021      	beq.n	8001ffc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
 8001fc4:	e021      	b.n	800200a <HAL_GPIO_Init+0x2e2>
 8001fc6:	bf00      	nop
 8001fc8:	10320000 	.word	0x10320000
 8001fcc:	10310000 	.word	0x10310000
 8001fd0:	10220000 	.word	0x10220000
 8001fd4:	10210000 	.word	0x10210000
 8001fd8:	10120000 	.word	0x10120000
 8001fdc:	10110000 	.word	0x10110000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	40010c00 	.word	0x40010c00
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	40011400 	.word	0x40011400
 8001ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_GPIO_Init+0x304>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	43db      	mvns	r3, r3
 8002004:	4909      	ldr	r1, [pc, #36]	; (800202c <HAL_GPIO_Init+0x304>)
 8002006:	4013      	ands	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	3301      	adds	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	f47f ae8e 	bne.w	8001d3c <HAL_GPIO_Init+0x14>
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	372c      	adds	r7, #44	; 0x2c
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fbc4 	bl	800080c <HAL_GPIO_EXTI_Callback>
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40010400 	.word	0x40010400

08002090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e272      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b0:	4b92      	ldr	r3, [pc, #584]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020bc:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d112      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
 80020c8:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d06c      	beq.n	80021bc <HAL_RCC_OscConfig+0x12c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d168      	bne.n	80021bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e24c      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x76>
 80020f8:	4b80      	ldr	r3, [pc, #512]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a7f      	ldr	r2, [pc, #508]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e02e      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b78      	ldr	r3, [pc, #480]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a77      	ldr	r2, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0xbc>
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a71      	ldr	r2, [pc, #452]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a67      	ldr	r2, [pc, #412]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fc40 	bl	80019f0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fc3c 	bl	80019f0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e200      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xe4>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fc2c 	bl	80019f0 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fc28 	bl	80019f0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1ec      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x10c>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1c0      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4939      	ldr	r1, [pc, #228]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e03a      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff fbe1 	bl	80019f0 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff fbdd 	bl	80019f0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1a1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4927      	ldr	r1, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fbc0 	bl	80019f0 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002274:	f7ff fbbc 	bl	80019f0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e180      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03a      	beq.n	8002314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fba0 	bl	80019f0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fb9c 	bl	80019f0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e160      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 fafe 	bl	80028d4 <RCC_Delay>
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7ff fb86 	bl	80019f0 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	e00f      	b.n	8002308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff fb82 	bl	80019f0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d908      	bls.n	8002308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e146      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	42420000 	.word	0x42420000
 8002304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e9      	bne.n	80022e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a6 	beq.w	800246e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a87      	ldr	r2, [pc, #540]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b85      	ldr	r3, [pc, #532]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7e      	ldr	r2, [pc, #504]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7ff fb43 	bl	80019f0 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7ff fb3f 	bl	80019f0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e103      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x312>
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e02d      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x334>
 80023aa:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a69      	ldr	r2, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a66      	ldr	r2, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e01c      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x356>
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a60      	ldr	r2, [pc, #384]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	4b5e      	ldr	r3, [pc, #376]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a5d      	ldr	r2, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a5a      	ldr	r2, [pc, #360]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b58      	ldr	r3, [pc, #352]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a57      	ldr	r2, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff faf3 	bl	80019f0 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff faef 	bl	80019f0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0b1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ee      	beq.n	800240e <HAL_RCC_OscConfig+0x37e>
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff fadd 	bl	80019f0 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fad9 	bl	80019f0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e09b      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8087 	beq.w	8002586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d061      	beq.n	8002548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d146      	bne.n	800251a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff faad 	bl	80019f0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff faa9 	bl	80019f0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e06d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4921      	ldr	r1, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a19      	ldr	r1, [r3, #32]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	430b      	orrs	r3, r1
 80024e6:	491b      	ldr	r1, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7ff fa7d 	bl	80019f0 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7ff fa79 	bl	80019f0 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e03d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x46a>
 8002518:	e035      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fa66 	bl	80019f0 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff fa62 	bl	80019f0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e026      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x498>
 8002546:	e01e      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e019      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_OscConfig+0x500>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7ff f9b4 	bl	80019f0 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7ff f9b0 	bl	80019f0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1cc>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f82e 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	08007748 	.word	0x08007748
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b04      	cmp	r3, #4
 8002790:	d002      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x30>
 8002792:	2b08      	cmp	r3, #8
 8002794:	d003      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x36>
 8002796:	e027      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 800279a:	613b      	str	r3, [r7, #16]
      break;
 800279c:	e027      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0c5b      	lsrs	r3, r3, #17
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ca:	fb03 f202 	mul.w	r2, r3, r2
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e004      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a0c      	ldr	r2, [pc, #48]	; (800280c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	613b      	str	r3, [r7, #16]
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	693b      	ldr	r3, [r7, #16]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	007a1200 	.word	0x007a1200
 8002804:	08007760 	.word	0x08007760
 8002808:	08007770 	.word	0x08007770
 800280c:	003d0900 	.word	0x003d0900

08002810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <HAL_RCC_GetHCLKFreq+0x10>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20000000 	.word	0x20000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff2 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	08007758 	.word	0x08007758

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002850:	f7ff ffde 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0adb      	lsrs	r3, r3, #11
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08007758 	.word	0x08007758

08002874 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	220f      	movs	r2, #15
 8002882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_GetClockConfig+0x58>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_RCC_GetClockConfig+0x58>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_GetClockConfig+0x58>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCC_GetClockConfig+0x58>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_GetClockConfig+0x5c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0207 	and.w	r2, r3, #7
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40022000 	.word	0x40022000

080028d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <RCC_Delay+0x34>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <RCC_Delay+0x38>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0a5b      	lsrs	r3, r3, #9
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f0:	bf00      	nop
  }
  while (Delay --);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e5a      	subs	r2, r3, #1
 80028f6:	60fa      	str	r2, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <RCC_Delay+0x1c>
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	20000000 	.word	0x20000000
 800290c:	10624dd3 	.word	0x10624dd3

08002910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e076      	b.n	8002a10 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002932:	d009      	beq.n	8002948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
 800293a:	e005      	b.n	8002948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fe0c 	bl	8001580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	ea42 0103 	orr.w	r1, r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	0c1a      	lsrs	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f002 0204 	and.w	r2, r2, #4
 80029ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e041      	b.n	8002aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe fde8 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f000 fd04 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d001      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e03a      	b.n	8002b46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_TIM_Base_Start_IT+0x98>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x58>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afa:	d009      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x58>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x58>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d010      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b32:	e007      	b.n	8002b44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800

08002b5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10f      	bne.n	8002ba4 <HAL_TIM_Base_Stop_IT+0x48>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_Base_Stop_IT+0x48>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f839 	bl	8002c56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 fc34 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_TIM_PWM_Start+0x24>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e022      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d109      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x3e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e015      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d109      	bne.n	8002cc0 <HAL_TIM_PWM_Start+0x58>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e008      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e05e      	b.n	8002d98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0x82>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x92>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf8:	e00b      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xa2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d08:	e003      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 feb3 	bl	8003a86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_TIM_PWM_Start+0x138>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d107      	bne.n	8002d3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_TIM_PWM_Start+0x138>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00e      	beq.n	8002d62 <HAL_TIM_PWM_Start+0xfa>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIM_PWM_Start+0xfa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <HAL_TIM_PWM_Start+0x13c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_TIM_PWM_Start+0xfa>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <HAL_TIM_PWM_Start+0x140>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d010      	beq.n	8002d96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d84:	e007      	b.n	8002d96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800

08002dac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fe61 	bl	8003a86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_TIM_PWM_Stop+0xc4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d117      	bne.n	8002dfe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_TIM_PWM_Stop+0x52>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	f240 4344 	movw	r3, #1092	; 0x444
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_PWM_Stop+0x52>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <HAL_TIM_PWM_Stop+0x82>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	f240 4344 	movw	r3, #1092	; 0x444
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d107      	bne.n	8002e2e <HAL_TIM_PWM_Stop+0x82>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Stop+0x92>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e3c:	e013      	b.n	8002e66 <HAL_TIM_PWM_Stop+0xba>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d104      	bne.n	8002e4e <HAL_TIM_PWM_Stop+0xa2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e4c:	e00b      	b.n	8002e66 <HAL_TIM_PWM_Stop+0xba>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_PWM_Stop+0xb2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e5c:	e003      	b.n	8002e66 <HAL_TIM_PWM_Stop+0xba>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40012c00 	.word	0x40012c00

08002e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0202 	mvn.w	r2, #2
 8002ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fab8 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 faab 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 faba 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0204 	mvn.w	r2, #4
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa8e 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fa81 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fa90 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0208 	mvn.w	r2, #8
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa64 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fa57 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fa66 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0210 	mvn.w	r2, #16
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fa3a 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa2d 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fa3c 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0201 	mvn.w	r2, #1
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe f9f8 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fdbd 	bl	8003b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d107      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa00 	bl	8003450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b20      	cmp	r3, #32
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0220 	mvn.w	r2, #32
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fd88 	bl	8003b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800309e:	2302      	movs	r3, #2
 80030a0:	e0ae      	b.n	8003200 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	f200 809f 	bhi.w	80031f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030ed 	.word	0x080030ed
 80030bc:	080031f1 	.word	0x080031f1
 80030c0:	080031f1 	.word	0x080031f1
 80030c4:	080031f1 	.word	0x080031f1
 80030c8:	0800312d 	.word	0x0800312d
 80030cc:	080031f1 	.word	0x080031f1
 80030d0:	080031f1 	.word	0x080031f1
 80030d4:	080031f1 	.word	0x080031f1
 80030d8:	0800316f 	.word	0x0800316f
 80030dc:	080031f1 	.word	0x080031f1
 80030e0:	080031f1 	.word	0x080031f1
 80030e4:	080031f1 	.word	0x080031f1
 80030e8:	080031af 	.word	0x080031af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fa18 	bl	8003528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0208 	orr.w	r2, r2, #8
 8003106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0204 	bic.w	r2, r2, #4
 8003116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6999      	ldr	r1, [r3, #24]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	619a      	str	r2, [r3, #24]
      break;
 800312a:	e064      	b.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa5e 	bl	80035f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6999      	ldr	r1, [r3, #24]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	021a      	lsls	r2, r3, #8
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	619a      	str	r2, [r3, #24]
      break;
 800316c:	e043      	b.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 faa7 	bl	80036c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0208 	orr.w	r2, r2, #8
 8003188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0204 	bic.w	r2, r2, #4
 8003198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	61da      	str	r2, [r3, #28]
      break;
 80031ac:	e023      	b.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 faf1 	bl	800379c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69d9      	ldr	r1, [r3, #28]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	021a      	lsls	r2, r3, #8
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	61da      	str	r2, [r3, #28]
      break;
 80031ee:	e002      	b.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
      break;
 80031f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIM_ConfigClockSource+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e0b4      	b.n	800338e <HAL_TIM_ConfigClockSource+0x186>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325c:	d03e      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0xd4>
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003262:	f200 8087 	bhi.w	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	f000 8086 	beq.w	800337a <HAL_TIM_ConfigClockSource+0x172>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	d87f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b70      	cmp	r3, #112	; 0x70
 8003276:	d01a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0xa6>
 8003278:	2b70      	cmp	r3, #112	; 0x70
 800327a:	d87b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b60      	cmp	r3, #96	; 0x60
 800327e:	d050      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x11a>
 8003280:	2b60      	cmp	r3, #96	; 0x60
 8003282:	d877      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b50      	cmp	r3, #80	; 0x50
 8003286:	d03c      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0xfa>
 8003288:	2b50      	cmp	r3, #80	; 0x50
 800328a:	d873      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d058      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x13a>
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d86f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b30      	cmp	r3, #48	; 0x30
 8003296:	d064      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b30      	cmp	r3, #48	; 0x30
 800329a:	d86b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d060      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d867      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d05a      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032ac:	e062      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	f000 fbc3 	bl	8003a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]
      break;
 80032da:	e04f      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ec:	f000 fbac 	bl	8003a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fe:	609a      	str	r2, [r3, #8]
      break;
 8003300:	e03c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	461a      	mov	r2, r3
 8003310:	f000 fb23 	bl	800395a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2150      	movs	r1, #80	; 0x50
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb7a 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003320:	e02c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800332e:	461a      	mov	r2, r3
 8003330:	f000 fb41 	bl	80039b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2160      	movs	r1, #96	; 0x60
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fb6a 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003340:	e01c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334e:	461a      	mov	r2, r3
 8003350:	f000 fb03 	bl	800395a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fb5a 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003360:	e00c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f000 fb51 	bl	8003a14 <TIM_ITRx_SetConfig>
      break;
 8003372:	e003      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e000      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800337a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_SlaveConfigSynchro+0x18>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e031      	b.n	8003412 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033be:	6839      	ldr	r1, [r7, #0]
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fa39 	bl	8003838 <TIM_SlaveTimer_SetConfig>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e018      	b.n	8003412 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033fe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
	...

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a29      	ldr	r2, [pc, #164]	; (800351c <TIM_Base_SetConfig+0xb8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a26      	ldr	r2, [pc, #152]	; (8003520 <TIM_Base_SetConfig+0xbc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a25      	ldr	r2, [pc, #148]	; (8003524 <TIM_Base_SetConfig+0xc0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <TIM_Base_SetConfig+0xb8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d007      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <TIM_Base_SetConfig+0xbc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <TIM_Base_SetConfig+0xc0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d108      	bne.n	80034d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <TIM_Base_SetConfig+0xb8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800

08003528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 0201 	bic.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0303 	bic.w	r3, r3, #3
 800355e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f023 0302 	bic.w	r3, r3, #2
 8003570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <TIM_OC1_SetConfig+0xc8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d10c      	bne.n	800359e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0308 	bic.w	r3, r3, #8
 800358a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <TIM_OC1_SetConfig+0xc8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d111      	bne.n	80035ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00

080035f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 0210 	bic.w	r2, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f023 0320 	bic.w	r3, r3, #32
 800363e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <TIM_OC2_SetConfig+0xd0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10d      	bne.n	8003670 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <TIM_OC2_SetConfig+0xd0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d113      	bne.n	80036a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800367e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40012c00 	.word	0x40012c00

080036c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <TIM_OC3_SetConfig+0xd0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10d      	bne.n	8003742 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800372c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <TIM_OC3_SetConfig+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d113      	bne.n	8003772 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	621a      	str	r2, [r3, #32]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40012c00 	.word	0x40012c00

0800379c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	031b      	lsls	r3, r3, #12
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <TIM_OC4_SetConfig+0x98>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d109      	bne.n	8003810 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00

08003838 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003854:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 0307 	bic.w	r3, r3, #7
 8003866:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b70      	cmp	r3, #112	; 0x70
 8003880:	d01a      	beq.n	80038b8 <TIM_SlaveTimer_SetConfig+0x80>
 8003882:	2b70      	cmp	r3, #112	; 0x70
 8003884:	d860      	bhi.n	8003948 <TIM_SlaveTimer_SetConfig+0x110>
 8003886:	2b60      	cmp	r3, #96	; 0x60
 8003888:	d054      	beq.n	8003934 <TIM_SlaveTimer_SetConfig+0xfc>
 800388a:	2b60      	cmp	r3, #96	; 0x60
 800388c:	d85c      	bhi.n	8003948 <TIM_SlaveTimer_SetConfig+0x110>
 800388e:	2b50      	cmp	r3, #80	; 0x50
 8003890:	d046      	beq.n	8003920 <TIM_SlaveTimer_SetConfig+0xe8>
 8003892:	2b50      	cmp	r3, #80	; 0x50
 8003894:	d858      	bhi.n	8003948 <TIM_SlaveTimer_SetConfig+0x110>
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d019      	beq.n	80038ce <TIM_SlaveTimer_SetConfig+0x96>
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d854      	bhi.n	8003948 <TIM_SlaveTimer_SetConfig+0x110>
 800389e:	2b30      	cmp	r3, #48	; 0x30
 80038a0:	d055      	beq.n	800394e <TIM_SlaveTimer_SetConfig+0x116>
 80038a2:	2b30      	cmp	r3, #48	; 0x30
 80038a4:	d850      	bhi.n	8003948 <TIM_SlaveTimer_SetConfig+0x110>
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d051      	beq.n	800394e <TIM_SlaveTimer_SetConfig+0x116>
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d84c      	bhi.n	8003948 <TIM_SlaveTimer_SetConfig+0x110>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04d      	beq.n	800394e <TIM_SlaveTimer_SetConfig+0x116>
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d04b      	beq.n	800394e <TIM_SlaveTimer_SetConfig+0x116>
 80038b6:	e047      	b.n	8003948 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80038c8:	f000 f8be 	bl	8003a48 <TIM_ETR_SetConfig>
      break;
 80038cc:	e040      	b.n	8003950 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d101      	bne.n	80038da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e03b      	b.n	8003952 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1a      	ldr	r2, [r3, #32]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003900:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	621a      	str	r2, [r3, #32]
      break;
 800391e:	e017      	b.n	8003950 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392c:	461a      	mov	r2, r3
 800392e:	f000 f814 	bl	800395a <TIM_TI1_ConfigInputStage>
      break;
 8003932:	e00d      	b.n	8003950 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003940:	461a      	mov	r2, r3
 8003942:	f000 f838 	bl	80039b6 <TIM_TI2_ConfigInputStage>
      break;
 8003946:	e003      	b.n	8003950 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
      break;
 800394c:	e000      	b.n	8003950 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800394e:	bf00      	nop
  }

  return status;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f023 0201 	bic.w	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 030a 	bic.w	r3, r3, #10
 8003996:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	621a      	str	r2, [r3, #32]
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f023 0210 	bic.w	r2, r3, #16
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f043 0307 	orr.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	609a      	str	r2, [r3, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	609a      	str	r2, [r3, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2201      	movs	r2, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1a      	ldr	r2, [r3, #32]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e046      	b.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d009      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a10      	ldr	r2, [pc, #64]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10c      	bne.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800

08003b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e042      	b.n	8003c48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fd90 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fd71 	bl	80046dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d16d      	bne.n	8003d4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Transmit+0x2c>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e066      	b.n	8003d4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2221      	movs	r2, #33	; 0x21
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8e:	f7fd feaf 	bl	80019f0 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	88fa      	ldrh	r2, [r7, #6]
 8003c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d108      	bne.n	8003cbc <HAL_UART_Transmit+0x6c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e003      	b.n	8003cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cc4:	e02a      	b.n	8003d1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 faf9 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e036      	b.n	8003d4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e007      	b.n	8003d0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1cf      	bne.n	8003cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fac9 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0ba      	sub	sp, #232	; 0xe8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fbd1 	bl	800455e <UART_Receive_IT>
      return;
 8003dbc:	e25b      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80de 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
 8003dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80d1 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
 8003e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
 8003e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
 8003e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 81f2 	beq.w	800426c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb5c 	bl	800455e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x17a>
 8003eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04f      	beq.n	8003f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa66 	bl	80043a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d041      	beq.n	8003f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	4a7e      	ldr	r2, [pc, #504]	; (8004138 <HAL_UART_IRQHandler+0x3e0>)
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fe76 	bl	8001c38 <HAL_DMA_Abort_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00e      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f99c 	bl	80042a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00a      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f998 	bl	80042a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e006      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f994 	bl	80042a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f7e:	e175      	b.n	800426c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	bf00      	nop
    return;
 8003f82:	e173      	b.n	800426c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 814f 	bne.w	800422c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8148 	beq.w	800422c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8141 	beq.w	800422c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80b6 	beq.w	800413c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8145 	beq.w	8004270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f080 813e 	bcs.w	8004270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b20      	cmp	r3, #32
 8004004:	f000 8088 	beq.w	8004118 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800401e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004026:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004034:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004040:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800404c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1d9      	bne.n	8004008 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004078:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800407c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004080:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800408a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e1      	bne.n	8004054 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3314      	adds	r3, #20
 80040b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e3      	bne.n	8004090 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e8:	f023 0310 	bic.w	r3, r3, #16
 80040ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80040fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e3      	bne.n	80040d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fd55 	bl	8001bc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004126:	b29b      	uxth	r3, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8bf 	bl	80042b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004134:	e09c      	b.n	8004270 <HAL_UART_IRQHandler+0x518>
 8004136:	bf00      	nop
 8004138:	08004469 	.word	0x08004469
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004144:	b29b      	uxth	r3, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 808e 	beq.w	8004274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8089 	beq.w	8004274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004186:	647a      	str	r2, [r7, #68]	; 0x44
 8004188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800418c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e3      	bne.n	8004162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	623b      	str	r3, [r7, #32]
   return(result);
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041be:	633a      	str	r2, [r7, #48]	; 0x30
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e3      	bne.n	800419a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0310 	bic.w	r3, r3, #16
 80041f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004204:	61fa      	str	r2, [r7, #28]
 8004206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	69b9      	ldr	r1, [r7, #24]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	617b      	str	r3, [r7, #20]
   return(result);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e3      	bne.n	80041e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800421e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f844 	bl	80042b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800422a:	e023      	b.n	8004274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_UART_IRQHandler+0x4f4>
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f923 	bl	8004490 <UART_Transmit_IT>
    return;
 800424a:	e014      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <HAL_UART_IRQHandler+0x51e>
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f962 	bl	800452e <UART_EndTransmit_IT>
    return;
 800426a:	e004      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
    return;
 800426c:	bf00      	nop
 800426e:	e002      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
      return;
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
      return;
 8004274:	bf00      	nop
  }
}
 8004276:	37e8      	adds	r7, #232	; 0xe8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b090      	sub	sp, #64	; 0x40
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d8:	e050      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d04c      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e8:	f7fd fb82 	bl	80019f0 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d241      	bcs.n	800437c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004318:	637a      	str	r2, [r7, #52]	; 0x34
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434c:	623a      	str	r2, [r7, #32]
 800434e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	61bb      	str	r3, [r7, #24]
   return(result);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e00f      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	429a      	cmp	r2, r3
 8004398:	d09f      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b095      	sub	sp, #84	; 0x54
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043cc:	643a      	str	r2, [r7, #64]	; 0x40
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d119      	bne.n	8004450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60bb      	str	r3, [r7, #8]
   return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	647b      	str	r3, [r7, #68]	; 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800443c:	61ba      	str	r2, [r7, #24]
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800445e:	bf00      	nop
 8004460:	3754      	adds	r7, #84	; 0x54
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff ff0c 	bl	80042a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b21      	cmp	r3, #33	; 0x21
 80044a2:	d13e      	bne.n	8004522 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ac:	d114      	bne.n	80044d8 <UART_Transmit_IT+0x48>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d110      	bne.n	80044d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	1c9a      	adds	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]
 80044d6:	e008      	b.n	80044ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	1c59      	adds	r1, r3, #1
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6211      	str	r1, [r2, #32]
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4619      	mov	r1, r3
 80044f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff fe94 	bl	800427c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b08c      	sub	sp, #48	; 0x30
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b22      	cmp	r3, #34	; 0x22
 8004570:	f040 80ae 	bne.w	80046d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d117      	bne.n	80045ae <UART_Receive_IT+0x50>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d113      	bne.n	80045ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459c:	b29a      	uxth	r2, r3
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	1c9a      	adds	r2, r3, #2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
 80045ac:	e026      	b.n	80045fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d007      	beq.n	80045d2 <UART_Receive_IT+0x74>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <UART_Receive_IT+0x82>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e008      	b.n	80045f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4619      	mov	r1, r3
 800460a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800460c:	2b00      	cmp	r3, #0
 800460e:	d15d      	bne.n	80046cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0220 	bic.w	r2, r2, #32
 800461e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	2b01      	cmp	r3, #1
 8004654:	d135      	bne.n	80046c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	613b      	str	r3, [r7, #16]
   return(result);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f023 0310 	bic.w	r3, r3, #16
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	623a      	str	r2, [r7, #32]
 800467e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	69f9      	ldr	r1, [r7, #28]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	61bb      	str	r3, [r7, #24]
   return(result);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e5      	bne.n	800465c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d10a      	bne.n	80046b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fdf9 	bl	80042b2 <HAL_UARTEx_RxEventCallback>
 80046c0:	e002      	b.n	80046c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fde3 	bl	800428e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e002      	b.n	80046d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3730      	adds	r7, #48	; 0x30
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004716:	f023 030c 	bic.w	r3, r3, #12
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	430b      	orrs	r3, r1
 8004722:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <UART_SetConfig+0x114>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d103      	bne.n	800474c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe f882 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	e002      	b.n	8004752 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7fe f86a 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004750:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <UART_SetConfig+0x118>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	0119      	lsls	r1, r3, #4
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fbb2 f2f3 	udiv	r2, r2, r3
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <UART_SetConfig+0x118>)
 800478a:	fba3 0302 	umull	r0, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2064      	movs	r0, #100	; 0x64
 8004792:	fb00 f303 	mul.w	r3, r0, r3
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	3332      	adds	r3, #50	; 0x32
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <UART_SetConfig+0x118>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a8:	4419      	add	r1, r3
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009a      	lsls	r2, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <UART_SetConfig+0x118>)
 80047c2:	fba3 0302 	umull	r0, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2064      	movs	r0, #100	; 0x64
 80047ca:	fb00 f303 	mul.w	r3, r0, r3
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	3332      	adds	r3, #50	; 0x32
 80047d4:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <UART_SetConfig+0x118>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	440a      	add	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40013800 	.word	0x40013800
 80047f4:	51eb851f 	.word	0x51eb851f

080047f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800480a:	2b84      	cmp	r3, #132	; 0x84
 800480c:	d005      	beq.n	800481a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800480e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	3303      	adds	r3, #3
 8004818:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800481a:	68fb      	ldr	r3, [r7, #12]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800482a:	f001 f9d7 	bl	8005bdc <vTaskStartScheduler>
  
  return osOK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}

08004834 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af04      	add	r7, sp, #16
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <osThreadCreate+0x54>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01c      	beq.n	8004888 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685c      	ldr	r4, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691e      	ldr	r6, [r3, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff ffc9 	bl	80047f8 <makeFreeRtosPriority>
 8004866:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004870:	9202      	str	r2, [sp, #8]
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	9100      	str	r1, [sp, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	4632      	mov	r2, r6
 800487a:	4629      	mov	r1, r5
 800487c:	4620      	mov	r0, r4
 800487e:	f000 ffef 	bl	8005860 <xTaskCreateStatic>
 8004882:	4603      	mov	r3, r0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e01c      	b.n	80048c2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685c      	ldr	r4, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004894:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ffab 	bl	80047f8 <makeFreeRtosPriority>
 80048a2:	4602      	mov	r2, r0
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	9200      	str	r2, [sp, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4632      	mov	r2, r6
 80048b0:	4629      	mov	r1, r5
 80048b2:	4620      	mov	r0, r4
 80048b4:	f001 f830 	bl	8005918 <xTaskCreate>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d001      	beq.n	80048c2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048c2:	68fb      	ldr	r3, [r7, #12]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048cc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80048d2:	201c      	movs	r0, #28
 80048d4:	f002 fcaa 	bl	800722c <pvPortMalloc>
 80048d8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f9ea 	bl	8004cc4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80048f6:	687b      	ldr	r3, [r7, #4]
	}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b090      	sub	sp, #64	; 0x40
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	61fb      	str	r3, [r7, #28]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xEventGroupWaitBits+0x72>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	61bb      	str	r3, [r7, #24]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004972:	f001 fe17 	bl	80065a4 <xTaskGetSchedulerState>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xEventGroupWaitBits+0x82>
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xEventGroupWaitBits+0x86>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xEventGroupWaitBits+0x88>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80049a2:	f001 f981 	bl	8005ca8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049b2:	f000 f966 	bl	8004c82 <prvTestWaitCondition>
 80049b6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00e      	beq.n	80049dc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d028      	beq.n	8004a1e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	401a      	ands	r2, r3
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e020      	b.n	8004a1e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	e018      	b.n	8004a1e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0a:	1d18      	adds	r0, r3, #4
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	4313      	orrs	r3, r2
 8004a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a14:	4619      	mov	r1, r3
 8004a16:	f001 fb3b 	bl	8006090 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004a1e:	f001 f951 	bl	8005cc4 <xTaskResumeAll>
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d031      	beq.n	8004a8e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d107      	bne.n	8004a40 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <xEventGroupWaitBits+0x198>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004a40:	f001 fe54 	bl	80066ec <uxTaskResetEventItemValue>
 8004a44:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d11a      	bne.n	8004a86 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004a50:	f002 faec 	bl	800702c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a60:	f000 f90f 	bl	8004c82 <prvTestWaitCondition>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d006      	beq.n	8004a7e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	401a      	ands	r2, r3
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004a82:	f002 fb03 	bl	800708c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3740      	adds	r7, #64	; 0x40
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <xEventGroupClearBits+0x4a>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60bb      	str	r3, [r7, #8]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004ae6:	f002 faa1 	bl	800702c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	401a      	ands	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004afe:	f002 fac5 	bl	800708c <vPortExitCritical>

	return uxReturn;
 8004b02:	693b      	ldr	r3, [r7, #16]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b18:	f3ef 8211 	mrs	r2, BASEPRI
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fa      	str	r2, [r7, #12]
 8004b2e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b30:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b32:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b44:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8004b46:	697b      	ldr	r3, [r7, #20]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3724      	adds	r7, #36	; 0x24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b08e      	sub	sp, #56	; 0x38
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <xEventGroupSetBits+0x32>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	613b      	str	r3, [r7, #16]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <xEventGroupSetBits+0x52>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	60fb      	str	r3, [r7, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	3308      	adds	r3, #8
 8004bae:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004bb0:	f001 f87a 	bl	8005ca8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004bc6:	e03c      	b.n	8004c42 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bde:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004be6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c02:	e008      	b.n	8004c16 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d101      	bne.n	8004c16 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004c12:	2301      	movs	r3, #1
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c36:	4619      	mov	r1, r3
 8004c38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c3a:	f001 faf3 	bl	8006224 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d1be      	bne.n	8004bc8 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004c58:	f001 f834 	bl	8005cc4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3738      	adds	r7, #56	; 0x38
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004c72:	6839      	ldr	r1, [r7, #0]
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff6c 	bl	8004b52 <xEventGroupSetBits>
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004c82:	b480      	push	{r7}
 8004c84:	b087      	sub	sp, #28
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	e007      	b.n	8004cb8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d101      	bne.n	8004cb8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004cb8:	697b      	ldr	r3, [r7, #20]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0208 	add.w	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f103 0208 	add.w	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f103 0208 	add.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d103      	bne.n	8004d80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e00c      	b.n	8004d9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3308      	adds	r3, #8
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e002      	b.n	8004d8e <vListInsert+0x2e>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d2f6      	bcs.n	8004d88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6892      	ldr	r2, [r2, #8]
 8004de6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d103      	bne.n	8004e04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
	...

08004e24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <xQueueGenericReset+0x2a>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	60bb      	str	r3, [r7, #8]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e4e:	f002 f8ed 	bl	800702c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	441a      	add	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	68f9      	ldr	r1, [r7, #12]
 8004e82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	441a      	add	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	22ff      	movs	r2, #255	; 0xff
 8004e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d114      	bne.n	8004ece <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01a      	beq.n	8004ee2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3310      	adds	r3, #16
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f955 	bl	8006160 <xTaskRemoveFromEventList>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d012      	beq.n	8004ee2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <xQueueGenericReset+0xcc>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	e009      	b.n	8004ee2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3310      	adds	r3, #16
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fef6 	bl	8004cc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3324      	adds	r3, #36	; 0x24
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fef1 	bl	8004cc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ee2:	f002 f8d3 	bl	800708c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ee6:	2301      	movs	r3, #1
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08e      	sub	sp, #56	; 0x38
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <xQueueGenericCreateStatic+0x52>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <xQueueGenericCreateStatic+0x56>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <xQueueGenericCreateStatic+0x58>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	623b      	str	r3, [r7, #32]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <xQueueGenericCreateStatic+0x7e>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <xQueueGenericCreateStatic+0x82>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <xQueueGenericCreateStatic+0x84>
 8004f76:	2300      	movs	r3, #0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	61fb      	str	r3, [r7, #28]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f92:	2348      	movs	r3, #72	; 0x48
 8004f94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b48      	cmp	r3, #72	; 0x48
 8004f9a:	d00a      	beq.n	8004fb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	61bb      	str	r3, [r7, #24]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00d      	beq.n	8004fd8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fc4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f843 	bl	800505e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3730      	adds	r7, #48	; 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08a      	sub	sp, #40	; 0x28
 8004fe6:	af02      	add	r7, sp, #8
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	4613      	mov	r3, r2
 8004fee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	613b      	str	r3, [r7, #16]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	e004      	b.n	8005022 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3348      	adds	r3, #72	; 0x48
 8005026:	4618      	mov	r0, r3
 8005028:	f002 f900 	bl	800722c <pvPortMalloc>
 800502c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00f      	beq.n	8005054 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	3348      	adds	r3, #72	; 0x48
 8005038:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005042:	79fa      	ldrb	r2, [r7, #7]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f805 	bl	800505e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005054:	69bb      	ldr	r3, [r7, #24]
	}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e002      	b.n	8005080 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800508c:	2101      	movs	r1, #1
 800508e:	69b8      	ldr	r0, [r7, #24]
 8005090:	f7ff fec8 	bl	8004e24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08e      	sub	sp, #56	; 0x38
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050aa:	2300      	movs	r3, #0
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueGenericSend+0x32>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <xQueueGenericSend+0x40>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <xQueueGenericSend+0x44>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <xQueueGenericSend+0x46>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <xQueueGenericSend+0x60>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <xQueueGenericSend+0x6e>
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <xQueueGenericSend+0x72>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <xQueueGenericSend+0x74>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xQueueGenericSend+0x8e>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	623b      	str	r3, [r7, #32]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800512a:	f001 fa3b 	bl	80065a4 <xTaskGetSchedulerState>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <xQueueGenericSend+0x9e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <xQueueGenericSend+0xa2>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <xQueueGenericSend+0xa4>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xQueueGenericSend+0xbe>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	61fb      	str	r3, [r7, #28]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800515a:	f001 ff67 	bl	800702c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	429a      	cmp	r2, r3
 8005168:	d302      	bcc.n	8005170 <xQueueGenericSend+0xd4>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d129      	bne.n	80051c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005176:	f000 fa07 	bl	8005588 <prvCopyDataToQueue>
 800517a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	3324      	adds	r3, #36	; 0x24
 8005188:	4618      	mov	r0, r3
 800518a:	f000 ffe9 	bl	8006160 <xTaskRemoveFromEventList>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005194:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <xQueueGenericSend+0x1f8>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	e00a      	b.n	80051bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051ac:	4b39      	ldr	r3, [pc, #228]	; (8005294 <xQueueGenericSend+0x1f8>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051bc:	f001 ff66 	bl	800708c <vPortExitCritical>
				return pdPASS;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e063      	b.n	800528c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ca:	f001 ff5f 	bl	800708c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e05c      	b.n	800528c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f883 	bl	80062e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051e6:	f001 ff51 	bl	800708c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ea:	f000 fd5d 	bl	8005ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ee:	f001 ff1d 	bl	800702c <vPortEnterCritical>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d103      	bne.n	8005208 <xQueueGenericSend+0x16c>
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520e:	b25b      	sxtb	r3, r3
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d103      	bne.n	800521e <xQueueGenericSend+0x182>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521e:	f001 ff35 	bl	800708c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005222:	1d3a      	adds	r2, r7, #4
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f001 f872 	bl	8006314 <xTaskCheckForTimeOut>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d124      	bne.n	8005280 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005238:	f000 fa9e 	bl	8005778 <prvIsQueueFull>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	3310      	adds	r3, #16
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fefc 	bl	8006048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005252:	f000 fa29 	bl	80056a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005256:	f000 fd35 	bl	8005cc4 <xTaskResumeAll>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	f47f af7c 	bne.w	800515a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <xQueueGenericSend+0x1f8>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	e772      	b.n	800515a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005276:	f000 fa17 	bl	80056a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800527a:	f000 fd23 	bl	8005cc4 <xTaskResumeAll>
 800527e:	e76c      	b.n	800515a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005282:	f000 fa11 	bl	80056a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005286:	f000 fd1d 	bl	8005cc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800528a:	2300      	movs	r3, #0
		}
	}
}
 800528c:	4618      	mov	r0, r3
 800528e:	3738      	adds	r7, #56	; 0x38
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08e      	sub	sp, #56	; 0x38
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <xQueueGenericSendFromISR+0x3c>
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueGenericSendFromISR+0x40>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueGenericSendFromISR+0x42>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	623b      	str	r3, [r7, #32]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d103      	bne.n	8005302 <xQueueGenericSendFromISR+0x6a>
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <xQueueGenericSendFromISR+0x6e>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueGenericSendFromISR+0x70>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	61fb      	str	r3, [r7, #28]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005322:	f001 ff45 	bl	80071b0 <vPortValidateInterruptPriority>
	__asm volatile
 8005326:	f3ef 8211 	mrs	r2, BASEPRI
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	61ba      	str	r2, [r7, #24]
 800533c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800533e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <xQueueGenericSendFromISR+0xbc>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d12c      	bne.n	80053ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005364:	f000 f910 	bl	8005588 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005368:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d112      	bne.n	8005398 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d016      	beq.n	80053a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	3324      	adds	r3, #36	; 0x24
 800537e:	4618      	mov	r0, r3
 8005380:	f000 feee 	bl	8006160 <xTaskRemoveFromEventList>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00e      	beq.n	80053a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00b      	beq.n	80053a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e007      	b.n	80053a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800539c:	3301      	adds	r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	b25a      	sxtb	r2, r3
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053a8:	2301      	movs	r3, #1
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80053ac:	e001      	b.n	80053b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f383 8811 	msr	BASEPRI, r3
}
 80053bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3738      	adds	r7, #56	; 0x38
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <xQueueReceive+0x30>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	623b      	str	r3, [r7, #32]
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <xQueueReceive+0x3e>
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xQueueReceive+0x42>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueReceive+0x44>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueReceive+0x5e>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61fb      	str	r3, [r7, #28]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005426:	f001 f8bd 	bl	80065a4 <xTaskGetSchedulerState>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <xQueueReceive+0x6e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <xQueueReceive+0x72>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <xQueueReceive+0x74>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueReceive+0x8e>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	61bb      	str	r3, [r7, #24]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005456:	f001 fde9 	bl	800702c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01f      	beq.n	80054a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800546a:	f000 f8f7 	bl	800565c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00f      	beq.n	800549e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	3310      	adds	r3, #16
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fe6c 	bl	8006160 <xTaskRemoveFromEventList>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800548e:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <xQueueReceive+0x1bc>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800549e:	f001 fdf5 	bl	800708c <vPortExitCritical>
				return pdPASS;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e069      	b.n	800557a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054ac:	f001 fdee 	bl	800708c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e062      	b.n	800557a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ba:	f107 0310 	add.w	r3, r7, #16
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 ff12 	bl	80062e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054c8:	f001 fde0 	bl	800708c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054cc:	f000 fbec 	bl	8005ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d0:	f001 fdac 	bl	800702c <vPortEnterCritical>
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054da:	b25b      	sxtb	r3, r3
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d103      	bne.n	80054ea <xQueueReceive+0x122>
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f0:	b25b      	sxtb	r3, r3
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d103      	bne.n	8005500 <xQueueReceive+0x138>
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005500:	f001 fdc4 	bl	800708c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005504:	1d3a      	adds	r2, r7, #4
 8005506:	f107 0310 	add.w	r3, r7, #16
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f000 ff01 	bl	8006314 <xTaskCheckForTimeOut>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d123      	bne.n	8005560 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551a:	f000 f917 	bl	800574c <prvIsQueueEmpty>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d017      	beq.n	8005554 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fd8b 	bl	8006048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005534:	f000 f8b8 	bl	80056a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005538:	f000 fbc4 	bl	8005cc4 <xTaskResumeAll>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d189      	bne.n	8005456 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <xQueueReceive+0x1bc>)
 8005544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	e780      	b.n	8005456 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005556:	f000 f8a7 	bl	80056a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800555a:	f000 fbb3 	bl	8005cc4 <xTaskResumeAll>
 800555e:	e77a      	b.n	8005456 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005562:	f000 f8a1 	bl	80056a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005566:	f000 fbad 	bl	8005cc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800556a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556c:	f000 f8ee 	bl	800574c <prvIsQueueEmpty>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	f43f af6f 	beq.w	8005456 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d14d      	bne.n	800564a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f814 	bl	80065e0 <xTaskPriorityDisinherit>
 80055b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	e043      	b.n	800564a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d119      	bne.n	80055fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6898      	ldr	r0, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	461a      	mov	r2, r3
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	f002 f82e 	bl	8007634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d32b      	bcc.n	800564a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	609a      	str	r2, [r3, #8]
 80055fa:	e026      	b.n	800564a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68d8      	ldr	r0, [r3, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	461a      	mov	r2, r3
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	f002 f814 	bl	8007634 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	425b      	negs	r3, r3
 8005616:	441a      	add	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d207      	bcs.n	8005638 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	425b      	negs	r3, r3
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d105      	bne.n	800564a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	3b01      	subs	r3, #1
 8005648:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d018      	beq.n	80056a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d303      	bcc.n	8005690 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68d9      	ldr	r1, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	461a      	mov	r2, r3
 800569a:	6838      	ldr	r0, [r7, #0]
 800569c:	f001 ffca 	bl	8007634 <memcpy>
	}
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056b0:	f001 fcbc 	bl	800702c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056bc:	e011      	b.n	80056e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d012      	beq.n	80056ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3324      	adds	r3, #36	; 0x24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fd48 	bl	8006160 <xTaskRemoveFromEventList>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056d6:	f000 fe7f 	bl	80063d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	3b01      	subs	r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dce9      	bgt.n	80056be <prvUnlockQueue+0x16>
 80056ea:	e000      	b.n	80056ee <prvUnlockQueue+0x46>
					break;
 80056ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056f6:	f001 fcc9 	bl	800708c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056fa:	f001 fc97 	bl	800702c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005706:	e011      	b.n	800572c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3310      	adds	r3, #16
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fd23 	bl	8006160 <xTaskRemoveFromEventList>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005720:	f000 fe5a 	bl	80063d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005724:	7bbb      	ldrb	r3, [r7, #14]
 8005726:	3b01      	subs	r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800572c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dce9      	bgt.n	8005708 <prvUnlockQueue+0x60>
 8005734:	e000      	b.n	8005738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	22ff      	movs	r2, #255	; 0xff
 800573c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005740:	f001 fca4 	bl	800708c <vPortExitCritical>
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005754:	f001 fc6a 	bl	800702c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e001      	b.n	800576a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800576a:	f001 fc8f 	bl	800708c <vPortExitCritical>

	return xReturn;
 800576e:	68fb      	ldr	r3, [r7, #12]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005780:	f001 fc54 	bl	800702c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578c:	429a      	cmp	r2, r3
 800578e:	d102      	bne.n	8005796 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	e001      	b.n	800579a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800579a:	f001 fc77 	bl	800708c <vPortExitCritical>

	return xReturn;
 800579e:	68fb      	ldr	r3, [r7, #12]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e014      	b.n	80057e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057b8:	4a0e      	ldr	r2, [pc, #56]	; (80057f4 <vQueueAddToRegistry+0x4c>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057c4:	490b      	ldr	r1, [pc, #44]	; (80057f4 <vQueueAddToRegistry+0x4c>)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057ce:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <vQueueAddToRegistry+0x4c>)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057da:	e006      	b.n	80057ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b07      	cmp	r3, #7
 80057e6:	d9e7      	bls.n	80057b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr
 80057f4:	20000954 	.word	0x20000954

080057f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005808:	f001 fc10 	bl	800702c <vPortEnterCritical>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005812:	b25b      	sxtb	r3, r3
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d103      	bne.n	8005822 <vQueueWaitForMessageRestricted+0x2a>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005828:	b25b      	sxtb	r3, r3
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d103      	bne.n	8005838 <vQueueWaitForMessageRestricted+0x40>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005838:	f001 fc28 	bl	800708c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3324      	adds	r3, #36	; 0x24
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fc5b 	bl	8006108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff ff28 	bl	80056a8 <prvUnlockQueue>
	}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08e      	sub	sp, #56	; 0x38
 8005864:	af04      	add	r7, sp, #16
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	623b      	str	r3, [r7, #32]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61fb      	str	r3, [r7, #28]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058a6:	2364      	movs	r3, #100	; 0x64
 80058a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b64      	cmp	r3, #100	; 0x64
 80058ae:	d00a      	beq.n	80058c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61bb      	str	r3, [r7, #24]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01e      	beq.n	800590a <xTaskCreateStatic+0xaa>
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01b      	beq.n	800590a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058e4:	2300      	movs	r3, #0
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f850 	bl	80059a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005904:	f000 f8cc 	bl	8005aa0 <prvAddNewTaskToReadyList>
 8005908:	e001      	b.n	800590e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800590e:	697b      	ldr	r3, [r7, #20]
	}
 8005910:	4618      	mov	r0, r3
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08c      	sub	sp, #48	; 0x30
 800591c:	af04      	add	r7, sp, #16
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4618      	mov	r0, r3
 800592e:	f001 fc7d 	bl	800722c <pvPortMalloc>
 8005932:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800593a:	2064      	movs	r0, #100	; 0x64
 800593c:	f001 fc76 	bl	800722c <pvPortMalloc>
 8005940:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
 800594e:	e005      	b.n	800595c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005950:	6978      	ldr	r0, [r7, #20]
 8005952:	f001 fd2f 	bl	80073b4 <vPortFree>
 8005956:	e001      	b.n	800595c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d017      	beq.n	8005992 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	2300      	movs	r3, #0
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	9302      	str	r3, [sp, #8]
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f80e 	bl	80059a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005986:	69f8      	ldr	r0, [r7, #28]
 8005988:	f000 f88a 	bl	8005aa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e002      	b.n	8005998 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005998:	69bb      	ldr	r3, [r7, #24]
	}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b088      	sub	sp, #32
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059ba:	3b01      	subs	r3, #1
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f023 0307 	bic.w	r3, r3, #7
 80059c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <prvInitialiseNewTask+0x48>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	617b      	str	r3, [r7, #20]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	e012      	b.n	8005a16 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	7819      	ldrb	r1, [r3, #0]
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	3334      	adds	r3, #52	; 0x34
 8005a00:	460a      	mov	r2, r1
 8005a02:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	3301      	adds	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2b1f      	cmp	r3, #31
 8005a1a:	d9e9      	bls.n	80059f0 <prvInitialiseNewTask+0x4e>
 8005a1c:	e000      	b.n	8005a20 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005a1e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d901      	bls.n	8005a32 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a2e:	2306      	movs	r3, #6
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2200      	movs	r2, #0
 8005a42:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff f95a 	bl	8004d02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	3318      	adds	r3, #24
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff f955 	bl	8004d02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	f1c3 0207 	rsb	r2, r3, #7
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	69b8      	ldr	r0, [r7, #24]
 8005a82:	f001 f9e3 	bl	8006e4c <pxPortInitialiseStack>
 8005a86:	4602      	mov	r2, r0
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a98:	bf00      	nop
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005aa8:	f001 fac0 	bl	800702c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005ab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ab6:	4b29      	ldr	r3, [pc, #164]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005abe:	4a27      	ldr	r2, [pc, #156]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d110      	bne.n	8005aee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005acc:	f000 fca8 	bl	8006420 <prvInitialiseTaskLists>
 8005ad0:	e00d      	b.n	8005aee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ad2:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <prvAddNewTaskToReadyList+0xc0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ada:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d802      	bhi.n	8005aee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <prvAddNewTaskToReadyList+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <prvAddNewTaskToReadyList+0xc4>)
 8005af6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	2201      	movs	r2, #1
 8005afe:	409a      	lsls	r2, r3
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <prvAddNewTaskToReadyList+0xc8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <prvAddNewTaskToReadyList+0xc8>)
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <prvAddNewTaskToReadyList+0xcc>)
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7ff f8fa 	bl	8004d1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b26:	f001 fab1 	bl	800708c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <prvAddNewTaskToReadyList+0xc0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d207      	bcs.n	8005b50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <prvAddNewTaskToReadyList+0xd0>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000a94 	.word	0x20000a94
 8005b5c:	20000994 	.word	0x20000994
 8005b60:	20000aa0 	.word	0x20000aa0
 8005b64:	20000ab0 	.word	0x20000ab0
 8005b68:	20000a9c 	.word	0x20000a9c
 8005b6c:	20000998 	.word	0x20000998
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d017      	beq.n	8005bb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <vTaskDelay+0x60>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <vTaskDelay+0x30>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60bb      	str	r3, [r7, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ba4:	f000 f880 	bl	8005ca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ba8:	2100      	movs	r1, #0
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fdb6 	bl	800671c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb0:	f000 f888 	bl	8005cc4 <xTaskResumeAll>
 8005bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d107      	bne.n	8005bcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <vTaskDelay+0x64>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000abc 	.word	0x20000abc
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bea:	463a      	mov	r2, r7
 8005bec:	1d39      	adds	r1, r7, #4
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fa faac 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	9202      	str	r2, [sp, #8]
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	2300      	movs	r3, #0
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	2300      	movs	r3, #0
 8005c08:	460a      	mov	r2, r1
 8005c0a:	4921      	ldr	r1, [pc, #132]	; (8005c90 <vTaskStartScheduler+0xb4>)
 8005c0c:	4821      	ldr	r0, [pc, #132]	; (8005c94 <vTaskStartScheduler+0xb8>)
 8005c0e:	f7ff fe27 	bl	8005860 <xTaskCreateStatic>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4a20      	ldr	r2, [pc, #128]	; (8005c98 <vTaskStartScheduler+0xbc>)
 8005c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c18:	4b1f      	ldr	r3, [pc, #124]	; (8005c98 <vTaskStartScheduler+0xbc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c20:	2301      	movs	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e001      	b.n	8005c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d102      	bne.n	8005c36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c30:	f000 fdda 	bl	80067e8 <xTimerCreateTimerTask>
 8005c34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d116      	bne.n	8005c6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	613b      	str	r3, [r7, #16]
}
 8005c4e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c50:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <vTaskStartScheduler+0xc0>)
 8005c52:	f04f 32ff 	mov.w	r2, #4294967295
 8005c56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <vTaskStartScheduler+0xc4>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <vTaskStartScheduler+0xc8>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c64:	f001 f970 	bl	8006f48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c68:	e00e      	b.n	8005c88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d10a      	bne.n	8005c88 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <vTaskStartScheduler+0xaa>
}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	08007730 	.word	0x08007730
 8005c94:	080063f1 	.word	0x080063f1
 8005c98:	20000ab8 	.word	0x20000ab8
 8005c9c:	20000ab4 	.word	0x20000ab4
 8005ca0:	20000aa0 	.word	0x20000aa0
 8005ca4:	20000a98 	.word	0x20000a98

08005ca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <vTaskSuspendAll+0x18>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	4a03      	ldr	r2, [pc, #12]	; (8005cc0 <vTaskSuspendAll+0x18>)
 8005cb4:	6013      	str	r3, [r2, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000abc 	.word	0x20000abc

08005cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cd2:	4b41      	ldr	r3, [pc, #260]	; (8005dd8 <xTaskResumeAll+0x114>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	603b      	str	r3, [r7, #0]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cf0:	f001 f99c 	bl	800702c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cf4:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <xTaskResumeAll+0x114>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	4a37      	ldr	r2, [pc, #220]	; (8005dd8 <xTaskResumeAll+0x114>)
 8005cfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cfe:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <xTaskResumeAll+0x114>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d161      	bne.n	8005dca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d06:	4b35      	ldr	r3, [pc, #212]	; (8005ddc <xTaskResumeAll+0x118>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d05d      	beq.n	8005dca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d0e:	e02e      	b.n	8005d6e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d10:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <xTaskResumeAll+0x11c>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3318      	adds	r3, #24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff f857 	bl	8004dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff f852 	bl	8004dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	2201      	movs	r2, #1
 8005d32:	409a      	lsls	r2, r3
 8005d34:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <xTaskResumeAll+0x120>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	4a2a      	ldr	r2, [pc, #168]	; (8005de4 <xTaskResumeAll+0x120>)
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <xTaskResumeAll+0x124>)
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f7fe ffe0 	bl	8004d1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5e:	4b23      	ldr	r3, [pc, #140]	; (8005dec <xTaskResumeAll+0x128>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d302      	bcc.n	8005d6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d68:	4b21      	ldr	r3, [pc, #132]	; (8005df0 <xTaskResumeAll+0x12c>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <xTaskResumeAll+0x11c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1cc      	bne.n	8005d10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d7c:	f000 fbee 	bl	800655c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <xTaskResumeAll+0x130>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d010      	beq.n	8005dae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d8c:	f000 f844 	bl	8005e18 <xTaskIncrementTick>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d96:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <xTaskResumeAll+0x12c>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f1      	bne.n	8005d8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005da8:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <xTaskResumeAll+0x130>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <xTaskResumeAll+0x12c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dba:	4b0f      	ldr	r3, [pc, #60]	; (8005df8 <xTaskResumeAll+0x134>)
 8005dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dca:	f001 f95f 	bl	800708c <vPortExitCritical>

	return xAlreadyYielded;
 8005dce:	68bb      	ldr	r3, [r7, #8]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000abc 	.word	0x20000abc
 8005ddc:	20000a94 	.word	0x20000a94
 8005de0:	20000a54 	.word	0x20000a54
 8005de4:	20000a9c 	.word	0x20000a9c
 8005de8:	20000998 	.word	0x20000998
 8005dec:	20000994 	.word	0x20000994
 8005df0:	20000aa8 	.word	0x20000aa8
 8005df4:	20000aa4 	.word	0x20000aa4
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <xTaskGetTickCount+0x18>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e08:	687b      	ldr	r3, [r7, #4]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	20000a98 	.word	0x20000a98

08005e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e22:	4b51      	ldr	r3, [pc, #324]	; (8005f68 <xTaskIncrementTick+0x150>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 808d 	bne.w	8005f46 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e2c:	4b4f      	ldr	r3, [pc, #316]	; (8005f6c <xTaskIncrementTick+0x154>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e34:	4a4d      	ldr	r2, [pc, #308]	; (8005f6c <xTaskIncrementTick+0x154>)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d120      	bne.n	8005e82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e40:	4b4b      	ldr	r3, [pc, #300]	; (8005f70 <xTaskIncrementTick+0x158>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	603b      	str	r3, [r7, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <xTaskIncrementTick+0x46>
 8005e60:	4b43      	ldr	r3, [pc, #268]	; (8005f70 <xTaskIncrementTick+0x158>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <xTaskIncrementTick+0x15c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a41      	ldr	r2, [pc, #260]	; (8005f70 <xTaskIncrementTick+0x158>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	4a41      	ldr	r2, [pc, #260]	; (8005f74 <xTaskIncrementTick+0x15c>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <xTaskIncrementTick+0x160>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	4a3f      	ldr	r2, [pc, #252]	; (8005f78 <xTaskIncrementTick+0x160>)
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	f000 fb6d 	bl	800655c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e82:	4b3e      	ldr	r3, [pc, #248]	; (8005f7c <xTaskIncrementTick+0x164>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d34d      	bcc.n	8005f28 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e8c:	4b38      	ldr	r3, [pc, #224]	; (8005f70 <xTaskIncrementTick+0x158>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <xTaskIncrementTick+0x82>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xTaskIncrementTick+0x84>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea0:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <xTaskIncrementTick+0x164>)
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	601a      	str	r2, [r3, #0]
					break;
 8005ea8:	e03e      	b.n	8005f28 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <xTaskIncrementTick+0x158>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d203      	bcs.n	8005eca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ec2:	4a2e      	ldr	r2, [pc, #184]	; (8005f7c <xTaskIncrementTick+0x164>)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6013      	str	r3, [r2, #0]
						break;
 8005ec8:	e02e      	b.n	8005f28 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe ff7e 	bl	8004dd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3318      	adds	r3, #24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe ff75 	bl	8004dd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	2201      	movs	r2, #1
 8005eec:	409a      	lsls	r2, r3
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <xTaskIncrementTick+0x168>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <xTaskIncrementTick+0x168>)
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <xTaskIncrementTick+0x16c>)
 8005f06:	441a      	add	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7fe ff03 	bl	8004d1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <xTaskIncrementTick+0x170>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d3b4      	bcc.n	8005e8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f26:	e7b1      	b.n	8005e8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f28:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <xTaskIncrementTick+0x170>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	4915      	ldr	r1, [pc, #84]	; (8005f84 <xTaskIncrementTick+0x16c>)
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d907      	bls.n	8005f50 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e004      	b.n	8005f50 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <xTaskIncrementTick+0x174>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <xTaskIncrementTick+0x174>)
 8005f4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f50:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <xTaskIncrementTick+0x178>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f5c:	697b      	ldr	r3, [r7, #20]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000abc 	.word	0x20000abc
 8005f6c:	20000a98 	.word	0x20000a98
 8005f70:	20000a4c 	.word	0x20000a4c
 8005f74:	20000a50 	.word	0x20000a50
 8005f78:	20000aac 	.word	0x20000aac
 8005f7c:	20000ab4 	.word	0x20000ab4
 8005f80:	20000a9c 	.word	0x20000a9c
 8005f84:	20000998 	.word	0x20000998
 8005f88:	20000994 	.word	0x20000994
 8005f8c:	20000aa4 	.word	0x20000aa4
 8005f90:	20000aa8 	.word	0x20000aa8

08005f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f9a:	4b26      	ldr	r3, [pc, #152]	; (8006034 <vTaskSwitchContext+0xa0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fa2:	4b25      	ldr	r3, [pc, #148]	; (8006038 <vTaskSwitchContext+0xa4>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fa8:	e03f      	b.n	800602a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005faa:	4b23      	ldr	r3, [pc, #140]	; (8006038 <vTaskSwitchContext+0xa4>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005fb0:	4b22      	ldr	r3, [pc, #136]	; (800603c <vTaskSwitchContext+0xa8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	fab3 f383 	clz	r3, r3
 8005fbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	f1c3 031f 	rsb	r3, r3, #31
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	491e      	ldr	r1, [pc, #120]	; (8006040 <vTaskSwitchContext+0xac>)
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	607b      	str	r3, [r7, #4]
}
 8005fec:	bf00      	nop
 8005fee:	e7fe      	b.n	8005fee <vTaskSwitchContext+0x5a>
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4a11      	ldr	r2, [pc, #68]	; (8006040 <vTaskSwitchContext+0xac>)
 8005ffc:	4413      	add	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3308      	adds	r3, #8
 8006012:	429a      	cmp	r2, r3
 8006014:	d104      	bne.n	8006020 <vTaskSwitchContext+0x8c>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4a07      	ldr	r2, [pc, #28]	; (8006044 <vTaskSwitchContext+0xb0>)
 8006028:	6013      	str	r3, [r2, #0]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr
 8006034:	20000abc 	.word	0x20000abc
 8006038:	20000aa8 	.word	0x20000aa8
 800603c:	20000a9c 	.word	0x20000a9c
 8006040:	20000998 	.word	0x20000998
 8006044:	20000994 	.word	0x20000994

08006048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60fb      	str	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <vTaskPlaceOnEventList+0x44>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3318      	adds	r3, #24
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fe fe72 	bl	8004d60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800607c:	2101      	movs	r1, #1
 800607e:	6838      	ldr	r0, [r7, #0]
 8006080:	f000 fb4c 	bl	800671c <prvAddCurrentTaskToDelayedList>
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000994 	.word	0x20000994

08006090 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	617b      	str	r3, [r7, #20]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <vTaskPlaceOnUnorderedEventList+0x70>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <vTaskPlaceOnUnorderedEventList+0x74>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060e0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <vTaskPlaceOnUnorderedEventList+0x74>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3318      	adds	r3, #24
 80060e8:	4619      	mov	r1, r3
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7fe fe15 	bl	8004d1a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060f0:	2101      	movs	r1, #1
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fb12 	bl	800671c <prvAddCurrentTaskToDelayedList>
}
 80060f8:	bf00      	nop
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000abc 	.word	0x20000abc
 8006104:	20000994 	.word	0x20000994

08006108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	617b      	str	r3, [r7, #20]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006130:	4b0a      	ldr	r3, [pc, #40]	; (800615c <vTaskPlaceOnEventListRestricted+0x54>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3318      	adds	r3, #24
 8006136:	4619      	mov	r1, r3
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7fe fdee 	bl	8004d1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006144:	f04f 33ff 	mov.w	r3, #4294967295
 8006148:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68b8      	ldr	r0, [r7, #8]
 800614e:	f000 fae5 	bl	800671c <prvAddCurrentTaskToDelayedList>
	}
 8006152:	bf00      	nop
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000994 	.word	0x20000994

08006160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	60fb      	str	r3, [r7, #12]
}
 8006188:	bf00      	nop
 800618a:	e7fe      	b.n	800618a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	3318      	adds	r3, #24
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe fe1d 	bl	8004dd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <xTaskRemoveFromEventList+0xac>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d11c      	bne.n	80061d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fe14 	bl	8004dd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	4b17      	ldr	r3, [pc, #92]	; (8006210 <xTaskRemoveFromEventList+0xb0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	4a16      	ldr	r2, [pc, #88]	; (8006210 <xTaskRemoveFromEventList+0xb0>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4a13      	ldr	r2, [pc, #76]	; (8006214 <xTaskRemoveFromEventList+0xb4>)
 80061c8:	441a      	add	r2, r3
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f7fe fda2 	bl	8004d1a <vListInsertEnd>
 80061d6:	e005      	b.n	80061e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3318      	adds	r3, #24
 80061dc:	4619      	mov	r1, r3
 80061de:	480e      	ldr	r0, [pc, #56]	; (8006218 <xTaskRemoveFromEventList+0xb8>)
 80061e0:	f7fe fd9b 	bl	8004d1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <xTaskRemoveFromEventList+0xbc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d905      	bls.n	80061fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061f6:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <xTaskRemoveFromEventList+0xc0>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e001      	b.n	8006202 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006202:	697b      	ldr	r3, [r7, #20]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000abc 	.word	0x20000abc
 8006210:	20000a9c 	.word	0x20000a9c
 8006214:	20000998 	.word	0x20000998
 8006218:	20000a54 	.word	0x20000a54
 800621c:	20000994 	.word	0x20000994
 8006220:	20000aa8 	.word	0x20000aa8

08006224 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800622e:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	613b      	str	r3, [r7, #16]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	60fb      	str	r3, [r7, #12]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fe fda9 	bl	8004dd0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	3304      	adds	r3, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fda4 	bl	8004dd0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2201      	movs	r2, #1
 800628e:	409a      	lsls	r2, r3
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	4a10      	ldr	r2, [pc, #64]	; (80062d8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <vTaskRemoveFromUnorderedEventList+0xb8>)
 80062a8:	441a      	add	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7fe fd32 	bl	8004d1a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d902      	bls.n	80062ca <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80062c4:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
	}
}
 80062ca:	bf00      	nop
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000abc 	.word	0x20000abc
 80062d8:	20000a9c 	.word	0x20000a9c
 80062dc:	20000998 	.word	0x20000998
 80062e0:	20000994 	.word	0x20000994
 80062e4:	20000aa8 	.word	0x20000aa8

080062e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <vTaskInternalSetTimeOutState+0x24>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <vTaskInternalSetTimeOutState+0x28>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	605a      	str	r2, [r3, #4]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000aac 	.word	0x20000aac
 8006310:	20000a98 	.word	0x20000a98

08006314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	613b      	str	r3, [r7, #16]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006356:	f000 fe69 	bl	800702c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800635a:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <xTaskCheckForTimeOut+0xbc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d102      	bne.n	800637a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e023      	b.n	80063c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <xTaskCheckForTimeOut+0xc0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d007      	beq.n	8006396 <xTaskCheckForTimeOut+0x82>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	429a      	cmp	r2, r3
 800638e:	d302      	bcc.n	8006396 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006390:	2301      	movs	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	e015      	b.n	80063c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	429a      	cmp	r2, r3
 800639e:	d20b      	bcs.n	80063b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	1ad2      	subs	r2, r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ff9b 	bl	80062e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	e004      	b.n	80063c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063be:	2301      	movs	r3, #1
 80063c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063c2:	f000 fe63 	bl	800708c <vPortExitCritical>

	return xReturn;
 80063c6:	69fb      	ldr	r3, [r7, #28]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000a98 	.word	0x20000a98
 80063d4:	20000aac 	.word	0x20000aac

080063d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063dc:	4b03      	ldr	r3, [pc, #12]	; (80063ec <vTaskMissedYield+0x14>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	20000aa8 	.word	0x20000aa8

080063f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063f8:	f000 f852 	bl	80064a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <prvIdleTask+0x28>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d9f9      	bls.n	80063f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <prvIdleTask+0x2c>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006414:	e7f0      	b.n	80063f8 <prvIdleTask+0x8>
 8006416:	bf00      	nop
 8006418:	20000998 	.word	0x20000998
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006426:	2300      	movs	r3, #0
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	e00c      	b.n	8006446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4a12      	ldr	r2, [pc, #72]	; (8006480 <prvInitialiseTaskLists+0x60>)
 8006438:	4413      	add	r3, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fc42 	bl	8004cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3301      	adds	r3, #1
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b06      	cmp	r3, #6
 800644a:	d9ef      	bls.n	800642c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800644c:	480d      	ldr	r0, [pc, #52]	; (8006484 <prvInitialiseTaskLists+0x64>)
 800644e:	f7fe fc39 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006452:	480d      	ldr	r0, [pc, #52]	; (8006488 <prvInitialiseTaskLists+0x68>)
 8006454:	f7fe fc36 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006458:	480c      	ldr	r0, [pc, #48]	; (800648c <prvInitialiseTaskLists+0x6c>)
 800645a:	f7fe fc33 	bl	8004cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800645e:	480c      	ldr	r0, [pc, #48]	; (8006490 <prvInitialiseTaskLists+0x70>)
 8006460:	f7fe fc30 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006464:	480b      	ldr	r0, [pc, #44]	; (8006494 <prvInitialiseTaskLists+0x74>)
 8006466:	f7fe fc2d 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <prvInitialiseTaskLists+0x78>)
 800646c:	4a05      	ldr	r2, [pc, #20]	; (8006484 <prvInitialiseTaskLists+0x64>)
 800646e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <prvInitialiseTaskLists+0x7c>)
 8006472:	4a05      	ldr	r2, [pc, #20]	; (8006488 <prvInitialiseTaskLists+0x68>)
 8006474:	601a      	str	r2, [r3, #0]
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000998 	.word	0x20000998
 8006484:	20000a24 	.word	0x20000a24
 8006488:	20000a38 	.word	0x20000a38
 800648c:	20000a54 	.word	0x20000a54
 8006490:	20000a68 	.word	0x20000a68
 8006494:	20000a80 	.word	0x20000a80
 8006498:	20000a4c 	.word	0x20000a4c
 800649c:	20000a50 	.word	0x20000a50

080064a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064a6:	e019      	b.n	80064dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064a8:	f000 fdc0 	bl	800702c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <prvCheckTasksWaitingTermination+0x50>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe fc89 	bl	8004dd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <prvCheckTasksWaitingTermination+0x54>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	4a0b      	ldr	r2, [pc, #44]	; (80064f4 <prvCheckTasksWaitingTermination+0x54>)
 80064c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <prvCheckTasksWaitingTermination+0x58>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <prvCheckTasksWaitingTermination+0x58>)
 80064d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064d2:	f000 fddb 	bl	800708c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f810 	bl	80064fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <prvCheckTasksWaitingTermination+0x58>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e1      	bne.n	80064a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000a68 	.word	0x20000a68
 80064f4:	20000a94 	.word	0x20000a94
 80064f8:	20000a7c 	.word	0x20000a7c

080064fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800650a:	2b00      	cmp	r3, #0
 800650c:	d108      	bne.n	8006520 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	4618      	mov	r0, r3
 8006514:	f000 ff4e 	bl	80073b4 <vPortFree>
				vPortFree( pxTCB );
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 ff4b 	bl	80073b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800651e:	e018      	b.n	8006552 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006526:	2b01      	cmp	r3, #1
 8006528:	d103      	bne.n	8006532 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 ff42 	bl	80073b4 <vPortFree>
	}
 8006530:	e00f      	b.n	8006552 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006538:	2b02      	cmp	r3, #2
 800653a:	d00a      	beq.n	8006552 <prvDeleteTCB+0x56>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <prvDeleteTCB+0x54>
	}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006562:	4b0e      	ldr	r3, [pc, #56]	; (800659c <prvResetNextTaskUnblockTime+0x40>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <prvResetNextTaskUnblockTime+0x14>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <prvResetNextTaskUnblockTime+0x16>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006576:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <prvResetNextTaskUnblockTime+0x44>)
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800657e:	e008      	b.n	8006592 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <prvResetNextTaskUnblockTime+0x40>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <prvResetNextTaskUnblockTime+0x44>)
 8006590:	6013      	str	r3, [r2, #0]
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr
 800659c:	20000a4c 	.word	0x20000a4c
 80065a0:	20000ab4 	.word	0x20000ab4

080065a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <xTaskGetSchedulerState+0x34>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065b2:	2301      	movs	r3, #1
 80065b4:	607b      	str	r3, [r7, #4]
 80065b6:	e008      	b.n	80065ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b8:	4b08      	ldr	r3, [pc, #32]	; (80065dc <xTaskGetSchedulerState+0x38>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065c0:	2302      	movs	r3, #2
 80065c2:	607b      	str	r3, [r7, #4]
 80065c4:	e001      	b.n	80065ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065ca:	687b      	ldr	r3, [r7, #4]
	}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20000aa0 	.word	0x20000aa0
 80065dc:	20000abc 	.word	0x20000abc

080065e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d06e      	beq.n	80066d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065f6:	4b3a      	ldr	r3, [pc, #232]	; (80066e0 <xTaskPriorityDisinherit+0x100>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d00a      	beq.n	8006616 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60bb      	str	r3, [r7, #8]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	429a      	cmp	r2, r3
 8006648:	d044      	beq.n	80066d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	2b00      	cmp	r3, #0
 8006650:	d140      	bne.n	80066d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3304      	adds	r3, #4
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fbba 	bl	8004dd0 <uxListRemove>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d115      	bne.n	800668e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	491f      	ldr	r1, [pc, #124]	; (80066e4 <xTaskPriorityDisinherit+0x104>)
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <xTaskPriorityDisinherit+0xae>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	2201      	movs	r2, #1
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	43da      	mvns	r2, r3
 8006684:	4b18      	ldr	r3, [pc, #96]	; (80066e8 <xTaskPriorityDisinherit+0x108>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4013      	ands	r3, r2
 800668a:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <xTaskPriorityDisinherit+0x108>)
 800668c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	f1c3 0207 	rsb	r2, r3, #7
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	2201      	movs	r2, #1
 80066a8:	409a      	lsls	r2, r3
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <xTaskPriorityDisinherit+0x108>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	4a0d      	ldr	r2, [pc, #52]	; (80066e8 <xTaskPriorityDisinherit+0x108>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4a08      	ldr	r2, [pc, #32]	; (80066e4 <xTaskPriorityDisinherit+0x104>)
 80066c2:	441a      	add	r2, r3
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fe fb25 	bl	8004d1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066d4:	697b      	ldr	r3, [r7, #20]
	}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000994 	.word	0x20000994
 80066e4:	20000998 	.word	0x20000998
 80066e8:	20000a9c 	.word	0x20000a9c

080066ec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <uxTaskResetEventItemValue+0x2c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <uxTaskResetEventItemValue+0x2c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <uxTaskResetEventItemValue+0x2c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f1c2 0207 	rsb	r2, r2, #7
 8006708:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800670a:	687b      	ldr	r3, [r7, #4]
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000994 	.word	0x20000994

0800671c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006726:	4b29      	ldr	r3, [pc, #164]	; (80067cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800672c:	4b28      	ldr	r3, [pc, #160]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fb4c 	bl	8004dd0 <uxListRemove>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800673e:	4b24      	ldr	r3, [pc, #144]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	2201      	movs	r2, #1
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43da      	mvns	r2, r3
 800674c:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4013      	ands	r3, r2
 8006752:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006754:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d10a      	bne.n	8006774 <prvAddCurrentTaskToDelayedList+0x58>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006764:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	481a      	ldr	r0, [pc, #104]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800676e:	f7fe fad4 	bl	8004d1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006772:	e026      	b.n	80067c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800677c:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	429a      	cmp	r2, r3
 800678a:	d209      	bcs.n	80067a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678c:	4b13      	ldr	r3, [pc, #76]	; (80067dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3304      	adds	r3, #4
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f7fe fae1 	bl	8004d60 <vListInsert>
}
 800679e:	e010      	b.n	80067c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7fe fad7 	bl	8004d60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067b2:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d202      	bcs.n	80067c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067bc:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6013      	str	r3, [r2, #0]
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000a98 	.word	0x20000a98
 80067d0:	20000994 	.word	0x20000994
 80067d4:	20000a9c 	.word	0x20000a9c
 80067d8:	20000a80 	.word	0x20000a80
 80067dc:	20000a50 	.word	0x20000a50
 80067e0:	20000a4c 	.word	0x20000a4c
 80067e4:	20000ab4 	.word	0x20000ab4

080067e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067f2:	f000 facb 	bl	8006d8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067f6:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <xTimerCreateTimerTask+0x80>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d021      	beq.n	8006842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006806:	1d3a      	adds	r2, r7, #4
 8006808:	f107 0108 	add.w	r1, r7, #8
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	4618      	mov	r0, r3
 8006812:	f7f9 fcb5 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	9202      	str	r2, [sp, #8]
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	2302      	movs	r3, #2
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	2300      	movs	r3, #0
 8006826:	460a      	mov	r2, r1
 8006828:	4910      	ldr	r1, [pc, #64]	; (800686c <xTimerCreateTimerTask+0x84>)
 800682a:	4811      	ldr	r0, [pc, #68]	; (8006870 <xTimerCreateTimerTask+0x88>)
 800682c:	f7ff f818 	bl	8005860 <xTaskCreateStatic>
 8006830:	4603      	mov	r3, r0
 8006832:	4a10      	ldr	r2, [pc, #64]	; (8006874 <xTimerCreateTimerTask+0x8c>)
 8006834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <xTimerCreateTimerTask+0x8c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800683e:	2301      	movs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	613b      	str	r3, [r7, #16]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800685e:	697b      	ldr	r3, [r7, #20]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000af0 	.word	0x20000af0
 800686c:	08007738 	.word	0x08007738
 8006870:	08006995 	.word	0x08006995
 8006874:	20000af4 	.word	0x20000af4

08006878 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006886:	2300      	movs	r3, #0
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	623b      	str	r3, [r7, #32]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <xTimerGenericCommand+0x98>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d02a      	beq.n	8006904 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b05      	cmp	r3, #5
 80068be:	dc18      	bgt.n	80068f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068c0:	f7ff fe70 	bl	80065a4 <xTaskGetSchedulerState>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d109      	bne.n	80068de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068ca:	4b11      	ldr	r3, [pc, #68]	; (8006910 <xTimerGenericCommand+0x98>)
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	f107 0110 	add.w	r1, r7, #16
 80068d2:	2300      	movs	r3, #0
 80068d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d6:	f7fe fbe1 	bl	800509c <xQueueGenericSend>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24
 80068dc:	e012      	b.n	8006904 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068de:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <xTimerGenericCommand+0x98>)
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f107 0110 	add.w	r1, r7, #16
 80068e6:	2300      	movs	r3, #0
 80068e8:	2200      	movs	r2, #0
 80068ea:	f7fe fbd7 	bl	800509c <xQueueGenericSend>
 80068ee:	6278      	str	r0, [r7, #36]	; 0x24
 80068f0:	e008      	b.n	8006904 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <xTimerGenericCommand+0x98>)
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f107 0110 	add.w	r1, r7, #16
 80068fa:	2300      	movs	r3, #0
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	f7fe fccb 	bl	8005298 <xQueueGenericSendFromISR>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006906:	4618      	mov	r0, r3
 8006908:	3728      	adds	r7, #40	; 0x28
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000af0 	.word	0x20000af0

08006914 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800691e:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <prvProcessExpiredTimer+0x7c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	3304      	adds	r3, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fa4f 	bl	8004dd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d122      	bne.n	8006980 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	18d1      	adds	r1, r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f000 f8c8 	bl	8006adc <prvInsertTimerInActiveList>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d016      	beq.n	8006980 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006952:	2300      	movs	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	2300      	movs	r3, #0
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	2100      	movs	r1, #0
 800695c:	6978      	ldr	r0, [r7, #20]
 800695e:	f7ff ff8b 	bl	8006878 <xTimerGenericCommand>
 8006962:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	60fb      	str	r3, [r7, #12]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	6978      	ldr	r0, [r7, #20]
 8006986:	4798      	blx	r3
}
 8006988:	bf00      	nop
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20000ae8 	.word	0x20000ae8

08006994 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f857 	bl	8006a54 <prvGetNextExpireTime>
 80069a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4619      	mov	r1, r3
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f803 	bl	80069b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069b2:	f000 f8d5 	bl	8006b60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069b6:	e7f1      	b.n	800699c <prvTimerTask+0x8>

080069b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069c2:	f7ff f971 	bl	8005ca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 f866 	bl	8006a9c <prvSampleTimeNow>
 80069d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d130      	bne.n	8006a3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <prvProcessTimerOrBlockTask+0x3c>
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d806      	bhi.n	80069f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069e6:	f7ff f96d 	bl	8005cc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ff91 	bl	8006914 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069f2:	e024      	b.n	8006a3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <prvProcessTimerOrBlockTask+0x90>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <prvProcessTimerOrBlockTask+0x94>)
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f7fe feed 	bl	80057f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a1e:	f7ff f951 	bl	8005cc4 <xTaskResumeAll>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a28:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <prvProcessTimerOrBlockTask+0x98>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
}
 8006a38:	e001      	b.n	8006a3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a3a:	f7ff f943 	bl	8005cc4 <xTaskResumeAll>
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000aec 	.word	0x20000aec
 8006a4c:	20000af0 	.word	0x20000af0
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <prvGetNextExpireTime+0x44>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <prvGetNextExpireTime+0x44>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e001      	b.n	8006a8a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20000ae8 	.word	0x20000ae8

08006a9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006aa4:	f7ff f9aa 	bl	8005dfc <xTaskGetTickCount>
 8006aa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <prvSampleTimeNow+0x3c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d205      	bcs.n	8006ac0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ab4:	f000 f908 	bl	8006cc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e002      	b.n	8006ac6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ac6:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <prvSampleTimeNow+0x3c>)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006acc:	68fb      	ldr	r3, [r7, #12]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000af8 	.word	0x20000af8

08006adc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d812      	bhi.n	8006b28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d302      	bcc.n	8006b16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e01b      	b.n	8006b4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <prvInsertTimerInActiveList+0x7c>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7fe f91d 	bl	8004d60 <vListInsert>
 8006b26:	e012      	b.n	8006b4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d206      	bcs.n	8006b3e <prvInsertTimerInActiveList+0x62>
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d302      	bcc.n	8006b3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e007      	b.n	8006b4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b3e:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <prvInsertTimerInActiveList+0x80>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7fe f909 	bl	8004d60 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b4e:	697b      	ldr	r3, [r7, #20]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000aec 	.word	0x20000aec
 8006b5c:	20000ae8 	.word	0x20000ae8

08006b60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	; 0x38
 8006b64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b66:	e09d      	b.n	8006ca4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da18      	bge.n	8006ba0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	3304      	adds	r3, #4
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61fb      	str	r3, [r7, #28]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b96:	6850      	ldr	r0, [r2, #4]
 8006b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b9a:	6892      	ldr	r2, [r2, #8]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	db7e      	blt.n	8006ca4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe f90a 	bl	8004dd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff ff6c 	bl	8006a9c <prvSampleTimeNow>
 8006bc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b09      	cmp	r3, #9
 8006bca:	d86a      	bhi.n	8006ca2 <prvProcessReceivedCommands+0x142>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <prvProcessReceivedCommands+0x74>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006bfd 	.word	0x08006bfd
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006bfd 	.word	0x08006bfd
 8006be0:	08006ca5 	.word	0x08006ca5
 8006be4:	08006c59 	.word	0x08006c59
 8006be8:	08006c91 	.word	0x08006c91
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006bfd 	.word	0x08006bfd
 8006bf4:	08006ca5 	.word	0x08006ca5
 8006bf8:	08006c59 	.word	0x08006c59
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	18d1      	adds	r1, r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0a:	f7ff ff67 	bl	8006adc <prvInsertTimerInActiveList>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d047      	beq.n	8006ca4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d13f      	bne.n	8006ca4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	2300      	movs	r3, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c36:	f7ff fe1f 	bl	8006878 <xTimerGenericCommand>
 8006c3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d130      	bne.n	8006ca4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	61bb      	str	r3, [r7, #24]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	617b      	str	r3, [r7, #20]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	18d1      	adds	r1, r2, r3
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c8a:	f7ff ff27 	bl	8006adc <prvInsertTimerInActiveList>
					break;
 8006c8e:	e009      	b.n	8006ca4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9c:	f000 fb8a 	bl	80073b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ca0:	e000      	b.n	8006ca4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006ca2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <prvProcessReceivedCommands+0x164>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	1d39      	adds	r1, r7, #4
 8006caa:	2200      	movs	r2, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fb8b 	bl	80053c8 <xQueueReceive>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f47f af57 	bne.w	8006b68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	3730      	adds	r7, #48	; 0x30
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20000af0 	.word	0x20000af0

08006cc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cce:	e045      	b.n	8006d5c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cd0:	4b2c      	ldr	r3, [pc, #176]	; (8006d84 <prvSwitchTimerLists+0xbc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cda:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <prvSwitchTimerLists+0xbc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe f871 	bl	8004dd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d12e      	bne.n	8006d5c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4413      	add	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d90e      	bls.n	8006d2e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d1c:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <prvSwitchTimerLists+0xbc>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f7fe f81a 	bl	8004d60 <vListInsert>
 8006d2c:	e016      	b.n	8006d5c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	2300      	movs	r3, #0
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	2100      	movs	r1, #0
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fd9d 	bl	8006878 <xTimerGenericCommand>
 8006d3e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	603b      	str	r3, [r7, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <prvSwitchTimerLists+0xbc>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1b4      	bne.n	8006cd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <prvSwitchTimerLists+0xbc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <prvSwitchTimerLists+0xc0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <prvSwitchTimerLists+0xbc>)
 8006d72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d74:	4a04      	ldr	r2, [pc, #16]	; (8006d88 <prvSwitchTimerLists+0xc0>)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	6013      	str	r3, [r2, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000ae8 	.word	0x20000ae8
 8006d88:	20000aec 	.word	0x20000aec

08006d8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d92:	f000 f94b 	bl	800702c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d96:	4b15      	ldr	r3, [pc, #84]	; (8006dec <prvCheckForValidListAndQueue+0x60>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d120      	bne.n	8006de0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d9e:	4814      	ldr	r0, [pc, #80]	; (8006df0 <prvCheckForValidListAndQueue+0x64>)
 8006da0:	f7fd ff90 	bl	8004cc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006da4:	4813      	ldr	r0, [pc, #76]	; (8006df4 <prvCheckForValidListAndQueue+0x68>)
 8006da6:	f7fd ff8d 	bl	8004cc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006daa:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <prvCheckForValidListAndQueue+0x6c>)
 8006dac:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <prvCheckForValidListAndQueue+0x64>)
 8006dae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006db0:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <prvCheckForValidListAndQueue+0x70>)
 8006db2:	4a10      	ldr	r2, [pc, #64]	; (8006df4 <prvCheckForValidListAndQueue+0x68>)
 8006db4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006db6:	2300      	movs	r3, #0
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <prvCheckForValidListAndQueue+0x74>)
 8006dbc:	4a11      	ldr	r2, [pc, #68]	; (8006e04 <prvCheckForValidListAndQueue+0x78>)
 8006dbe:	2110      	movs	r1, #16
 8006dc0:	200a      	movs	r0, #10
 8006dc2:	f7fe f897 	bl	8004ef4 <xQueueGenericCreateStatic>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4a08      	ldr	r2, [pc, #32]	; (8006dec <prvCheckForValidListAndQueue+0x60>)
 8006dca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006dcc:	4b07      	ldr	r3, [pc, #28]	; (8006dec <prvCheckForValidListAndQueue+0x60>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <prvCheckForValidListAndQueue+0x60>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	490b      	ldr	r1, [pc, #44]	; (8006e08 <prvCheckForValidListAndQueue+0x7c>)
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fce4 	bl	80057a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006de0:	f000 f954 	bl	800708c <vPortExitCritical>
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000af0 	.word	0x20000af0
 8006df0:	20000ac0 	.word	0x20000ac0
 8006df4:	20000ad4 	.word	0x20000ad4
 8006df8:	20000ae8 	.word	0x20000ae8
 8006dfc:	20000aec 	.word	0x20000aec
 8006e00:	20000b9c 	.word	0x20000b9c
 8006e04:	20000afc 	.word	0x20000afc
 8006e08:	08007740 	.word	0x08007740

08006e0c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	; 0x28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006e1a:	f06f 0301 	mvn.w	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <xTimerPendFunctionCallFromISR+0x3c>)
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	f107 0114 	add.w	r1, r7, #20
 8006e34:	2300      	movs	r3, #0
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	f7fe fa2e 	bl	8005298 <xQueueGenericSendFromISR>
 8006e3c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3728      	adds	r7, #40	; 0x28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20000af0 	.word	0x20000af0

08006e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3b04      	subs	r3, #4
 8006e5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3b04      	subs	r3, #4
 8006e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f023 0201 	bic.w	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3b04      	subs	r3, #4
 8006e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e7c:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <pxPortInitialiseStack+0x54>)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3b14      	subs	r3, #20
 8006e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3b20      	subs	r3, #32
 8006e92:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e94:	68fb      	ldr	r3, [r7, #12]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr
 8006ea0:	08006ea5 	.word	0x08006ea5

08006ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <prvTaskExitError+0x54>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb6:	d00a      	beq.n	8006ece <prvTaskExitError+0x2a>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <prvTaskExitError+0x28>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	60bb      	str	r3, [r7, #8]
}
 8006ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ee2:	bf00      	nop
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0fc      	beq.n	8006ee4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	2000000c 	.word	0x2000000c
 8006efc:	00000000 	.word	0x00000000

08006f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f00:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <pxCurrentTCBConst2>)
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f0a:	f380 8809 	msr	PSP, r0
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f1e:	4770      	bx	lr

08006f20 <pxCurrentTCBConst2>:
 8006f20:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f28:	4806      	ldr	r0, [pc, #24]	; (8006f44 <prvPortStartFirstTask+0x1c>)
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f380 8808 	msr	MSP, r0
 8006f32:	b662      	cpsie	i
 8006f34:	b661      	cpsie	f
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	df00      	svc	0
 8006f40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f42:	bf00      	nop
 8006f44:	e000ed08 	.word	0xe000ed08

08006f48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f4e:	4b32      	ldr	r3, [pc, #200]	; (8007018 <xPortStartScheduler+0xd0>)
 8006f50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	22ff      	movs	r2, #255	; 0xff
 8006f5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	4b2a      	ldr	r3, [pc, #168]	; (800701c <xPortStartScheduler+0xd4>)
 8006f74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f76:	4b2a      	ldr	r3, [pc, #168]	; (8007020 <xPortStartScheduler+0xd8>)
 8006f78:	2207      	movs	r2, #7
 8006f7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f7c:	e009      	b.n	8006f92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f7e:	4b28      	ldr	r3, [pc, #160]	; (8007020 <xPortStartScheduler+0xd8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	4a26      	ldr	r2, [pc, #152]	; (8007020 <xPortStartScheduler+0xd8>)
 8006f86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9a:	2b80      	cmp	r3, #128	; 0x80
 8006f9c:	d0ef      	beq.n	8006f7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f9e:	4b20      	ldr	r3, [pc, #128]	; (8007020 <xPortStartScheduler+0xd8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f1c3 0307 	rsb	r3, r3, #7
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d00a      	beq.n	8006fc0 <xPortStartScheduler+0x78>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	60bb      	str	r3, [r7, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fc0:	4b17      	ldr	r3, [pc, #92]	; (8007020 <xPortStartScheduler+0xd8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	4a16      	ldr	r2, [pc, #88]	; (8007020 <xPortStartScheduler+0xd8>)
 8006fc8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <xPortStartScheduler+0xd8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd2:	4a13      	ldr	r2, [pc, #76]	; (8007020 <xPortStartScheduler+0xd8>)
 8006fd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fde:	4b11      	ldr	r3, [pc, #68]	; (8007024 <xPortStartScheduler+0xdc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a10      	ldr	r2, [pc, #64]	; (8007024 <xPortStartScheduler+0xdc>)
 8006fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fea:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <xPortStartScheduler+0xdc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a0d      	ldr	r2, [pc, #52]	; (8007024 <xPortStartScheduler+0xdc>)
 8006ff0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ff4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ff6:	f000 f8b9 	bl	800716c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ffa:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <xPortStartScheduler+0xe0>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007000:	f7ff ff92 	bl	8006f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007004:	f7fe ffc6 	bl	8005f94 <vTaskSwitchContext>
	prvTaskExitError();
 8007008:	f7ff ff4c 	bl	8006ea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	e000e400 	.word	0xe000e400
 800701c:	20000be4 	.word	0x20000be4
 8007020:	20000be8 	.word	0x20000be8
 8007024:	e000ed20 	.word	0xe000ed20
 8007028:	2000000c 	.word	0x2000000c

0800702c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	607b      	str	r3, [r7, #4]
}
 8007044:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007046:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <vPortEnterCritical+0x58>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	4a0d      	ldr	r2, [pc, #52]	; (8007084 <vPortEnterCritical+0x58>)
 800704e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <vPortEnterCritical+0x58>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d10f      	bne.n	8007078 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007058:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <vPortEnterCritical+0x5c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <vPortEnterCritical+0x4c>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	603b      	str	r3, [r7, #0]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <vPortEnterCritical+0x4a>
	}
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	2000000c 	.word	0x2000000c
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <vPortExitCritical+0x4c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <vPortExitCritical+0x24>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	607b      	str	r3, [r7, #4]
}
 80070ac:	bf00      	nop
 80070ae:	e7fe      	b.n	80070ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <vPortExitCritical+0x4c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	4a08      	ldr	r2, [pc, #32]	; (80070d8 <vPortExitCritical+0x4c>)
 80070b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <vPortExitCritical+0x4c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <vPortExitCritical+0x42>
 80070c2:	2300      	movs	r3, #0
 80070c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	f383 8811 	msr	BASEPRI, r3
}
 80070cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr
 80070d8:	2000000c 	.word	0x2000000c
 80070dc:	00000000 	.word	0x00000000

080070e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070e0:	f3ef 8009 	mrs	r0, PSP
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <pxCurrentTCBConst>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070f0:	6010      	str	r0, [r2, #0]
 80070f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80070f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070fa:	f380 8811 	msr	BASEPRI, r0
 80070fe:	f7fe ff49 	bl	8005f94 <vTaskSwitchContext>
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8811 	msr	BASEPRI, r0
 800710a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	6808      	ldr	r0, [r1, #0]
 8007112:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007116:	f380 8809 	msr	PSP, r0
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	4770      	bx	lr

08007120 <pxCurrentTCBConst>:
 8007120:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop

08007128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
}
 8007140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007142:	f7fe fe69 	bl	8005e18 <xTaskIncrementTick>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <SysTick_Handler+0x40>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	f383 8811 	msr	BASEPRI, r3
}
 800715e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <vPortSetupTimerInterrupt+0x30>)
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <vPortSetupTimerInterrupt+0x34>)
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <vPortSetupTimerInterrupt+0x38>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a09      	ldr	r2, [pc, #36]	; (80071a8 <vPortSetupTimerInterrupt+0x3c>)
 8007182:	fba2 2303 	umull	r2, r3, r2, r3
 8007186:	099b      	lsrs	r3, r3, #6
 8007188:	4a08      	ldr	r2, [pc, #32]	; (80071ac <vPortSetupTimerInterrupt+0x40>)
 800718a:	3b01      	subs	r3, #1
 800718c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800718e:	4b03      	ldr	r3, [pc, #12]	; (800719c <vPortSetupTimerInterrupt+0x30>)
 8007190:	2207      	movs	r2, #7
 8007192:	601a      	str	r2, [r3, #0]
}
 8007194:	bf00      	nop
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	e000e010 	.word	0xe000e010
 80071a0:	e000e018 	.word	0xe000e018
 80071a4:	20000000 	.word	0x20000000
 80071a8:	10624dd3 	.word	0x10624dd3
 80071ac:	e000e014 	.word	0xe000e014

080071b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071b6:	f3ef 8305 	mrs	r3, IPSR
 80071ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b0f      	cmp	r3, #15
 80071c0:	d914      	bls.n	80071ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071c2:	4a16      	ldr	r2, [pc, #88]	; (800721c <vPortValidateInterruptPriority+0x6c>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071cc:	4b14      	ldr	r3, [pc, #80]	; (8007220 <vPortValidateInterruptPriority+0x70>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	7afa      	ldrb	r2, [r7, #11]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d20a      	bcs.n	80071ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	607b      	str	r3, [r7, #4]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071ec:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <vPortValidateInterruptPriority+0x74>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <vPortValidateInterruptPriority+0x78>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d90a      	bls.n	8007212 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	603b      	str	r3, [r7, #0]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <vPortValidateInterruptPriority+0x60>
	}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr
 800721c:	e000e3f0 	.word	0xe000e3f0
 8007220:	20000be4 	.word	0x20000be4
 8007224:	e000ed0c 	.word	0xe000ed0c
 8007228:	20000be8 	.word	0x20000be8

0800722c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007238:	f7fe fd36 	bl	8005ca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800723c:	4b58      	ldr	r3, [pc, #352]	; (80073a0 <pvPortMalloc+0x174>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007244:	f000 f910 	bl	8007468 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007248:	4b56      	ldr	r3, [pc, #344]	; (80073a4 <pvPortMalloc+0x178>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4013      	ands	r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	f040 808e 	bne.w	8007372 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01d      	beq.n	8007298 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800725c:	2208      	movs	r2, #8
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4413      	add	r3, r2
 8007262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d014      	beq.n	8007298 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f023 0307 	bic.w	r3, r3, #7
 8007274:	3308      	adds	r3, #8
 8007276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <pvPortMalloc+0x6c>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	617b      	str	r3, [r7, #20]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d069      	beq.n	8007372 <pvPortMalloc+0x146>
 800729e:	4b42      	ldr	r3, [pc, #264]	; (80073a8 <pvPortMalloc+0x17c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d864      	bhi.n	8007372 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072a8:	4b40      	ldr	r3, [pc, #256]	; (80073ac <pvPortMalloc+0x180>)
 80072aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072ac:	4b3f      	ldr	r3, [pc, #252]	; (80073ac <pvPortMalloc+0x180>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072b2:	e004      	b.n	80072be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <pvPortMalloc+0xa4>
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1f1      	bne.n	80072b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072d0:	4b33      	ldr	r3, [pc, #204]	; (80073a0 <pvPortMalloc+0x174>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d04b      	beq.n	8007372 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2208      	movs	r2, #8
 80072e0:	4413      	add	r3, r2
 80072e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1ad2      	subs	r2, r2, r3
 80072f4:	2308      	movs	r3, #8
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d91f      	bls.n	800733c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4413      	add	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <pvPortMalloc+0xf8>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	613b      	str	r3, [r7, #16]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007336:	69b8      	ldr	r0, [r7, #24]
 8007338:	f000 f8f8 	bl	800752c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800733c:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <pvPortMalloc+0x17c>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <pvPortMalloc+0x17c>)
 8007348:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800734a:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <pvPortMalloc+0x17c>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b18      	ldr	r3, [pc, #96]	; (80073b0 <pvPortMalloc+0x184>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d203      	bcs.n	800735e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <pvPortMalloc+0x17c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a15      	ldr	r2, [pc, #84]	; (80073b0 <pvPortMalloc+0x184>)
 800735c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	4b10      	ldr	r3, [pc, #64]	; (80073a4 <pvPortMalloc+0x178>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	431a      	orrs	r2, r3
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007372:	f7fe fca7 	bl	8005cc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <pvPortMalloc+0x16a>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	60fb      	str	r3, [r7, #12]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <pvPortMalloc+0x168>
	return pvReturn;
 8007396:	69fb      	ldr	r3, [r7, #28]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3728      	adds	r7, #40	; 0x28
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20002364 	.word	0x20002364
 80073a4:	20002370 	.word	0x20002370
 80073a8:	20002368 	.word	0x20002368
 80073ac:	2000235c 	.word	0x2000235c
 80073b0:	2000236c 	.word	0x2000236c

080073b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d048      	beq.n	8007458 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073c6:	2308      	movs	r3, #8
 80073c8:	425b      	negs	r3, r3
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4413      	add	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	4b21      	ldr	r3, [pc, #132]	; (8007460 <vPortFree+0xac>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4013      	ands	r3, r2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <vPortFree+0x44>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60fb      	str	r3, [r7, #12]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <vPortFree+0x62>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60bb      	str	r3, [r7, #8]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	4b11      	ldr	r3, [pc, #68]	; (8007460 <vPortFree+0xac>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4013      	ands	r3, r2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d019      	beq.n	8007458 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d115      	bne.n	8007458 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <vPortFree+0xac>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	43db      	mvns	r3, r3
 8007436:	401a      	ands	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800743c:	f7fe fc34 	bl	8005ca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	4b07      	ldr	r3, [pc, #28]	; (8007464 <vPortFree+0xb0>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4413      	add	r3, r2
 800744a:	4a06      	ldr	r2, [pc, #24]	; (8007464 <vPortFree+0xb0>)
 800744c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800744e:	6938      	ldr	r0, [r7, #16]
 8007450:	f000 f86c 	bl	800752c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007454:	f7fe fc36 	bl	8005cc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20002370 	.word	0x20002370
 8007464:	20002368 	.word	0x20002368

08007468 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800746e:	f241 7370 	movw	r3, #6000	; 0x1770
 8007472:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007474:	4b27      	ldr	r3, [pc, #156]	; (8007514 <prvHeapInit+0xac>)
 8007476:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00c      	beq.n	800749c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3307      	adds	r3, #7
 8007486:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <prvHeapInit+0xac>)
 8007498:	4413      	add	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <prvHeapInit+0xb0>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074a6:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <prvHeapInit+0xb0>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	4413      	add	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074b4:	2208      	movs	r2, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1a9b      	subs	r3, r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0307 	bic.w	r3, r3, #7
 80074c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4a15      	ldr	r2, [pc, #84]	; (800751c <prvHeapInit+0xb4>)
 80074c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074ca:	4b14      	ldr	r3, [pc, #80]	; (800751c <prvHeapInit+0xb4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2200      	movs	r2, #0
 80074d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074d2:	4b12      	ldr	r3, [pc, #72]	; (800751c <prvHeapInit+0xb4>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <prvHeapInit+0xb4>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <prvHeapInit+0xb8>)
 80074f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4a09      	ldr	r2, [pc, #36]	; (8007524 <prvHeapInit+0xbc>)
 80074fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <prvHeapInit+0xc0>)
 8007502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007506:	601a      	str	r2, [r3, #0]
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000bec 	.word	0x20000bec
 8007518:	2000235c 	.word	0x2000235c
 800751c:	20002364 	.word	0x20002364
 8007520:	2000236c 	.word	0x2000236c
 8007524:	20002368 	.word	0x20002368
 8007528:	20002370 	.word	0x20002370

0800752c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007534:	4b27      	ldr	r3, [pc, #156]	; (80075d4 <prvInsertBlockIntoFreeList+0xa8>)
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e002      	b.n	8007540 <prvInsertBlockIntoFreeList+0x14>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d8f7      	bhi.n	800753a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4413      	add	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	d108      	bne.n	800756e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	441a      	add	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	441a      	add	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d118      	bne.n	80075b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <prvInsertBlockIntoFreeList+0xac>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d00d      	beq.n	80075aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	441a      	add	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	e008      	b.n	80075bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <prvInsertBlockIntoFreeList+0xac>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e003      	b.n	80075bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d002      	beq.n	80075ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr
 80075d4:	2000235c 	.word	0x2000235c
 80075d8:	20002364 	.word	0x20002364

080075dc <memset>:
 80075dc:	4603      	mov	r3, r0
 80075de:	4402      	add	r2, r0
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d100      	bne.n	80075e6 <memset+0xa>
 80075e4:	4770      	bx	lr
 80075e6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ea:	e7f9      	b.n	80075e0 <memset+0x4>

080075ec <__libc_init_array>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	2600      	movs	r6, #0
 80075f0:	4d0c      	ldr	r5, [pc, #48]	; (8007624 <__libc_init_array+0x38>)
 80075f2:	4c0d      	ldr	r4, [pc, #52]	; (8007628 <__libc_init_array+0x3c>)
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	d109      	bne.n	8007610 <__libc_init_array+0x24>
 80075fc:	f000 f828 	bl	8007650 <_init>
 8007600:	2600      	movs	r6, #0
 8007602:	4d0a      	ldr	r5, [pc, #40]	; (800762c <__libc_init_array+0x40>)
 8007604:	4c0a      	ldr	r4, [pc, #40]	; (8007630 <__libc_init_array+0x44>)
 8007606:	1b64      	subs	r4, r4, r5
 8007608:	10a4      	asrs	r4, r4, #2
 800760a:	42a6      	cmp	r6, r4
 800760c:	d105      	bne.n	800761a <__libc_init_array+0x2e>
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	f855 3b04 	ldr.w	r3, [r5], #4
 8007614:	4798      	blx	r3
 8007616:	3601      	adds	r6, #1
 8007618:	e7ee      	b.n	80075f8 <__libc_init_array+0xc>
 800761a:	f855 3b04 	ldr.w	r3, [r5], #4
 800761e:	4798      	blx	r3
 8007620:	3601      	adds	r6, #1
 8007622:	e7f2      	b.n	800760a <__libc_init_array+0x1e>
 8007624:	08007774 	.word	0x08007774
 8007628:	08007774 	.word	0x08007774
 800762c:	08007774 	.word	0x08007774
 8007630:	08007778 	.word	0x08007778

08007634 <memcpy>:
 8007634:	440a      	add	r2, r1
 8007636:	4291      	cmp	r1, r2
 8007638:	f100 33ff 	add.w	r3, r0, #4294967295
 800763c:	d100      	bne.n	8007640 <memcpy+0xc>
 800763e:	4770      	bx	lr
 8007640:	b510      	push	{r4, lr}
 8007642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007646:	4291      	cmp	r1, r2
 8007648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800764c:	d1f9      	bne.n	8007642 <memcpy+0xe>
 800764e:	bd10      	pop	{r4, pc}

08007650 <_init>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	bf00      	nop
 8007654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007656:	bc08      	pop	{r3}
 8007658:	469e      	mov	lr, r3
 800765a:	4770      	bx	lr

0800765c <_fini>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	bf00      	nop
 8007660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007662:	bc08      	pop	{r3}
 8007664:	469e      	mov	lr, r3
 8007666:	4770      	bx	lr

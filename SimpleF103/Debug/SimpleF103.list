
SimpleF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007764  08007764  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007764  08007764  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007764  08007764  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800776c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002364  20000010  0800777c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002374  0800777c  00022374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016775  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003801  00000000  00000000  000367f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b7  00000000  00000000  0003b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001941b  00000000  00000000  0003c627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017892  00000000  00000000  00055a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094ea6  00000000  00000000  0006d2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005994  00000000  00000000  0010217c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00107b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08007640 	.word	0x08007640

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08007640 	.word	0x08007640

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000090 	.word	0x20000090

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	; (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000290 	.word	0x20000290
 80001b0:	200002f4 	.word	0x200002f4

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b5b0      	push	{r4, r5, r7, lr}
 80001b6:	b098      	sub	sp, #96	; 0x60
 80001b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80001be:	e007      	b.n	80001d0 <main+0x1c>
		exm.execution_memory[i] = 0;
 80001c0:	4a65      	ldr	r2, [pc, #404]	; (8000358 <main+0x1a4>)
 80001c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001c4:	4413      	add	r3, r2
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 80001ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001cc:	3301      	adds	r3, #1
 80001ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80001d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001d2:	2b76      	cmp	r3, #118	; 0x76
 80001d4:	d9f4      	bls.n	80001c0 <main+0xc>
	}
	exm.memory_pointer = exm.execution_memory;
 80001d6:	4b60      	ldr	r3, [pc, #384]	; (8000358 <main+0x1a4>)
 80001d8:	4a5f      	ldr	r2, [pc, #380]	; (8000358 <main+0x1a4>)
 80001da:	679a      	str	r2, [r3, #120]	; 0x78
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 80001dc:	2300      	movs	r3, #0
 80001de:	65bb      	str	r3, [r7, #88]	; 0x58
 80001e0:	e008      	b.n	80001f4 <main+0x40>
		exm.sizes_of_instruction[i] = 1;
 80001e2:	4a5d      	ldr	r2, [pc, #372]	; (8000358 <main+0x1a4>)
 80001e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80001e6:	4413      	add	r3, r2
 80001e8:	337c      	adds	r3, #124	; 0x7c
 80001ea:	2201      	movs	r2, #1
 80001ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 80001ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80001f0:	3301      	adds	r3, #1
 80001f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80001f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80001f6:	2b3b      	cmp	r3, #59	; 0x3b
 80001f8:	d9f3      	bls.n	80001e2 <main+0x2e>
	}
	exm.sizes_pointer = exm.sizes_of_instruction;
 80001fa:	4b57      	ldr	r3, [pc, #348]	; (8000358 <main+0x1a4>)
 80001fc:	4a57      	ldr	r2, [pc, #348]	; (800035c <main+0x1a8>)
 80001fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000202:	2300      	movs	r3, #0
 8000204:	657b      	str	r3, [r7, #84]	; 0x54
 8000206:	e008      	b.n	800021a <main+0x66>
		exm.current_instruction[i] = 0;
 8000208:	4a53      	ldr	r2, [pc, #332]	; (8000358 <main+0x1a4>)
 800020a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800020c:	4413      	add	r3, r2
 800020e:	33bc      	adds	r3, #188	; 0xbc
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000216:	3301      	adds	r3, #1
 8000218:	657b      	str	r3, [r7, #84]	; 0x54
 800021a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800021c:	2b03      	cmp	r3, #3
 800021e:	d9f3      	bls.n	8000208 <main+0x54>
	}
	exm.start_speed_value = 0;
 8000220:	4b4d      	ldr	r3, [pc, #308]	; (8000358 <main+0x1a4>)
 8000222:	2200      	movs	r2, #0
 8000224:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 8000228:	4b4b      	ldr	r3, [pc, #300]	; (8000358 <main+0x1a4>)
 800022a:	2200      	movs	r2, #0
 800022c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 8000230:	4b49      	ldr	r3, [pc, #292]	; (8000358 <main+0x1a4>)
 8000232:	2200      	movs	r2, #0
 8000234:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 8000238:	4b47      	ldr	r3, [pc, #284]	; (8000358 <main+0x1a4>)
 800023a:	2200      	movs	r2, #0
 800023c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	exm.step_counter_second_part = 0;
 8000240:	4b45      	ldr	r3, [pc, #276]	; (8000358 <main+0x1a4>)
 8000242:	2200      	movs	r2, #0
 8000244:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	exm.position = 0; // temporary
 8000248:	4b43      	ldr	r3, [pc, #268]	; (8000358 <main+0x1a4>)
 800024a:	2200      	movs	r2, #0
 800024c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f001 fb9e 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f89c 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f000 fa04 	bl	8000664 <MX_GPIO_Init>
  MX_SPI1_Init();
 800025c:	f000 f8d8 	bl	8000410 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000260:	f000 f90c 	bl	800047c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000264:	f000 f95a 	bl	800051c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000268:	f000 f9d0 	bl	800060c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 800026c:	4b3c      	ldr	r3, [pc, #240]	; (8000360 <main+0x1ac>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a3b      	ldr	r2, [pc, #236]	; (8000360 <main+0x1ac>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 8000278:	4b39      	ldr	r3, [pc, #228]	; (8000360 <main+0x1ac>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a38      	ldr	r2, [pc, #224]	; (8000360 <main+0x1ac>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 8000284:	4b36      	ldr	r3, [pc, #216]	; (8000360 <main+0x1ac>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a35      	ldr	r2, [pc, #212]	; (8000360 <main+0x1ac>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 8000290:	4b33      	ldr	r3, [pc, #204]	; (8000360 <main+0x1ac>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a32      	ldr	r2, [pc, #200]	; (8000360 <main+0x1ac>)
 8000296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029a:	60d3      	str	r3, [r2, #12]

  GPIOB->ODR &= ~GPIO_ODR_ODR10; //Enable stepper driver
 800029c:	4b31      	ldr	r3, [pc, #196]	; (8000364 <main+0x1b0>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a30      	ldr	r2, [pc, #192]	; (8000364 <main+0x1b0>)
 80002a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002a6:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start_IT(&htim3);
 80002a8:	482f      	ldr	r0, [pc, #188]	; (8000368 <main+0x1b4>)
 80002aa:	f002 fbfd 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 80002ae:	f004 fb05 	bl	80048bc <xEventGroupCreate>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a2d      	ldr	r2, [pc, #180]	; (800036c <main+0x1b8>)
 80002b6:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 80002b8:	4b2c      	ldr	r3, [pc, #176]	; (800036c <main+0x1b8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2140      	movs	r1, #64	; 0x40
 80002be:	4618      	mov	r0, r3
 80002c0:	f004 fc3f 	bl	8004b42 <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(16, 1);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	2010      	movs	r0, #16
 80002ca:	f004 fe82 	bl	8004fd2 <xQueueGenericCreate>
 80002ce:	4603      	mov	r3, r0
 80002d0:	4a27      	ldr	r2, [pc, #156]	; (8000370 <main+0x1bc>)
 80002d2:	6013      	str	r3, [r2, #0]
  programing_queue = xQueueCreate(64, 1);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2101      	movs	r1, #1
 80002d8:	2040      	movs	r0, #64	; 0x40
 80002da:	f004 fe7a 	bl	8004fd2 <xQueueGenericCreate>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a24      	ldr	r2, [pc, #144]	; (8000374 <main+0x1c0>)
 80002e2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 350);
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0x1c4>)
 80002e6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002ea:	461d      	mov	r5, r3
 80002ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 80002f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 fa90 	bl	8004824 <osThreadCreate>
 8000304:	4603      	mov	r3, r0
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <main+0x1c8>)
 8000308:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 450);
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <main+0x1cc>)
 800030c:	f107 041c 	add.w	r4, r7, #28
 8000310:	461d      	mov	r5, r3
 8000312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800031a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 800031e:	f107 031c 	add.w	r3, r7, #28
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f004 fa7d 	bl	8004824 <osThreadCreate>
 800032a:	4603      	mov	r3, r0
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <main+0x1d0>)
 800032e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 400);
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0x1d4>)
 8000332:	463c      	mov	r4, r7
 8000334:	461d      	mov	r5, r3
 8000336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800033a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 8000342:	463b      	mov	r3, r7
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f004 fa6c 	bl	8004824 <osThreadCreate>
 800034c:	4603      	mov	r3, r0
 800034e:	4a0f      	ldr	r2, [pc, #60]	; (800038c <main+0x1d8>)
 8000350:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000352:	f004 fa60 	bl	8004816 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000356:	e7fe      	b.n	8000356 <main+0x1a2>
 8000358:	20000838 	.word	0x20000838
 800035c:	200008b4 	.word	0x200008b4
 8000360:	40013800 	.word	0x40013800
 8000364:	40010c00 	.word	0x40010c00
 8000368:	2000074c 	.word	0x2000074c
 800036c:	20000904 	.word	0x20000904
 8000370:	20000830 	.word	0x20000830
 8000374:	20000834 	.word	0x20000834
 8000378:	08007668 	.word	0x08007668
 800037c:	20000824 	.word	0x20000824
 8000380:	08007690 	.word	0x08007690
 8000384:	20000828 	.word	0x20000828
 8000388:	080076c0 	.word	0x080076c0
 800038c:	2000082c 	.word	0x2000082c

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	; 0x40
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f007 f914 	bl	80075cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ba:	2310      	movs	r3, #16
 80003bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003c2:	2300      	movs	r3, #0
 80003c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fe55 	bl	8002080 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003dc:	f001 f892 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2302      	movs	r3, #2
 80003e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 f8c3 	bl	8002584 <HAL_RCC_ClockConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000404:	f001 f87e 	bl	8001504 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3740      	adds	r7, #64	; 0x40
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_SPI1_Init+0x64>)
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <MX_SPI1_Init+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_SPI1_Init+0x64>)
 800041c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_SPI1_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_SPI1_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_SPI1_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_SPI1_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_SPI1_Init+0x64>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_SPI1_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <MX_SPI1_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_SPI1_Init+0x64>)
 800045c:	220a      	movs	r2, #10
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_SPI1_Init+0x64>)
 8000462:	f002 fa4d 	bl	8002900 <HAL_SPI_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800046c:	f001 f84a 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200006f4 	.word	0x200006f4
 8000478:	40013000 	.word	0x40013000

0800047c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_TIM3_Init+0x98>)
 800049c:	4a1e      	ldr	r2, [pc, #120]	; (8000518 <MX_TIM3_Init+0x9c>)
 800049e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <MX_TIM3_Init+0x98>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_TIM3_Init+0x98>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <MX_TIM3_Init+0x98>)
 80004ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <MX_TIM3_Init+0x98>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004ba:	4b16      	ldr	r3, [pc, #88]	; (8000514 <MX_TIM3_Init+0x98>)
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <MX_TIM3_Init+0x98>)
 80004c2:	f002 faa1 	bl	8002a08 <HAL_TIM_Base_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80004cc:	f001 f81a 	bl	8001504 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80004d0:	2307      	movs	r3, #7
 80004d2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80004d4:	2330      	movs	r3, #48	; 0x30
 80004d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80004d8:	f107 030c 	add.w	r3, r7, #12
 80004dc:	4619      	mov	r1, r3
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <MX_TIM3_Init+0x98>)
 80004e0:	f002 ff51 	bl	8003386 <HAL_TIM_SlaveConfigSynchro>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80004ea:	f001 f80b 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_TIM3_Init+0x98>)
 80004fc:	f003 fae0 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000506:	f000 fffd 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000074c 	.word	0x2000074c
 8000518:	40000400 	.word	0x40000400

0800051c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08e      	sub	sp, #56	; 0x38
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000530:	f107 0320 	add.w	r3, r7, #32
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
 8000548:	615a      	str	r2, [r3, #20]
 800054a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800054c:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <MX_TIM4_Init+0xe8>)
 800054e:	4a2e      	ldr	r2, [pc, #184]	; (8000608 <MX_TIM4_Init+0xec>)
 8000550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000554:	220f      	movs	r2, #15
 8000556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <MX_TIM4_Init+0xe8>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000560:	f242 7210 	movw	r2, #10000	; 0x2710
 8000564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <MX_TIM4_Init+0xe8>)
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000572:	4824      	ldr	r0, [pc, #144]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000574:	f002 fa48 	bl	8002a08 <HAL_TIM_Base_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800057e:	f000 ffc1 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058c:	4619      	mov	r1, r3
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <MX_TIM4_Init+0xe8>)
 8000590:	f002 fe32 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800059a:	f000 ffb3 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800059e:	4819      	ldr	r0, [pc, #100]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005a0:	f002 fb02 	bl	8002ba8 <HAL_TIM_PWM_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80005aa:	f000 ffab 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005ae:	2320      	movs	r3, #32
 80005b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4619      	mov	r1, r3
 80005bc:	4811      	ldr	r0, [pc, #68]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005be:	f003 fa7f 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80005c8:	f000 ff9c 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005cc:	2360      	movs	r3, #96	; 0x60
 80005ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80005d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80005d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005e6:	f002 fd45 	bl	8003074 <HAL_TIM_PWM_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80005f0:	f000 ff88 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <MX_TIM4_Init+0xe8>)
 80005f6:	f001 f84f 	bl	8001698 <HAL_TIM_MspPostInit>

}
 80005fa:	bf00      	nop
 80005fc:	3738      	adds	r7, #56	; 0x38
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000794 	.word	0x20000794
 8000608:	40000800 	.word	0x40000800

0800060c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_USART1_UART_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800061c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800062a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART1_UART_Init+0x50>)
 800062e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART1_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART1_UART_Init+0x50>)
 8000648:	f003 faaa 	bl	8003ba0 <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000652:	f000 ff57 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200007dc 	.word	0x200007dc
 8000660:	40013800 	.word	0x40013800

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b58      	ldr	r3, [pc, #352]	; (80007dc <MX_GPIO_Init+0x178>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a57      	ldr	r2, [pc, #348]	; (80007dc <MX_GPIO_Init+0x178>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b55      	ldr	r3, [pc, #340]	; (80007dc <MX_GPIO_Init+0x178>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	4b52      	ldr	r3, [pc, #328]	; (80007dc <MX_GPIO_Init+0x178>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a51      	ldr	r2, [pc, #324]	; (80007dc <MX_GPIO_Init+0x178>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b4f      	ldr	r3, [pc, #316]	; (80007dc <MX_GPIO_Init+0x178>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0308 	and.w	r3, r3, #8
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOV_Pin|RAMP_Pin|RDY_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	211a      	movs	r1, #26
 80006ac:	484c      	ldr	r0, [pc, #304]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80006ae:	f001 fcb7 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|E_MUX_Pin|ENA_stepper_Pin|S0_MUX_Pin
 80006b2:	2200      	movs	r2, #0
 80006b4:	f24f 6106 	movw	r1, #62982	; 0xf606
 80006b8:	484a      	ldr	r0, [pc, #296]	; (80007e4 <MX_GPIO_Init+0x180>)
 80006ba:	f001 fcb1 	bl	8002020 <HAL_GPIO_WritePin>
                          |S1_MUX_Pin|S2_MUX_Pin|S3_MUX_Pin|DIR_stepper_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HOME_Pin MOVE_EN_Pin */
  GPIO_InitStruct.Pin = HOME_Pin|MOVE_EN_Pin;
 80006be:	2305      	movs	r3, #5
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c2:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <MX_GPIO_Init+0x184>)
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4619      	mov	r1, r3
 80006d0:	4843      	ldr	r0, [pc, #268]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80006d2:	f001 fb21 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOV_Pin */
  GPIO_InitStruct.Pin = MOV_Pin;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOV_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4619      	mov	r1, r3
 80006ec:	483c      	ldr	r0, [pc, #240]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80006ee:	f001 fb13 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RAMP_Pin RDY_Pin */
  GPIO_InitStruct.Pin = RAMP_Pin|RDY_Pin;
 80006f2:	2318      	movs	r3, #24
 80006f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2302      	movs	r3, #2
 8000700:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	4835      	ldr	r0, [pc, #212]	; (80007e0 <MX_GPIO_Init+0x17c>)
 800070a:	f001 fb05 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : REC_Pin */
  GPIO_InitStruct.Pin = REC_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000716:	2301      	movs	r3, #1
 8000718:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(REC_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4619      	mov	r1, r3
 8000720:	4830      	ldr	r0, [pc, #192]	; (80007e4 <MX_GPIO_Init+0x180>)
 8000722:	f001 faf9 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000726:	2302      	movs	r3, #2
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	4829      	ldr	r0, [pc, #164]	; (80007e4 <MX_GPIO_Init+0x180>)
 800073e:	f001 faeb 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_MUX_Pin */
  GPIO_InitStruct.Pin = E_MUX_Pin;
 8000742:	2304      	movs	r3, #4
 8000744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(E_MUX_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	4822      	ldr	r0, [pc, #136]	; (80007e4 <MX_GPIO_Init+0x180>)
 800075a:	f001 fadd 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA_stepper_Pin DIR_stepper_Pin */
  GPIO_InitStruct.Pin = ENA_stepper_Pin|DIR_stepper_Pin;
 800075e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	4619      	mov	r1, r3
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <MX_GPIO_Init+0x180>)
 8000778:	f001 face 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_MUX_Pin S1_MUX_Pin S2_MUX_Pin S3_MUX_Pin */
  GPIO_InitStruct.Pin = S0_MUX_Pin|S1_MUX_Pin|S2_MUX_Pin|S3_MUX_Pin;
 800077c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4619      	mov	r1, r3
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <MX_GPIO_Init+0x180>)
 8000796:	f001 fabf 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : COM_IO_MUX_Pin */
  GPIO_InitStruct.Pin = COM_IO_MUX_Pin;
 800079a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COM_IO_MUX_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	4619      	mov	r1, r3
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_GPIO_Init+0x17c>)
 80007b0:	f001 fab2 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2105      	movs	r1, #5
 80007b8:	2006      	movs	r0, #6
 80007ba:	f001 f9d0 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007be:	2006      	movs	r0, #6
 80007c0:	f001 f9e9 	bl	8001b96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2105      	movs	r1, #5
 80007c8:	2008      	movs	r0, #8
 80007ca:	f001 f9c8 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007ce:	2008      	movs	r0, #8
 80007d0:	f001 f9e1 	bl	8001b96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00
 80007e8:	10110000 	.word	0x10110000

080007ec <uart1_rx_callback>:

/* USER CODE BEGIN 4 */
void uart1_rx_callback(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdFALSE);
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <uart1_rx_callback+0x18>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	2300      	movs	r3, #0
 80007f6:	2200      	movs	r2, #0
 80007f8:	4903      	ldr	r1, [pc, #12]	; (8000808 <uart1_rx_callback+0x1c>)
 80007fa:	f004 fd45 	bl	8005288 <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 80007fe:	bf00      	nop

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000830 	.word	0x20000830
 8000808:	40013804 	.word	0x40013804

0800080c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) // HOME position
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d109      	bne.n	8000830 <HAL_GPIO_EXTI_Callback+0x24>
	{
		HAL_UART_Transmit(&huart1, "HOME", 5, 100);
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2205      	movs	r2, #5
 8000820:	4905      	ldr	r1, [pc, #20]	; (8000838 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <HAL_GPIO_EXTI_Callback+0x30>)
 8000824:	f003 fa0c 	bl	8003c40 <HAL_UART_Transmit>
		exm.position = 0;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_GPIO_EXTI_Callback+0x34>)
 800082a:	2200      	movs	r2, #0
 800082c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	}
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	080076dc 	.word	0x080076dc
 800083c:	200007dc 	.word	0x200007dc
 8000840:	20000838 	.word	0x20000838

08000844 <enter_programing>:

void enter_programing()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x40);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <enter_programing+0x34>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f91b 	bl	8004a8c <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <enter_programing+0x38>)
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <enter_programing+0x38>)
 800085a:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <enter_programing+0x38>)
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <enter_programing+0x3c>)
 8000860:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	erase_exm();
 8000864:	f000 f8de 	bl	8000a24 <erase_exm>
	xEventGroupSetBits(EventGroup, 0x80);
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <enter_programing+0x34>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	4618      	mov	r0, r3
 8000870:	f004 f967 	bl	8004b42 <xEventGroupSetBits>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000904 	.word	0x20000904
 800087c:	20000838 	.word	0x20000838
 8000880:	200008b4 	.word	0x200008b4

08000884 <exit_programing>:

void exit_programing()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x80);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <exit_programing+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000890:	4618      	mov	r0, r3
 8000892:	f004 f8fb 	bl	8004a8c <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <exit_programing+0x54>)
 8000898:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <exit_programing+0x54>)
 800089a:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <exit_programing+0x54>)
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <exit_programing+0x58>)
 80008a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	exm.start_speed_value = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <exit_programing+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <exit_programing+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <exit_programing+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <exit_programing+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

	xEventGroupSetBits(EventGroup, 0x40);
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <exit_programing+0x50>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 f939 	bl	8004b42 <xEventGroupSetBits>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000904 	.word	0x20000904
 80008d8:	20000838 	.word	0x20000838
 80008dc:	200008b4 	.word	0x200008b4

080008e0 <write_to_exm>:

void write_to_exm(uint8_t* start_of_data, uint8_t size_of_data)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size_of_data; i++){
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	e017      	b.n	8000922 <write_to_exm+0x42>
//		exm.execution_memory[exm.memory_pointer] = start_of_data[i];
		*exm.memory_pointer = start_of_data[i];
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	441a      	add	r2, r3
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <write_to_exm+0x80>)
 80008fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <write_to_exm+0x80>)
 8000902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000904:	3301      	adds	r3, #1
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <write_to_exm+0x80>)
 8000908:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <write_to_exm+0x80>)
 800090c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <write_to_exm+0x84>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d303      	bcc.n	800091c <write_to_exm+0x3c>
			exm.memory_pointer = exm.execution_memory + 118;
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <write_to_exm+0x88>)
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <write_to_exm+0x80>)
 8000918:	679a      	str	r2, [r3, #120]	; 0x78
			return;
 800091a:	e01d      	b.n	8000958 <write_to_exm+0x78>
	for(int i = 0; i < size_of_data; i++){
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	429a      	cmp	r2, r3
 8000928:	dbe3      	blt.n	80008f2 <write_to_exm+0x12>
		}
	}
//	exm.sizes_of_instruction[exm.sizes_pointer] = size_of_data;
	*exm.sizes_pointer = size_of_data;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <write_to_exm+0x80>)
 800092c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000930:	78fa      	ldrb	r2, [r7, #3]
 8000932:	701a      	strb	r2, [r3, #0]
	exm.sizes_pointer++;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <write_to_exm+0x80>)
 8000936:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800093a:	3301      	adds	r3, #1
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <write_to_exm+0x80>)
 800093e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <write_to_exm+0x80>)
 8000944:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000948:	4a08      	ldr	r2, [pc, #32]	; (800096c <write_to_exm+0x8c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d304      	bcc.n	8000958 <write_to_exm+0x78>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <write_to_exm+0x90>)
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <write_to_exm+0x80>)
 8000952:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return;
 8000956:	bf00      	nop
	}
}
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000838 	.word	0x20000838
 8000964:	200008af 	.word	0x200008af
 8000968:	200008ae 	.word	0x200008ae
 800096c:	200008f0 	.word	0x200008f0
 8000970:	200008ef 	.word	0x200008ef

08000974 <read_from_exm>:

void read_from_exm()
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e008      	b.n	8000992 <read_from_exm+0x1e>
		exm.current_instruction[i] = 0;
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <read_from_exm+0x9c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	33bc      	adds	r3, #188	; 0xbc
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3301      	adds	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b03      	cmp	r3, #3
 8000996:	ddf3      	ble.n	8000980 <read_from_exm+0xc>
	}
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000998:	2300      	movs	r3, #0
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	e019      	b.n	80009d2 <read_from_exm+0x5e>
		exm.current_instruction[i] = *exm.memory_pointer;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <read_from_exm+0x9c>)
 80009a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009a2:	7819      	ldrb	r1, [r3, #0]
 80009a4:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <read_from_exm+0x9c>)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	33bc      	adds	r3, #188	; 0xbc
 80009ac:	460a      	mov	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <read_from_exm+0x9c>)
 80009b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <read_from_exm+0x9c>)
 80009b8:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <read_from_exm+0x9c>)
 80009bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <read_from_exm+0xa0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d303      	bcc.n	80009cc <read_from_exm+0x58>
			exm.memory_pointer = exm.execution_memory + 118;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <read_from_exm+0xa4>)
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <read_from_exm+0x9c>)
 80009c8:	679a      	str	r2, [r3, #120]	; 0x78
			return ;
 80009ca:	e01d      	b.n	8000a08 <read_from_exm+0x94>
	for(int i = 0; i < *exm.sizes_pointer; i++){
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <read_from_exm+0x9c>)
 80009d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	4293      	cmp	r3, r2
 80009e0:	dbdd      	blt.n	800099e <read_from_exm+0x2a>
		}
	}
	exm.sizes_pointer++;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <read_from_exm+0x9c>)
 80009e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <read_from_exm+0x9c>)
 80009ec:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <read_from_exm+0x9c>)
 80009f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <read_from_exm+0xa8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d304      	bcc.n	8000a06 <read_from_exm+0x92>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 80009fc:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <read_from_exm+0xac>)
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <read_from_exm+0x9c>)
 8000a00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return ;
 8000a04:	e000      	b.n	8000a08 <read_from_exm+0x94>
	}
	return ;
 8000a06:	bf00      	nop
}
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000838 	.word	0x20000838
 8000a14:	200008af 	.word	0x200008af
 8000a18:	200008ae 	.word	0x200008ae
 8000a1c:	200008f0 	.word	0x200008f0
 8000a20:	200008ef 	.word	0x200008ef

08000a24 <erase_exm>:

void erase_exm()
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e007      	b.n	8000a40 <erase_exm+0x1c>
		exm.execution_memory[i] = 0;
 8000a30:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <erase_exm+0x4c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b76      	cmp	r3, #118	; 0x76
 8000a44:	d9f4      	bls.n	8000a30 <erase_exm+0xc>
	}
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	e008      	b.n	8000a5e <erase_exm+0x3a>
		exm.sizes_of_instruction[i] = 1;
 8000a4c:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <erase_exm+0x4c>)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	337c      	adds	r3, #124	; 0x7c
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	2b3b      	cmp	r3, #59	; 0x3b
 8000a62:	d9f3      	bls.n	8000a4c <erase_exm+0x28>
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	20000838 	.word	0x20000838

08000a74 <start_motor>:

void start_motor()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	if(exm.start_speed_value == 0) return;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <start_motor+0x48>)
 8000a7c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d017      	beq.n	8000ab4 <start_motor+0x40>
	HAL_TIM_Base_Start_IT(&htim4);
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <start_motor+0x4c>)
 8000a86:	f002 f80f 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
	uint16_t temp = (uint16_t)(CK_CNT / exm.start_speed_value);
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <start_motor+0x48>)
 8000a8c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <start_motor+0x50>)
 8000a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a98:	80fb      	strh	r3, [r7, #6]
	TIM4->ARR = temp;
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <start_motor+0x54>)
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CCR1 = temp/2;
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	085b      	lsrs	r3, r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <start_motor+0x54>)
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <start_motor+0x4c>)
 8000aae:	f002 f8d3 	bl	8002c58 <HAL_TIM_PWM_Start>
 8000ab2:	e000      	b.n	8000ab6 <start_motor+0x42>
	if(exm.start_speed_value == 0) return;
 8000ab4:	bf00      	nop
}
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000838 	.word	0x20000838
 8000ac0:	20000794 	.word	0x20000794
 8000ac4:	000f4240 	.word	0x000f4240
 8000ac8:	40000800 	.word	0x40000800

08000acc <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8000ad4:	4b66      	ldr	r3, [pc, #408]	; (8000c70 <programing_mode+0x1a4>)
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	f003 ff04 	bl	80048f0 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8000ae8:	2364      	movs	r3, #100	; 0x64
 8000aea:	2211      	movs	r2, #17
 8000aec:	4961      	ldr	r1, [pc, #388]	; (8000c74 <programing_mode+0x1a8>)
 8000aee:	4862      	ldr	r0, [pc, #392]	; (8000c78 <programing_mode+0x1ac>)
 8000af0:	f003 f8a6 	bl	8003c40 <HAL_UART_Transmit>
	  //vTaskDelay(200);
	  char instruction_for_programing = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	77fb      	strb	r3, [r7, #31]
	  xQueueReceive(programing_queue, &instruction_for_programing, portMAX_DELAY);
 8000af8:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <programing_mode+0x1b0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f107 011f 	add.w	r1, r7, #31
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fc57 	bl	80053b8 <xQueueReceive>
	  switch (instruction_for_programing) {
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	3b47      	subs	r3, #71	; 0x47
 8000b0e:	2b0d      	cmp	r3, #13
 8000b10:	f200 80ac 	bhi.w	8000c6c <programing_mode+0x1a0>
 8000b14:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <programing_mode+0x50>)
 8000b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1a:	bf00      	nop
 8000b1c:	08000bdf 	.word	0x08000bdf
 8000b20:	08000c6d 	.word	0x08000c6d
 8000b24:	08000c6d 	.word	0x08000c6d
 8000b28:	08000c6d 	.word	0x08000c6d
 8000b2c:	08000c6d 	.word	0x08000c6d
 8000b30:	08000c6d 	.word	0x08000c6d
 8000b34:	08000c6d 	.word	0x08000c6d
 8000b38:	08000c6d 	.word	0x08000c6d
 8000b3c:	08000c6d 	.word	0x08000c6d
 8000b40:	08000c6d 	.word	0x08000c6d
 8000b44:	08000c6d 	.word	0x08000c6d
 8000b48:	08000bb1 	.word	0x08000bb1
 8000b4c:	08000b55 	.word	0x08000b55
 8000b50:	08000b83 	.word	0x08000b83
		case 'S':
			uint8_t data1[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
 8000b54:	2353      	movs	r3, #83	; 0x53
 8000b56:	763b      	strb	r3, [r7, #24]
 8000b58:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <programing_mode+0x1b4>)
 8000b5a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	767b      	strb	r3, [r7, #25]
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <programing_mode+0x1b4>)
 8000b64:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	76bb      	strb	r3, [r7, #26]
 8000b70:	2300      	movs	r3, #0
 8000b72:	76fb      	strb	r3, [r7, #27]
			write_to_exm(data1, sizeof(data1));
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff feb0 	bl	80008e0 <write_to_exm>
			break;
 8000b80:	e075      	b.n	8000c6e <programing_mode+0x1a2>
		case 'T':
			uint8_t data2[4] = {'T', (uint8_t)(exm.top_speed_value), (uint8_t)((exm.top_speed_value>>8)), 0};
 8000b82:	2354      	movs	r3, #84	; 0x54
 8000b84:	753b      	strb	r3, [r7, #20]
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <programing_mode+0x1b4>)
 8000b88:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	757b      	strb	r3, [r7, #21]
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <programing_mode+0x1b4>)
 8000b92:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	75bb      	strb	r3, [r7, #22]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	75fb      	strb	r3, [r7, #23]
			write_to_exm(data2, sizeof(data2));
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe99 	bl	80008e0 <write_to_exm>
			break;
 8000bae:	e05e      	b.n	8000c6e <programing_mode+0x1a2>
		case 'R':
			uint8_t data3[4] = {'R', (uint8_t)(exm.ramp_value), (uint8_t)((exm.ramp_value>>8)), 0};
 8000bb0:	2352      	movs	r3, #82	; 0x52
 8000bb2:	743b      	strb	r3, [r7, #16]
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <programing_mode+0x1b4>)
 8000bb6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	747b      	strb	r3, [r7, #17]
 8000bbe:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <programing_mode+0x1b4>)
 8000bc0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	74bb      	strb	r3, [r7, #18]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	74fb      	strb	r3, [r7, #19]
			write_to_exm(data3, sizeof(data3));
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe82 	bl	80008e0 <write_to_exm>
			break;
 8000bdc:	e047      	b.n	8000c6e <programing_mode+0x1a2>
		case 'G':
			instruction_for_programing = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	77fb      	strb	r3, [r7, #31]
			  xQueueReceive(programing_queue, &instruction_for_programing, 5);
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <programing_mode+0x1b0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f107 011f 	add.w	r1, r7, #31
 8000bea:	2205      	movs	r2, #5
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 fbe3 	bl	80053b8 <xQueueReceive>
			  switch (instruction_for_programing) {
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	2b2b      	cmp	r3, #43	; 0x2b
 8000bf6:	d002      	beq.n	8000bfe <programing_mode+0x132>
 8000bf8:	2b2d      	cmp	r3, #45	; 0x2d
 8000bfa:	d01b      	beq.n	8000c34 <programing_mode+0x168>
			  	  case '-':
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
						write_to_exm(data5, sizeof(data5));
			  		  break;
			  }
			break;
 8000bfc:	e037      	b.n	8000c6e <programing_mode+0x1a2>
						uint8_t data4[4] = {('G'+'+'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8000bfe:	2372      	movs	r3, #114	; 0x72
 8000c00:	733b      	strb	r3, [r7, #12]
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <programing_mode+0x1b4>)
 8000c04:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	737b      	strb	r3, [r7, #13]
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <programing_mode+0x1b4>)
 8000c0e:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c12:	0a1b      	lsrs	r3, r3, #8
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	73bb      	strb	r3, [r7, #14]
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <programing_mode+0x1b4>)
 8000c1c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c20:	141b      	asrs	r3, r3, #16
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	73fb      	strb	r3, [r7, #15]
						write_to_exm(data4, sizeof(data4));
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe57 	bl	80008e0 <write_to_exm>
			  		  break;
 8000c32:	e01a      	b.n	8000c6a <programing_mode+0x19e>
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8000c34:	2374      	movs	r3, #116	; 0x74
 8000c36:	723b      	strb	r3, [r7, #8]
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <programing_mode+0x1b4>)
 8000c3a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	727b      	strb	r3, [r7, #9]
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <programing_mode+0x1b4>)
 8000c44:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	72bb      	strb	r3, [r7, #10]
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <programing_mode+0x1b4>)
 8000c52:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000c56:	141b      	asrs	r3, r3, #16
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	72fb      	strb	r3, [r7, #11]
						write_to_exm(data5, sizeof(data5));
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2104      	movs	r1, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fe3c 	bl	80008e0 <write_to_exm>
			  		  break;
 8000c68:	bf00      	nop
			break;
 8000c6a:	e000      	b.n	8000c6e <programing_mode+0x1a2>
		default:
			break;
 8000c6c:	bf00      	nop
  {
 8000c6e:	e731      	b.n	8000ad4 <programing_mode+0x8>
 8000c70:	20000904 	.word	0x20000904
 8000c74:	080076e4 	.word	0x080076e4
 8000c78:	200007dc 	.word	0x200007dc
 8000c7c:	20000834 	.word	0x20000834
 8000c80:	20000838 	.word	0x20000838

08000c84 <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8000c8c:	4b98      	ldr	r3, [pc, #608]	; (8000ef0 <interpreter+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f107 010b 	add.w	r1, r7, #11
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fb8d 	bl	80053b8 <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000c9e:	f107 010b 	add.w	r1, r7, #11
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4893      	ldr	r0, [pc, #588]	; (8000ef4 <interpreter+0x270>)
 8000ca8:	f002 ffca 	bl	8003c40 <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 8000cac:	7afb      	ldrb	r3, [r7, #11]
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da04      	bge.n	8000cbe <interpreter+0x3a>
		  pData &= ~(1<<7);
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	72fb      	strb	r3, [r7, #11]
	  }
	  __asm__ volatile("NOP");
 8000cbe:	bf00      	nop
	  char temp = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	72bb      	strb	r3, [r7, #10]
	  switch (pData) {
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8218 	beq.w	80010fc <interpreter+0x478>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f2c0 8217 	blt.w	8001100 <interpreter+0x47c>
 8000cd2:	2b54      	cmp	r3, #84	; 0x54
 8000cd4:	f300 8214 	bgt.w	8001100 <interpreter+0x47c>
 8000cd8:	2b45      	cmp	r3, #69	; 0x45
 8000cda:	f2c0 8211 	blt.w	8001100 <interpreter+0x47c>
 8000cde:	3b45      	subs	r3, #69	; 0x45
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	f200 820d 	bhi.w	8001100 <interpreter+0x47c>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <interpreter+0x68>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000d79 	.word	0x08000d79
 8000cf0:	08001101 	.word	0x08001101
 8000cf4:	08000f8b 	.word	0x08000f8b
 8000cf8:	08001101 	.word	0x08001101
 8000cfc:	08001101 	.word	0x08001101
 8000d00:	08001101 	.word	0x08001101
 8000d04:	08001101 	.word	0x08001101
 8000d08:	08001101 	.word	0x08001101
 8000d0c:	08001101 	.word	0x08001101
 8000d10:	08001101 	.word	0x08001101
 8000d14:	08001101 	.word	0x08001101
 8000d18:	08000d2d 	.word	0x08000d2d
 8000d1c:	08001101 	.word	0x08001101
 8000d20:	08000ec5 	.word	0x08000ec5
 8000d24:	08000d7f 	.word	0x08000d7f
 8000d28:	08000e1d 	.word	0x08000e1d
		case 'P':
			xQueueReceive(uart_queue_rx, &pData, 5);
 8000d2c:	4b70      	ldr	r3, [pc, #448]	; (8000ef0 <interpreter+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f107 010b 	add.w	r1, r7, #11
 8000d34:	2205      	movs	r2, #5
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fb3e 	bl	80053b8 <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000d3c:	f107 010b 	add.w	r1, r7, #11
 8000d40:	230a      	movs	r3, #10
 8000d42:	2201      	movs	r2, #1
 8000d44:	486b      	ldr	r0, [pc, #428]	; (8000ef4 <interpreter+0x270>)
 8000d46:	f002 ff7b 	bl	8003c40 <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da04      	bge.n	8000d5c <interpreter+0xd8>
					  pData &= ~(1<<7);
 8000d52:	7afb      	ldrb	r3, [r7, #11]
 8000d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	72fb      	strb	r3, [r7, #11]
				  }
			__asm__ volatile("NOP");
 8000d5c:	bf00      	nop
			switch (pData) {
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	2b6f      	cmp	r3, #111	; 0x6f
 8000d62:	d002      	beq.n	8000d6a <interpreter+0xe6>
 8000d64:	2b78      	cmp	r3, #120	; 0x78
 8000d66:	d003      	beq.n	8000d70 <interpreter+0xec>
					break;
				case 'x':
					exit_programing();
					break;
				default:
					break;
 8000d68:	e005      	b.n	8000d76 <interpreter+0xf2>
					enter_programing();
 8000d6a:	f7ff fd6b 	bl	8000844 <enter_programing>
					break;
 8000d6e:	e002      	b.n	8000d76 <interpreter+0xf2>
					exit_programing();
 8000d70:	f7ff fd88 	bl	8000884 <exit_programing>
					break;
 8000d74:	bf00      	nop
			}
			break;
 8000d76:	e1cc      	b.n	8001112 <interpreter+0x48e>
	    case 'E':
	    	exit_programing();
 8000d78:	f7ff fd84 	bl	8000884 <exit_programing>
	    	break;
 8000d7c:	e1c9      	b.n	8001112 <interpreter+0x48e>
		case 'S':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000d7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <interpreter+0x274>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fe81 	bl	8004a8c <xEventGroupClearBits>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d90:	2b80      	cmp	r3, #128	; 0x80
 8000d92:	f040 81b7 	bne.w	8001104 <interpreter+0x480>
			exm.start_speed_value = 0;
 8000d96:	4b59      	ldr	r3, [pc, #356]	; (8000efc <interpreter+0x278>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			temp = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 5; i++){
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e02d      	b.n	8000e04 <interpreter+0x180>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000da8:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <interpreter+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f107 010a 	add.w	r1, r7, #10
 8000db0:	2205      	movs	r2, #5
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fb00 	bl	80053b8 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 4)) break;
 8000db8:	7abb      	ldrb	r3, [r7, #10]
 8000dba:	2b0d      	cmp	r3, #13
 8000dbc:	d025      	beq.n	8000e0a <interpreter+0x186>
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d022      	beq.n	8000e0a <interpreter+0x186>
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d01f      	beq.n	8000e0a <interpreter+0x186>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000dca:	7abb      	ldrb	r3, [r7, #10]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da04      	bge.n	8000ddc <interpreter+0x158>
					temp &= ~(1<<7);
 8000dd2:	7abb      	ldrb	r3, [r7, #10]
 8000dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	72bb      	strb	r3, [r7, #10]
			    }
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 8000ddc:	4b47      	ldr	r3, [pc, #284]	; (8000efc <interpreter+0x278>)
 8000dde:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000de2:	461a      	mov	r2, r3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	7abb      	ldrb	r3, [r7, #10]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	3b30      	subs	r3, #48	; 0x30
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b40      	ldr	r3, [pc, #256]	; (8000efc <interpreter+0x278>)
 8000dfa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			for(int i = 0; i < 5; i++){
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	ddce      	ble.n	8000da8 <interpreter+0x124>
			}
			xQueueSendToBack(programing_queue, (void*)"S", 100);
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <interpreter+0x27c>)
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2264      	movs	r2, #100	; 0x64
 8000e12:	493c      	ldr	r1, [pc, #240]	; (8000f04 <interpreter+0x280>)
 8000e14:	f004 f93a 	bl	800508c <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000e18:	bf00      	nop
			break;
 8000e1a:	e17a      	b.n	8001112 <interpreter+0x48e>
		case 'T':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <interpreter+0x274>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fe32 	bl	8004a8c <xEventGroupClearBits>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	2b80      	cmp	r3, #128	; 0x80
 8000e30:	f040 816a 	bne.w	8001108 <interpreter+0x484>
			exm.top_speed_value = 0;
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <interpreter+0x278>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			temp = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	e030      	b.n	8000ea8 <interpreter+0x224>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <interpreter+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f107 010a 	add.w	r1, r7, #10
 8000e4e:	2205      	movs	r2, #5
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fab1 	bl	80053b8 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8000e56:	7abb      	ldrb	r3, [r7, #10]
 8000e58:	2b0d      	cmp	r3, #13
 8000e5a:	d02a      	beq.n	8000eb2 <interpreter+0x22e>
 8000e5c:	7abb      	ldrb	r3, [r7, #10]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d027      	beq.n	8000eb2 <interpreter+0x22e>
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d024      	beq.n	8000eb2 <interpreter+0x22e>
				if(i == 3) break;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d020      	beq.n	8000eb0 <interpreter+0x22c>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000e6e:	7abb      	ldrb	r3, [r7, #10]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da04      	bge.n	8000e80 <interpreter+0x1fc>
					temp &= ~(1<<7);
 8000e76:	7abb      	ldrb	r3, [r7, #10]
 8000e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	72bb      	strb	r3, [r7, #10]
			    }
				exm.top_speed_value = (exm.top_speed_value*10) + (temp - 48);
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <interpreter+0x278>)
 8000e82:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000e86:	461a      	mov	r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	7abb      	ldrb	r3, [r7, #10]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3b30      	subs	r3, #48	; 0x30
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <interpreter+0x278>)
 8000e9e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			for(int i = 0; i < 4; i++){
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	ddcb      	ble.n	8000e46 <interpreter+0x1c2>
 8000eae:	e000      	b.n	8000eb2 <interpreter+0x22e>
				if(i == 3) break;
 8000eb0:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"T", 100);
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <interpreter+0x27c>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2264      	movs	r2, #100	; 0x64
 8000eba:	4913      	ldr	r1, [pc, #76]	; (8000f08 <interpreter+0x284>)
 8000ebc:	f004 f8e6 	bl	800508c <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000ec0:	bf00      	nop
			break;
 8000ec2:	e126      	b.n	8001112 <interpreter+0x48e>
		case 'R':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <interpreter+0x274>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fdde 	bl	8004a8c <xEventGroupClearBits>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	2b80      	cmp	r3, #128	; 0x80
 8000ed8:	f040 8118 	bne.w	800110c <interpreter+0x488>
			exm.ramp_value = 0;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <interpreter+0x278>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			temp = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e03f      	b.n	8000f6e <interpreter+0x2ea>
 8000eee:	bf00      	nop
 8000ef0:	20000830 	.word	0x20000830
 8000ef4:	200007dc 	.word	0x200007dc
 8000ef8:	20000904 	.word	0x20000904
 8000efc:	20000838 	.word	0x20000838
 8000f00:	20000834 	.word	0x20000834
 8000f04:	080076f8 	.word	0x080076f8
 8000f08:	080076fc 	.word	0x080076fc
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000f0c:	4b82      	ldr	r3, [pc, #520]	; (8001118 <interpreter+0x494>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f107 010a 	add.w	r1, r7, #10
 8000f14:	2205      	movs	r2, #5
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fa4e 	bl	80053b8 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8000f1c:	7abb      	ldrb	r3, [r7, #10]
 8000f1e:	2b0d      	cmp	r3, #13
 8000f20:	d02a      	beq.n	8000f78 <interpreter+0x2f4>
 8000f22:	7abb      	ldrb	r3, [r7, #10]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d027      	beq.n	8000f78 <interpreter+0x2f4>
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d024      	beq.n	8000f78 <interpreter+0x2f4>
				if(i == 3) break;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d020      	beq.n	8000f76 <interpreter+0x2f2>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000f34:	7abb      	ldrb	r3, [r7, #10]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da04      	bge.n	8000f46 <interpreter+0x2c2>
					temp &= ~(1<<7);
 8000f3c:	7abb      	ldrb	r3, [r7, #10]
 8000f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	72bb      	strb	r3, [r7, #10]
			    }
				exm.ramp_value = (exm.ramp_value*10) + (temp - 48);
 8000f46:	4b75      	ldr	r3, [pc, #468]	; (800111c <interpreter+0x498>)
 8000f48:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	7abb      	ldrb	r3, [r7, #10]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b30      	subs	r3, #48	; 0x30
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b6e      	ldr	r3, [pc, #440]	; (800111c <interpreter+0x498>)
 8000f64:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			for(int i = 0; i < 4; i++){
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	ddcb      	ble.n	8000f0c <interpreter+0x288>
 8000f74:	e000      	b.n	8000f78 <interpreter+0x2f4>
				if(i == 3) break;
 8000f76:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"R", 100);
 8000f78:	4b69      	ldr	r3, [pc, #420]	; (8001120 <interpreter+0x49c>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	4968      	ldr	r1, [pc, #416]	; (8001124 <interpreter+0x4a0>)
 8000f82:	f004 f883 	bl	800508c <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000f86:	bf00      	nop
			break;
 8000f88:	e0c3      	b.n	8001112 <interpreter+0x48e>
		case 'G':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000f8a:	4b67      	ldr	r3, [pc, #412]	; (8001128 <interpreter+0x4a4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fd7b 	bl	8004a8c <xEventGroupClearBits>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9c:	2b80      	cmp	r3, #128	; 0x80
 8000f9e:	f040 80b7 	bne.w	8001110 <interpreter+0x48c>
			xQueueReceive(uart_queue_rx, &pData, 5);
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <interpreter+0x494>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f107 010b 	add.w	r1, r7, #11
 8000faa:	2205      	movs	r2, #5
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fa03 	bl	80053b8 <xQueueReceive>
			  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da04      	bge.n	8000fc4 <interpreter+0x340>
				  pData &= ~(1<<7);
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	72fb      	strb	r3, [r7, #11]
			  }
			__asm__ volatile("NOP");
 8000fc4:	bf00      	nop
			switch (pData) {
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	2b2b      	cmp	r3, #43	; 0x2b
 8000fca:	d002      	beq.n	8000fd2 <interpreter+0x34e>
 8000fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8000fce:	d04a      	beq.n	8001066 <interpreter+0x3e2>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
					xQueueSendToBack(programing_queue, (void*)"-", 100);
					__asm__ volatile("NOP");
					break;
				default:
					break;
 8000fd0:	e093      	b.n	80010fa <interpreter+0x476>
					exm.G_sign_value = 0;
 8000fd2:	4b52      	ldr	r3, [pc, #328]	; (800111c <interpreter+0x498>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e02d      	b.n	8001040 <interpreter+0x3bc>
						xQueueReceive(uart_queue_rx, &temp, 5);
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <interpreter+0x494>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f107 010a 	add.w	r1, r7, #10
 8000fec:	2205      	movs	r2, #5
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 f9e2 	bl	80053b8 <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 8000ff4:	7abb      	ldrb	r3, [r7, #10]
 8000ff6:	2b0d      	cmp	r3, #13
 8000ff8:	d025      	beq.n	8001046 <interpreter+0x3c2>
 8000ffa:	7abb      	ldrb	r3, [r7, #10]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d022      	beq.n	8001046 <interpreter+0x3c2>
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d01f      	beq.n	8001046 <interpreter+0x3c2>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	da04      	bge.n	8001018 <interpreter+0x394>
							temp &= ~(1<<7);
 800100e:	7abb      	ldrb	r3, [r7, #10]
 8001010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 8001018:	4b40      	ldr	r3, [pc, #256]	; (800111c <interpreter+0x498>)
 800101a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800101e:	461a      	mov	r2, r3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	7abb      	ldrb	r3, [r7, #10]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4413      	add	r3, r2
 800102e:	b29b      	uxth	r3, r3
 8001030:	3b30      	subs	r3, #48	; 0x30
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <interpreter+0x498>)
 8001036:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3301      	adds	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b07      	cmp	r3, #7
 8001044:	ddce      	ble.n	8000fe4 <interpreter+0x360>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <interpreter+0x49c>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	2264      	movs	r2, #100	; 0x64
 800104e:	4937      	ldr	r1, [pc, #220]	; (800112c <interpreter+0x4a8>)
 8001050:	f004 f81c 	bl	800508c <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"+", 100);
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <interpreter+0x49c>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	2264      	movs	r2, #100	; 0x64
 800105c:	4934      	ldr	r1, [pc, #208]	; (8001130 <interpreter+0x4ac>)
 800105e:	f004 f815 	bl	800508c <xQueueGenericSend>
					__asm__ volatile("NOP");
 8001062:	bf00      	nop
					break;
 8001064:	e049      	b.n	80010fa <interpreter+0x476>
					exm.G_sign_value = 0;
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <interpreter+0x498>)
 8001068:	2200      	movs	r2, #0
 800106a:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e02d      	b.n	80010d4 <interpreter+0x450>
						xQueueReceive(uart_queue_rx, &temp, 5);
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <interpreter+0x494>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f107 010a 	add.w	r1, r7, #10
 8001080:	2205      	movs	r2, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f004 f998 	bl	80053b8 <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 8001088:	7abb      	ldrb	r3, [r7, #10]
 800108a:	2b0d      	cmp	r3, #13
 800108c:	d025      	beq.n	80010da <interpreter+0x456>
 800108e:	7abb      	ldrb	r3, [r7, #10]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d022      	beq.n	80010da <interpreter+0x456>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b07      	cmp	r3, #7
 8001098:	d01f      	beq.n	80010da <interpreter+0x456>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da04      	bge.n	80010ac <interpreter+0x428>
							temp &= ~(1<<7);
 80010a2:	7abb      	ldrb	r3, [r7, #10]
 80010a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <interpreter+0x498>)
 80010ae:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80010b2:	461a      	mov	r2, r3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	7abb      	ldrb	r3, [r7, #10]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3b30      	subs	r3, #48	; 0x30
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <interpreter+0x498>)
 80010ca:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	ddce      	ble.n	8001078 <interpreter+0x3f4>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <interpreter+0x49c>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	2264      	movs	r2, #100	; 0x64
 80010e2:	4912      	ldr	r1, [pc, #72]	; (800112c <interpreter+0x4a8>)
 80010e4:	f003 ffd2 	bl	800508c <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"-", 100);
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <interpreter+0x49c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <interpreter+0x4b0>)
 80010f2:	f003 ffcb 	bl	800508c <xQueueGenericSend>
					__asm__ volatile("NOP");
 80010f6:	bf00      	nop
					break;
 80010f8:	bf00      	nop
			}
			break;
 80010fa:	e00a      	b.n	8001112 <interpreter+0x48e>
	    case 0:
			break;
 80010fc:	bf00      	nop
 80010fe:	e008      	b.n	8001112 <interpreter+0x48e>
		default:
			break;
 8001100:	bf00      	nop
 8001102:	e006      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001104:	bf00      	nop
 8001106:	e004      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001108:	bf00      	nop
 800110a:	e002      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 800110c:	bf00      	nop
 800110e:	e000      	b.n	8001112 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001110:	bf00      	nop
	}

	  pData = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	72fb      	strb	r3, [r7, #11]
  {
 8001116:	e5b9      	b.n	8000c8c <interpreter+0x8>
 8001118:	20000830 	.word	0x20000830
 800111c:	20000838 	.word	0x20000838
 8001120:	20000834 	.word	0x20000834
 8001124:	08007700 	.word	0x08007700
 8001128:	20000904 	.word	0x20000904
 800112c:	08007704 	.word	0x08007704
 8001130:	08007708 	.word	0x08007708
 8001134:	0800770c 	.word	0x0800770c

08001138 <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8001140:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <execution_from_memory+0x298>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	2200      	movs	r2, #0
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	f003 fbce 	bl	80048f0 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	220f      	movs	r2, #15
 8001158:	499e      	ldr	r1, [pc, #632]	; (80013d4 <execution_from_memory+0x29c>)
 800115a:	489f      	ldr	r0, [pc, #636]	; (80013d8 <execution_from_memory+0x2a0>)
 800115c:	f002 fd70 	bl	8003c40 <HAL_UART_Transmit>
	  read_from_exm();
 8001160:	f7ff fc08 	bl	8000974 <read_from_exm>
	  HAL_UART_Transmit(&huart1, exm.current_instruction, sizeof(exm.current_instruction), 100);
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	2204      	movs	r2, #4
 8001168:	499c      	ldr	r1, [pc, #624]	; (80013dc <execution_from_memory+0x2a4>)
 800116a:	489b      	ldr	r0, [pc, #620]	; (80013d8 <execution_from_memory+0x2a0>)
 800116c:	f002 fd68 	bl	8003c40 <HAL_UART_Transmit>
	  switch (exm.current_instruction[0]) {
 8001170:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <execution_from_memory+0x2a8>)
 8001172:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001176:	3b52      	subs	r3, #82	; 0x52
 8001178:	2b22      	cmp	r3, #34	; 0x22
 800117a:	f200 811b 	bhi.w	80013b4 <execution_from_memory+0x27c>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <execution_from_memory+0x4c>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001261 	.word	0x08001261
 8001188:	08001211 	.word	0x08001211
 800118c:	08001239 	.word	0x08001239
 8001190:	080013b5 	.word	0x080013b5
 8001194:	080013b5 	.word	0x080013b5
 8001198:	080013b5 	.word	0x080013b5
 800119c:	080013b5 	.word	0x080013b5
 80011a0:	080013b5 	.word	0x080013b5
 80011a4:	080013b5 	.word	0x080013b5
 80011a8:	080013b5 	.word	0x080013b5
 80011ac:	080013b5 	.word	0x080013b5
 80011b0:	080013b5 	.word	0x080013b5
 80011b4:	080013b5 	.word	0x080013b5
 80011b8:	080013b5 	.word	0x080013b5
 80011bc:	080013b5 	.word	0x080013b5
 80011c0:	080013b5 	.word	0x080013b5
 80011c4:	080013b5 	.word	0x080013b5
 80011c8:	080013b5 	.word	0x080013b5
 80011cc:	080013b5 	.word	0x080013b5
 80011d0:	080013b5 	.word	0x080013b5
 80011d4:	080013b5 	.word	0x080013b5
 80011d8:	080013b5 	.word	0x080013b5
 80011dc:	080013b5 	.word	0x080013b5
 80011e0:	080013b5 	.word	0x080013b5
 80011e4:	080013b5 	.word	0x080013b5
 80011e8:	080013b5 	.word	0x080013b5
 80011ec:	080013b5 	.word	0x080013b5
 80011f0:	080013b5 	.word	0x080013b5
 80011f4:	080013b5 	.word	0x080013b5
 80011f8:	080013b5 	.word	0x080013b5
 80011fc:	080013b5 	.word	0x080013b5
 8001200:	080013b5 	.word	0x080013b5
 8001204:	08001289 	.word	0x08001289
 8001208:	080013b5 	.word	0x080013b5
 800120c:	0800131d 	.word	0x0800131d
		case 'S':
			exm.start_speed_value = 0;
 8001210:	4b73      	ldr	r3, [pc, #460]	; (80013e0 <execution_from_memory+0x2a8>)
 8001212:	2200      	movs	r2, #0
 8001214:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			exm.start_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001218:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <execution_from_memory+0x2a8>)
 800121a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <execution_from_memory+0x2a8>)
 8001222:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001226:	b29b      	uxth	r3, r3
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <execution_from_memory+0x2a8>)
 8001232:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			break;
 8001236:	e0c6      	b.n	80013c6 <execution_from_memory+0x28e>
		case 'T':
			exm.top_speed_value = 0;
 8001238:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <execution_from_memory+0x2a8>)
 800123a:	2200      	movs	r2, #0
 800123c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			exm.top_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001240:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <execution_from_memory+0x2a8>)
 8001242:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <execution_from_memory+0x2a8>)
 800124a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800124e:	b29b      	uxth	r3, r3
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <execution_from_memory+0x2a8>)
 800125a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			break;
 800125e:	e0b2      	b.n	80013c6 <execution_from_memory+0x28e>
		case 'R':
			exm.ramp_value = 0;
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <execution_from_memory+0x2a8>)
 8001262:	2200      	movs	r2, #0
 8001264:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			exm.ramp_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001268:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <execution_from_memory+0x2a8>)
 800126a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <execution_from_memory+0x2a8>)
 8001272:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001276:	b29b      	uxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b29b      	uxth	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <execution_from_memory+0x2a8>)
 8001282:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			break;
 8001286:	e09e      	b.n	80013c6 <execution_from_memory+0x28e>
		case ('G'+'+'):
			exm.G_sign_value = 0;
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <execution_from_memory+0x2a8>)
 800128a:	2200      	movs	r2, #0
 800128c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <execution_from_memory+0x2a8>)
 8001292:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <execution_from_memory+0x2a8>)
 800129a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800129e:	b29b      	uxth	r3, r3
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <execution_from_memory+0x2a8>)
 80012aa:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == exm.G_sign_value) break;
 80012ae:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <execution_from_memory+0x2a8>)
 80012b0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <execution_from_memory+0x2a8>)
 80012b8:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80012bc:	429a      	cmp	r2, r3
 80012be:	d07b      	beq.n	80013b8 <execution_from_memory+0x280>
			else if(exm.position > exm.G_sign_value){
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <execution_from_memory+0x2a8>)
 80012c2:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <execution_from_memory+0x2a8>)
 80012ca:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dd06      	ble.n	80012e0 <execution_from_memory+0x1a8>
				GPIOB->ODR |= GPIO_ODR_ODR9; //counterclockwise
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <execution_from_memory+0x2ac>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <execution_from_memory+0x2ac>)
 80012d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012dc:	60d3      	str	r3, [r2, #12]
 80012de:	e005      	b.n	80012ec <execution_from_memory+0x1b4>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_ODR9; //clockwise
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <execution_from_memory+0x2ac>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4a3f      	ldr	r2, [pc, #252]	; (80013e4 <execution_from_memory+0x2ac>)
 80012e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012ea:	60d3      	str	r3, [r2, #12]
			}
			if(exm.start_speed_value == 0) break;
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <execution_from_memory+0x2a8>)
 80012ee:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d062      	beq.n	80013bc <execution_from_memory+0x284>
			start_motor();
 80012f6:	f7ff fbbd 	bl	8000a74 <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <execution_from_memory+0x298>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	2200      	movs	r2, #0
 8001308:	2150      	movs	r1, #80	; 0x50
 800130a:	f003 faf1 	bl	80048f0 <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <execution_from_memory+0x298>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2110      	movs	r1, #16
 8001314:	4618      	mov	r0, r3
 8001316:	f003 fbb9 	bl	8004a8c <xEventGroupClearBits>
			break;
 800131a:	e054      	b.n	80013c6 <execution_from_memory+0x28e>
		case ('G'+'-'):
			exm.G_sign_value = 0;
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <execution_from_memory+0x2a8>)
 800131e:	2200      	movs	r2, #0
 8001320:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <execution_from_memory+0x2a8>)
 8001326:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <execution_from_memory+0x2a8>)
 800132e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001332:	b29b      	uxth	r3, r3
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	4413      	add	r3, r2
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <execution_from_memory+0x2a8>)
 800133e:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == (0-exm.G_sign_value)) break;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <execution_from_memory+0x2a8>)
 8001344:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001348:	461a      	mov	r2, r3
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <execution_from_memory+0x2a8>)
 800134c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001350:	425b      	negs	r3, r3
 8001352:	429a      	cmp	r2, r3
 8001354:	d034      	beq.n	80013c0 <execution_from_memory+0x288>
			else if(exm.position > (0-exm.G_sign_value)){
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <execution_from_memory+0x2a8>)
 8001358:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800135c:	461a      	mov	r2, r3
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <execution_from_memory+0x2a8>)
 8001360:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001364:	425b      	negs	r3, r3
 8001366:	429a      	cmp	r2, r3
 8001368:	dd06      	ble.n	8001378 <execution_from_memory+0x240>
				GPIOB->ODR |= GPIO_ODR_ODR9; //counterclockwise
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <execution_from_memory+0x2ac>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <execution_from_memory+0x2ac>)
 8001370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001374:	60d3      	str	r3, [r2, #12]
 8001376:	e005      	b.n	8001384 <execution_from_memory+0x24c>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_ODR9; //clockwise
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <execution_from_memory+0x2ac>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <execution_from_memory+0x2ac>)
 800137e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001382:	60d3      	str	r3, [r2, #12]
			}
//			  HAL_TIM_Base_Start_IT(&htim4);
//			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			if(exm.start_speed_value == 0) break;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <execution_from_memory+0x2a8>)
 8001386:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01a      	beq.n	80013c4 <execution_from_memory+0x28c>
			start_motor();
 800138e:	f7ff fb71 	bl	8000a74 <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <execution_from_memory+0x298>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2200      	movs	r2, #0
 80013a0:	2150      	movs	r1, #80	; 0x50
 80013a2:	f003 faa5 	bl	80048f0 <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <execution_from_memory+0x298>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2110      	movs	r1, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fb6d 	bl	8004a8c <xEventGroupClearBits>
			break;
 80013b2:	e008      	b.n	80013c6 <execution_from_memory+0x28e>
		default:
			break;
 80013b4:	bf00      	nop
 80013b6:	e006      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.position == exm.G_sign_value) break;
 80013b8:	bf00      	nop
 80013ba:	e004      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80013bc:	bf00      	nop
 80013be:	e002      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.position == (0-exm.G_sign_value)) break;
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80013c4:	bf00      	nop
	}
	  vTaskDelay(200);
 80013c6:	20c8      	movs	r0, #200	; 0xc8
 80013c8:	f004 fbcc 	bl	8005b64 <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 80013cc:	e6b8      	b.n	8001140 <execution_from_memory+0x8>
 80013ce:	bf00      	nop
 80013d0:	20000904 	.word	0x20000904
 80013d4:	08007710 	.word	0x08007710
 80013d8:	200007dc 	.word	0x200007dc
 80013dc:	200008f4 	.word	0x200008f4
 80013e0:	20000838 	.word	0x20000838
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a3c      	ldr	r2, [pc, #240]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d107      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x22>
		exm.step_counter_second_part++;
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 80013fc:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001400:	3301      	adds	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001406:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	}

	if (htim->Instance == TIM4) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d15d      	bne.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		if((xEventGroupGetBitsFromISR(EventGroup) & (1<<7)) != 0x80) { // if  Programming mode is OFF
 8001414:	4b37      	ldr	r3, [pc, #220]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fb6f 	bl	8004afc <xEventGroupGetBitsFromISR>
 800141e:	4603      	mov	r3, r0
 8001420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001424:	2b80      	cmp	r3, #128	; 0x80
 8001426:	d053      	beq.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
			switch ((GPIOB->ODR & (GPIO_ODR_ODR9))) {
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001430:	2b00      	cmp	r3, #0
 8001432:	d026      	beq.n	8001482 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001438:	d145      	bne.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0xde>
				case (1<<9): //counterclockwise
					exm.position--;
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 800143c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 800144a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
				if(exm.position == 0-((int16_t)exm.G_sign_value)){
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001450:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001454:	461a      	mov	r2, r3
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001458:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800145c:	b21b      	sxth	r3, r3
 800145e:	425b      	negs	r3, r3
 8001460:	429a      	cmp	r2, r3
 8001462:	d132      	bne.n	80014ca <HAL_TIM_PeriodElapsedCallback+0xe2>
				  HAL_TIM_Base_Stop_IT(&htim4);
 8001464:	4825      	ldr	r0, [pc, #148]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001466:	f001 fb71 	bl	8002b4c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800146a:	2100      	movs	r1, #0
 800146c:	4823      	ldr	r0, [pc, #140]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800146e:	f001 fc95 	bl	8002d9c <HAL_TIM_PWM_Stop>
				xEventGroupSetBitsFromISR(EventGroup, 0x10, pdFALSE);
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2210      	movs	r2, #16
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800147c:	f005 fcbe 	bl	8006dfc <xTimerPendFunctionCallFromISR>
				}
					break;
 8001480:	e023      	b.n	80014ca <HAL_TIM_PeriodElapsedCallback+0xe2>
				case (0<<9): //clockwise
					exm.position++;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001484:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	b21a      	sxth	r2, r3
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001492:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
					if(exm.position == exm.G_sign_value){
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001498:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800149c:	461a      	mov	r2, r3
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014a0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d112      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0xe6>
					  HAL_TIM_Base_Stop_IT(&htim4);
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014aa:	f001 fb4f 	bl	8002b4c <HAL_TIM_Base_Stop_IT>
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80014ae:	2100      	movs	r1, #0
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014b2:	f001 fc73 	bl	8002d9c <HAL_TIM_PWM_Stop>
					xEventGroupSetBitsFromISR(EventGroup, 0x10, pdFALSE);
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014b8:	6819      	ldr	r1, [r3, #0]
 80014ba:	2300      	movs	r3, #0
 80014bc:	2210      	movs	r2, #16
 80014be:	4810      	ldr	r0, [pc, #64]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80014c0:	f005 fc9c 	bl	8006dfc <xTimerPendFunctionCallFromISR>
					}
					break;
 80014c4:	e003      	b.n	80014ce <HAL_TIM_PeriodElapsedCallback+0xe6>
				default:
					break;
 80014c6:	bf00      	nop
 80014c8:	e002      	b.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80014ca:	bf00      	nop
 80014cc:	e000      	b.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80014ce:	bf00      	nop
			}
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0xf6>
    HAL_IncTick();
 80014da:	f000 fa6f 	bl	80019bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40000400 	.word	0x40000400
 80014ec:	20000838 	.word	0x20000838
 80014f0:	40000800 	.word	0x40000800
 80014f4:	20000904 	.word	0x20000904
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	20000794 	.word	0x20000794
 8001500:	08004c59 	.word	0x08004c59

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_MspInit+0x68>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_MspInit+0x68>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_MspInit+0x68>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_MspInit+0x68>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_MspInit+0x68>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x68>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	210f      	movs	r1, #15
 800154a:	f06f 0001 	mvn.w	r0, #1
 800154e:	f000 fb06 	bl	8001b5e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_MspInit+0x6c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_MspInit+0x6c>)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000

08001580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_SPI_MspInit+0x88>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d12f      	bne.n	8001600 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a13      	ldr	r2, [pc, #76]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015d0:	23a0      	movs	r3, #160	; 0xa0
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_SPI_MspInit+0x90>)
 80015e4:	f000 fb98 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_SPI_MspInit+0x90>)
 80015fc:	f000 fb8c 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013000 	.word	0x40013000
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_TIM_Base_MspInit+0x78>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d114      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2105      	movs	r1, #5
 8001642:	201d      	movs	r0, #29
 8001644:	f000 fa8b 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001648:	201d      	movs	r0, #29
 800164a:	f000 faa4 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800164e:	e018      	b.n	8001682 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_TIM_Base_MspInit+0x80>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d113      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2105      	movs	r1, #5
 8001676:	201e      	movs	r0, #30
 8001678:	f000 fa71 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800167c:	201e      	movs	r0, #30
 800167e:	f000 fa8a 	bl	8001b96 <HAL_NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40000400 	.word	0x40000400
 8001690:	40021000 	.word	0x40021000
 8001694:	40000800 	.word	0x40000800

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_TIM_MspPostInit+0x58>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d117      	bne.n	80016e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_TIM_MspPostInit+0x5c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PUL_stepper_Pin;
 80016d0:	2340      	movs	r3, #64	; 0x40
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUL_stepper_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_TIM_MspPostInit+0x60>)
 80016e4:	f000 fb18 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40000800 	.word	0x40000800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010c00 	.word	0x40010c00

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <HAL_UART_MspInit+0x9c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d139      	bne.n	8001790 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_UART_MspInit+0xa0>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_UART_MspInit+0xa0>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_UART_MspInit+0xa0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_UART_MspInit+0xa0>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_UART_MspInit+0xa0>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_UART_MspInit+0xa0>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800174c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4619      	mov	r1, r3
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <HAL_UART_MspInit+0xa4>)
 8001762:	f000 fad9 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_UART_MspInit+0xa4>)
 800177c:	f000 facc 	bl	8001d18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2025      	movs	r0, #37	; 0x25
 8001786:	f000 f9ea 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800178a:	2025      	movs	r0, #37	; 0x25
 800178c:	f000 fa03 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013800 	.word	0x40013800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800

080017a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_InitTick+0xe8>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <HAL_InitTick+0xe8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_InitTick+0xe8>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d2:	f107 0210 	add.w	r2, r7, #16
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 f841 	bl	8002864 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ec:	f001 f812 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80017f0:	6378      	str	r0, [r7, #52]	; 0x34
 80017f2:	e004      	b.n	80017fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017f4:	f001 f80e 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80017f8:	4603      	mov	r3, r0
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_InitTick+0xec>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	3b01      	subs	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_InitTick+0xf0>)
 800180e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001812:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_InitTick+0xf0>)
 8001816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_InitTick+0xf0>)
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_InitTick+0xf0>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_InitTick+0xf0>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_InitTick+0xf0>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001834:	4817      	ldr	r0, [pc, #92]	; (8001894 <HAL_InitTick+0xf0>)
 8001836:	f001 f8e7 	bl	8002a08 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11b      	bne.n	8001880 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001848:	4812      	ldr	r0, [pc, #72]	; (8001894 <HAL_InitTick+0xf0>)
 800184a:	f001 f92d 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001854:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001858:	2b00      	cmp	r3, #0
 800185a:	d111      	bne.n	8001880 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800185c:	201c      	movs	r0, #28
 800185e:	f000 f99a 	bl	8001b96 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d808      	bhi.n	800187a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	201c      	movs	r0, #28
 800186e:	f000 f976 	bl	8001b5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_InitTick+0xf4>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e002      	b.n	8001880 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001884:	4618      	mov	r0, r3
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	431bde83 	.word	0x431bde83
 8001894:	20000908 	.word	0x20000908
 8001898:	20000004 	.word	0x20000004

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 fbc0 	bl	8002050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOVE_EN_Pin);
 80018d8:	2004      	movs	r0, #4
 80018da:	f000 fbb9 	bl	8002050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <TIM2_IRQHandler+0x10>)
 80018ea:	f001 fabb 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000908 	.word	0x20000908

080018f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TIM3_IRQHandler+0x10>)
 80018fe:	f001 fab1 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000074c 	.word	0x2000074c

0800190c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM4_IRQHandler+0x10>)
 8001912:	f001 faa7 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000794 	.word	0x20000794

08001920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//if(USART1->SR & USART_SR_RXNE){
		uart1_rx_callback();
 8001924:	f7fe ff62 	bl	80007ec <uart1_rx_callback>
		__asm__ volatile("NOP");
 8001928:	bf00      	nop
	//}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800192a:	4802      	ldr	r0, [pc, #8]	; (8001934 <USART1_IRQHandler+0x14>)
 800192c:	f002 fa0c 	bl	8003d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200007dc 	.word	0x200007dc

08001938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001944:	f7ff fff8 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800194a:	490c      	ldr	r1, [pc, #48]	; (800197c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <LoopFillZerobss+0x16>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001960:	4c09      	ldr	r4, [pc, #36]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f005 fe35 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001972:	f7fe fc1f 	bl	80001b4 <main>
  bx lr
 8001976:	4770      	bx	lr
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001980:	0800776c 	.word	0x0800776c
  ldr r2, =_sbss
 8001984:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001988:	20002374 	.word	0x20002374

0800198c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_2_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x28>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f8d1 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff fefc 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fdb0 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_IncTick+0x1c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_IncTick+0x20>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_IncTick+0x20>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000950 	.word	0x20000950

080019e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <HAL_GetTick+0x10>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000950 	.word	0x20000950

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <__NVIC_EnableIRQ+0x34>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff4f 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff64 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ffb2 	bl	8001ae4 <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff81 	bl	8001a90 <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff57 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d008      	beq.n	8001bdc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e020      	b.n	8001c1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020e 	bic.w	r2, r2, #14
 8001bea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d005      	beq.n	8001c4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2204      	movs	r2, #4
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e051      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020e 	bic.w	r2, r2, #14
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <HAL_DMA_Abort_IT+0xd4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d029      	beq.n	8001cca <HAL_DMA_Abort_IT+0xa2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_DMA_Abort_IT+0xd8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d022      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x9e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_DMA_Abort_IT+0xdc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01a      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x98>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_DMA_Abort_IT+0xe0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d012      	beq.n	8001cba <HAL_DMA_Abort_IT+0x92>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_DMA_Abort_IT+0xe4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0x8c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_DMA_Abort_IT+0xe8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d102      	bne.n	8001cae <HAL_DMA_Abort_IT+0x86>
 8001ca8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cac:	e00e      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb2:	e00b      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb8:	e008      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	e005      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc4:	e002      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	e000      	b.n	8001ccc <HAL_DMA_Abort_IT+0xa4>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_DMA_Abort_IT+0xec>)
 8001cce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
    } 
  }
  return status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020008 	.word	0x40020008
 8001d00:	4002001c 	.word	0x4002001c
 8001d04:	40020030 	.word	0x40020030
 8001d08:	40020044 	.word	0x40020044
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	4002006c 	.word	0x4002006c
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e169      	b.n	8002000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8158 	bne.w	8001ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a9a      	ldr	r2, [pc, #616]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a98      	ldr	r2, [pc, #608]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a96      	ldr	r2, [pc, #600]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a96      	ldr	r2, [pc, #600]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a90      	ldr	r2, [pc, #576]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a79      	ldr	r2, [pc, #484]	; (8001fcc <HAL_GPIO_Init+0x2b4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80b1 	beq.w	8001ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_GPIO_Init+0x1ec>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3f      	ldr	r2, [pc, #252]	; (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00d      	beq.n	8001f00 <HAL_GPIO_Init+0x1e8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x1e4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <HAL_GPIO_Init+0x2cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_GPIO_Init+0x1e0>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e006      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f04:	2300      	movs	r3, #0
 8001f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f16:	492f      	ldr	r1, [pc, #188]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	492c      	ldr	r1, [pc, #176]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4928      	ldr	r1, [pc, #160]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4922      	ldr	r1, [pc, #136]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	491e      	ldr	r1, [pc, #120]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4914      	ldr	r1, [pc, #80]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e021      	b.n	8001ffa <HAL_GPIO_Init+0x2e2>
 8001fb6:	bf00      	nop
 8001fb8:	10320000 	.word	0x10320000
 8001fbc:	10310000 	.word	0x10310000
 8001fc0:	10220000 	.word	0x10220000
 8001fc4:	10210000 	.word	0x10210000
 8001fc8:	10120000 	.word	0x10120000
 8001fcc:	10110000 	.word	0x10110000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	40011400 	.word	0x40011400
 8001fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_GPIO_Init+0x304>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_GPIO_Init+0x304>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f ae8e 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	372c      	adds	r7, #44	; 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fbcc 	bl	800080c <HAL_GPIO_EXTI_Callback>
  }
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e272      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8087 	beq.w	80021ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a0:	4b92      	ldr	r3, [pc, #584]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d00c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ac:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d112      	bne.n	80020de <HAL_RCC_OscConfig+0x5e>
 80020b8:	4b8c      	ldr	r3, [pc, #560]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d10b      	bne.n	80020de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c6:	4b89      	ldr	r3, [pc, #548]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d06c      	beq.n	80021ac <HAL_RCC_OscConfig+0x12c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d168      	bne.n	80021ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e24c      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x76>
 80020e8:	4b80      	ldr	r3, [pc, #512]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a7f      	ldr	r2, [pc, #508]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e02e      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x98>
 80020fe:	4b7b      	ldr	r3, [pc, #492]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7a      	ldr	r2, [pc, #488]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b78      	ldr	r3, [pc, #480]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a77      	ldr	r2, [pc, #476]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e01d      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0xbc>
 8002122:	4b72      	ldr	r3, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a71      	ldr	r2, [pc, #452]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6e      	ldr	r2, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 800213c:	4b6b      	ldr	r3, [pc, #428]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a6a      	ldr	r2, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a67      	ldr	r2, [pc, #412]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fc40 	bl	80019e0 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff fc3c 	bl	80019e0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e200      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0xe4>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fc2c 	bl	80019e0 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fc28 	bl	80019e0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1ec      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x10c>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ba:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c6:	4b49      	ldr	r3, [pc, #292]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d11c      	bne.n	800220c <HAL_RCC_OscConfig+0x18c>
 80021d2:	4b46      	ldr	r3, [pc, #280]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1c0      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4939      	ldr	r1, [pc, #228]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e03a      	b.n	8002282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff fbe1 	bl	80019e0 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff fbdd 	bl	80019e0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1a1      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4927      	ldr	r1, [pc, #156]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fbc0 	bl	80019e0 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff fbbc 	bl	80019e0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e180      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d03a      	beq.n	8002304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_RCC_OscConfig+0x274>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7ff fba0 	bl	80019e0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff fb9c 	bl	80019e0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e160      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_RCC_OscConfig+0x26c>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f000 fafe 	bl	80028c4 <RCC_Delay>
 80022c8:	e01c      	b.n	8002304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_OscConfig+0x274>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7ff fb86 	bl	80019e0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d6:	e00f      	b.n	80022f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff fb82 	bl	80019e0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d908      	bls.n	80022f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e146      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	42420000 	.word	0x42420000
 80022f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e9      	bne.n	80022d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a6 	beq.w	800245e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b8b      	ldr	r3, [pc, #556]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a87      	ldr	r2, [pc, #540]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]
 800232e:	4b85      	ldr	r3, [pc, #532]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233e:	4b82      	ldr	r3, [pc, #520]	; (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d118      	bne.n	800237c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234a:	4b7f      	ldr	r3, [pc, #508]	; (8002548 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7e      	ldr	r2, [pc, #504]	; (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002356:	f7ff fb43 	bl	80019e0 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7ff fb3f 	bl	80019e0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e103      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b75      	ldr	r3, [pc, #468]	; (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x312>
 8002384:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	e02d      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x334>
 800239a:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a66      	ldr	r2, [pc, #408]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	e01c      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x356>
 80023bc:	4b61      	ldr	r3, [pc, #388]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a60      	ldr	r2, [pc, #384]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a5d      	ldr	r2, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e00b      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 80023d6:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a5a      	ldr	r2, [pc, #360]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b58      	ldr	r3, [pc, #352]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d015      	beq.n	8002422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7ff faf3 	bl	80019e0 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7ff faef 	bl	80019e0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0b1      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ee      	beq.n	80023fe <HAL_RCC_OscConfig+0x37e>
 8002420:	e014      	b.n	800244c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff fadd 	bl	80019e0 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff fad9 	bl	80019e0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e09b      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ee      	bne.n	800242a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a3b      	ldr	r2, [pc, #236]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8087 	beq.w	8002576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d061      	beq.n	8002538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d146      	bne.n	800250a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_OscConfig+0x4cc>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff faad 	bl	80019e0 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff faa9 	bl	80019e0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e06d      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b0:	d108      	bne.n	80024c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4921      	ldr	r1, [pc, #132]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a19      	ldr	r1, [r3, #32]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	430b      	orrs	r3, r1
 80024d6:	491b      	ldr	r1, [pc, #108]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x4cc>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff fa7d 	bl	80019e0 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7ff fa79 	bl	80019e0 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e03d      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x46a>
 8002508:	e035      	b.n	8002576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCC_OscConfig+0x4cc>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fa66 	bl	80019e0 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7ff fa62 	bl	80019e0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e026      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x498>
 8002536:	e01e      	b.n	8002576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e019      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x500>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0d0      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4965      	ldr	r1, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d040      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d115      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e073      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06b      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002662:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 0203 	bic.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002674:	f7ff f9b4 	bl	80019e0 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7ff f9b0 	bl	80019e0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e053      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 020c 	and.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1eb      	bne.n	800267c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d210      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4922      	ldr	r1, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1cc>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1d0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f836 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40022000 	.word	0x40022000
 8002748:	40021000 	.word	0x40021000
 800274c:	08007738 	.word	0x08007738
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x30>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x36>
 8002786:	e027      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800278a:	613b      	str	r3, [r7, #16]
      break;
 800278c:	e027      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002798:	5cd3      	ldrb	r3, [r2, r3]
 800279a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_RCC_GetSysClockFreq+0x94>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0c5b      	lsrs	r3, r3, #17
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ba:	fb03 f202 	mul.w	r2, r3, r2
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e004      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	613b      	str	r3, [r7, #16]
      break;
 80027d6:	e002      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	613b      	str	r3, [r7, #16]
      break;
 80027dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027de:	693b      	ldr	r3, [r7, #16]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	08007750 	.word	0x08007750
 80027f8:	08007760 	.word	0x08007760
 80027fc:	003d0900 	.word	0x003d0900

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <HAL_RCC_GetHCLKFreq+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff2 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08007748 	.word	0x08007748

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffde 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08007748 	.word	0x08007748

08002864 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	220f      	movs	r2, #15
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCC_GetClockConfig+0x58>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0207 	and.w	r2, r3, #7
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40022000 	.word	0x40022000

080028c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <RCC_Delay+0x34>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <RCC_Delay+0x38>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a5b      	lsrs	r3, r3, #9
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e0:	bf00      	nop
  }
  while (Delay --);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	60fa      	str	r2, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <RCC_Delay+0x1c>
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000000 	.word	0x20000000
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e076      	b.n	8002a00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002922:	d009      	beq.n	8002938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
 800292a:	e005      	b.n	8002938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fe14 	bl	8001580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	ea42 0103 	orr.w	r1, r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	0c1a      	lsrs	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f002 0204 	and.w	r2, r2, #4
 80029de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fdf0 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fd04 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e03a      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_TIM_Base_Start_IT+0x98>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x58>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <HAL_TIM_Base_Start_IT+0xa0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800

08002b4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10f      	bne.n	8002b94 <HAL_TIM_Base_Stop_IT+0x48>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_Base_Stop_IT+0x48>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e041      	b.n	8002c3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f839 	bl	8002c46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f000 fc34 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_TIM_PWM_Start+0x24>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e022      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x6a>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d109      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x3e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e015      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x6a>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d109      	bne.n	8002cb0 <HAL_TIM_PWM_Start+0x58>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e008      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x6a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e05e      	b.n	8002d88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_PWM_Start+0x82>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	e013      	b.n	8002d02 <HAL_TIM_PWM_Start+0xaa>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0x92>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce8:	e00b      	b.n	8002d02 <HAL_TIM_PWM_Start+0xaa>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0xa2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	e003      	b.n	8002d02 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 feb3 	bl	8003a76 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_TIM_PWM_Start+0x138>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d107      	bne.n	8002d2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_TIM_PWM_Start+0x138>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_TIM_PWM_Start+0xfa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIM_PWM_Start+0xfa>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_TIM_PWM_Start+0x13c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_TIM_PWM_Start+0xfa>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <HAL_TIM_PWM_Start+0x140>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d111      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d010      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d74:	e007      	b.n	8002d86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800

08002d9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	6839      	ldr	r1, [r7, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fe61 	bl	8003a76 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <HAL_TIM_PWM_Stop+0xc4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d117      	bne.n	8002dee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_TIM_PWM_Stop+0x52>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	f240 4344 	movw	r3, #1092	; 0x444
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_PWM_Stop+0x52>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <HAL_TIM_PWM_Stop+0x82>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	f240 4344 	movw	r3, #1092	; 0x444
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d107      	bne.n	8002e1e <HAL_TIM_PWM_Stop+0x82>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Stop+0x92>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2c:	e013      	b.n	8002e56 <HAL_TIM_PWM_Stop+0xba>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Stop+0xa2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3c:	e00b      	b.n	8002e56 <HAL_TIM_PWM_Stop+0xba>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d104      	bne.n	8002e4e <HAL_TIM_PWM_Stop+0xb2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e4c:	e003      	b.n	8002e56 <HAL_TIM_PWM_Stop+0xba>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d122      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11b      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0202 	mvn.w	r2, #2
 8002e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fab8 	bl	800341c <HAL_TIM_IC_CaptureCallback>
 8002eac:	e005      	b.n	8002eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 faab 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 faba 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d122      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d11b      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fa8e 	bl	800341c <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa81 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fa90 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0208 	mvn.w	r2, #8
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa64 	bl	800341c <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa57 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fa66 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0210 	mvn.w	r2, #16
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2208      	movs	r2, #8
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa3a 	bl	800341c <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa2d 	bl	800340a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa3c 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0201 	mvn.w	r2, #1
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe fa00 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fdbd 	bl	8003b8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa00 	bl	8003440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b20      	cmp	r3, #32
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0220 	mvn.w	r2, #32
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fd88 	bl	8003b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0ae      	b.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	f200 809f 	bhi.w	80031e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030dd 	.word	0x080030dd
 80030ac:	080031e1 	.word	0x080031e1
 80030b0:	080031e1 	.word	0x080031e1
 80030b4:	080031e1 	.word	0x080031e1
 80030b8:	0800311d 	.word	0x0800311d
 80030bc:	080031e1 	.word	0x080031e1
 80030c0:	080031e1 	.word	0x080031e1
 80030c4:	080031e1 	.word	0x080031e1
 80030c8:	0800315f 	.word	0x0800315f
 80030cc:	080031e1 	.word	0x080031e1
 80030d0:	080031e1 	.word	0x080031e1
 80030d4:	080031e1 	.word	0x080031e1
 80030d8:	0800319f 	.word	0x0800319f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fa18 	bl	8003518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6999      	ldr	r1, [r3, #24]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	619a      	str	r2, [r3, #24]
      break;
 800311a:	e064      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fa5e 	bl	80035e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6999      	ldr	r1, [r3, #24]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	619a      	str	r2, [r3, #24]
      break;
 800315c:	e043      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 faa7 	bl	80036b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0208 	orr.w	r2, r2, #8
 8003178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0204 	bic.w	r2, r2, #4
 8003188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69d9      	ldr	r1, [r3, #28]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	61da      	str	r2, [r3, #28]
      break;
 800319c:	e023      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 faf1 	bl	800378c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69d9      	ldr	r1, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	61da      	str	r2, [r3, #28]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
      break;
 80031e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_TIM_ConfigClockSource+0x1c>
 8003210:	2302      	movs	r3, #2
 8003212:	e0b4      	b.n	800337e <HAL_TIM_ConfigClockSource+0x186>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d03e      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0xd4>
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	f200 8087 	bhi.w	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	f000 8086 	beq.w	800336a <HAL_TIM_ConfigClockSource+0x172>
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d87f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b70      	cmp	r3, #112	; 0x70
 8003266:	d01a      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xa6>
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d87b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d050      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x11a>
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d877      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d03c      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d873      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d058      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x13a>
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d86f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d064      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d86b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d060      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d867      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05c      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b10      	cmp	r3, #16
 800329a:	d05a      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	e062      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ae:	f000 fbc3 	bl	8003a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
      break;
 80032ca:	e04f      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032dc:	f000 fbac 	bl	8003a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ee:	609a      	str	r2, [r3, #8]
      break;
 80032f0:	e03c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 fb23 	bl	800394a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2150      	movs	r1, #80	; 0x50
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fb7a 	bl	8003a04 <TIM_ITRx_SetConfig>
      break;
 8003310:	e02c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800331e:	461a      	mov	r2, r3
 8003320:	f000 fb41 	bl	80039a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2160      	movs	r1, #96	; 0x60
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fb6a 	bl	8003a04 <TIM_ITRx_SetConfig>
      break;
 8003330:	e01c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	461a      	mov	r2, r3
 8003340:	f000 fb03 	bl	800394a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb5a 	bl	8003a04 <TIM_ITRx_SetConfig>
      break;
 8003350:	e00c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 fb51 	bl	8003a04 <TIM_ITRx_SetConfig>
      break;
 8003362:	e003      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e000      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800336a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_TIM_SlaveConfigSynchro+0x18>
 800339a:	2302      	movs	r3, #2
 800339c:	e031      	b.n	8003402 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa39 	bl	8003828 <TIM_SlaveTimer_SetConfig>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e018      	b.n	8003402 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
	...

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a29      	ldr	r2, [pc, #164]	; (800350c <TIM_Base_SetConfig+0xb8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_Base_SetConfig+0x30>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d007      	beq.n	8003484 <TIM_Base_SetConfig+0x30>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a26      	ldr	r2, [pc, #152]	; (8003510 <TIM_Base_SetConfig+0xbc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0x30>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a25      	ldr	r2, [pc, #148]	; (8003514 <TIM_Base_SetConfig+0xc0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <TIM_Base_SetConfig+0xb8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <TIM_Base_SetConfig+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d007      	beq.n	80034b6 <TIM_Base_SetConfig+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <TIM_Base_SetConfig+0xbc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_Base_SetConfig+0x62>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <TIM_Base_SetConfig+0xc0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d108      	bne.n	80034c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <TIM_Base_SetConfig+0xb8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d103      	bne.n	80034fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	615a      	str	r2, [r3, #20]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800

08003518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 0201 	bic.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f023 0302 	bic.w	r3, r3, #2
 8003560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <TIM_OC1_SetConfig+0xc8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10c      	bne.n	800358e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0308 	bic.w	r3, r3, #8
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <TIM_OC1_SetConfig+0xc8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d111      	bne.n	80035ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f023 0210 	bic.w	r2, r3, #16
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0320 	bic.w	r3, r3, #32
 800362e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_OC2_SetConfig+0xd0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10d      	bne.n	8003660 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <TIM_OC2_SetConfig+0xd0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d113      	bne.n	8003690 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800366e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00

080036b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <TIM_OC3_SetConfig+0xd0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10d      	bne.n	8003732 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <TIM_OC3_SetConfig+0xd0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d113      	bne.n	8003762 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	621a      	str	r2, [r3, #32]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00

0800378c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	031b      	lsls	r3, r3, #12
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <TIM_OC4_SetConfig+0x98>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d109      	bne.n	8003800 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	40012c00 	.word	0x40012c00

08003828 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003844:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f023 0307 	bic.w	r3, r3, #7
 8003856:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b70      	cmp	r3, #112	; 0x70
 8003870:	d01a      	beq.n	80038a8 <TIM_SlaveTimer_SetConfig+0x80>
 8003872:	2b70      	cmp	r3, #112	; 0x70
 8003874:	d860      	bhi.n	8003938 <TIM_SlaveTimer_SetConfig+0x110>
 8003876:	2b60      	cmp	r3, #96	; 0x60
 8003878:	d054      	beq.n	8003924 <TIM_SlaveTimer_SetConfig+0xfc>
 800387a:	2b60      	cmp	r3, #96	; 0x60
 800387c:	d85c      	bhi.n	8003938 <TIM_SlaveTimer_SetConfig+0x110>
 800387e:	2b50      	cmp	r3, #80	; 0x50
 8003880:	d046      	beq.n	8003910 <TIM_SlaveTimer_SetConfig+0xe8>
 8003882:	2b50      	cmp	r3, #80	; 0x50
 8003884:	d858      	bhi.n	8003938 <TIM_SlaveTimer_SetConfig+0x110>
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d019      	beq.n	80038be <TIM_SlaveTimer_SetConfig+0x96>
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d854      	bhi.n	8003938 <TIM_SlaveTimer_SetConfig+0x110>
 800388e:	2b30      	cmp	r3, #48	; 0x30
 8003890:	d055      	beq.n	800393e <TIM_SlaveTimer_SetConfig+0x116>
 8003892:	2b30      	cmp	r3, #48	; 0x30
 8003894:	d850      	bhi.n	8003938 <TIM_SlaveTimer_SetConfig+0x110>
 8003896:	2b20      	cmp	r3, #32
 8003898:	d051      	beq.n	800393e <TIM_SlaveTimer_SetConfig+0x116>
 800389a:	2b20      	cmp	r3, #32
 800389c:	d84c      	bhi.n	8003938 <TIM_SlaveTimer_SetConfig+0x110>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04d      	beq.n	800393e <TIM_SlaveTimer_SetConfig+0x116>
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d04b      	beq.n	800393e <TIM_SlaveTimer_SetConfig+0x116>
 80038a6:	e047      	b.n	8003938 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80038b8:	f000 f8be 	bl	8003a38 <TIM_ETR_SetConfig>
      break;
 80038bc:	e040      	b.n	8003940 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d101      	bne.n	80038ca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e03b      	b.n	8003942 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
      break;
 800390e:	e017      	b.n	8003940 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391c:	461a      	mov	r2, r3
 800391e:	f000 f814 	bl	800394a <TIM_TI1_ConfigInputStage>
      break;
 8003922:	e00d      	b.n	8003940 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003930:	461a      	mov	r2, r3
 8003932:	f000 f838 	bl	80039a6 <TIM_TI2_ConfigInputStage>
      break;
 8003936:	e003      	b.n	8003940 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	75fb      	strb	r3, [r7, #23]
      break;
 800393c:	e000      	b.n	8003940 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800393e:	bf00      	nop
  }

  return status;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f023 0201 	bic.w	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 030a 	bic.w	r3, r3, #10
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b087      	sub	sp, #28
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 0210 	bic.w	r2, r3, #16
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	031b      	lsls	r3, r3, #12
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f043 0307 	orr.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	609a      	str	r2, [r3, #8]
}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2201      	movs	r2, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	401a      	ands	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1a      	ldr	r2, [r3, #32]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e046      	b.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b24:	d009      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10c      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800

08003b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e042      	b.n	8003c38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd fd98 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	; 0x24
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fd71 	bl	80046cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	; 0x28
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d16d      	bne.n	8003d3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Transmit+0x2c>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e066      	b.n	8003d3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2221      	movs	r2, #33	; 0x21
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7e:	f7fd feaf 	bl	80019e0 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c98:	d108      	bne.n	8003cac <HAL_UART_Transmit+0x6c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb4:	e02a      	b.n	8003d0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2180      	movs	r1, #128	; 0x80
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 faf9 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e036      	b.n	8003d3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3302      	adds	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	e007      	b.n	8003cfe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1cf      	bne.n	8003cb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2140      	movs	r1, #64	; 0x40
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fac9 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e006      	b.n	8003d3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b0ba      	sub	sp, #232	; 0xe8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_UART_IRQHandler+0x66>
 8003d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fbd1 	bl	800454e <UART_Receive_IT>
      return;
 8003dac:	e25b      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80de 	beq.w	8003f74 <HAL_UART_IRQHandler+0x22c>
 8003db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80d1 	beq.w	8003f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_UART_IRQHandler+0xae>
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f043 0201 	orr.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_UART_IRQHandler+0xd2>
 8003e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0202 	orr.w	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_UART_IRQHandler+0xf6>
 8003e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f043 0204 	orr.w	r2, r3, #4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <HAL_UART_IRQHandler+0x126>
 8003e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f043 0208 	orr.w	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 81f2 	beq.w	800425c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_UART_IRQHandler+0x14e>
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb5c 	bl	800454e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x17a>
 8003eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04f      	beq.n	8003f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa66 	bl	8004394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d041      	beq.n	8003f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1d9      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d013      	beq.n	8003f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2e:	4a7e      	ldr	r2, [pc, #504]	; (8004128 <HAL_UART_IRQHandler+0x3e0>)
 8003f30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd fe76 	bl	8001c28 <HAL_DMA_Abort_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e00e      	b.n	8003f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f99c 	bl	8004290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e00a      	b.n	8003f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f998 	bl	8004290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e006      	b.n	8003f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f994 	bl	8004290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f6e:	e175      	b.n	800425c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	bf00      	nop
    return;
 8003f72:	e173      	b.n	800425c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 814f 	bne.w	800421c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8148 	beq.w	800421c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8141 	beq.w	800421c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80b6 	beq.w	800412c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8145 	beq.w	8004260 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	f080 813e 	bcs.w	8004260 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	f000 8088 	beq.w	8004108 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800400e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004016:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004024:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004028:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004030:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800403c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1d9      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004068:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800406c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004070:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800407a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e1      	bne.n	8004044 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e3      	bne.n	8004080 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d8:	f023 0310 	bic.w	r3, r3, #16
 80040dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80040ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e3      	bne.n	80040c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd fd55 	bl	8001bb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004116:	b29b      	uxth	r3, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8bf 	bl	80042a2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004124:	e09c      	b.n	8004260 <HAL_UART_IRQHandler+0x518>
 8004126:	bf00      	nop
 8004128:	08004459 	.word	0x08004459
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004134:	b29b      	uxth	r3, r3
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 808e 	beq.w	8004264 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8089 	beq.w	8004264 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004176:	647a      	str	r2, [r7, #68]	; 0x44
 8004178:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800417c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e3      	bne.n	8004152 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	623b      	str	r3, [r7, #32]
   return(result);
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ae:	633a      	str	r2, [r7, #48]	; 0x30
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e3      	bne.n	800418a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0310 	bic.w	r3, r3, #16
 80041e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041f4:	61fa      	str	r2, [r7, #28]
 80041f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	617b      	str	r3, [r7, #20]
   return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e3      	bne.n	80041d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800420e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f844 	bl	80042a2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800421a:	e023      	b.n	8004264 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_UART_IRQHandler+0x4f4>
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f923 	bl	8004480 <UART_Transmit_IT>
    return;
 800423a:	e014      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <HAL_UART_IRQHandler+0x51e>
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f962 	bl	800451e <UART_EndTransmit_IT>
    return;
 800425a:	e004      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
    return;
 800425c:	bf00      	nop
 800425e:	e002      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
      return;
 8004260:	bf00      	nop
 8004262:	e000      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
      return;
 8004264:	bf00      	nop
  }
}
 8004266:	37e8      	adds	r7, #232	; 0xe8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b090      	sub	sp, #64	; 0x40
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	e050      	b.n	800436c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d04c      	beq.n	800436c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d8:	f7fd fb82 	bl	80019e0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d241      	bcs.n	800436c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004308:	637a      	str	r2, [r7, #52]	; 0x34
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800430e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	613b      	str	r3, [r7, #16]
   return(result);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800433c:	623a      	str	r2, [r7, #32]
 800433e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	6a3a      	ldr	r2, [r7, #32]
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	61bb      	str	r3, [r7, #24]
   return(result);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e00f      	b.n	800438c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	429a      	cmp	r2, r3
 8004388:	d09f      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3740      	adds	r7, #64	; 0x40
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b095      	sub	sp, #84	; 0x54
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043bc:	643a      	str	r2, [r7, #64]	; 0x40
 80043be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3314      	adds	r3, #20
 80043d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	2b01      	cmp	r3, #1
 800440a:	d119      	bne.n	8004440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	60bb      	str	r3, [r7, #8]
   return(result);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800442c:	61ba      	str	r2, [r7, #24]
 800442e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6979      	ldr	r1, [r7, #20]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	613b      	str	r3, [r7, #16]
   return(result);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800444e:	bf00      	nop
 8004450:	3754      	adds	r7, #84	; 0x54
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff ff0c 	bl	8004290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b21      	cmp	r3, #33	; 0x21
 8004492:	d13e      	bne.n	8004512 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d114      	bne.n	80044c8 <UART_Transmit_IT+0x48>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d110      	bne.n	80044c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	1c9a      	adds	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]
 80044c6:	e008      	b.n	80044da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	1c59      	adds	r1, r3, #1
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6211      	str	r1, [r2, #32]
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4619      	mov	r1, r3
 80044e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004534:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fe94 	bl	800426c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b08c      	sub	sp, #48	; 0x30
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b22      	cmp	r3, #34	; 0x22
 8004560:	f040 80ae 	bne.w	80046c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d117      	bne.n	800459e <UART_Receive_IT+0x50>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d113      	bne.n	800459e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458c:	b29a      	uxth	r2, r3
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	1c9a      	adds	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
 800459c:	e026      	b.n	80045ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d007      	beq.n	80045c2 <UART_Receive_IT+0x74>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <UART_Receive_IT+0x82>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e008      	b.n	80045e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4619      	mov	r1, r3
 80045fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d15d      	bne.n	80046bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0220 	bic.w	r2, r2, #32
 800460e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	2b01      	cmp	r3, #1
 8004644:	d135      	bne.n	80046b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	613b      	str	r3, [r7, #16]
   return(result);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f023 0310 	bic.w	r3, r3, #16
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	623a      	str	r2, [r7, #32]
 800466e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	69f9      	ldr	r1, [r7, #28]
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	61bb      	str	r3, [r7, #24]
   return(result);
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b10      	cmp	r3, #16
 800468c:	d10a      	bne.n	80046a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fdf9 	bl	80042a2 <HAL_UARTEx_RxEventCallback>
 80046b0:	e002      	b.n	80046b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fde3 	bl	800427e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e002      	b.n	80046c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
  }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3730      	adds	r7, #48	; 0x30
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004706:	f023 030c 	bic.w	r3, r3, #12
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	430b      	orrs	r3, r1
 8004712:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2c      	ldr	r2, [pc, #176]	; (80047e0 <UART_SetConfig+0x114>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d103      	bne.n	800473c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7fe f882 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	e002      	b.n	8004742 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800473c:	f7fe f86a 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8004740:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <UART_SetConfig+0x118>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	0119      	lsls	r1, r3, #4
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009a      	lsls	r2, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	fbb2 f2f3 	udiv	r2, r2, r3
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <UART_SetConfig+0x118>)
 800477a:	fba3 0302 	umull	r0, r3, r3, r2
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2064      	movs	r0, #100	; 0x64
 8004782:	fb00 f303 	mul.w	r3, r0, r3
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	3332      	adds	r3, #50	; 0x32
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <UART_SetConfig+0x118>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004798:	4419      	add	r1, r3
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009a      	lsls	r2, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <UART_SetConfig+0x118>)
 80047b2:	fba3 0302 	umull	r0, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2064      	movs	r0, #100	; 0x64
 80047ba:	fb00 f303 	mul.w	r3, r0, r3
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	3332      	adds	r3, #50	; 0x32
 80047c4:	4a07      	ldr	r2, [pc, #28]	; (80047e4 <UART_SetConfig+0x118>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	440a      	add	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40013800 	.word	0x40013800
 80047e4:	51eb851f 	.word	0x51eb851f

080047e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047fa:	2b84      	cmp	r3, #132	; 0x84
 80047fc:	d005      	beq.n	800480a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	3303      	adds	r3, #3
 8004808:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800480a:	68fb      	ldr	r3, [r7, #12]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800481a:	f001 f9d7 	bl	8005bcc <vTaskStartScheduler>
  
  return osOK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}

08004824 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af04      	add	r7, sp, #16
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d020      	beq.n	8004878 <osThreadCreate+0x54>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01c      	beq.n	8004878 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685c      	ldr	r4, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691e      	ldr	r6, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ffc9 	bl	80047e8 <makeFreeRtosPriority>
 8004856:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004860:	9202      	str	r2, [sp, #8]
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	9100      	str	r1, [sp, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	4632      	mov	r2, r6
 800486a:	4629      	mov	r1, r5
 800486c:	4620      	mov	r0, r4
 800486e:	f000 ffef 	bl	8005850 <xTaskCreateStatic>
 8004872:	4603      	mov	r3, r0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e01c      	b.n	80048b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685c      	ldr	r4, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004884:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ffab 	bl	80047e8 <makeFreeRtosPriority>
 8004892:	4602      	mov	r2, r0
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	9200      	str	r2, [sp, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4632      	mov	r2, r6
 80048a0:	4629      	mov	r1, r5
 80048a2:	4620      	mov	r0, r4
 80048a4:	f001 f830 	bl	8005908 <xTaskCreate>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048bc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80048c2:	201c      	movs	r0, #28
 80048c4:	f002 fcaa 	bl	800721c <pvPortMalloc>
 80048c8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f9ea 	bl	8004cb4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80048e6:	687b      	ldr	r3, [r7, #4]
	}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b090      	sub	sp, #64	; 0x40
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004906:	2300      	movs	r3, #0
 8004908:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	61fb      	str	r3, [r7, #28]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xEventGroupWaitBits+0x72>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	61bb      	str	r3, [r7, #24]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004962:	f001 fe17 	bl	8006594 <xTaskGetSchedulerState>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <xEventGroupWaitBits+0x82>
 800496c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <xEventGroupWaitBits+0x86>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <xEventGroupWaitBits+0x88>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	617b      	str	r3, [r7, #20]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004992:	f001 f981 	bl	8005c98 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049a2:	f000 f966 	bl	8004c72 <prvTestWaitCondition>
 80049a6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d028      	beq.n	8004a0e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	401a      	ands	r2, r3
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e020      	b.n	8004a0e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80049cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30
 80049da:	e018      	b.n	8004a0e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	1d18      	adds	r0, r3, #4
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	4313      	orrs	r3, r2
 8004a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a04:	4619      	mov	r1, r3
 8004a06:	f001 fb3b 	bl	8006080 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004a0e:	f001 f951 	bl	8005cb4 <xTaskResumeAll>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d031      	beq.n	8004a7e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d107      	bne.n	8004a30 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <xEventGroupWaitBits+0x198>)
 8004a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004a30:	f001 fe54 	bl	80066dc <uxTaskResetEventItemValue>
 8004a34:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11a      	bne.n	8004a76 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004a40:	f002 faec 	bl	800701c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a50:	f000 f90f 	bl	8004c72 <prvTestWaitCondition>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	401a      	ands	r2, r3
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004a72:	f002 fb03 	bl	800707c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3740      	adds	r7, #64	; 0x40
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <xEventGroupClearBits+0x4a>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60bb      	str	r3, [r7, #8]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004ad6:	f002 faa1 	bl	800701c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	401a      	ands	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004aee:	f002 fac5 	bl	800707c <vPortExitCritical>

	return uxReturn;
 8004af2:	693b      	ldr	r3, [r7, #16]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b08:	f3ef 8211 	mrs	r2, BASEPRI
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	60fa      	str	r2, [r7, #12]
 8004b1e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b20:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b22:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b34:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8004b36:	697b      	ldr	r3, [r7, #20]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3724      	adds	r7, #36	; 0x24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b08e      	sub	sp, #56	; 0x38
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <xEventGroupSetBits+0x32>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	613b      	str	r3, [r7, #16]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <xEventGroupSetBits+0x52>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60fb      	str	r3, [r7, #12]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	3304      	adds	r3, #4
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004ba0:	f001 f87a 	bl	8005c98 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004bb6:	e03c      	b.n	8004c32 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bce:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d108      	bne.n	8004bf4 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf2:	e008      	b.n	8004c06 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d101      	bne.n	8004c06 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c26:	4619      	mov	r1, r3
 8004c28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c2a:	f001 faf3 	bl	8006214 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d1be      	bne.n	8004bb8 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	43db      	mvns	r3, r3
 8004c42:	401a      	ands	r2, r3
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004c48:	f001 f834 	bl	8005cb4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3738      	adds	r7, #56	; 0x38
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff6c 	bl	8004b42 <xEventGroupSetBits>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d107      	bne.n	8004c98 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c92:	2301      	movs	r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e007      	b.n	8004ca8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d101      	bne.n	8004ca8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004ca8:	697b      	ldr	r3, [r7, #20]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f103 0208 	add.w	r2, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f103 0208 	add.w	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f103 0208 	add.w	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d103      	bne.n	8004d70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e00c      	b.n	8004d8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3308      	adds	r3, #8
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e002      	b.n	8004d7e <vListInsert+0x2e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d2f6      	bcs.n	8004d78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6892      	ldr	r2, [r2, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6852      	ldr	r2, [r2, #4]
 8004de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d103      	bne.n	8004df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
	...

08004e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xQueueGenericReset+0x2a>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60bb      	str	r3, [r7, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e3e:	f002 f8ed 	bl	800701c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e4e:	fb01 f303 	mul.w	r3, r1, r3
 8004e52:	441a      	add	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	441a      	add	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	22ff      	movs	r2, #255	; 0xff
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	22ff      	movs	r2, #255	; 0xff
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d114      	bne.n	8004ebe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01a      	beq.n	8004ed2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f955 	bl	8006150 <xTaskRemoveFromEventList>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <xQueueGenericReset+0xcc>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	e009      	b.n	8004ed2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3310      	adds	r3, #16
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fef6 	bl	8004cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fef1 	bl	8004cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ed2:	f002 f8d3 	bl	800707c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ed6:	2301      	movs	r3, #1
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	e000ed04 	.word	0xe000ed04

08004ee4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <xQueueGenericCreateStatic+0x52>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <xQueueGenericCreateStatic+0x56>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericCreateStatic+0x58>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	623b      	str	r3, [r7, #32]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <xQueueGenericCreateStatic+0x7e>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <xQueueGenericCreateStatic+0x82>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueGenericCreateStatic+0x84>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	61fb      	str	r3, [r7, #28]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f82:	2348      	movs	r3, #72	; 0x48
 8004f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b48      	cmp	r3, #72	; 0x48
 8004f8a:	d00a      	beq.n	8004fa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61bb      	str	r3, [r7, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f843 	bl	800504e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3730      	adds	r7, #48	; 0x30
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b08a      	sub	sp, #40	; 0x28
 8004fd6:	af02      	add	r7, sp, #8
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <xQueueGenericCreate+0x2a>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	613b      	str	r3, [r7, #16]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e004      	b.n	8005012 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	fb02 f303 	mul.w	r3, r2, r3
 8005010:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	3348      	adds	r3, #72	; 0x48
 8005016:	4618      	mov	r0, r3
 8005018:	f002 f900 	bl	800721c <pvPortMalloc>
 800501c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	3348      	adds	r3, #72	; 0x48
 8005028:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005032:	79fa      	ldrb	r2, [r7, #7]
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f805 	bl	800504e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005044:	69bb      	ldr	r3, [r7, #24]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e002      	b.n	8005070 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800507c:	2101      	movs	r1, #1
 800507e:	69b8      	ldr	r0, [r7, #24]
 8005080:	f7ff fec8 	bl	8004e14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08e      	sub	sp, #56	; 0x38
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800509a:	2300      	movs	r3, #0
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xQueueGenericSend+0x32>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <xQueueGenericSend+0x40>
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <xQueueGenericSend+0x44>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <xQueueGenericSend+0x46>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <xQueueGenericSend+0x60>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d103      	bne.n	80050fa <xQueueGenericSend+0x6e>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <xQueueGenericSend+0x72>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <xQueueGenericSend+0x74>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericSend+0x8e>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	623b      	str	r3, [r7, #32]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800511a:	f001 fa3b 	bl	8006594 <xTaskGetSchedulerState>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <xQueueGenericSend+0x9e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <xQueueGenericSend+0xa2>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <xQueueGenericSend+0xa4>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xQueueGenericSend+0xbe>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	61fb      	str	r3, [r7, #28]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800514a:	f001 ff67 	bl	800701c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	429a      	cmp	r2, r3
 8005158:	d302      	bcc.n	8005160 <xQueueGenericSend+0xd4>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d129      	bne.n	80051b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005166:	f000 fa07 	bl	8005578 <prvCopyDataToQueue>
 800516a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d010      	beq.n	8005196 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	3324      	adds	r3, #36	; 0x24
 8005178:	4618      	mov	r0, r3
 800517a:	f000 ffe9 	bl	8006150 <xTaskRemoveFromEventList>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d013      	beq.n	80051ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005184:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <xQueueGenericSend+0x1f8>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	e00a      	b.n	80051ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800519c:	4b39      	ldr	r3, [pc, #228]	; (8005284 <xQueueGenericSend+0x1f8>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051ac:	f001 ff66 	bl	800707c <vPortExitCritical>
				return pdPASS;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e063      	b.n	800527c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ba:	f001 ff5f 	bl	800707c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	e05c      	b.n	800527c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 f883 	bl	80062d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051d6:	f001 ff51 	bl	800707c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051da:	f000 fd5d 	bl	8005c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051de:	f001 ff1d 	bl	800701c <vPortEnterCritical>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051e8:	b25b      	sxtb	r3, r3
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d103      	bne.n	80051f8 <xQueueGenericSend+0x16c>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051fe:	b25b      	sxtb	r3, r3
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d103      	bne.n	800520e <xQueueGenericSend+0x182>
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800520e:	f001 ff35 	bl	800707c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005212:	1d3a      	adds	r2, r7, #4
 8005214:	f107 0314 	add.w	r3, r7, #20
 8005218:	4611      	mov	r1, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f872 	bl	8006304 <xTaskCheckForTimeOut>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d124      	bne.n	8005270 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005228:	f000 fa9e 	bl	8005768 <prvIsQueueFull>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	3310      	adds	r3, #16
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4611      	mov	r1, r2
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fefc 	bl	8006038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005242:	f000 fa29 	bl	8005698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005246:	f000 fd35 	bl	8005cb4 <xTaskResumeAll>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	f47f af7c 	bne.w	800514a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <xQueueGenericSend+0x1f8>)
 8005254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	e772      	b.n	800514a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005266:	f000 fa17 	bl	8005698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800526a:	f000 fd23 	bl	8005cb4 <xTaskResumeAll>
 800526e:	e76c      	b.n	800514a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005272:	f000 fa11 	bl	8005698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005276:	f000 fd1d 	bl	8005cb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800527a:	2300      	movs	r3, #0
		}
	}
}
 800527c:	4618      	mov	r0, r3
 800527e:	3738      	adds	r7, #56	; 0x38
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	; 0x38
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <xQueueGenericSendFromISR+0x3c>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <xQueueGenericSendFromISR+0x40>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <xQueueGenericSendFromISR+0x42>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	623b      	str	r3, [r7, #32]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <xQueueGenericSendFromISR+0x6a>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <xQueueGenericSendFromISR+0x6e>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <xQueueGenericSendFromISR+0x70>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61fb      	str	r3, [r7, #28]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005312:	f001 ff45 	bl	80071a0 <vPortValidateInterruptPriority>
	__asm volatile
 8005316:	f3ef 8211 	mrs	r2, BASEPRI
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	61ba      	str	r2, [r7, #24]
 800532c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800532e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <xQueueGenericSendFromISR+0xbc>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d12c      	bne.n	800539e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005354:	f000 f910 	bl	8005578 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005358:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d112      	bne.n	8005388 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d016      	beq.n	8005398 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	3324      	adds	r3, #36	; 0x24
 800536e:	4618      	mov	r0, r3
 8005370:	f000 feee 	bl	8006150 <xTaskRemoveFromEventList>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e007      	b.n	8005398 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005388:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800538c:	3301      	adds	r3, #1
 800538e:	b2db      	uxtb	r3, r3
 8005390:	b25a      	sxtb	r2, r3
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800539c:	e001      	b.n	80053a2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f383 8811 	msr	BASEPRI, r3
}
 80053ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3738      	adds	r7, #56	; 0x38
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <xQueueReceive+0x30>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	623b      	str	r3, [r7, #32]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <xQueueReceive+0x3e>
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueReceive+0x42>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueReceive+0x44>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueReceive+0x5e>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	61fb      	str	r3, [r7, #28]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005416:	f001 f8bd 	bl	8006594 <xTaskGetSchedulerState>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <xQueueReceive+0x6e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueReceive+0x72>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueReceive+0x74>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueReceive+0x8e>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61bb      	str	r3, [r7, #24]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005446:	f001 fde9 	bl	800701c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01f      	beq.n	8005496 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545a:	f000 f8f7 	bl	800564c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00f      	beq.n	800548e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	3310      	adds	r3, #16
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fe6c 	bl	8006150 <xTaskRemoveFromEventList>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800547e:	4b3d      	ldr	r3, [pc, #244]	; (8005574 <xQueueReceive+0x1bc>)
 8005480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800548e:	f001 fdf5 	bl	800707c <vPortExitCritical>
				return pdPASS;
 8005492:	2301      	movs	r3, #1
 8005494:	e069      	b.n	800556a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d103      	bne.n	80054a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549c:	f001 fdee 	bl	800707c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e062      	b.n	800556a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054aa:	f107 0310 	add.w	r3, r7, #16
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ff12 	bl	80062d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054b8:	f001 fde0 	bl	800707c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054bc:	f000 fbec 	bl	8005c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c0:	f001 fdac 	bl	800701c <vPortEnterCritical>
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d103      	bne.n	80054da <xQueueReceive+0x122>
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e0:	b25b      	sxtb	r3, r3
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	d103      	bne.n	80054f0 <xQueueReceive+0x138>
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f0:	f001 fdc4 	bl	800707c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f4:	1d3a      	adds	r2, r7, #4
 80054f6:	f107 0310 	add.w	r3, r7, #16
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 ff01 	bl	8006304 <xTaskCheckForTimeOut>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d123      	bne.n	8005550 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800550a:	f000 f917 	bl	800573c <prvIsQueueEmpty>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d017      	beq.n	8005544 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	3324      	adds	r3, #36	; 0x24
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	4611      	mov	r1, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fd8b 	bl	8006038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005524:	f000 f8b8 	bl	8005698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005528:	f000 fbc4 	bl	8005cb4 <xTaskResumeAll>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d189      	bne.n	8005446 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <xQueueReceive+0x1bc>)
 8005534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	e780      	b.n	8005446 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005546:	f000 f8a7 	bl	8005698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800554a:	f000 fbb3 	bl	8005cb4 <xTaskResumeAll>
 800554e:	e77a      	b.n	8005446 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005552:	f000 f8a1 	bl	8005698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005556:	f000 fbad 	bl	8005cb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555c:	f000 f8ee 	bl	800573c <prvIsQueueEmpty>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f43f af6f 	beq.w	8005446 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800556a:	4618      	mov	r0, r3
 800556c:	3730      	adds	r7, #48	; 0x30
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10d      	bne.n	80055b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d14d      	bne.n	800563a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 f814 	bl	80065d0 <xTaskPriorityDisinherit>
 80055a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	e043      	b.n	800563a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d119      	bne.n	80055ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6898      	ldr	r0, [r3, #8]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	461a      	mov	r2, r3
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	f002 f82e 	bl	8007624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	441a      	add	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d32b      	bcc.n	800563a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	609a      	str	r2, [r3, #8]
 80055ea:	e026      	b.n	800563a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68d8      	ldr	r0, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	461a      	mov	r2, r3
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	f002 f814 	bl	8007624 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	425b      	negs	r3, r3
 8005606:	441a      	add	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d207      	bcs.n	8005628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	425b      	negs	r3, r3
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d105      	bne.n	800563a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	3b01      	subs	r3, #1
 8005638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005642:	697b      	ldr	r3, [r7, #20]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d018      	beq.n	8005690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	441a      	add	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d303      	bcc.n	8005680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68d9      	ldr	r1, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	461a      	mov	r2, r3
 800568a:	6838      	ldr	r0, [r7, #0]
 800568c:	f001 ffca 	bl	8007624 <memcpy>
	}
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056a0:	f001 fcbc 	bl	800701c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ac:	e011      	b.n	80056d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d012      	beq.n	80056dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3324      	adds	r3, #36	; 0x24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fd48 	bl	8006150 <xTaskRemoveFromEventList>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056c6:	f000 fe7f 	bl	80063c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dce9      	bgt.n	80056ae <prvUnlockQueue+0x16>
 80056da:	e000      	b.n	80056de <prvUnlockQueue+0x46>
					break;
 80056dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056e6:	f001 fcc9 	bl	800707c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ea:	f001 fc97 	bl	800701c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f6:	e011      	b.n	800571c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d012      	beq.n	8005726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3310      	adds	r3, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fd23 	bl	8006150 <xTaskRemoveFromEventList>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005710:	f000 fe5a 	bl	80063c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	3b01      	subs	r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dce9      	bgt.n	80056f8 <prvUnlockQueue+0x60>
 8005724:	e000      	b.n	8005728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	22ff      	movs	r2, #255	; 0xff
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005730:	f001 fca4 	bl	800707c <vPortExitCritical>
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005744:	f001 fc6a 	bl	800701c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e001      	b.n	800575a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575a:	f001 fc8f 	bl	800707c <vPortExitCritical>

	return xReturn;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005770:	f001 fc54 	bl	800701c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	429a      	cmp	r2, r3
 800577e:	d102      	bne.n	8005786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e001      	b.n	800578a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800578a:	f001 fc77 	bl	800707c <vPortExitCritical>

	return xReturn;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e014      	b.n	80057d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057a8:	4a0e      	ldr	r2, [pc, #56]	; (80057e4 <vQueueAddToRegistry+0x4c>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057b4:	490b      	ldr	r1, [pc, #44]	; (80057e4 <vQueueAddToRegistry+0x4c>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <vQueueAddToRegistry+0x4c>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057ca:	e006      	b.n	80057da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	d9e7      	bls.n	80057a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	20000954 	.word	0x20000954

080057e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057f8:	f001 fc10 	bl	800701c <vPortEnterCritical>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005802:	b25b      	sxtb	r3, r3
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d103      	bne.n	8005812 <vQueueWaitForMessageRestricted+0x2a>
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005818:	b25b      	sxtb	r3, r3
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d103      	bne.n	8005828 <vQueueWaitForMessageRestricted+0x40>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005828:	f001 fc28 	bl	800707c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	3324      	adds	r3, #36	; 0x24
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fc5b 	bl	80060f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f7ff ff28 	bl	8005698 <prvUnlockQueue>
	}
 8005848:	bf00      	nop
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	; 0x38
 8005854:	af04      	add	r7, sp, #16
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	623b      	str	r3, [r7, #32]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xTaskCreateStatic+0x46>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	61fb      	str	r3, [r7, #28]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005896:	2364      	movs	r3, #100	; 0x64
 8005898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b64      	cmp	r3, #100	; 0x64
 800589e:	d00a      	beq.n	80058b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	61bb      	str	r3, [r7, #24]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01e      	beq.n	80058fa <xTaskCreateStatic+0xaa>
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01b      	beq.n	80058fa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058d4:	2300      	movs	r3, #0
 80058d6:	9303      	str	r3, [sp, #12]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f850 	bl	8005992 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f4:	f000 f8cc 	bl	8005a90 <prvAddNewTaskToReadyList>
 80058f8:	e001      	b.n	80058fe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058fe:	697b      	ldr	r3, [r7, #20]
	}
 8005900:	4618      	mov	r0, r3
 8005902:	3728      	adds	r7, #40	; 0x28
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	; 0x30
 800590c:	af04      	add	r7, sp, #16
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fc7d 	bl	800721c <pvPortMalloc>
 8005922:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800592a:	2064      	movs	r0, #100	; 0x64
 800592c:	f001 fc76 	bl	800721c <pvPortMalloc>
 8005930:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
 800593e:	e005      	b.n	800594c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005940:	6978      	ldr	r0, [r7, #20]
 8005942:	f001 fd2f 	bl	80073a4 <vPortFree>
 8005946:	e001      	b.n	800594c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	2300      	movs	r3, #0
 800595e:	9303      	str	r3, [sp, #12]
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f80e 	bl	8005992 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005976:	69f8      	ldr	r0, [r7, #28]
 8005978:	f000 f88a 	bl	8005a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800597c:	2301      	movs	r3, #1
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e002      	b.n	8005988 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005988:	69bb      	ldr	r3, [r7, #24]
	}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	3b01      	subs	r3, #1
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <prvInitialiseNewTask+0x48>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	617b      	str	r3, [r7, #20]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059da:	2300      	movs	r3, #0
 80059dc:	61fb      	str	r3, [r7, #28]
 80059de:	e012      	b.n	8005a06 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	7819      	ldrb	r1, [r3, #0]
 80059e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	3334      	adds	r3, #52	; 0x34
 80059f0:	460a      	mov	r2, r1
 80059f2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d006      	beq.n	8005a0e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b1f      	cmp	r3, #31
 8005a0a:	d9e9      	bls.n	80059e0 <prvInitialiseNewTask+0x4e>
 8005a0c:	e000      	b.n	8005a10 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005a0e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d901      	bls.n	8005a22 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a1e:	2306      	movs	r3, #6
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	2200      	movs	r2, #0
 8005a32:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff f95a 	bl	8004cf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	3318      	adds	r3, #24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff f955 	bl	8004cf2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	f1c3 0207 	rsb	r2, r3, #7
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2200      	movs	r2, #0
 8005a62:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	69b8      	ldr	r0, [r7, #24]
 8005a72:	f001 f9e3 	bl	8006e3c <pxPortInitialiseStack>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a88:	bf00      	nop
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a98:	f001 fac0 	bl	800701c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a9c:	4b2a      	ldr	r3, [pc, #168]	; (8005b48 <prvAddNewTaskToReadyList+0xb8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	4a29      	ldr	r2, [pc, #164]	; (8005b48 <prvAddNewTaskToReadyList+0xb8>)
 8005aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005aa6:	4b29      	ldr	r3, [pc, #164]	; (8005b4c <prvAddNewTaskToReadyList+0xbc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aae:	4a27      	ldr	r2, [pc, #156]	; (8005b4c <prvAddNewTaskToReadyList+0xbc>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ab4:	4b24      	ldr	r3, [pc, #144]	; (8005b48 <prvAddNewTaskToReadyList+0xb8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d110      	bne.n	8005ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005abc:	f000 fca8 	bl	8006410 <prvInitialiseTaskLists>
 8005ac0:	e00d      	b.n	8005ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <prvAddNewTaskToReadyList+0xc0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005aca:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <prvAddNewTaskToReadyList+0xbc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d802      	bhi.n	8005ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <prvAddNewTaskToReadyList+0xbc>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ade:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <prvAddNewTaskToReadyList+0xc4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <prvAddNewTaskToReadyList+0xc4>)
 8005ae6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	2201      	movs	r2, #1
 8005aee:	409a      	lsls	r2, r3
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <prvAddNewTaskToReadyList+0xc8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <prvAddNewTaskToReadyList+0xc8>)
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <prvAddNewTaskToReadyList+0xcc>)
 8005b08:	441a      	add	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4610      	mov	r0, r2
 8005b12:	f7ff f8fa 	bl	8004d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 fab1 	bl	800707c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <prvAddNewTaskToReadyList+0xc0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <prvAddNewTaskToReadyList+0xbc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d207      	bcs.n	8005b40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <prvAddNewTaskToReadyList+0xd0>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000a94 	.word	0x20000a94
 8005b4c:	20000994 	.word	0x20000994
 8005b50:	20000aa0 	.word	0x20000aa0
 8005b54:	20000ab0 	.word	0x20000ab0
 8005b58:	20000a9c 	.word	0x20000a9c
 8005b5c:	20000998 	.word	0x20000998
 8005b60:	e000ed04 	.word	0xe000ed04

08005b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d017      	beq.n	8005ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <vTaskDelay+0x60>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <vTaskDelay+0x30>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60bb      	str	r3, [r7, #8]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b94:	f000 f880 	bl	8005c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b98:	2100      	movs	r1, #0
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fdb6 	bl	800670c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ba0:	f000 f888 	bl	8005cb4 <xTaskResumeAll>
 8005ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <vTaskDelay+0x64>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000abc 	.word	0x20000abc
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bda:	463a      	mov	r2, r7
 8005bdc:	1d39      	adds	r1, r7, #4
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fa fab4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	9202      	str	r2, [sp, #8]
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	460a      	mov	r2, r1
 8005bfa:	4921      	ldr	r1, [pc, #132]	; (8005c80 <vTaskStartScheduler+0xb4>)
 8005bfc:	4821      	ldr	r0, [pc, #132]	; (8005c84 <vTaskStartScheduler+0xb8>)
 8005bfe:	f7ff fe27 	bl	8005850 <xTaskCreateStatic>
 8005c02:	4603      	mov	r3, r0
 8005c04:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <vTaskStartScheduler+0xbc>)
 8005c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c08:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <vTaskStartScheduler+0xbc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c10:	2301      	movs	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e001      	b.n	8005c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d102      	bne.n	8005c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c20:	f000 fdda 	bl	80067d8 <xTimerCreateTimerTask>
 8005c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d116      	bne.n	8005c5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	613b      	str	r3, [r7, #16]
}
 8005c3e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <vTaskStartScheduler+0xc0>)
 8005c42:	f04f 32ff 	mov.w	r2, #4294967295
 8005c46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <vTaskStartScheduler+0xc4>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <vTaskStartScheduler+0xc8>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c54:	f001 f970 	bl	8006f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c58:	e00e      	b.n	8005c78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d10a      	bne.n	8005c78 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60fb      	str	r3, [r7, #12]
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <vTaskStartScheduler+0xaa>
}
 8005c78:	bf00      	nop
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	08007720 	.word	0x08007720
 8005c84:	080063e1 	.word	0x080063e1
 8005c88:	20000ab8 	.word	0x20000ab8
 8005c8c:	20000ab4 	.word	0x20000ab4
 8005c90:	20000aa0 	.word	0x20000aa0
 8005c94:	20000a98 	.word	0x20000a98

08005c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <vTaskSuspendAll+0x18>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	4a03      	ldr	r2, [pc, #12]	; (8005cb0 <vTaskSuspendAll+0x18>)
 8005ca4:	6013      	str	r3, [r2, #0]
}
 8005ca6:	bf00      	nop
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000abc 	.word	0x20000abc

08005cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cc2:	4b41      	ldr	r3, [pc, #260]	; (8005dc8 <xTaskResumeAll+0x114>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	603b      	str	r3, [r7, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ce0:	f001 f99c 	bl	800701c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ce4:	4b38      	ldr	r3, [pc, #224]	; (8005dc8 <xTaskResumeAll+0x114>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	4a37      	ldr	r2, [pc, #220]	; (8005dc8 <xTaskResumeAll+0x114>)
 8005cec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cee:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <xTaskResumeAll+0x114>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d161      	bne.n	8005dba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cf6:	4b35      	ldr	r3, [pc, #212]	; (8005dcc <xTaskResumeAll+0x118>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d05d      	beq.n	8005dba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cfe:	e02e      	b.n	8005d5e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d00:	4b33      	ldr	r3, [pc, #204]	; (8005dd0 <xTaskResumeAll+0x11c>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3318      	adds	r3, #24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff f857 	bl	8004dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff f852 	bl	8004dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	2201      	movs	r2, #1
 8005d22:	409a      	lsls	r2, r3
 8005d24:	4b2b      	ldr	r3, [pc, #172]	; (8005dd4 <xTaskResumeAll+0x120>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <xTaskResumeAll+0x120>)
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4a27      	ldr	r2, [pc, #156]	; (8005dd8 <xTaskResumeAll+0x124>)
 8005d3c:	441a      	add	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7fe ffe0 	bl	8004d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4e:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <xTaskResumeAll+0x128>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d302      	bcc.n	8005d5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d58:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <xTaskResumeAll+0x12c>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d5e:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <xTaskResumeAll+0x11c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1cc      	bne.n	8005d00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d6c:	f000 fbee 	bl	800654c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d70:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <xTaskResumeAll+0x130>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d010      	beq.n	8005d9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d7c:	f000 f844 	bl	8005e08 <xTaskIncrementTick>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d86:	4b16      	ldr	r3, [pc, #88]	; (8005de0 <xTaskResumeAll+0x12c>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f1      	bne.n	8005d7c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <xTaskResumeAll+0x130>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <xTaskResumeAll+0x12c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <xTaskResumeAll+0x134>)
 8005dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dba:	f001 f95f 	bl	800707c <vPortExitCritical>

	return xAlreadyYielded;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000abc 	.word	0x20000abc
 8005dcc:	20000a94 	.word	0x20000a94
 8005dd0:	20000a54 	.word	0x20000a54
 8005dd4:	20000a9c 	.word	0x20000a9c
 8005dd8:	20000998 	.word	0x20000998
 8005ddc:	20000994 	.word	0x20000994
 8005de0:	20000aa8 	.word	0x20000aa8
 8005de4:	20000aa4 	.word	0x20000aa4
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <xTaskGetTickCount+0x18>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005df8:	687b      	ldr	r3, [r7, #4]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	20000a98 	.word	0x20000a98

08005e08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e12:	4b51      	ldr	r3, [pc, #324]	; (8005f58 <xTaskIncrementTick+0x150>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 808d 	bne.w	8005f36 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e1c:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <xTaskIncrementTick+0x154>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e24:	4a4d      	ldr	r2, [pc, #308]	; (8005f5c <xTaskIncrementTick+0x154>)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d120      	bne.n	8005e72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e30:	4b4b      	ldr	r3, [pc, #300]	; (8005f60 <xTaskIncrementTick+0x158>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	603b      	str	r3, [r7, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xTaskIncrementTick+0x46>
 8005e50:	4b43      	ldr	r3, [pc, #268]	; (8005f60 <xTaskIncrementTick+0x158>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	4b43      	ldr	r3, [pc, #268]	; (8005f64 <xTaskIncrementTick+0x15c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	; (8005f60 <xTaskIncrementTick+0x158>)
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	4a41      	ldr	r2, [pc, #260]	; (8005f64 <xTaskIncrementTick+0x15c>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <xTaskIncrementTick+0x160>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	4a3f      	ldr	r2, [pc, #252]	; (8005f68 <xTaskIncrementTick+0x160>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	f000 fb6d 	bl	800654c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e72:	4b3e      	ldr	r3, [pc, #248]	; (8005f6c <xTaskIncrementTick+0x164>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d34d      	bcc.n	8005f18 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e7c:	4b38      	ldr	r3, [pc, #224]	; (8005f60 <xTaskIncrementTick+0x158>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <xTaskIncrementTick+0x82>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xTaskIncrementTick+0x84>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e90:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <xTaskIncrementTick+0x164>)
 8005e92:	f04f 32ff 	mov.w	r2, #4294967295
 8005e96:	601a      	str	r2, [r3, #0]
					break;
 8005e98:	e03e      	b.n	8005f18 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <xTaskIncrementTick+0x158>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d203      	bcs.n	8005eba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eb2:	4a2e      	ldr	r2, [pc, #184]	; (8005f6c <xTaskIncrementTick+0x164>)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6013      	str	r3, [r2, #0]
						break;
 8005eb8:	e02e      	b.n	8005f18 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe ff7e 	bl	8004dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	3318      	adds	r3, #24
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe ff75 	bl	8004dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	2201      	movs	r2, #1
 8005edc:	409a      	lsls	r2, r3
 8005ede:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <xTaskIncrementTick+0x168>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <xTaskIncrementTick+0x168>)
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <xTaskIncrementTick+0x16c>)
 8005ef6:	441a      	add	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe ff03 	bl	8004d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f08:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <xTaskIncrementTick+0x170>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d3b4      	bcc.n	8005e7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f12:	2301      	movs	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f16:	e7b1      	b.n	8005e7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <xTaskIncrementTick+0x170>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1e:	4915      	ldr	r1, [pc, #84]	; (8005f74 <xTaskIncrementTick+0x16c>)
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d907      	bls.n	8005f40 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005f30:	2301      	movs	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e004      	b.n	8005f40 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <xTaskIncrementTick+0x174>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	4a0f      	ldr	r2, [pc, #60]	; (8005f7c <xTaskIncrementTick+0x174>)
 8005f3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <xTaskIncrementTick+0x178>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f4c:	697b      	ldr	r3, [r7, #20]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000abc 	.word	0x20000abc
 8005f5c:	20000a98 	.word	0x20000a98
 8005f60:	20000a4c 	.word	0x20000a4c
 8005f64:	20000a50 	.word	0x20000a50
 8005f68:	20000aac 	.word	0x20000aac
 8005f6c:	20000ab4 	.word	0x20000ab4
 8005f70:	20000a9c 	.word	0x20000a9c
 8005f74:	20000998 	.word	0x20000998
 8005f78:	20000994 	.word	0x20000994
 8005f7c:	20000aa4 	.word	0x20000aa4
 8005f80:	20000aa8 	.word	0x20000aa8

08005f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <vTaskSwitchContext+0xa0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f92:	4b25      	ldr	r3, [pc, #148]	; (8006028 <vTaskSwitchContext+0xa4>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f98:	e03f      	b.n	800601a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005f9a:	4b23      	ldr	r3, [pc, #140]	; (8006028 <vTaskSwitchContext+0xa4>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005fa0:	4b22      	ldr	r3, [pc, #136]	; (800602c <vTaskSwitchContext+0xa8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	fab3 f383 	clz	r3, r3
 8005fac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	f1c3 031f 	rsb	r3, r3, #31
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	491e      	ldr	r1, [pc, #120]	; (8006030 <vTaskSwitchContext+0xac>)
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	607b      	str	r3, [r7, #4]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <vTaskSwitchContext+0x5a>
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4a11      	ldr	r2, [pc, #68]	; (8006030 <vTaskSwitchContext+0xac>)
 8005fec:	4413      	add	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3308      	adds	r3, #8
 8006002:	429a      	cmp	r2, r3
 8006004:	d104      	bne.n	8006010 <vTaskSwitchContext+0x8c>
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	605a      	str	r2, [r3, #4]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4a07      	ldr	r2, [pc, #28]	; (8006034 <vTaskSwitchContext+0xb0>)
 8006018:	6013      	str	r3, [r2, #0]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	bc80      	pop	{r7}
 8006022:	4770      	bx	lr
 8006024:	20000abc 	.word	0x20000abc
 8006028:	20000aa8 	.word	0x20000aa8
 800602c:	20000a9c 	.word	0x20000a9c
 8006030:	20000998 	.word	0x20000998
 8006034:	20000994 	.word	0x20000994

08006038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	60fb      	str	r3, [r7, #12]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800605e:	4b07      	ldr	r3, [pc, #28]	; (800607c <vTaskPlaceOnEventList+0x44>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3318      	adds	r3, #24
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fe fe72 	bl	8004d50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800606c:	2101      	movs	r1, #1
 800606e:	6838      	ldr	r0, [r7, #0]
 8006070:	f000 fb4c 	bl	800670c <prvAddCurrentTaskToDelayedList>
}
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000994 	.word	0x20000994

08006080 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	617b      	str	r3, [r7, #20]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80060c6:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060d0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3318      	adds	r3, #24
 80060d8:	4619      	mov	r1, r3
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7fe fe15 	bl	8004d0a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060e0:	2101      	movs	r1, #1
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fb12 	bl	800670c <prvAddCurrentTaskToDelayedList>
}
 80060e8:	bf00      	nop
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20000abc 	.word	0x20000abc
 80060f4:	20000994 	.word	0x20000994

080060f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	617b      	str	r3, [r7, #20]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <vTaskPlaceOnEventListRestricted+0x54>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3318      	adds	r3, #24
 8006126:	4619      	mov	r1, r3
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7fe fdee 	bl	8004d0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006134:	f04f 33ff 	mov.w	r3, #4294967295
 8006138:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	68b8      	ldr	r0, [r7, #8]
 800613e:	f000 fae5 	bl	800670c <prvAddCurrentTaskToDelayedList>
	}
 8006142:	bf00      	nop
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000994 	.word	0x20000994

08006150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	60fb      	str	r3, [r7, #12]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	3318      	adds	r3, #24
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fe1d 	bl	8004dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <xTaskRemoveFromEventList+0xac>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d11c      	bne.n	80061c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3304      	adds	r3, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fe14 	bl	8004dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	2201      	movs	r2, #1
 800619e:	409a      	lsls	r2, r3
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <xTaskRemoveFromEventList+0xb0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	4a16      	ldr	r2, [pc, #88]	; (8006200 <xTaskRemoveFromEventList+0xb0>)
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4a13      	ldr	r2, [pc, #76]	; (8006204 <xTaskRemoveFromEventList+0xb4>)
 80061b8:	441a      	add	r2, r3
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7fe fda2 	bl	8004d0a <vListInsertEnd>
 80061c6:	e005      	b.n	80061d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3318      	adds	r3, #24
 80061cc:	4619      	mov	r1, r3
 80061ce:	480e      	ldr	r0, [pc, #56]	; (8006208 <xTaskRemoveFromEventList+0xb8>)
 80061d0:	f7fe fd9b 	bl	8004d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <xTaskRemoveFromEventList+0xbc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	429a      	cmp	r2, r3
 80061e0:	d905      	bls.n	80061ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061e2:	2301      	movs	r3, #1
 80061e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <xTaskRemoveFromEventList+0xc0>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e001      	b.n	80061f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80061f2:	697b      	ldr	r3, [r7, #20]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000abc 	.word	0x20000abc
 8006200:	20000a9c 	.word	0x20000a9c
 8006204:	20000998 	.word	0x20000998
 8006208:	20000a54 	.word	0x20000a54
 800620c:	20000994 	.word	0x20000994
 8006210:	20000aa8 	.word	0x20000aa8

08006214 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800621e:	4b29      	ldr	r3, [pc, #164]	; (80062c4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	613b      	str	r3, [r7, #16]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	60fb      	str	r3, [r7, #12]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fe fda9 	bl	8004dc0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	3304      	adds	r3, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fda4 	bl	8004dc0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	2201      	movs	r2, #1
 800627e:	409a      	lsls	r2, r3
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006298:	441a      	add	r2, r3
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	3304      	adds	r3, #4
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7fe fd32 	bl	8004d0a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d902      	bls.n	80062ba <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
	}
}
 80062ba:	bf00      	nop
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000abc 	.word	0x20000abc
 80062c8:	20000a9c 	.word	0x20000a9c
 80062cc:	20000998 	.word	0x20000998
 80062d0:	20000994 	.word	0x20000994
 80062d4:	20000aa8 	.word	0x20000aa8

080062d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062e0:	4b06      	ldr	r3, [pc, #24]	; (80062fc <vTaskInternalSetTimeOutState+0x24>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <vTaskInternalSetTimeOutState+0x28>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	605a      	str	r2, [r3, #4]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20000aac 	.word	0x20000aac
 8006300:	20000a98 	.word	0x20000a98

08006304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	613b      	str	r3, [r7, #16]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006346:	f000 fe69 	bl	800701c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800634a:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <xTaskCheckForTimeOut+0xbc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d102      	bne.n	800636a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e023      	b.n	80063b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <xTaskCheckForTimeOut+0xc0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d007      	beq.n	8006386 <xTaskCheckForTimeOut+0x82>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	429a      	cmp	r2, r3
 800637e:	d302      	bcc.n	8006386 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	e015      	b.n	80063b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	429a      	cmp	r2, r3
 800638e:	d20b      	bcs.n	80063a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	1ad2      	subs	r2, r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ff9b 	bl	80062d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	e004      	b.n	80063b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063b2:	f000 fe63 	bl	800707c <vPortExitCritical>

	return xReturn;
 80063b6:	69fb      	ldr	r3, [r7, #28]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000a98 	.word	0x20000a98
 80063c4:	20000aac 	.word	0x20000aac

080063c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <vTaskMissedYield+0x14>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
}
 80063d2:	bf00      	nop
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20000aa8 	.word	0x20000aa8

080063e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063e8:	f000 f852 	bl	8006490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <prvIdleTask+0x28>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d9f9      	bls.n	80063e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <prvIdleTask+0x2c>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006404:	e7f0      	b.n	80063e8 <prvIdleTask+0x8>
 8006406:	bf00      	nop
 8006408:	20000998 	.word	0x20000998
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	e00c      	b.n	8006436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <prvInitialiseTaskLists+0x60>)
 8006428:	4413      	add	r3, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fc42 	bl	8004cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3301      	adds	r3, #1
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b06      	cmp	r3, #6
 800643a:	d9ef      	bls.n	800641c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800643c:	480d      	ldr	r0, [pc, #52]	; (8006474 <prvInitialiseTaskLists+0x64>)
 800643e:	f7fe fc39 	bl	8004cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006442:	480d      	ldr	r0, [pc, #52]	; (8006478 <prvInitialiseTaskLists+0x68>)
 8006444:	f7fe fc36 	bl	8004cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006448:	480c      	ldr	r0, [pc, #48]	; (800647c <prvInitialiseTaskLists+0x6c>)
 800644a:	f7fe fc33 	bl	8004cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800644e:	480c      	ldr	r0, [pc, #48]	; (8006480 <prvInitialiseTaskLists+0x70>)
 8006450:	f7fe fc30 	bl	8004cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006454:	480b      	ldr	r0, [pc, #44]	; (8006484 <prvInitialiseTaskLists+0x74>)
 8006456:	f7fe fc2d 	bl	8004cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800645a:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <prvInitialiseTaskLists+0x78>)
 800645c:	4a05      	ldr	r2, [pc, #20]	; (8006474 <prvInitialiseTaskLists+0x64>)
 800645e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <prvInitialiseTaskLists+0x7c>)
 8006462:	4a05      	ldr	r2, [pc, #20]	; (8006478 <prvInitialiseTaskLists+0x68>)
 8006464:	601a      	str	r2, [r3, #0]
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000998 	.word	0x20000998
 8006474:	20000a24 	.word	0x20000a24
 8006478:	20000a38 	.word	0x20000a38
 800647c:	20000a54 	.word	0x20000a54
 8006480:	20000a68 	.word	0x20000a68
 8006484:	20000a80 	.word	0x20000a80
 8006488:	20000a4c 	.word	0x20000a4c
 800648c:	20000a50 	.word	0x20000a50

08006490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006496:	e019      	b.n	80064cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006498:	f000 fdc0 	bl	800701c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <prvCheckTasksWaitingTermination+0x50>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe fc89 	bl	8004dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ae:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <prvCheckTasksWaitingTermination+0x54>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	4a0b      	ldr	r2, [pc, #44]	; (80064e4 <prvCheckTasksWaitingTermination+0x54>)
 80064b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <prvCheckTasksWaitingTermination+0x58>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3b01      	subs	r3, #1
 80064be:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <prvCheckTasksWaitingTermination+0x58>)
 80064c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064c2:	f000 fddb 	bl	800707c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f810 	bl	80064ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <prvCheckTasksWaitingTermination+0x58>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e1      	bne.n	8006498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000a68 	.word	0x20000a68
 80064e4:	20000a94 	.word	0x20000a94
 80064e8:	20000a7c 	.word	0x20000a7c

080064ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d108      	bne.n	8006510 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ff4e 	bl	80073a4 <vPortFree>
				vPortFree( pxTCB );
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 ff4b 	bl	80073a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800650e:	e018      	b.n	8006542 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006516:	2b01      	cmp	r3, #1
 8006518:	d103      	bne.n	8006522 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 ff42 	bl	80073a4 <vPortFree>
	}
 8006520:	e00f      	b.n	8006542 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006528:	2b02      	cmp	r3, #2
 800652a:	d00a      	beq.n	8006542 <prvDeleteTCB+0x56>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <prvDeleteTCB+0x54>
	}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006552:	4b0e      	ldr	r3, [pc, #56]	; (800658c <prvResetNextTaskUnblockTime+0x40>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <prvResetNextTaskUnblockTime+0x14>
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <prvResetNextTaskUnblockTime+0x16>
 8006560:	2300      	movs	r3, #0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006566:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <prvResetNextTaskUnblockTime+0x44>)
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800656e:	e008      	b.n	8006582 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006570:	4b06      	ldr	r3, [pc, #24]	; (800658c <prvResetNextTaskUnblockTime+0x40>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	4a04      	ldr	r2, [pc, #16]	; (8006590 <prvResetNextTaskUnblockTime+0x44>)
 8006580:	6013      	str	r3, [r2, #0]
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	20000a4c 	.word	0x20000a4c
 8006590:	20000ab4 	.word	0x20000ab4

08006594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <xTaskGetSchedulerState+0x34>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d102      	bne.n	80065a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065a2:	2301      	movs	r3, #1
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	e008      	b.n	80065ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <xTaskGetSchedulerState+0x38>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065b0:	2302      	movs	r3, #2
 80065b2:	607b      	str	r3, [r7, #4]
 80065b4:	e001      	b.n	80065ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065ba:	687b      	ldr	r3, [r7, #4]
	}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000aa0 	.word	0x20000aa0
 80065cc:	20000abc 	.word	0x20000abc

080065d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d06e      	beq.n	80066c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065e6:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <xTaskPriorityDisinherit+0x100>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d00a      	beq.n	8006606 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	1e5a      	subs	r2, r3, #1
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	429a      	cmp	r2, r3
 8006638:	d044      	beq.n	80066c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663e:	2b00      	cmp	r3, #0
 8006640:	d140      	bne.n	80066c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fbba 	bl	8004dc0 <uxListRemove>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d115      	bne.n	800667e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	491f      	ldr	r1, [pc, #124]	; (80066d4 <xTaskPriorityDisinherit+0x104>)
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <xTaskPriorityDisinherit+0xae>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	2201      	movs	r2, #1
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43da      	mvns	r2, r3
 8006674:	4b18      	ldr	r3, [pc, #96]	; (80066d8 <xTaskPriorityDisinherit+0x108>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4013      	ands	r3, r2
 800667a:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <xTaskPriorityDisinherit+0x108>)
 800667c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	f1c3 0207 	rsb	r2, r3, #7
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	2201      	movs	r2, #1
 8006698:	409a      	lsls	r2, r3
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <xTaskPriorityDisinherit+0x108>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4313      	orrs	r3, r2
 80066a0:	4a0d      	ldr	r2, [pc, #52]	; (80066d8 <xTaskPriorityDisinherit+0x108>)
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <xTaskPriorityDisinherit+0x104>)
 80066b2:	441a      	add	r2, r3
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f7fe fb25 	bl	8004d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066c4:	697b      	ldr	r3, [r7, #20]
	}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000994 	.word	0x20000994
 80066d4:	20000998 	.word	0x20000998
 80066d8:	20000a9c 	.word	0x20000a9c

080066dc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <uxTaskResetEventItemValue+0x2c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <uxTaskResetEventItemValue+0x2c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <uxTaskResetEventItemValue+0x2c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f1c2 0207 	rsb	r2, r2, #7
 80066f8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80066fa:	687b      	ldr	r3, [r7, #4]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000994 	.word	0x20000994

0800670c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006716:	4b29      	ldr	r3, [pc, #164]	; (80067bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800671c:	4b28      	ldr	r3, [pc, #160]	; (80067c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3304      	adds	r3, #4
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fb4c 	bl	8004dc0 <uxListRemove>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	2201      	movs	r2, #1
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	43da      	mvns	r2, r3
 800673c:	4b21      	ldr	r3, [pc, #132]	; (80067c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4013      	ands	r3, r2
 8006742:	4a20      	ldr	r2, [pc, #128]	; (80067c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006744:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d10a      	bne.n	8006764 <prvAddCurrentTaskToDelayedList+0x58>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006754:	4b1a      	ldr	r3, [pc, #104]	; (80067c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	481a      	ldr	r0, [pc, #104]	; (80067c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800675e:	f7fe fad4 	bl	8004d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006762:	e026      	b.n	80067b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800676c:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	429a      	cmp	r2, r3
 800677a:	d209      	bcs.n	8006790 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800677c:	4b13      	ldr	r3, [pc, #76]	; (80067cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fe fae1 	bl	8004d50 <vListInsert>
}
 800678e:	e010      	b.n	80067b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3304      	adds	r3, #4
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f7fe fad7 	bl	8004d50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067a2:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d202      	bcs.n	80067b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067ac:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6013      	str	r3, [r2, #0]
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000a98 	.word	0x20000a98
 80067c0:	20000994 	.word	0x20000994
 80067c4:	20000a9c 	.word	0x20000a9c
 80067c8:	20000a80 	.word	0x20000a80
 80067cc:	20000a50 	.word	0x20000a50
 80067d0:	20000a4c 	.word	0x20000a4c
 80067d4:	20000ab4 	.word	0x20000ab4

080067d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067e2:	f000 facb 	bl	8006d7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067e6:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <xTimerCreateTimerTask+0x80>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d021      	beq.n	8006832 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067f6:	1d3a      	adds	r2, r7, #4
 80067f8:	f107 0108 	add.w	r1, r7, #8
 80067fc:	f107 030c 	add.w	r3, r7, #12
 8006800:	4618      	mov	r0, r3
 8006802:	f7f9 fcbd 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	9202      	str	r2, [sp, #8]
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	2302      	movs	r3, #2
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	460a      	mov	r2, r1
 8006818:	4910      	ldr	r1, [pc, #64]	; (800685c <xTimerCreateTimerTask+0x84>)
 800681a:	4811      	ldr	r0, [pc, #68]	; (8006860 <xTimerCreateTimerTask+0x88>)
 800681c:	f7ff f818 	bl	8005850 <xTaskCreateStatic>
 8006820:	4603      	mov	r3, r0
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <xTimerCreateTimerTask+0x8c>)
 8006824:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <xTimerCreateTimerTask+0x8c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800682e:	2301      	movs	r3, #1
 8006830:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	613b      	str	r3, [r7, #16]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800684e:	697b      	ldr	r3, [r7, #20]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000af0 	.word	0x20000af0
 800685c:	08007728 	.word	0x08007728
 8006860:	08006985 	.word	0x08006985
 8006864:	20000af4 	.word	0x20000af4

08006868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	623b      	str	r3, [r7, #32]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006896:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <xTimerGenericCommand+0x98>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d02a      	beq.n	80068f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	dc18      	bgt.n	80068e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068b0:	f7ff fe70 	bl	8006594 <xTaskGetSchedulerState>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d109      	bne.n	80068ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <xTimerGenericCommand+0x98>)
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f107 0110 	add.w	r1, r7, #16
 80068c2:	2300      	movs	r3, #0
 80068c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c6:	f7fe fbe1 	bl	800508c <xQueueGenericSend>
 80068ca:	6278      	str	r0, [r7, #36]	; 0x24
 80068cc:	e012      	b.n	80068f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <xTimerGenericCommand+0x98>)
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f107 0110 	add.w	r1, r7, #16
 80068d6:	2300      	movs	r3, #0
 80068d8:	2200      	movs	r2, #0
 80068da:	f7fe fbd7 	bl	800508c <xQueueGenericSend>
 80068de:	6278      	str	r0, [r7, #36]	; 0x24
 80068e0:	e008      	b.n	80068f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <xTimerGenericCommand+0x98>)
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	f107 0110 	add.w	r1, r7, #16
 80068ea:	2300      	movs	r3, #0
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	f7fe fccb 	bl	8005288 <xQueueGenericSendFromISR>
 80068f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3728      	adds	r7, #40	; 0x28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000af0 	.word	0x20000af0

08006904 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800690e:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <prvProcessExpiredTimer+0x7c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	3304      	adds	r3, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fa4f 	bl	8004dc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d122      	bne.n	8006970 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	18d1      	adds	r1, r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	6978      	ldr	r0, [r7, #20]
 8006938:	f000 f8c8 	bl	8006acc <prvInsertTimerInActiveList>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006942:	2300      	movs	r3, #0
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	2300      	movs	r3, #0
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	2100      	movs	r1, #0
 800694c:	6978      	ldr	r0, [r7, #20]
 800694e:	f7ff ff8b 	bl	8006868 <xTimerGenericCommand>
 8006952:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	60fb      	str	r3, [r7, #12]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	4798      	blx	r3
}
 8006978:	bf00      	nop
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20000ae8 	.word	0x20000ae8

08006984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800698c:	f107 0308 	add.w	r3, r7, #8
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f857 	bl	8006a44 <prvGetNextExpireTime>
 8006996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4619      	mov	r1, r3
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f803 	bl	80069a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069a2:	f000 f8d5 	bl	8006b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069a6:	e7f1      	b.n	800698c <prvTimerTask+0x8>

080069a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069b2:	f7ff f971 	bl	8005c98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f866 	bl	8006a8c <prvSampleTimeNow>
 80069c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d130      	bne.n	8006a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <prvProcessTimerOrBlockTask+0x3c>
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d806      	bhi.n	80069e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069d6:	f7ff f96d 	bl	8005cb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff ff91 	bl	8006904 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069e2:	e024      	b.n	8006a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <prvProcessTimerOrBlockTask+0x90>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <prvProcessTimerOrBlockTask+0x94>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f7fe feed 	bl	80057e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a0e:	f7ff f951 	bl	8005cb4 <xTaskResumeAll>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <prvProcessTimerOrBlockTask+0x98>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
}
 8006a28:	e001      	b.n	8006a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a2a:	f7ff f943 	bl	8005cb4 <xTaskResumeAll>
}
 8006a2e:	bf00      	nop
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000aec 	.word	0x20000aec
 8006a3c:	20000af0 	.word	0x20000af0
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <prvGetNextExpireTime+0x44>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf0c      	ite	eq
 8006a56:	2301      	moveq	r3, #1
 8006a58:	2300      	movne	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <prvGetNextExpireTime+0x44>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e001      	b.n	8006a7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000ae8 	.word	0x20000ae8

08006a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a94:	f7ff f9aa 	bl	8005dec <xTaskGetTickCount>
 8006a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <prvSampleTimeNow+0x3c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d205      	bcs.n	8006ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006aa4:	f000 f908 	bl	8006cb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e002      	b.n	8006ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ab6:	4a04      	ldr	r2, [pc, #16]	; (8006ac8 <prvSampleTimeNow+0x3c>)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000af8 	.word	0x20000af8

08006acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d812      	bhi.n	8006b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	1ad2      	subs	r2, r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d302      	bcc.n	8006b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e01b      	b.n	8006b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <prvInsertTimerInActiveList+0x7c>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fe f91d 	bl	8004d50 <vListInsert>
 8006b16:	e012      	b.n	8006b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d206      	bcs.n	8006b2e <prvInsertTimerInActiveList+0x62>
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d302      	bcc.n	8006b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e007      	b.n	8006b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <prvInsertTimerInActiveList+0x80>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3304      	adds	r3, #4
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f7fe f909 	bl	8004d50 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b3e:	697b      	ldr	r3, [r7, #20]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20000aec 	.word	0x20000aec
 8006b4c:	20000ae8 	.word	0x20000ae8

08006b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b56:	e09d      	b.n	8006c94 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da18      	bge.n	8006b90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	3304      	adds	r3, #4
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61fb      	str	r3, [r7, #28]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b86:	6850      	ldr	r0, [r2, #4]
 8006b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8a:	6892      	ldr	r2, [r2, #8]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	db7e      	blt.n	8006c94 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe f90a 	bl	8004dc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bac:	463b      	mov	r3, r7
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff ff6c 	bl	8006a8c <prvSampleTimeNow>
 8006bb4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b09      	cmp	r3, #9
 8006bba:	d86a      	bhi.n	8006c92 <prvProcessReceivedCommands+0x142>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <prvProcessReceivedCommands+0x74>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006bed 	.word	0x08006bed
 8006bc8:	08006bed 	.word	0x08006bed
 8006bcc:	08006bed 	.word	0x08006bed
 8006bd0:	08006c95 	.word	0x08006c95
 8006bd4:	08006c49 	.word	0x08006c49
 8006bd8:	08006c81 	.word	0x08006c81
 8006bdc:	08006bed 	.word	0x08006bed
 8006be0:	08006bed 	.word	0x08006bed
 8006be4:	08006c95 	.word	0x08006c95
 8006be8:	08006c49 	.word	0x08006c49
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	18d1      	adds	r1, r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfa:	f7ff ff67 	bl	8006acc <prvInsertTimerInActiveList>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d047      	beq.n	8006c94 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d13f      	bne.n	8006c94 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	441a      	add	r2, r3
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	2300      	movs	r3, #0
 8006c22:	2100      	movs	r1, #0
 8006c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c26:	f7ff fe1f 	bl	8006868 <xTimerGenericCommand>
 8006c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d130      	bne.n	8006c94 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	61bb      	str	r3, [r7, #24]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617b      	str	r3, [r7, #20]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	18d1      	adds	r1, r2, r3
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7a:	f7ff ff27 	bl	8006acc <prvInsertTimerInActiveList>
					break;
 8006c7e:	e009      	b.n	8006c94 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d104      	bne.n	8006c94 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c8c:	f000 fb8a 	bl	80073a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c90:	e000      	b.n	8006c94 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006c92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <prvProcessReceivedCommands+0x164>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	1d39      	adds	r1, r7, #4
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fb8b 	bl	80053b8 <xQueueReceive>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f47f af57 	bne.w	8006b58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	3730      	adds	r7, #48	; 0x30
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000af0 	.word	0x20000af0

08006cb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b088      	sub	sp, #32
 8006cbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cbe:	e045      	b.n	8006d4c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cc0:	4b2c      	ldr	r3, [pc, #176]	; (8006d74 <prvSwitchTimerLists+0xbc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cca:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <prvSwitchTimerLists+0xbc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe f871 	bl	8004dc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d12e      	bne.n	8006d4c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d90e      	bls.n	8006d1e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d0c:	4b19      	ldr	r3, [pc, #100]	; (8006d74 <prvSwitchTimerLists+0xbc>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f7fe f81a 	bl	8004d50 <vListInsert>
 8006d1c:	e016      	b.n	8006d4c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	2300      	movs	r3, #0
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff fd9d 	bl	8006868 <xTimerGenericCommand>
 8006d2e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	603b      	str	r3, [r7, #0]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <prvSwitchTimerLists+0xbc>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1b4      	bne.n	8006cc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <prvSwitchTimerLists+0xbc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <prvSwitchTimerLists+0xc0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a04      	ldr	r2, [pc, #16]	; (8006d74 <prvSwitchTimerLists+0xbc>)
 8006d62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d64:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <prvSwitchTimerLists+0xc0>)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	6013      	str	r3, [r2, #0]
}
 8006d6a:	bf00      	nop
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000ae8 	.word	0x20000ae8
 8006d78:	20000aec 	.word	0x20000aec

08006d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d82:	f000 f94b 	bl	800701c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <prvCheckForValidListAndQueue+0x60>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d120      	bne.n	8006dd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d8e:	4814      	ldr	r0, [pc, #80]	; (8006de0 <prvCheckForValidListAndQueue+0x64>)
 8006d90:	f7fd ff90 	bl	8004cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d94:	4813      	ldr	r0, [pc, #76]	; (8006de4 <prvCheckForValidListAndQueue+0x68>)
 8006d96:	f7fd ff8d 	bl	8004cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d9a:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <prvCheckForValidListAndQueue+0x6c>)
 8006d9c:	4a10      	ldr	r2, [pc, #64]	; (8006de0 <prvCheckForValidListAndQueue+0x64>)
 8006d9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006da0:	4b12      	ldr	r3, [pc, #72]	; (8006dec <prvCheckForValidListAndQueue+0x70>)
 8006da2:	4a10      	ldr	r2, [pc, #64]	; (8006de4 <prvCheckForValidListAndQueue+0x68>)
 8006da4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006da6:	2300      	movs	r3, #0
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <prvCheckForValidListAndQueue+0x74>)
 8006dac:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <prvCheckForValidListAndQueue+0x78>)
 8006dae:	2110      	movs	r1, #16
 8006db0:	200a      	movs	r0, #10
 8006db2:	f7fe f897 	bl	8004ee4 <xQueueGenericCreateStatic>
 8006db6:	4603      	mov	r3, r0
 8006db8:	4a08      	ldr	r2, [pc, #32]	; (8006ddc <prvCheckForValidListAndQueue+0x60>)
 8006dba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006dbc:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <prvCheckForValidListAndQueue+0x60>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006dc4:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <prvCheckForValidListAndQueue+0x60>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	490b      	ldr	r1, [pc, #44]	; (8006df8 <prvCheckForValidListAndQueue+0x7c>)
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fce4 	bl	8005798 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dd0:	f000 f954 	bl	800707c <vPortExitCritical>
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000af0 	.word	0x20000af0
 8006de0:	20000ac0 	.word	0x20000ac0
 8006de4:	20000ad4 	.word	0x20000ad4
 8006de8:	20000ae8 	.word	0x20000ae8
 8006dec:	20000aec 	.word	0x20000aec
 8006df0:	20000b9c 	.word	0x20000b9c
 8006df4:	20000afc 	.word	0x20000afc
 8006df8:	08007730 	.word	0x08007730

08006dfc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006e0a:	f06f 0301 	mvn.w	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e1c:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <xTimerPendFunctionCallFromISR+0x3c>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	f107 0114 	add.w	r1, r7, #20
 8006e24:	2300      	movs	r3, #0
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	f7fe fa2e 	bl	8005288 <xQueueGenericSendFromISR>
 8006e2c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3728      	adds	r7, #40	; 0x28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000af0 	.word	0x20000af0

08006e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3b04      	subs	r3, #4
 8006e4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3b04      	subs	r3, #4
 8006e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f023 0201 	bic.w	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3b04      	subs	r3, #4
 8006e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e6c:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <pxPortInitialiseStack+0x54>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3b14      	subs	r3, #20
 8006e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3b20      	subs	r3, #32
 8006e82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e84:	68fb      	ldr	r3, [r7, #12]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr
 8006e90:	08006e95 	.word	0x08006e95

08006e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <prvTaskExitError+0x54>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea6:	d00a      	beq.n	8006ebe <prvTaskExitError+0x2a>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60fb      	str	r3, [r7, #12]
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <prvTaskExitError+0x28>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60bb      	str	r3, [r7, #8]
}
 8006ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ed2:	bf00      	nop
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0fc      	beq.n	8006ed4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	2000000c 	.word	0x2000000c
 8006eec:	00000000 	.word	0x00000000

08006ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <pxCurrentTCBConst2>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	6808      	ldr	r0, [r1, #0]
 8006ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006efa:	f380 8809 	msr	PSP, r0
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8811 	msr	BASEPRI, r0
 8006f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f0e:	4770      	bx	lr

08006f10 <pxCurrentTCBConst2>:
 8006f10:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f18:	4806      	ldr	r0, [pc, #24]	; (8006f34 <prvPortStartFirstTask+0x1c>)
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	6800      	ldr	r0, [r0, #0]
 8006f1e:	f380 8808 	msr	MSP, r0
 8006f22:	b662      	cpsie	i
 8006f24:	b661      	cpsie	f
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	df00      	svc	0
 8006f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f32:	bf00      	nop
 8006f34:	e000ed08 	.word	0xe000ed08

08006f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f3e:	4b32      	ldr	r3, [pc, #200]	; (8007008 <xPortStartScheduler+0xd0>)
 8006f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	22ff      	movs	r2, #255	; 0xff
 8006f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	4b2a      	ldr	r3, [pc, #168]	; (800700c <xPortStartScheduler+0xd4>)
 8006f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f66:	4b2a      	ldr	r3, [pc, #168]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f68:	2207      	movs	r2, #7
 8006f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f6c:	e009      	b.n	8006f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f6e:	4b28      	ldr	r3, [pc, #160]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	4a26      	ldr	r2, [pc, #152]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d0ef      	beq.n	8006f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f8e:	4b20      	ldr	r3, [pc, #128]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f1c3 0307 	rsb	r3, r3, #7
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d00a      	beq.n	8006fb0 <xPortStartScheduler+0x78>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	60bb      	str	r3, [r7, #8]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fb0:	4b17      	ldr	r3, [pc, #92]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	4a16      	ldr	r2, [pc, #88]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fba:	4b15      	ldr	r3, [pc, #84]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fc2:	4a13      	ldr	r2, [pc, #76]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a10      	ldr	r2, [pc, #64]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a0d      	ldr	r2, [pc, #52]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fe4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fe6:	f000 f8b9 	bl	800715c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <xPortStartScheduler+0xe0>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ff0:	f7ff ff92 	bl	8006f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ff4:	f7fe ffc6 	bl	8005f84 <vTaskSwitchContext>
	prvTaskExitError();
 8006ff8:	f7ff ff4c 	bl	8006e94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	e000e400 	.word	0xe000e400
 800700c:	20000be4 	.word	0x20000be4
 8007010:	20000be8 	.word	0x20000be8
 8007014:	e000ed20 	.word	0xe000ed20
 8007018:	2000000c 	.word	0x2000000c

0800701c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	607b      	str	r3, [r7, #4]
}
 8007034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007036:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <vPortEnterCritical+0x58>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <vPortEnterCritical+0x58>)
 800703e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <vPortEnterCritical+0x58>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d10f      	bne.n	8007068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <vPortEnterCritical+0x5c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <vPortEnterCritical+0x4c>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	603b      	str	r3, [r7, #0]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <vPortEnterCritical+0x4a>
	}
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	2000000c 	.word	0x2000000c
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007082:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <vPortExitCritical+0x4c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <vPortExitCritical+0x24>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	607b      	str	r3, [r7, #4]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <vPortExitCritical+0x4c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <vPortExitCritical+0x4c>)
 80070a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <vPortExitCritical+0x4c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d105      	bne.n	80070be <vPortExitCritical+0x42>
 80070b2:	2300      	movs	r3, #0
 80070b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f383 8811 	msr	BASEPRI, r3
}
 80070bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr
 80070c8:	2000000c 	.word	0x2000000c
 80070cc:	00000000 	.word	0x00000000

080070d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070d0:	f3ef 8009 	mrs	r0, PSP
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <pxCurrentTCBConst>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070e0:	6010      	str	r0, [r2, #0]
 80070e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80070e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070ea:	f380 8811 	msr	BASEPRI, r0
 80070ee:	f7fe ff49 	bl	8005f84 <vTaskSwitchContext>
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8811 	msr	BASEPRI, r0
 80070fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007106:	f380 8809 	msr	PSP, r0
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	4770      	bx	lr

08007110 <pxCurrentTCBConst>:
 8007110:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007132:	f7fe fe69 	bl	8005e08 <xTaskIncrementTick>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <SysTick_Handler+0x40>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f383 8811 	msr	BASEPRI, r3
}
 800714e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <vPortSetupTimerInterrupt+0x30>)
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <vPortSetupTimerInterrupt+0x34>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <vPortSetupTimerInterrupt+0x38>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a09      	ldr	r2, [pc, #36]	; (8007198 <vPortSetupTimerInterrupt+0x3c>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <vPortSetupTimerInterrupt+0x40>)
 800717a:	3b01      	subs	r3, #1
 800717c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <vPortSetupTimerInterrupt+0x30>)
 8007180:	2207      	movs	r2, #7
 8007182:	601a      	str	r2, [r3, #0]
}
 8007184:	bf00      	nop
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr
 800718c:	e000e010 	.word	0xe000e010
 8007190:	e000e018 	.word	0xe000e018
 8007194:	20000000 	.word	0x20000000
 8007198:	10624dd3 	.word	0x10624dd3
 800719c:	e000e014 	.word	0xe000e014

080071a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b0f      	cmp	r3, #15
 80071b0:	d914      	bls.n	80071dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071b2:	4a16      	ldr	r2, [pc, #88]	; (800720c <vPortValidateInterruptPriority+0x6c>)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071bc:	4b14      	ldr	r3, [pc, #80]	; (8007210 <vPortValidateInterruptPriority+0x70>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	7afa      	ldrb	r2, [r7, #11]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d20a      	bcs.n	80071dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	607b      	str	r3, [r7, #4]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <vPortValidateInterruptPriority+0x74>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071e4:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <vPortValidateInterruptPriority+0x78>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d90a      	bls.n	8007202 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	603b      	str	r3, [r7, #0]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <vPortValidateInterruptPriority+0x60>
	}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	e000e3f0 	.word	0xe000e3f0
 8007210:	20000be4 	.word	0x20000be4
 8007214:	e000ed0c 	.word	0xe000ed0c
 8007218:	20000be8 	.word	0x20000be8

0800721c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007228:	f7fe fd36 	bl	8005c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800722c:	4b58      	ldr	r3, [pc, #352]	; (8007390 <pvPortMalloc+0x174>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007234:	f000 f910 	bl	8007458 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007238:	4b56      	ldr	r3, [pc, #344]	; (8007394 <pvPortMalloc+0x178>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 808e 	bne.w	8007362 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01d      	beq.n	8007288 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800724c:	2208      	movs	r2, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b00      	cmp	r3, #0
 800725c:	d014      	beq.n	8007288 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	3308      	adds	r3, #8
 8007266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <pvPortMalloc+0x6c>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	617b      	str	r3, [r7, #20]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d069      	beq.n	8007362 <pvPortMalloc+0x146>
 800728e:	4b42      	ldr	r3, [pc, #264]	; (8007398 <pvPortMalloc+0x17c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d864      	bhi.n	8007362 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007298:	4b40      	ldr	r3, [pc, #256]	; (800739c <pvPortMalloc+0x180>)
 800729a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800729c:	4b3f      	ldr	r3, [pc, #252]	; (800739c <pvPortMalloc+0x180>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072a2:	e004      	b.n	80072ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d903      	bls.n	80072c0 <pvPortMalloc+0xa4>
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f1      	bne.n	80072a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072c0:	4b33      	ldr	r3, [pc, #204]	; (8007390 <pvPortMalloc+0x174>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d04b      	beq.n	8007362 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2208      	movs	r2, #8
 80072d0:	4413      	add	r3, r2
 80072d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	2308      	movs	r3, #8
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d91f      	bls.n	800732c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <pvPortMalloc+0xf8>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	613b      	str	r3, [r7, #16]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007326:	69b8      	ldr	r0, [r7, #24]
 8007328:	f000 f8f8 	bl	800751c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800732c:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <pvPortMalloc+0x17c>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	4a18      	ldr	r2, [pc, #96]	; (8007398 <pvPortMalloc+0x17c>)
 8007338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800733a:	4b17      	ldr	r3, [pc, #92]	; (8007398 <pvPortMalloc+0x17c>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b18      	ldr	r3, [pc, #96]	; (80073a0 <pvPortMalloc+0x184>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d203      	bcs.n	800734e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007346:	4b14      	ldr	r3, [pc, #80]	; (8007398 <pvPortMalloc+0x17c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <pvPortMalloc+0x184>)
 800734c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	4b10      	ldr	r3, [pc, #64]	; (8007394 <pvPortMalloc+0x178>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	431a      	orrs	r2, r3
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007362:	f7fe fca7 	bl	8005cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <pvPortMalloc+0x16a>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <pvPortMalloc+0x168>
	return pvReturn;
 8007386:	69fb      	ldr	r3, [r7, #28]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3728      	adds	r7, #40	; 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20002364 	.word	0x20002364
 8007394:	20002370 	.word	0x20002370
 8007398:	20002368 	.word	0x20002368
 800739c:	2000235c 	.word	0x2000235c
 80073a0:	2000236c 	.word	0x2000236c

080073a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d048      	beq.n	8007448 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073b6:	2308      	movs	r3, #8
 80073b8:	425b      	negs	r3, r3
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	4b21      	ldr	r3, [pc, #132]	; (8007450 <vPortFree+0xac>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4013      	ands	r3, r2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <vPortFree+0x44>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	60fb      	str	r3, [r7, #12]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <vPortFree+0x62>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	60bb      	str	r3, [r7, #8]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <vPortFree+0xac>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d019      	beq.n	8007448 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d115      	bne.n	8007448 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <vPortFree+0xac>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	43db      	mvns	r3, r3
 8007426:	401a      	ands	r2, r3
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800742c:	f7fe fc34 	bl	8005c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	4b07      	ldr	r3, [pc, #28]	; (8007454 <vPortFree+0xb0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4413      	add	r3, r2
 800743a:	4a06      	ldr	r2, [pc, #24]	; (8007454 <vPortFree+0xb0>)
 800743c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800743e:	6938      	ldr	r0, [r7, #16]
 8007440:	f000 f86c 	bl	800751c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007444:	f7fe fc36 	bl	8005cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20002370 	.word	0x20002370
 8007454:	20002368 	.word	0x20002368

08007458 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800745e:	f241 7370 	movw	r3, #6000	; 0x1770
 8007462:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007464:	4b27      	ldr	r3, [pc, #156]	; (8007504 <prvHeapInit+0xac>)
 8007466:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00c      	beq.n	800748c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3307      	adds	r3, #7
 8007476:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <prvHeapInit+0xac>)
 8007488:	4413      	add	r3, r2
 800748a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007490:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <prvHeapInit+0xb0>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007496:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <prvHeapInit+0xb0>)
 8007498:	2200      	movs	r2, #0
 800749a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	4413      	add	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074a4:	2208      	movs	r2, #8
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0307 	bic.w	r3, r3, #7
 80074b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a15      	ldr	r2, [pc, #84]	; (800750c <prvHeapInit+0xb4>)
 80074b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074ba:	4b14      	ldr	r3, [pc, #80]	; (800750c <prvHeapInit+0xb4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <prvHeapInit+0xb4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074d8:	4b0c      	ldr	r3, [pc, #48]	; (800750c <prvHeapInit+0xb4>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <prvHeapInit+0xb8>)
 80074e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4a09      	ldr	r2, [pc, #36]	; (8007514 <prvHeapInit+0xbc>)
 80074ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074f0:	4b09      	ldr	r3, [pc, #36]	; (8007518 <prvHeapInit+0xc0>)
 80074f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074f6:	601a      	str	r2, [r3, #0]
}
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000bec 	.word	0x20000bec
 8007508:	2000235c 	.word	0x2000235c
 800750c:	20002364 	.word	0x20002364
 8007510:	2000236c 	.word	0x2000236c
 8007514:	20002368 	.word	0x20002368
 8007518:	20002370 	.word	0x20002370

0800751c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007524:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <prvInsertBlockIntoFreeList+0xa8>)
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e002      	b.n	8007530 <prvInsertBlockIntoFreeList+0x14>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d8f7      	bhi.n	800752a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	4413      	add	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d108      	bne.n	800755e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	441a      	add	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d118      	bne.n	80075a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <prvInsertBlockIntoFreeList+0xac>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d00d      	beq.n	800759a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	441a      	add	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e008      	b.n	80075ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <prvInsertBlockIntoFreeList+0xac>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	e003      	b.n	80075ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d002      	beq.n	80075ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr
 80075c4:	2000235c 	.word	0x2000235c
 80075c8:	20002364 	.word	0x20002364

080075cc <memset>:
 80075cc:	4603      	mov	r3, r0
 80075ce:	4402      	add	r2, r0
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d100      	bne.n	80075d6 <memset+0xa>
 80075d4:	4770      	bx	lr
 80075d6:	f803 1b01 	strb.w	r1, [r3], #1
 80075da:	e7f9      	b.n	80075d0 <memset+0x4>

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	2600      	movs	r6, #0
 80075e0:	4d0c      	ldr	r5, [pc, #48]	; (8007614 <__libc_init_array+0x38>)
 80075e2:	4c0d      	ldr	r4, [pc, #52]	; (8007618 <__libc_init_array+0x3c>)
 80075e4:	1b64      	subs	r4, r4, r5
 80075e6:	10a4      	asrs	r4, r4, #2
 80075e8:	42a6      	cmp	r6, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	f000 f828 	bl	8007640 <_init>
 80075f0:	2600      	movs	r6, #0
 80075f2:	4d0a      	ldr	r5, [pc, #40]	; (800761c <__libc_init_array+0x40>)
 80075f4:	4c0a      	ldr	r4, [pc, #40]	; (8007620 <__libc_init_array+0x44>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	42a6      	cmp	r6, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f855 3b04 	ldr.w	r3, [r5], #4
 8007604:	4798      	blx	r3
 8007606:	3601      	adds	r6, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f855 3b04 	ldr.w	r3, [r5], #4
 800760e:	4798      	blx	r3
 8007610:	3601      	adds	r6, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	08007764 	.word	0x08007764
 8007618:	08007764 	.word	0x08007764
 800761c:	08007764 	.word	0x08007764
 8007620:	08007768 	.word	0x08007768

08007624 <memcpy>:
 8007624:	440a      	add	r2, r1
 8007626:	4291      	cmp	r1, r2
 8007628:	f100 33ff 	add.w	r3, r0, #4294967295
 800762c:	d100      	bne.n	8007630 <memcpy+0xc>
 800762e:	4770      	bx	lr
 8007630:	b510      	push	{r4, lr}
 8007632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007636:	4291      	cmp	r1, r2
 8007638:	f803 4f01 	strb.w	r4, [r3, #1]!
 800763c:	d1f9      	bne.n	8007632 <memcpy+0xe>
 800763e:	bd10      	pop	{r4, pc}

08007640 <_init>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr

0800764c <_fini>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

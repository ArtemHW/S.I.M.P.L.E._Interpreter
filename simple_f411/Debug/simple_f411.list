
simple_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008128  08008128  00018128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008258  08008258  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047fc  20000010  08008270  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000480c  08008270  0002480c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ec0  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000391f  00000000  00000000  00037f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fe  00000000  00000000  0003ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181e5  00000000  00000000  0003df36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001846b  00000000  00000000  0005611b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098ffa  00000000  00000000  0006e586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b7c  00000000  00000000  00107580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008110 	.word	0x08008110

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08008110 	.word	0x08008110

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000090 	.word	0x20000090

08000510 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetTimerTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetTimerTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000290 	.word	0x20000290
 8000540:	200002f4 	.word	0x200002f4

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b0a0      	sub	sp, #128	; 0x80
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 800054a:	2300      	movs	r3, #0
 800054c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800054e:	e007      	b.n	8000560 <main+0x1c>
		exm.execution_memory[i] = 0;
 8000550:	4a6f      	ldr	r2, [pc, #444]	; (8000710 <main+0x1cc>)
 8000552:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000554:	4413      	add	r3, r2
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 800055a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800055c:	3301      	adds	r3, #1
 800055e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000562:	2b76      	cmp	r3, #118	; 0x76
 8000564:	d9f4      	bls.n	8000550 <main+0xc>
	}
	exm.memory_pointer = exm.execution_memory;
 8000566:	4b6a      	ldr	r3, [pc, #424]	; (8000710 <main+0x1cc>)
 8000568:	4a69      	ldr	r2, [pc, #420]	; (8000710 <main+0x1cc>)
 800056a:	679a      	str	r2, [r3, #120]	; 0x78
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 800056c:	2300      	movs	r3, #0
 800056e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000570:	e008      	b.n	8000584 <main+0x40>
		exm.sizes_of_instruction[i] = 1;
 8000572:	4a67      	ldr	r2, [pc, #412]	; (8000710 <main+0x1cc>)
 8000574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000576:	4413      	add	r3, r2
 8000578:	337c      	adds	r3, #124	; 0x7c
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 800057e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000580:	3301      	adds	r3, #1
 8000582:	67bb      	str	r3, [r7, #120]	; 0x78
 8000584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000586:	2b3b      	cmp	r3, #59	; 0x3b
 8000588:	d9f3      	bls.n	8000572 <main+0x2e>
	}
	exm.sizes_pointer = exm.sizes_of_instruction;
 800058a:	4b61      	ldr	r3, [pc, #388]	; (8000710 <main+0x1cc>)
 800058c:	4a61      	ldr	r2, [pc, #388]	; (8000714 <main+0x1d0>)
 800058e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000592:	2300      	movs	r3, #0
 8000594:	677b      	str	r3, [r7, #116]	; 0x74
 8000596:	e008      	b.n	80005aa <main+0x66>
		exm.current_instruction[i] = 0;
 8000598:	4a5d      	ldr	r2, [pc, #372]	; (8000710 <main+0x1cc>)
 800059a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800059c:	4413      	add	r3, r2
 800059e:	33bc      	adds	r3, #188	; 0xbc
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 80005a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005a6:	3301      	adds	r3, #1
 80005a8:	677b      	str	r3, [r7, #116]	; 0x74
 80005aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d9f3      	bls.n	8000598 <main+0x54>
	}
	exm.start_speed_value = 0;
 80005b0:	4b57      	ldr	r3, [pc, #348]	; (8000710 <main+0x1cc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 80005b8:	4b55      	ldr	r3, [pc, #340]	; (8000710 <main+0x1cc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 80005c0:	4b53      	ldr	r3, [pc, #332]	; (8000710 <main+0x1cc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 80005c8:	4b51      	ldr	r3, [pc, #324]	; (8000710 <main+0x1cc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	exm.step_counter_second_part = 0;
 80005d0:	4b4f      	ldr	r3, [pc, #316]	; (8000710 <main+0x1cc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	exm.position = 0; // temporary
 80005d8:	4b4d      	ldr	r3, [pc, #308]	; (8000710 <main+0x1cc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fbf4 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8b4 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa3a 	bl	8000a60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 fa0c 	bl	8000a08 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80005f0:	f000 f942 	bl	8000878 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005f4:	f000 f990 	bl	8000918 <MX_TIM4_Init>
  MX_SPI1_Init();
 80005f8:	f000 f908 	bl	800080c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <main+0x1d4>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a45      	ldr	r2, [pc, #276]	; (8000718 <main+0x1d4>)
 8000602:	f043 0320 	orr.w	r3, r3, #32
 8000606:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 8000608:	4b43      	ldr	r3, [pc, #268]	; (8000718 <main+0x1d4>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a42      	ldr	r2, [pc, #264]	; (8000718 <main+0x1d4>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 8000614:	4b40      	ldr	r3, [pc, #256]	; (8000718 <main+0x1d4>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a3f      	ldr	r2, [pc, #252]	; (8000718 <main+0x1d4>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 8000620:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <main+0x1d4>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a3c      	ldr	r2, [pc, #240]	; (8000718 <main+0x1d4>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062a:	60d3      	str	r3, [r2, #12]

  GPIOB->ODR &= ~GPIO_ODR_OD10; //Enable stepper driver
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <main+0x1d8>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a3a      	ldr	r2, [pc, #232]	; (800071c <main+0x1d8>)
 8000632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000636:	6153      	str	r3, [r2, #20]
  HAL_TIM_Base_Start_IT(&htim3);
 8000638:	4839      	ldr	r0, [pc, #228]	; (8000720 <main+0x1dc>)
 800063a:	f002 fc95 	bl	8002f68 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 800063e:	f004 fdea 	bl	8005216 <xEventGroupCreate>
 8000642:	4603      	mov	r3, r0
 8000644:	4a37      	ldr	r2, [pc, #220]	; (8000724 <main+0x1e0>)
 8000646:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <main+0x1e0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	4618      	mov	r0, r3
 8000650:	f004 ff26 	bl	80054a0 <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(32, 1);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	2020      	movs	r0, #32
 800065a:	f005 f96f 	bl	800593c <xQueueGenericCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a31      	ldr	r2, [pc, #196]	; (8000728 <main+0x1e4>)
 8000662:	6013      	str	r3, [r2, #0]
  programing_queue = xQueueCreate(64, 1);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	2040      	movs	r0, #64	; 0x40
 800066a:	f005 f967 	bl	800593c <xQueueGenericCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a2e      	ldr	r2, [pc, #184]	; (800072c <main+0x1e8>)
 8000672:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 500);
 8000674:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <main+0x1ec>)
 8000676:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800067a:	461d      	mov	r5, r3
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 8000688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fd75 	bl	800517e <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a27      	ldr	r2, [pc, #156]	; (8000734 <main+0x1f0>)
 8000698:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 500);
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <main+0x1f4>)
 800069c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006a0:	461d      	mov	r5, r3
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 80006ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fd62 	bl	800517e <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a1f      	ldr	r2, [pc, #124]	; (800073c <main+0x1f8>)
 80006be:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_comunication */
  osThreadDef(UART_comunication, uart_comunication, osPriorityNormal, 0, 160);
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <main+0x1fc>)
 80006c2:	f107 0420 	add.w	r4, r7, #32
 80006c6:	461d      	mov	r5, r3
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_comunicationHandle = osThreadCreate(osThread(UART_comunication), NULL);
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fd4f 	bl	800517e <osThreadCreate>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <main+0x200>)
 80006e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 1000);
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <main+0x204>)
 80006e8:	1d3c      	adds	r4, r7, #4
 80006ea:	461d      	mov	r5, r3
 80006ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 fd3e 	bl	800517e <osThreadCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a11      	ldr	r2, [pc, #68]	; (800074c <main+0x208>)
 8000706:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000708:	f004 fd32 	bl	8005170 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x1c8>
 800070e:	bf00      	nop
 8000710:	20000838 	.word	0x20000838
 8000714:	200008b4 	.word	0x200008b4
 8000718:	40011000 	.word	0x40011000
 800071c:	40020400 	.word	0x40020400
 8000720:	2000074c 	.word	0x2000074c
 8000724:	20000904 	.word	0x20000904
 8000728:	20000830 	.word	0x20000830
 800072c:	20000834 	.word	0x20000834
 8000730:	08008138 	.word	0x08008138
 8000734:	20000820 	.word	0x20000820
 8000738:	08008160 	.word	0x08008160
 800073c:	20000824 	.word	0x20000824
 8000740:	08008190 	.word	0x08008190
 8000744:	20000828 	.word	0x20000828
 8000748:	080081c0 	.word	0x080081c0
 800074c:	2000082c 	.word	0x2000082c

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 fc9c 	bl	800809c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xb4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <SystemClock_Config+0xb4>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xb4>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <SystemClock_Config+0xb8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <SystemClock_Config+0xb8>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <SystemClock_Config+0xb8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fe6f 	bl	80024a4 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007cc:	f001 f8ac 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f8d2 	bl	8002994 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007f6:	f001 f897 	bl	8001928 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_SPI1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_SPI1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_SPI1_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SPI1_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_SPI1_Init+0x64>)
 800085e:	f002 faab 	bl	8002db8 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f001 f85e 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200006f4 	.word	0x200006f4
 8000874:	40013000 	.word	0x40013000

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_TIM3_Init+0x98>)
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <MX_TIM3_Init+0x9c>)
 800089a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_TIM3_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_TIM3_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_TIM3_Init+0x98>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_TIM3_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_TIM3_Init+0x98>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008bc:	4814      	ldr	r0, [pc, #80]	; (8000910 <MX_TIM3_Init+0x98>)
 80008be:	f002 fb04 	bl	8002eca <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008c8:	f001 f82e 	bl	8001928 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80008cc:	2307      	movs	r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80008d0:	2330      	movs	r3, #48	; 0x30
 80008d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_TIM3_Init+0x98>)
 80008dc:	f002 ffd3 	bl	8003886 <HAL_TIM_SlaveConfigSynchro>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008e6:	f001 f81f 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_TIM3_Init+0x98>)
 80008f8:	f003 fb8c 	bl	8004014 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000902:	f001 f811 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000074c 	.word	0x2000074c
 8000914:	40000400 	.word	0x40000400

08000918 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800094a:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <MX_TIM4_Init+0xec>)
 800094c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000950:	220f      	movs	r2, #15
 8000952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800095a:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800095c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000970:	f002 faab 	bl	8002eca <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800097a:	f000 ffd5 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000988:	4619      	mov	r1, r3
 800098a:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800098c:	f002 feb4 	bl	80036f8 <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000996:	f000 ffc7 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800099c:	f002 fb75 	bl	800308a <HAL_TIM_PWM_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009a6:	f000 ffbf 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009aa:	2320      	movs	r3, #32
 80009ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	4619      	mov	r1, r3
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_TIM4_Init+0xe8>)
 80009ba:	f003 fb2b 	bl	8004014 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009c4:	f000 ffb0 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	2360      	movs	r3, #96	; 0x60
 80009ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80009cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <MX_TIM4_Init+0xe8>)
 80009e2:	f002 fdc7 	bl	8003574 <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80009ec:	f000 ff9c 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <MX_TIM4_Init+0xe8>)
 80009f2:	f001 f859 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 80009f6:	bf00      	nop
 80009f8:	3738      	adds	r7, #56	; 0x38
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000794 	.word	0x20000794
 8000a04:	40000800 	.word	0x40000800

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_USART1_UART_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a44:	f003 fb68 	bl	8004118 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 ff6b 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200007dc 	.word	0x200007dc
 8000a5c:	40011000 	.word	0x40011000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a55      	ldr	r2, [pc, #340]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b53      	ldr	r3, [pc, #332]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a4e      	ldr	r2, [pc, #312]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOV_Pin|RAMP_Pin|RDY_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	211a      	movs	r1, #26
 8000ab2:	4849      	ldr	r0, [pc, #292]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000ab4:	f001 fcc4 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|E_MUX_Pin|ENA_stepper_Pin|S0_MUX_Pin
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f24f 6106 	movw	r1, #62982	; 0xf606
 8000abe:	4847      	ldr	r0, [pc, #284]	; (8000bdc <MX_GPIO_Init+0x17c>)
 8000ac0:	f001 fcbe 	bl	8002440 <HAL_GPIO_WritePin>
                          |S1_MUX_Pin|S2_MUX_Pin|S3_MUX_Pin|DIR_stepper_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HOME_Pin MOVE_EN_Pin */
  GPIO_InitStruct.Pin = HOME_Pin|MOVE_EN_Pin;
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	483f      	ldr	r0, [pc, #252]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000ada:	f001 fb2d 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOV_Pin */
  GPIO_InitStruct.Pin = MOV_Pin;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOV_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4838      	ldr	r0, [pc, #224]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000af6:	f001 fb1f 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : RAMP_Pin RDY_Pin */
  GPIO_InitStruct.Pin = RAMP_Pin|RDY_Pin;
 8000afa:	2318      	movs	r3, #24
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4831      	ldr	r0, [pc, #196]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000b12:	f001 fb11 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : REC_Pin */
  GPIO_InitStruct.Pin = REC_Pin;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REC_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	482c      	ldr	r0, [pc, #176]	; (8000bdc <MX_GPIO_Init+0x17c>)
 8000b2a:	f001 fb05 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4825      	ldr	r0, [pc, #148]	; (8000bdc <MX_GPIO_Init+0x17c>)
 8000b46:	f001 faf7 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_MUX_Pin */
  GPIO_InitStruct.Pin = E_MUX_Pin;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(E_MUX_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481e      	ldr	r0, [pc, #120]	; (8000bdc <MX_GPIO_Init+0x17c>)
 8000b62:	f001 fae9 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA_stepper_Pin DIR_stepper_Pin */
  GPIO_InitStruct.Pin = ENA_stepper_Pin|DIR_stepper_Pin;
 8000b66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <MX_GPIO_Init+0x17c>)
 8000b80:	f001 fada 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_MUX_Pin S1_MUX_Pin S2_MUX_Pin S3_MUX_Pin */
  GPIO_InitStruct.Pin = S0_MUX_Pin|S1_MUX_Pin|S2_MUX_Pin|S3_MUX_Pin;
 8000b84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <MX_GPIO_Init+0x17c>)
 8000b9e:	f001 facb 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : COM_IO_MUX_Pin */
  GPIO_InitStruct.Pin = COM_IO_MUX_Pin;
 8000ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bac:	2302      	movs	r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COM_IO_MUX_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000bb8:	f001 fabe 	bl	8002138 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2105      	movs	r1, #5
 8000bc0:	2006      	movs	r0, #6
 8000bc2:	f001 f9fd 	bl	8001fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bc6:	2006      	movs	r0, #6
 8000bc8:	f001 fa16 	bl	8001ff8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020400 	.word	0x40020400

08000be0 <uart1_rx_callback>:

/* USER CODE BEGIN 4 */
void uart1_rx_callback(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <uart1_rx_callback+0x18>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	2201      	movs	r2, #1
 8000bec:	4903      	ldr	r1, [pc, #12]	; (8000bfc <uart1_rx_callback+0x1c>)
 8000bee:	f004 fffd 	bl	8005bec <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 8000bf2:	bf00      	nop

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000830 	.word	0x20000830
 8000bfc:	40011004 	.word	0x40011004

08000c00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) // HOME position
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d109      	bne.n	8000c24 <HAL_GPIO_EXTI_Callback+0x24>
	{
		HAL_UART_Transmit(&huart1, "HOME", 5, 100);
 8000c10:	2364      	movs	r3, #100	; 0x64
 8000c12:	2205      	movs	r2, #5
 8000c14:	4905      	ldr	r1, [pc, #20]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c18:	f003 facb 	bl	80041b2 <HAL_UART_Transmit>
		exm.position = 0;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	}
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	080081dc 	.word	0x080081dc
 8000c30:	200007dc 	.word	0x200007dc
 8000c34:	20000838 	.word	0x20000838

08000c38 <enter_programing>:

void enter_programing()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x40);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <enter_programing+0x34>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 fbcf 	bl	80053e8 <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <enter_programing+0x38>)
 8000c4c:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <enter_programing+0x38>)
 8000c4e:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <enter_programing+0x38>)
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <enter_programing+0x3c>)
 8000c54:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	erase_exm();
 8000c58:	f000 f8e2 	bl	8000e20 <erase_exm>
	xEventGroupSetBits(EventGroup, 0x80);
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <enter_programing+0x34>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 fc1c 	bl	80054a0 <xEventGroupSetBits>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000904 	.word	0x20000904
 8000c70:	20000838 	.word	0x20000838
 8000c74:	200008b4 	.word	0x200008b4

08000c78 <exit_programing>:

void exit_programing()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x80);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <exit_programing+0x50>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 fbaf 	bl	80053e8 <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <exit_programing+0x54>)
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <exit_programing+0x54>)
 8000c8e:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <exit_programing+0x54>)
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <exit_programing+0x58>)
 8000c94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	exm.start_speed_value = 0;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <exit_programing+0x54>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <exit_programing+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <exit_programing+0x54>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <exit_programing+0x54>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

	xEventGroupSetBits(EventGroup, 0x40);
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <exit_programing+0x50>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fbee 	bl	80054a0 <xEventGroupSetBits>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000904 	.word	0x20000904
 8000ccc:	20000838 	.word	0x20000838
 8000cd0:	200008b4 	.word	0x200008b4

08000cd4 <write_to_exm>:

void write_to_exm(uint8_t* start_of_data, uint8_t size_of_data)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size_of_data; i++){
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e017      	b.n	8000d16 <write_to_exm+0x42>
//		exm.execution_memory[exm.memory_pointer] = start_of_data[i];
		*exm.memory_pointer = start_of_data[i];
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	441a      	add	r2, r3
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <write_to_exm+0x84>)
 8000cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <write_to_exm+0x84>)
 8000cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <write_to_exm+0x84>)
 8000cfc:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <write_to_exm+0x84>)
 8000d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <write_to_exm+0x88>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d303      	bcc.n	8000d10 <write_to_exm+0x3c>
			exm.memory_pointer = exm.execution_memory + 118;
 8000d08:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <write_to_exm+0x8c>)
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <write_to_exm+0x84>)
 8000d0c:	679a      	str	r2, [r3, #120]	; 0x78
			return;
 8000d0e:	e01d      	b.n	8000d4c <write_to_exm+0x78>
	for(int i = 0; i < size_of_data; i++){
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	dbe3      	blt.n	8000ce6 <write_to_exm+0x12>
		}
	}
//	exm.sizes_of_instruction[exm.sizes_pointer] = size_of_data;
	*exm.sizes_pointer = size_of_data;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <write_to_exm+0x84>)
 8000d20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	701a      	strb	r2, [r3, #0]
	exm.sizes_pointer++;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <write_to_exm+0x84>)
 8000d2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <write_to_exm+0x84>)
 8000d32:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <write_to_exm+0x84>)
 8000d38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <write_to_exm+0x90>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d304      	bcc.n	8000d4c <write_to_exm+0x78>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <write_to_exm+0x94>)
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <write_to_exm+0x84>)
 8000d46:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return;
 8000d4a:	bf00      	nop
	}
}
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000838 	.word	0x20000838
 8000d5c:	200008af 	.word	0x200008af
 8000d60:	200008ae 	.word	0x200008ae
 8000d64:	200008f0 	.word	0x200008f0
 8000d68:	200008ef 	.word	0x200008ef

08000d6c <read_from_exm>:

void read_from_exm()
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	e008      	b.n	8000d8a <read_from_exm+0x1e>
		exm.current_instruction[i] = 0;
 8000d78:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <read_from_exm+0xa0>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	33bc      	adds	r3, #188	; 0xbc
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	ddf3      	ble.n	8000d78 <read_from_exm+0xc>
	}
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000d90:	2300      	movs	r3, #0
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	e019      	b.n	8000dca <read_from_exm+0x5e>
		exm.current_instruction[i] = *exm.memory_pointer;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <read_from_exm+0xa0>)
 8000d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d9a:	7819      	ldrb	r1, [r3, #0]
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <read_from_exm+0xa0>)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	33bc      	adds	r3, #188	; 0xbc
 8000da4:	460a      	mov	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <read_from_exm+0xa0>)
 8000daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <read_from_exm+0xa0>)
 8000db0:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <read_from_exm+0xa0>)
 8000db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <read_from_exm+0xa4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d303      	bcc.n	8000dc4 <read_from_exm+0x58>
			exm.memory_pointer = exm.execution_memory + 118;
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <read_from_exm+0xa8>)
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <read_from_exm+0xa0>)
 8000dc0:	679a      	str	r2, [r3, #120]	; 0x78
			return ;
 8000dc2:	e01d      	b.n	8000e00 <read_from_exm+0x94>
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <read_from_exm+0xa0>)
 8000dcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	dbdd      	blt.n	8000d96 <read_from_exm+0x2a>
		}
	}
	exm.sizes_pointer++;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <read_from_exm+0xa0>)
 8000ddc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000de0:	3301      	adds	r3, #1
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <read_from_exm+0xa0>)
 8000de4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <read_from_exm+0xa0>)
 8000dea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <read_from_exm+0xac>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d304      	bcc.n	8000dfe <read_from_exm+0x92>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <read_from_exm+0xb0>)
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <read_from_exm+0xa0>)
 8000df8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return ;
 8000dfc:	e000      	b.n	8000e00 <read_from_exm+0x94>
	}
	return ;
 8000dfe:	bf00      	nop
}
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000838 	.word	0x20000838
 8000e10:	200008af 	.word	0x200008af
 8000e14:	200008ae 	.word	0x200008ae
 8000e18:	200008f0 	.word	0x200008f0
 8000e1c:	200008ef 	.word	0x200008ef

08000e20 <erase_exm>:

void erase_exm()
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	e007      	b.n	8000e3c <erase_exm+0x1c>
		exm.execution_memory[i] = 0;
 8000e2c:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <erase_exm+0x50>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b76      	cmp	r3, #118	; 0x76
 8000e40:	d9f4      	bls.n	8000e2c <erase_exm+0xc>
	}
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	e008      	b.n	8000e5a <erase_exm+0x3a>
		exm.sizes_of_instruction[i] = 1;
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <erase_exm+0x50>)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	337c      	adds	r3, #124	; 0x7c
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b3b      	cmp	r3, #59	; 0x3b
 8000e5e:	d9f3      	bls.n	8000e48 <erase_exm+0x28>
	}
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000838 	.word	0x20000838

08000e74 <start_motor>:

void start_motor()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	if(exm.start_speed_value == 0) return;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <start_motor+0x48>)
 8000e7c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d017      	beq.n	8000eb4 <start_motor+0x40>
	HAL_TIM_Base_Start_IT(&htim4);
 8000e84:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <start_motor+0x4c>)
 8000e86:	f002 f86f 	bl	8002f68 <HAL_TIM_Base_Start_IT>
	uint16_t temp = (uint16_t)(CK_CNT / exm.start_speed_value);
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <start_motor+0x48>)
 8000e8c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <start_motor+0x50>)
 8000e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e98:	80fb      	strh	r3, [r7, #6]
	TIM4->ARR = temp;
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <start_motor+0x54>)
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CCR1 = temp/2;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	085b      	lsrs	r3, r3, #1
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <start_motor+0x54>)
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <start_motor+0x4c>)
 8000eae:	f002 f945 	bl	800313c <HAL_TIM_PWM_Start>
 8000eb2:	e000      	b.n	8000eb6 <start_motor+0x42>
	if(exm.start_speed_value == 0) return;
 8000eb4:	bf00      	nop
}
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000838 	.word	0x20000838
 8000ec0:	20000794 	.word	0x20000794
 8000ec4:	000f4240 	.word	0x000f4240
 8000ec8:	40000800 	.word	0x40000800

08000ecc <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8000ed4:	4b66      	ldr	r3, [pc, #408]	; (8001070 <programing_mode+0x1a4>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	f004 f9b2 	bl	800524c <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	2211      	movs	r2, #17
 8000eec:	4961      	ldr	r1, [pc, #388]	; (8001074 <programing_mode+0x1a8>)
 8000eee:	4862      	ldr	r0, [pc, #392]	; (8001078 <programing_mode+0x1ac>)
 8000ef0:	f003 f95f 	bl	80041b2 <HAL_UART_Transmit>
	  //vTaskDelay(200);
	  char instruction_for_programing = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	77fb      	strb	r3, [r7, #31]
	  xQueueReceive(programing_queue, &instruction_for_programing, portMAX_DELAY);
 8000ef8:	4b60      	ldr	r3, [pc, #384]	; (800107c <programing_mode+0x1b0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f107 011f 	add.w	r1, r7, #31
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 ff0d 	bl	8005d24 <xQueueReceive>
	  switch (instruction_for_programing) {
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	3b47      	subs	r3, #71	; 0x47
 8000f0e:	2b0d      	cmp	r3, #13
 8000f10:	f200 80ac 	bhi.w	800106c <programing_mode+0x1a0>
 8000f14:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <programing_mode+0x50>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000fdf 	.word	0x08000fdf
 8000f20:	0800106d 	.word	0x0800106d
 8000f24:	0800106d 	.word	0x0800106d
 8000f28:	0800106d 	.word	0x0800106d
 8000f2c:	0800106d 	.word	0x0800106d
 8000f30:	0800106d 	.word	0x0800106d
 8000f34:	0800106d 	.word	0x0800106d
 8000f38:	0800106d 	.word	0x0800106d
 8000f3c:	0800106d 	.word	0x0800106d
 8000f40:	0800106d 	.word	0x0800106d
 8000f44:	0800106d 	.word	0x0800106d
 8000f48:	08000fb1 	.word	0x08000fb1
 8000f4c:	08000f55 	.word	0x08000f55
 8000f50:	08000f83 	.word	0x08000f83
		case 'S':
			uint8_t data1[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
 8000f54:	2353      	movs	r3, #83	; 0x53
 8000f56:	763b      	strb	r3, [r7, #24]
 8000f58:	4b49      	ldr	r3, [pc, #292]	; (8001080 <programing_mode+0x1b4>)
 8000f5a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	767b      	strb	r3, [r7, #25]
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <programing_mode+0x1b4>)
 8000f64:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	76bb      	strb	r3, [r7, #26]
 8000f70:	2300      	movs	r3, #0
 8000f72:	76fb      	strb	r3, [r7, #27]
			write_to_exm(data1, sizeof(data1));
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff feaa 	bl	8000cd4 <write_to_exm>
			break;
 8000f80:	e075      	b.n	800106e <programing_mode+0x1a2>
		case 'T':
			uint8_t data2[4] = {'T', (uint8_t)(exm.top_speed_value), (uint8_t)((exm.top_speed_value>>8)), 0};
 8000f82:	2354      	movs	r3, #84	; 0x54
 8000f84:	753b      	strb	r3, [r7, #20]
 8000f86:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <programing_mode+0x1b4>)
 8000f88:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	757b      	strb	r3, [r7, #21]
 8000f90:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <programing_mode+0x1b4>)
 8000f92:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]
			write_to_exm(data2, sizeof(data2));
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe93 	bl	8000cd4 <write_to_exm>
			break;
 8000fae:	e05e      	b.n	800106e <programing_mode+0x1a2>
		case 'R':
			uint8_t data3[4] = {'R', (uint8_t)(exm.ramp_value), (uint8_t)((exm.ramp_value>>8)), 0};
 8000fb0:	2352      	movs	r3, #82	; 0x52
 8000fb2:	743b      	strb	r3, [r7, #16]
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <programing_mode+0x1b4>)
 8000fb6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	747b      	strb	r3, [r7, #17]
 8000fbe:	4b30      	ldr	r3, [pc, #192]	; (8001080 <programing_mode+0x1b4>)
 8000fc0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	74bb      	strb	r3, [r7, #18]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	74fb      	strb	r3, [r7, #19]
			write_to_exm(data3, sizeof(data3));
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe7c 	bl	8000cd4 <write_to_exm>
			break;
 8000fdc:	e047      	b.n	800106e <programing_mode+0x1a2>
		case 'G':
			instruction_for_programing = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	77fb      	strb	r3, [r7, #31]
			  xQueueReceive(programing_queue, &instruction_for_programing, 5);
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <programing_mode+0x1b0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f107 011f 	add.w	r1, r7, #31
 8000fea:	2205      	movs	r2, #5
 8000fec:	4618      	mov	r0, r3
 8000fee:	f004 fe99 	bl	8005d24 <xQueueReceive>
			  switch (instruction_for_programing) {
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	2b2b      	cmp	r3, #43	; 0x2b
 8000ff6:	d002      	beq.n	8000ffe <programing_mode+0x132>
 8000ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8000ffa:	d01b      	beq.n	8001034 <programing_mode+0x168>
			  	  case '-':
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
						write_to_exm(data5, sizeof(data5));
			  		  break;
			  }
			break;
 8000ffc:	e037      	b.n	800106e <programing_mode+0x1a2>
						uint8_t data4[4] = {('G'+'+'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8000ffe:	2372      	movs	r3, #114	; 0x72
 8001000:	733b      	strb	r3, [r7, #12]
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <programing_mode+0x1b4>)
 8001004:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001008:	b2db      	uxtb	r3, r3
 800100a:	737b      	strb	r3, [r7, #13]
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <programing_mode+0x1b4>)
 800100e:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	b29b      	uxth	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73bb      	strb	r3, [r7, #14]
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <programing_mode+0x1b4>)
 800101c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001020:	141b      	asrs	r3, r3, #16
 8001022:	b2db      	uxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]
						write_to_exm(data4, sizeof(data4));
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2104      	movs	r1, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe51 	bl	8000cd4 <write_to_exm>
			  		  break;
 8001032:	e01a      	b.n	800106a <programing_mode+0x19e>
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8001034:	2374      	movs	r3, #116	; 0x74
 8001036:	723b      	strb	r3, [r7, #8]
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <programing_mode+0x1b4>)
 800103a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800103e:	b2db      	uxtb	r3, r3
 8001040:	727b      	strb	r3, [r7, #9]
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <programing_mode+0x1b4>)
 8001044:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	72bb      	strb	r3, [r7, #10]
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <programing_mode+0x1b4>)
 8001052:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001056:	141b      	asrs	r3, r3, #16
 8001058:	b2db      	uxtb	r3, r3
 800105a:	72fb      	strb	r3, [r7, #11]
						write_to_exm(data5, sizeof(data5));
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2104      	movs	r1, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fe36 	bl	8000cd4 <write_to_exm>
			  		  break;
 8001068:	bf00      	nop
			break;
 800106a:	e000      	b.n	800106e <programing_mode+0x1a2>
		default:
			break;
 800106c:	bf00      	nop
  {
 800106e:	e731      	b.n	8000ed4 <programing_mode+0x8>
 8001070:	20000904 	.word	0x20000904
 8001074:	080081e4 	.word	0x080081e4
 8001078:	200007dc 	.word	0x200007dc
 800107c:	20000834 	.word	0x20000834
 8001080:	20000838 	.word	0x20000838

08001084 <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 800108c:	4b98      	ldr	r3, [pc, #608]	; (80012f0 <interpreter+0x26c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f107 010b 	add.w	r1, r7, #11
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fe43 	bl	8005d24 <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 800109e:	f107 010b 	add.w	r1, r7, #11
 80010a2:	230a      	movs	r3, #10
 80010a4:	2201      	movs	r2, #1
 80010a6:	4893      	ldr	r0, [pc, #588]	; (80012f4 <interpreter+0x270>)
 80010a8:	f003 f883 	bl	80041b2 <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da04      	bge.n	80010be <interpreter+0x3a>
		  pData &= ~(1<<7);
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	72fb      	strb	r3, [r7, #11]
	  }
	  __asm__ volatile("NOP");
 80010be:	bf00      	nop
	  char temp = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	72bb      	strb	r3, [r7, #10]
	  switch (pData) {
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8218 	beq.w	80014fc <interpreter+0x478>
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f2c0 8217 	blt.w	8001500 <interpreter+0x47c>
 80010d2:	2b54      	cmp	r3, #84	; 0x54
 80010d4:	f300 8214 	bgt.w	8001500 <interpreter+0x47c>
 80010d8:	2b45      	cmp	r3, #69	; 0x45
 80010da:	f2c0 8211 	blt.w	8001500 <interpreter+0x47c>
 80010de:	3b45      	subs	r3, #69	; 0x45
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	f200 820d 	bhi.w	8001500 <interpreter+0x47c>
 80010e6:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <interpreter+0x68>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	08001179 	.word	0x08001179
 80010f0:	08001501 	.word	0x08001501
 80010f4:	0800138b 	.word	0x0800138b
 80010f8:	08001501 	.word	0x08001501
 80010fc:	08001501 	.word	0x08001501
 8001100:	08001501 	.word	0x08001501
 8001104:	08001501 	.word	0x08001501
 8001108:	08001501 	.word	0x08001501
 800110c:	08001501 	.word	0x08001501
 8001110:	08001501 	.word	0x08001501
 8001114:	08001501 	.word	0x08001501
 8001118:	0800112d 	.word	0x0800112d
 800111c:	08001501 	.word	0x08001501
 8001120:	080012c5 	.word	0x080012c5
 8001124:	0800117f 	.word	0x0800117f
 8001128:	0800121d 	.word	0x0800121d
		case 'P':
			xQueueReceive(uart_queue_rx, &pData, 5);
 800112c:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <interpreter+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f107 010b 	add.w	r1, r7, #11
 8001134:	2205      	movs	r2, #5
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fdf4 	bl	8005d24 <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 800113c:	f107 010b 	add.w	r1, r7, #11
 8001140:	230a      	movs	r3, #10
 8001142:	2201      	movs	r2, #1
 8001144:	486b      	ldr	r0, [pc, #428]	; (80012f4 <interpreter+0x270>)
 8001146:	f003 f834 	bl	80041b2 <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	da04      	bge.n	800115c <interpreter+0xd8>
					  pData &= ~(1<<7);
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001158:	b2db      	uxtb	r3, r3
 800115a:	72fb      	strb	r3, [r7, #11]
				  }
			__asm__ volatile("NOP");
 800115c:	bf00      	nop
			switch (pData) {
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	2b6f      	cmp	r3, #111	; 0x6f
 8001162:	d002      	beq.n	800116a <interpreter+0xe6>
 8001164:	2b78      	cmp	r3, #120	; 0x78
 8001166:	d003      	beq.n	8001170 <interpreter+0xec>
					break;
				case 'x':
					exit_programing();
					break;
				default:
					break;
 8001168:	e005      	b.n	8001176 <interpreter+0xf2>
					enter_programing();
 800116a:	f7ff fd65 	bl	8000c38 <enter_programing>
					break;
 800116e:	e002      	b.n	8001176 <interpreter+0xf2>
					exit_programing();
 8001170:	f7ff fd82 	bl	8000c78 <exit_programing>
					break;
 8001174:	bf00      	nop
			}
			break;
 8001176:	e1cc      	b.n	8001512 <interpreter+0x48e>
	    case 'E':
	    	exit_programing();
 8001178:	f7ff fd7e 	bl	8000c78 <exit_programing>
	    	break;
 800117c:	e1c9      	b.n	8001512 <interpreter+0x48e>
		case 'S':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 800117e:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <interpreter+0x274>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f004 f92f 	bl	80053e8 <xEventGroupClearBits>
 800118a:	4603      	mov	r3, r0
 800118c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001190:	2b80      	cmp	r3, #128	; 0x80
 8001192:	f040 81b7 	bne.w	8001504 <interpreter+0x480>
			exm.start_speed_value = 0;
 8001196:	4b59      	ldr	r3, [pc, #356]	; (80012fc <interpreter+0x278>)
 8001198:	2200      	movs	r2, #0
 800119a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			temp = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 5; i++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e02d      	b.n	8001204 <interpreter+0x180>
				xQueueReceive(uart_queue_rx, &temp, 5);
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <interpreter+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f107 010a 	add.w	r1, r7, #10
 80011b0:	2205      	movs	r2, #5
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fdb6 	bl	8005d24 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 4)) break;
 80011b8:	7abb      	ldrb	r3, [r7, #10]
 80011ba:	2b0d      	cmp	r3, #13
 80011bc:	d025      	beq.n	800120a <interpreter+0x186>
 80011be:	7abb      	ldrb	r3, [r7, #10]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d022      	beq.n	800120a <interpreter+0x186>
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d01f      	beq.n	800120a <interpreter+0x186>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 80011ca:	7abb      	ldrb	r3, [r7, #10]
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da04      	bge.n	80011dc <interpreter+0x158>
					temp &= ~(1<<7);
 80011d2:	7abb      	ldrb	r3, [r7, #10]
 80011d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	72bb      	strb	r3, [r7, #10]
			    }
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <interpreter+0x278>)
 80011de:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80011e2:	461a      	mov	r2, r3
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	7abb      	ldrb	r3, [r7, #10]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	3b30      	subs	r3, #48	; 0x30
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b40      	ldr	r3, [pc, #256]	; (80012fc <interpreter+0x278>)
 80011fa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			for(int i = 0; i < 5; i++){
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b04      	cmp	r3, #4
 8001208:	ddce      	ble.n	80011a8 <interpreter+0x124>
			}
			xQueueSendToBack(programing_queue, (void*)"S", 100);
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <interpreter+0x27c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	2264      	movs	r2, #100	; 0x64
 8001212:	493c      	ldr	r1, [pc, #240]	; (8001304 <interpreter+0x280>)
 8001214:	f004 fbec 	bl	80059f0 <xQueueGenericSend>
			//exm.
			__asm__ volatile("NOP");
 8001218:	bf00      	nop
			break;
 800121a:	e17a      	b.n	8001512 <interpreter+0x48e>
		case 'T':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <interpreter+0x274>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 f8e0 	bl	80053e8 <xEventGroupClearBits>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	f040 816a 	bne.w	8001508 <interpreter+0x484>
			exm.top_speed_value = 0;
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <interpreter+0x278>)
 8001236:	2200      	movs	r2, #0
 8001238:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			temp = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	e030      	b.n	80012a8 <interpreter+0x224>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <interpreter+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f107 010a 	add.w	r1, r7, #10
 800124e:	2205      	movs	r2, #5
 8001250:	4618      	mov	r0, r3
 8001252:	f004 fd67 	bl	8005d24 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8001256:	7abb      	ldrb	r3, [r7, #10]
 8001258:	2b0d      	cmp	r3, #13
 800125a:	d02a      	beq.n	80012b2 <interpreter+0x22e>
 800125c:	7abb      	ldrb	r3, [r7, #10]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d027      	beq.n	80012b2 <interpreter+0x22e>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d024      	beq.n	80012b2 <interpreter+0x22e>
				if(i == 3) break;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b03      	cmp	r3, #3
 800126c:	d020      	beq.n	80012b0 <interpreter+0x22c>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 800126e:	7abb      	ldrb	r3, [r7, #10]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	da04      	bge.n	8001280 <interpreter+0x1fc>
					temp &= ~(1<<7);
 8001276:	7abb      	ldrb	r3, [r7, #10]
 8001278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800127c:	b2db      	uxtb	r3, r3
 800127e:	72bb      	strb	r3, [r7, #10]
			    }
				exm.top_speed_value = (exm.top_speed_value*10) + (temp - 48);
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <interpreter+0x278>)
 8001282:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001286:	461a      	mov	r2, r3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	b29a      	uxth	r2, r3
 8001290:	7abb      	ldrb	r3, [r7, #10]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	3b30      	subs	r3, #48	; 0x30
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <interpreter+0x278>)
 800129e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			for(int i = 0; i < 4; i++){
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	ddcb      	ble.n	8001246 <interpreter+0x1c2>
 80012ae:	e000      	b.n	80012b2 <interpreter+0x22e>
				if(i == 3) break;
 80012b0:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"T", 100);
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <interpreter+0x27c>)
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	2264      	movs	r2, #100	; 0x64
 80012ba:	4913      	ldr	r1, [pc, #76]	; (8001308 <interpreter+0x284>)
 80012bc:	f004 fb98 	bl	80059f0 <xQueueGenericSend>
			__asm__ volatile("NOP");
 80012c0:	bf00      	nop
			break;
 80012c2:	e126      	b.n	8001512 <interpreter+0x48e>
		case 'R':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <interpreter+0x274>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 f88c 	bl	80053e8 <xEventGroupClearBits>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	2b80      	cmp	r3, #128	; 0x80
 80012d8:	f040 8118 	bne.w	800150c <interpreter+0x488>
			exm.ramp_value = 0;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <interpreter+0x278>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			temp = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e03f      	b.n	800136e <interpreter+0x2ea>
 80012ee:	bf00      	nop
 80012f0:	20000830 	.word	0x20000830
 80012f4:	200007dc 	.word	0x200007dc
 80012f8:	20000904 	.word	0x20000904
 80012fc:	20000838 	.word	0x20000838
 8001300:	20000834 	.word	0x20000834
 8001304:	080081f8 	.word	0x080081f8
 8001308:	080081fc 	.word	0x080081fc
				xQueueReceive(uart_queue_rx, &temp, 5);
 800130c:	4b82      	ldr	r3, [pc, #520]	; (8001518 <interpreter+0x494>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f107 010a 	add.w	r1, r7, #10
 8001314:	2205      	movs	r2, #5
 8001316:	4618      	mov	r0, r3
 8001318:	f004 fd04 	bl	8005d24 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 800131c:	7abb      	ldrb	r3, [r7, #10]
 800131e:	2b0d      	cmp	r3, #13
 8001320:	d02a      	beq.n	8001378 <interpreter+0x2f4>
 8001322:	7abb      	ldrb	r3, [r7, #10]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d027      	beq.n	8001378 <interpreter+0x2f4>
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d024      	beq.n	8001378 <interpreter+0x2f4>
				if(i == 3) break;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d020      	beq.n	8001376 <interpreter+0x2f2>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8001334:	7abb      	ldrb	r3, [r7, #10]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	da04      	bge.n	8001346 <interpreter+0x2c2>
					temp &= ~(1<<7);
 800133c:	7abb      	ldrb	r3, [r7, #10]
 800133e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001342:	b2db      	uxtb	r3, r3
 8001344:	72bb      	strb	r3, [r7, #10]
			    }
				exm.ramp_value = (exm.ramp_value*10) + (temp - 48);
 8001346:	4b75      	ldr	r3, [pc, #468]	; (800151c <interpreter+0x498>)
 8001348:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800134c:	461a      	mov	r2, r3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4413      	add	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	3b30      	subs	r3, #48	; 0x30
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b6e      	ldr	r3, [pc, #440]	; (800151c <interpreter+0x498>)
 8001364:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			for(int i = 0; i < 4; i++){
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b03      	cmp	r3, #3
 8001372:	ddcb      	ble.n	800130c <interpreter+0x288>
 8001374:	e000      	b.n	8001378 <interpreter+0x2f4>
				if(i == 3) break;
 8001376:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"R", 100);
 8001378:	4b69      	ldr	r3, [pc, #420]	; (8001520 <interpreter+0x49c>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	2264      	movs	r2, #100	; 0x64
 8001380:	4968      	ldr	r1, [pc, #416]	; (8001524 <interpreter+0x4a0>)
 8001382:	f004 fb35 	bl	80059f0 <xQueueGenericSend>
			__asm__ volatile("NOP");
 8001386:	bf00      	nop
			break;
 8001388:	e0c3      	b.n	8001512 <interpreter+0x48e>
		case 'G':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 800138a:	4b67      	ldr	r3, [pc, #412]	; (8001528 <interpreter+0x4a4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f004 f829 	bl	80053e8 <xEventGroupClearBits>
 8001396:	4603      	mov	r3, r0
 8001398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139c:	2b80      	cmp	r3, #128	; 0x80
 800139e:	f040 80b7 	bne.w	8001510 <interpreter+0x48c>
			xQueueReceive(uart_queue_rx, &pData, 5);
 80013a2:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <interpreter+0x494>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f107 010b 	add.w	r1, r7, #11
 80013aa:	2205      	movs	r2, #5
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fcb9 	bl	8005d24 <xQueueReceive>
			  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da04      	bge.n	80013c4 <interpreter+0x340>
				  pData &= ~(1<<7);
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	72fb      	strb	r3, [r7, #11]
			  }
			__asm__ volatile("NOP");
 80013c4:	bf00      	nop
			switch (pData) {
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	2b2b      	cmp	r3, #43	; 0x2b
 80013ca:	d002      	beq.n	80013d2 <interpreter+0x34e>
 80013cc:	2b2d      	cmp	r3, #45	; 0x2d
 80013ce:	d04a      	beq.n	8001466 <interpreter+0x3e2>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
					xQueueSendToBack(programing_queue, (void*)"-", 100);
					__asm__ volatile("NOP");
					break;
				default:
					break;
 80013d0:	e093      	b.n	80014fa <interpreter+0x476>
					exm.G_sign_value = 0;
 80013d2:	4b52      	ldr	r3, [pc, #328]	; (800151c <interpreter+0x498>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	e02d      	b.n	8001440 <interpreter+0x3bc>
						xQueueReceive(uart_queue_rx, &temp, 5);
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <interpreter+0x494>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f107 010a 	add.w	r1, r7, #10
 80013ec:	2205      	movs	r2, #5
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fc98 	bl	8005d24 <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 80013f4:	7abb      	ldrb	r3, [r7, #10]
 80013f6:	2b0d      	cmp	r3, #13
 80013f8:	d025      	beq.n	8001446 <interpreter+0x3c2>
 80013fa:	7abb      	ldrb	r3, [r7, #10]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d022      	beq.n	8001446 <interpreter+0x3c2>
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b07      	cmp	r3, #7
 8001404:	d01f      	beq.n	8001446 <interpreter+0x3c2>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8001406:	7abb      	ldrb	r3, [r7, #10]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	da04      	bge.n	8001418 <interpreter+0x394>
							temp &= ~(1<<7);
 800140e:	7abb      	ldrb	r3, [r7, #10]
 8001410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001414:	b2db      	uxtb	r3, r3
 8001416:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <interpreter+0x498>)
 800141a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800141e:	461a      	mov	r2, r3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	7abb      	ldrb	r3, [r7, #10]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b30      	subs	r3, #48	; 0x30
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <interpreter+0x498>)
 8001436:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	3301      	adds	r3, #1
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	2b07      	cmp	r3, #7
 8001444:	ddce      	ble.n	80013e4 <interpreter+0x360>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <interpreter+0x49c>)
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	2264      	movs	r2, #100	; 0x64
 800144e:	4937      	ldr	r1, [pc, #220]	; (800152c <interpreter+0x4a8>)
 8001450:	f004 face 	bl	80059f0 <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"+", 100);
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <interpreter+0x49c>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	2264      	movs	r2, #100	; 0x64
 800145c:	4934      	ldr	r1, [pc, #208]	; (8001530 <interpreter+0x4ac>)
 800145e:	f004 fac7 	bl	80059f0 <xQueueGenericSend>
					__asm__ volatile("NOP");
 8001462:	bf00      	nop
					break;
 8001464:	e049      	b.n	80014fa <interpreter+0x476>
					exm.G_sign_value = 0;
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <interpreter+0x498>)
 8001468:	2200      	movs	r2, #0
 800146a:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e02d      	b.n	80014d4 <interpreter+0x450>
						xQueueReceive(uart_queue_rx, &temp, 5);
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <interpreter+0x494>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f107 010a 	add.w	r1, r7, #10
 8001480:	2205      	movs	r2, #5
 8001482:	4618      	mov	r0, r3
 8001484:	f004 fc4e 	bl	8005d24 <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 8001488:	7abb      	ldrb	r3, [r7, #10]
 800148a:	2b0d      	cmp	r3, #13
 800148c:	d025      	beq.n	80014da <interpreter+0x456>
 800148e:	7abb      	ldrb	r3, [r7, #10]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d022      	beq.n	80014da <interpreter+0x456>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d01f      	beq.n	80014da <interpreter+0x456>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 800149a:	7abb      	ldrb	r3, [r7, #10]
 800149c:	b25b      	sxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da04      	bge.n	80014ac <interpreter+0x428>
							temp &= ~(1<<7);
 80014a2:	7abb      	ldrb	r3, [r7, #10]
 80014a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <interpreter+0x498>)
 80014ae:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80014b2:	461a      	mov	r2, r3
 80014b4:	0092      	lsls	r2, r2, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	7abb      	ldrb	r3, [r7, #10]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3b30      	subs	r3, #48	; 0x30
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <interpreter+0x498>)
 80014ca:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3301      	adds	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	ddce      	ble.n	8001478 <interpreter+0x3f4>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <interpreter+0x49c>)
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	2264      	movs	r2, #100	; 0x64
 80014e2:	4912      	ldr	r1, [pc, #72]	; (800152c <interpreter+0x4a8>)
 80014e4:	f004 fa84 	bl	80059f0 <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"-", 100);
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <interpreter+0x49c>)
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	2300      	movs	r3, #0
 80014ee:	2264      	movs	r2, #100	; 0x64
 80014f0:	4910      	ldr	r1, [pc, #64]	; (8001534 <interpreter+0x4b0>)
 80014f2:	f004 fa7d 	bl	80059f0 <xQueueGenericSend>
					__asm__ volatile("NOP");
 80014f6:	bf00      	nop
					break;
 80014f8:	bf00      	nop
			}
			break;
 80014fa:	e00a      	b.n	8001512 <interpreter+0x48e>
	    case 0:
			break;
 80014fc:	bf00      	nop
 80014fe:	e008      	b.n	8001512 <interpreter+0x48e>
		default:
			break;
 8001500:	bf00      	nop
 8001502:	e006      	b.n	8001512 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001504:	bf00      	nop
 8001506:	e004      	b.n	8001512 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001508:	bf00      	nop
 800150a:	e002      	b.n	8001512 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 800150c:	bf00      	nop
 800150e:	e000      	b.n	8001512 <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001510:	bf00      	nop
	}

	  pData = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	72fb      	strb	r3, [r7, #11]
  {
 8001516:	e5b9      	b.n	800108c <interpreter+0x8>
 8001518:	20000830 	.word	0x20000830
 800151c:	20000838 	.word	0x20000838
 8001520:	20000834 	.word	0x20000834
 8001524:	08008200 	.word	0x08008200
 8001528:	20000904 	.word	0x20000904
 800152c:	08008204 	.word	0x08008204
 8001530:	08008208 	.word	0x08008208
 8001534:	0800820c 	.word	0x0800820c

08001538 <uart_comunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_comunication */
void uart_comunication(void const * argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
//	GPIOB->ODR |= GPIO_ODR_OD9; //counterclockwise
//	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  /* Infinite loop */
  for(;;)
  {
	  EventBits_t res = xEventGroupGetBits(EventGroup); // EventBits_t is uint32_t
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <uart_comunication+0x20>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f003 ff4e 	bl	80053e8 <xEventGroupClearBits>
 800154c:	60f8      	str	r0, [r7, #12]
//	  HAL_UART_Transmit(&huart1, &res, 4, 100);
	  vTaskDelay(1500);
 800154e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001552:	f004 ffc9 	bl	80064e8 <vTaskDelay>
  {
 8001556:	e7f3      	b.n	8001540 <uart_comunication+0x8>
 8001558:	20000904 	.word	0x20000904

0800155c <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af02      	add	r7, sp, #8
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8001564:	4ba3      	ldr	r3, [pc, #652]	; (80017f4 <execution_from_memory+0x298>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2301      	movs	r3, #1
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	f003 fe6a 	bl	800524c <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	220f      	movs	r2, #15
 800157c:	499e      	ldr	r1, [pc, #632]	; (80017f8 <execution_from_memory+0x29c>)
 800157e:	489f      	ldr	r0, [pc, #636]	; (80017fc <execution_from_memory+0x2a0>)
 8001580:	f002 fe17 	bl	80041b2 <HAL_UART_Transmit>
	  read_from_exm();
 8001584:	f7ff fbf2 	bl	8000d6c <read_from_exm>
	  HAL_UART_Transmit(&huart1, exm.current_instruction, sizeof(exm.current_instruction), 100);
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	2204      	movs	r2, #4
 800158c:	499c      	ldr	r1, [pc, #624]	; (8001800 <execution_from_memory+0x2a4>)
 800158e:	489b      	ldr	r0, [pc, #620]	; (80017fc <execution_from_memory+0x2a0>)
 8001590:	f002 fe0f 	bl	80041b2 <HAL_UART_Transmit>
	  switch (exm.current_instruction[0]) {
 8001594:	4b9b      	ldr	r3, [pc, #620]	; (8001804 <execution_from_memory+0x2a8>)
 8001596:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800159a:	3b52      	subs	r3, #82	; 0x52
 800159c:	2b22      	cmp	r3, #34	; 0x22
 800159e:	f200 811b 	bhi.w	80017d8 <execution_from_memory+0x27c>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <execution_from_memory+0x4c>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	08001685 	.word	0x08001685
 80015ac:	08001635 	.word	0x08001635
 80015b0:	0800165d 	.word	0x0800165d
 80015b4:	080017d9 	.word	0x080017d9
 80015b8:	080017d9 	.word	0x080017d9
 80015bc:	080017d9 	.word	0x080017d9
 80015c0:	080017d9 	.word	0x080017d9
 80015c4:	080017d9 	.word	0x080017d9
 80015c8:	080017d9 	.word	0x080017d9
 80015cc:	080017d9 	.word	0x080017d9
 80015d0:	080017d9 	.word	0x080017d9
 80015d4:	080017d9 	.word	0x080017d9
 80015d8:	080017d9 	.word	0x080017d9
 80015dc:	080017d9 	.word	0x080017d9
 80015e0:	080017d9 	.word	0x080017d9
 80015e4:	080017d9 	.word	0x080017d9
 80015e8:	080017d9 	.word	0x080017d9
 80015ec:	080017d9 	.word	0x080017d9
 80015f0:	080017d9 	.word	0x080017d9
 80015f4:	080017d9 	.word	0x080017d9
 80015f8:	080017d9 	.word	0x080017d9
 80015fc:	080017d9 	.word	0x080017d9
 8001600:	080017d9 	.word	0x080017d9
 8001604:	080017d9 	.word	0x080017d9
 8001608:	080017d9 	.word	0x080017d9
 800160c:	080017d9 	.word	0x080017d9
 8001610:	080017d9 	.word	0x080017d9
 8001614:	080017d9 	.word	0x080017d9
 8001618:	080017d9 	.word	0x080017d9
 800161c:	080017d9 	.word	0x080017d9
 8001620:	080017d9 	.word	0x080017d9
 8001624:	080017d9 	.word	0x080017d9
 8001628:	080016ad 	.word	0x080016ad
 800162c:	080017d9 	.word	0x080017d9
 8001630:	08001741 	.word	0x08001741
		case 'S':
			exm.start_speed_value = 0;
 8001634:	4b73      	ldr	r3, [pc, #460]	; (8001804 <execution_from_memory+0x2a8>)
 8001636:	2200      	movs	r2, #0
 8001638:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			exm.start_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 800163c:	4b71      	ldr	r3, [pc, #452]	; (8001804 <execution_from_memory+0x2a8>)
 800163e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <execution_from_memory+0x2a8>)
 8001646:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800164a:	b29b      	uxth	r3, r3
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b29b      	uxth	r3, r3
 8001650:	4413      	add	r3, r2
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <execution_from_memory+0x2a8>)
 8001656:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			break;
 800165a:	e0c6      	b.n	80017ea <execution_from_memory+0x28e>
		case 'T':
			exm.top_speed_value = 0;
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <execution_from_memory+0x2a8>)
 800165e:	2200      	movs	r2, #0
 8001660:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			exm.top_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001664:	4b67      	ldr	r3, [pc, #412]	; (8001804 <execution_from_memory+0x2a8>)
 8001666:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b65      	ldr	r3, [pc, #404]	; (8001804 <execution_from_memory+0x2a8>)
 800166e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001672:	b29b      	uxth	r3, r3
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b61      	ldr	r3, [pc, #388]	; (8001804 <execution_from_memory+0x2a8>)
 800167e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			break;
 8001682:	e0b2      	b.n	80017ea <execution_from_memory+0x28e>
		case 'R':
			exm.ramp_value = 0;
 8001684:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <execution_from_memory+0x2a8>)
 8001686:	2200      	movs	r2, #0
 8001688:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			exm.ramp_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <execution_from_memory+0x2a8>)
 800168e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <execution_from_memory+0x2a8>)
 8001696:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800169a:	b29b      	uxth	r3, r3
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <execution_from_memory+0x2a8>)
 80016a6:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			break;
 80016aa:	e09e      	b.n	80017ea <execution_from_memory+0x28e>
		case ('G'+'+'):
			exm.G_sign_value = 0;
 80016ac:	4b55      	ldr	r3, [pc, #340]	; (8001804 <execution_from_memory+0x2a8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <execution_from_memory+0x2a8>)
 80016b6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b51      	ldr	r3, [pc, #324]	; (8001804 <execution_from_memory+0x2a8>)
 80016be:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <execution_from_memory+0x2a8>)
 80016ce:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == exm.G_sign_value) break;
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <execution_from_memory+0x2a8>)
 80016d4:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80016d8:	461a      	mov	r2, r3
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <execution_from_memory+0x2a8>)
 80016dc:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d07b      	beq.n	80017dc <execution_from_memory+0x280>
			else if(exm.position > exm.G_sign_value){
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <execution_from_memory+0x2a8>)
 80016e6:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b45      	ldr	r3, [pc, #276]	; (8001804 <execution_from_memory+0x2a8>)
 80016ee:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dd06      	ble.n	8001704 <execution_from_memory+0x1a8>
				GPIOB->ODR |= GPIO_ODR_OD9; //counterclockwise
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <execution_from_memory+0x2ac>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a43      	ldr	r2, [pc, #268]	; (8001808 <execution_from_memory+0x2ac>)
 80016fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	e005      	b.n	8001710 <execution_from_memory+0x1b4>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_OD9; //clockwise
 8001704:	4b40      	ldr	r3, [pc, #256]	; (8001808 <execution_from_memory+0x2ac>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <execution_from_memory+0x2ac>)
 800170a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800170e:	6153      	str	r3, [r2, #20]
			}
//			  HAL_TIM_Base_Start_IT(&htim4);
//			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			if(exm.start_speed_value == 0) break;
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <execution_from_memory+0x2a8>)
 8001712:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d062      	beq.n	80017e0 <execution_from_memory+0x284>
			start_motor();
 800171a:	f7ff fbab 	bl	8000e74 <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <execution_from_memory+0x298>)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2301      	movs	r3, #1
 800172a:	2200      	movs	r2, #0
 800172c:	2150      	movs	r1, #80	; 0x50
 800172e:	f003 fd8d 	bl	800524c <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <execution_from_memory+0x298>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2110      	movs	r1, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fe55 	bl	80053e8 <xEventGroupClearBits>
			break;
 800173e:	e054      	b.n	80017ea <execution_from_memory+0x28e>
		case ('G'+'-'):
			exm.G_sign_value = 0;
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <execution_from_memory+0x2a8>)
 8001742:	2200      	movs	r2, #0
 8001744:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <execution_from_memory+0x2a8>)
 800174a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <execution_from_memory+0x2a8>)
 8001752:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001756:	b29b      	uxth	r3, r3
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	b29b      	uxth	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <execution_from_memory+0x2a8>)
 8001762:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == (0-exm.G_sign_value)) break;
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <execution_from_memory+0x2a8>)
 8001768:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800176c:	461a      	mov	r2, r3
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <execution_from_memory+0x2a8>)
 8001770:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001774:	425b      	negs	r3, r3
 8001776:	429a      	cmp	r2, r3
 8001778:	d034      	beq.n	80017e4 <execution_from_memory+0x288>
			else if(exm.position > (0-exm.G_sign_value)){
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <execution_from_memory+0x2a8>)
 800177c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001780:	461a      	mov	r2, r3
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <execution_from_memory+0x2a8>)
 8001784:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001788:	425b      	negs	r3, r3
 800178a:	429a      	cmp	r2, r3
 800178c:	dd06      	ble.n	800179c <execution_from_memory+0x240>
				GPIOB->ODR |= GPIO_ODR_OD9; //counterclockwise
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <execution_from_memory+0x2ac>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <execution_from_memory+0x2ac>)
 8001794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	e005      	b.n	80017a8 <execution_from_memory+0x24c>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_OD9; //clockwise
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <execution_from_memory+0x2ac>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <execution_from_memory+0x2ac>)
 80017a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017a6:	6153      	str	r3, [r2, #20]
			}
//			  HAL_TIM_Base_Start_IT(&htim4);
//			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			if(exm.start_speed_value == 0) break;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <execution_from_memory+0x2a8>)
 80017aa:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d01a      	beq.n	80017e8 <execution_from_memory+0x28c>
			start_motor();
 80017b2:	f7ff fb5f 	bl	8000e74 <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <execution_from_memory+0x298>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	2200      	movs	r2, #0
 80017c4:	2150      	movs	r1, #80	; 0x50
 80017c6:	f003 fd41 	bl	800524c <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <execution_from_memory+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2110      	movs	r1, #16
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 fe09 	bl	80053e8 <xEventGroupClearBits>
			break;
 80017d6:	e008      	b.n	80017ea <execution_from_memory+0x28e>
		default:
			break;
 80017d8:	bf00      	nop
 80017da:	e006      	b.n	80017ea <execution_from_memory+0x28e>
			if(exm.position == exm.G_sign_value) break;
 80017dc:	bf00      	nop
 80017de:	e004      	b.n	80017ea <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80017e0:	bf00      	nop
 80017e2:	e002      	b.n	80017ea <execution_from_memory+0x28e>
			if(exm.position == (0-exm.G_sign_value)) break;
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80017e8:	bf00      	nop
	}
	  vTaskDelay(200);
 80017ea:	20c8      	movs	r0, #200	; 0xc8
 80017ec:	f004 fe7c 	bl	80064e8 <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 80017f0:	e6b8      	b.n	8001564 <execution_from_memory+0x8>
 80017f2:	bf00      	nop
 80017f4:	20000904 	.word	0x20000904
 80017f8:	08008210 	.word	0x08008210
 80017fc:	200007dc 	.word	0x200007dc
 8001800:	200008f4 	.word	0x200008f4
 8001804:	20000838 	.word	0x20000838
 8001808:	40020400 	.word	0x40020400

0800180c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a3c      	ldr	r2, [pc, #240]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d107      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0x22>
		exm.step_counter_second_part++;
 800181e:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001820:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001824:	3301      	adds	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800182a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	}

	if (htim->Instance == TIM4) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a38      	ldr	r2, [pc, #224]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d15d      	bne.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>
		if((xEventGroupGetBitsFromISR(EventGroup) & (1<<7)) != 0x80) { // if  Programming mode is OFF
 8001838:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fe0b 	bl	8005458 <xEventGroupGetBitsFromISR>
 8001842:	4603      	mov	r3, r0
 8001844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001848:	2b80      	cmp	r3, #128	; 0x80
 800184a:	d053      	beq.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>
			switch ((GPIOB->ODR & (GPIO_ODR_OD9))) {
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001854:	2b00      	cmp	r3, #0
 8001856:	d026      	beq.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185c:	d145      	bne.n	80018ea <HAL_TIM_PeriodElapsedCallback+0xde>
				case (1<<9): //counterclockwise
					exm.position--;
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001860:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001864:	b29b      	uxth	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	b29b      	uxth	r3, r3
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800186e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
				if(exm.position == 0-((int16_t)exm.G_sign_value)){
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001874:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001878:	461a      	mov	r2, r3
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800187c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001880:	b21b      	sxth	r3, r3
 8001882:	425b      	negs	r3, r3
 8001884:	429a      	cmp	r2, r3
 8001886:	d132      	bne.n	80018ee <HAL_TIM_PeriodElapsedCallback+0xe2>
				  HAL_TIM_Base_Stop_IT(&htim4);
 8001888:	4825      	ldr	r0, [pc, #148]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800188a:	f001 fbcf 	bl	800302c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800188e:	2100      	movs	r1, #0
 8001890:	4823      	ldr	r0, [pc, #140]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001892:	f001 fd03 	bl	800329c <HAL_TIM_PWM_Stop>
				xEventGroupSetBitsFromISR(EventGroup, 0x10, pdTRUE);
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	2210      	movs	r2, #16
 800189e:	4821      	ldr	r0, [pc, #132]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018a0:	f005 ffa4 	bl	80077ec <xTimerPendFunctionCallFromISR>
				}
					break;
 80018a4:	e023      	b.n	80018ee <HAL_TIM_PeriodElapsedCallback+0xe2>
				case (0<<9): //clockwise
					exm.position++;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018a8:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018b6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
					if(exm.position == exm.G_sign_value){
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018bc:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80018c4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d112      	bne.n	80018f2 <HAL_TIM_PeriodElapsedCallback+0xe6>
					  HAL_TIM_Base_Stop_IT(&htim4);
 80018cc:	4814      	ldr	r0, [pc, #80]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018ce:	f001 fbad 	bl	800302c <HAL_TIM_Base_Stop_IT>
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80018d2:	2100      	movs	r1, #0
 80018d4:	4812      	ldr	r0, [pc, #72]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018d6:	f001 fce1 	bl	800329c <HAL_TIM_PWM_Stop>
					xEventGroupSetBitsFromISR(EventGroup, 0x10, pdTRUE);
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	2210      	movs	r2, #16
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018e4:	f005 ff82 	bl	80077ec <xTimerPendFunctionCallFromISR>
					}
					break;
 80018e8:	e003      	b.n	80018f2 <HAL_TIM_PeriodElapsedCallback+0xe6>
				default:
					break;
 80018ea:	bf00      	nop
 80018ec:	e002      	b.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80018f2:	bf00      	nop
			}
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fc:	d101      	bne.n	8001902 <HAL_TIM_PeriodElapsedCallback+0xf6>
    HAL_IncTick();
 80018fe:	f000 fa87 	bl	8001e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40000400 	.word	0x40000400
 8001910:	20000838 	.word	0x20000838
 8001914:	40000800 	.word	0x40000800
 8001918:	20000904 	.word	0x20000904
 800191c:	40020400 	.word	0x40020400
 8001920:	20000794 	.word	0x20000794
 8001924:	080055b7 	.word	0x080055b7

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_MspInit+0x54>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_MspInit+0x54>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_MspInit+0x54>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_MspInit+0x54>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_MspInit+0x54>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_MspInit+0x54>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	210f      	movs	r1, #15
 8001976:	f06f 0001 	mvn.w	r0, #1
 800197a:	f000 fb21 	bl	8001fc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_SPI_MspInit+0x84>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d12b      	bne.n	8001a06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_SPI_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019e6:	23e0      	movs	r3, #224	; 0xe0
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f6:	2305      	movs	r3, #5
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <HAL_SPI_MspInit+0x8c>)
 8001a02:	f000 fb99 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40013000 	.word	0x40013000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <HAL_TIM_Base_MspInit+0x80>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d116      	bne.n	8001a5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_TIM_Base_MspInit+0x84>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a1a      	ldr	r2, [pc, #104]	; (8001aa0 <HAL_TIM_Base_MspInit+0x84>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_TIM_Base_MspInit+0x84>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	201d      	movs	r0, #29
 8001a50:	f000 fab6 	bl	8001fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a54:	201d      	movs	r0, #29
 8001a56:	f000 facf 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a5a:	e01a      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_TIM_Base_MspInit+0x88>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d115      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_TIM_Base_MspInit+0x84>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_TIM_Base_MspInit+0x84>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_TIM_Base_MspInit+0x84>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2105      	movs	r1, #5
 8001a86:	201e      	movs	r0, #30
 8001a88:	f000 fa9a 	bl	8001fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a8c:	201e      	movs	r0, #30
 8001a8e:	f000 fab3 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40000800 	.word	0x40000800

08001aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d11d      	bne.n	8001b06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PUL_stepper_Pin;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUL_stepper_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_TIM_MspPostInit+0x70>)
 8001b02:	f000 fb19 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40000800 	.word	0x40000800
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_UART_MspInit+0x94>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d134      	bne.n	8001ba8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_UART_MspInit+0x98>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b88:	2307      	movs	r3, #7
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <HAL_UART_MspInit+0x9c>)
 8001b94:	f000 fad0 	bl	8002138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2105      	movs	r1, #5
 8001b9c:	2025      	movs	r0, #37	; 0x25
 8001b9e:	f000 fa0f 	bl	8001fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ba2:	2025      	movs	r0, #37	; 0x25
 8001ba4:	f000 fa28 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 f8ae 	bl	8002d54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d103      	bne.n	8001c0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c02:	f001 f87f 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8001c06:	6378      	str	r0, [r7, #52]	; 0x34
 8001c08:	e004      	b.n	8001c14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c0a:	f001 f87b 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	0c9b      	lsrs	r3, r3, #18
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_InitTick+0xf0>)
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_InitTick+0xf0>)
 8001c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c30:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_InitTick+0xf0>)
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_InitTick+0xf0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_InitTick+0xf0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_InitTick+0xf0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001c4a:	4818      	ldr	r0, [pc, #96]	; (8001cac <HAL_InitTick+0xf0>)
 8001c4c:	f001 f93d 	bl	8002eca <HAL_TIM_Base_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11b      	bne.n	8001c96 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001c5e:	4813      	ldr	r0, [pc, #76]	; (8001cac <HAL_InitTick+0xf0>)
 8001c60:	f001 f982 	bl	8002f68 <HAL_TIM_Base_Start_IT>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d111      	bne.n	8001c96 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c72:	201c      	movs	r0, #28
 8001c74:	f000 f9c0 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	d808      	bhi.n	8001c90 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	201c      	movs	r0, #28
 8001c84:	f000 f99c 	bl	8001fc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_InitTick+0xf4>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e002      	b.n	8001c96 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3738      	adds	r7, #56	; 0x38
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	20000908 	.word	0x20000908
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f000 fbc5 	bl	8002474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM2_IRQHandler+0x10>)
 8001cf6:	f001 fb35 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000908 	.word	0x20000908

08001d04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <TIM3_IRQHandler+0x10>)
 8001d0a:	f001 fb2b 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000074c 	.word	0x2000074c

08001d18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM4_IRQHandler+0x10>)
 8001d1e:	f001 fb21 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000794 	.word	0x20000794

08001d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <USART1_IRQHandler+0x20>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 8001d3c:	f7fe ff50 	bl	8000be0 <uart1_rx_callback>
		__asm__ volatile("NOP");
 8001d40:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <USART1_IRQHandler+0x24>)
 8001d44:	f002 fac8 	bl	80042d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	200007dc 	.word	0x200007dc

08001d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d7e:	490e      	ldr	r1, [pc, #56]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d94:	4c0b      	ldr	r4, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd7 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f006 f981 	bl	80080ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7fe fbcb 	bl	8000544 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001dbc:	08008260 	.word	0x08008260
  ldr r2, =_sbss
 8001dc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001dc4:	2000480c 	.word	0x2000480c

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f8d8 	bl	8001faa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff fede 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fd98 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000950 	.word	0x20000950

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000950 	.word	0x20000950

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <__NVIC_EnableIRQ+0x38>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff4c 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd2:	f7ff ff61 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 8001fd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	6978      	ldr	r0, [r7, #20]
 8001fde:	f7ff ffb1 	bl	8001f44 <NVIC_EncodePriority>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff80 	bl	8001ef0 <__NVIC_SetPriority>
}
 8001ff0:	bf00      	nop
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff54 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002022:	f7ff ff09 	bl	8001e38 <HAL_GetTick>
 8002026:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d008      	beq.n	8002046 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e052      	b.n	80020ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0216 	bic.w	r2, r2, #22
 8002054:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002064:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <HAL_DMA_Abort+0x62>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0208 	bic.w	r2, r2, #8
 8002084:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002096:	e013      	b.n	80020c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002098:	f7ff fece 	bl	8001e38 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d90c      	bls.n	80020c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2203      	movs	r2, #3
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e015      	b.n	80020ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e4      	bne.n	8002098 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	223f      	movs	r2, #63	; 0x3f
 80020d4:	409a      	lsls	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d004      	beq.n	8002112 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00c      	b.n	800212c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2205      	movs	r2, #5
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e159      	b.n	8002408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	f040 8148 	bne.w	8002402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d005      	beq.n	800218a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	2b02      	cmp	r3, #2
 8002188:	d130      	bne.n	80021ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d017      	beq.n	8002228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d123      	bne.n	800227c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a2 	beq.w	8002402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_GPIO_Init+0x2e8>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a56      	ldr	r2, [pc, #344]	; (8002420 <HAL_GPIO_Init+0x2e8>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x2e8>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x2ec>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x202>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x2f4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x1fe>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a47      	ldr	r2, [pc, #284]	; (8002430 <HAL_GPIO_Init+0x2f8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x1fa>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a46      	ldr	r2, [pc, #280]	; (8002434 <HAL_GPIO_Init+0x2fc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x1f6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a45      	ldr	r2, [pc, #276]	; (8002438 <HAL_GPIO_Init+0x300>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x1f2>
 8002326:	2304      	movs	r3, #4
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x204>
 800232a:	2307      	movs	r3, #7
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x204>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x204>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x204>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x204>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x2ec>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_GPIO_Init+0x304>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a2f      	ldr	r2, [pc, #188]	; (800243c <HAL_GPIO_Init+0x304>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_GPIO_Init+0x304>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <HAL_GPIO_Init+0x304>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_GPIO_Init+0x304>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_GPIO_Init+0x304>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_GPIO_Init+0x304>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <HAL_GPIO_Init+0x304>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f aea2 	bls.w	8002154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fbb4 	bl	8000c00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e267      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d075      	beq.n	80025ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d00c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d112      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d10b      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	4b7e      	ldr	r3, [pc, #504]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05b      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d157      	bne.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e242      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x74>
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6c      	ldr	r2, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 800253c:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fc6c 	bl	8001e38 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff fc68 	bl	8001e38 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e207      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xc0>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fc58 	bl	8001e38 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff fc54 	bl	8001e38 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1f3      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1c7      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4937      	ldr	r1, [pc, #220]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e03a      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff fc0d 	bl	8001e38 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff fc09 	bl	8001e38 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1a8      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4925      	ldr	r1, [pc, #148]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7ff fbec 	bl	8001e38 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7ff fbe8 	bl	8001e38 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e187      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d036      	beq.n	80026fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7ff fbcc 	bl	8001e38 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a4:	f7ff fbc8 	bl	8001e38 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e167      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x200>
 80026c2:	e01b      	b.n	80026fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fbb5 	bl	8001e38 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e00e      	b.n	80026f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d2:	f7ff fbb1 	bl	8001e38 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d907      	bls.n	80026f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e150      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ea      	bne.n	80026d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8097 	beq.w	8002838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b81      	ldr	r3, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a7c      	ldr	r2, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b77      	ldr	r3, [pc, #476]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b74      	ldr	r3, [pc, #464]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a73      	ldr	r2, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7ff fb71 	bl	8001e38 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7ff fb6d 	bl	8001e38 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e10c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x2ea>
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	e01c      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x30c>
 8002796:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5e      	ldr	r2, [pc, #376]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a5b      	ldr	r2, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 80027b0:	4b58      	ldr	r3, [pc, #352]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a57      	ldr	r2, [pc, #348]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	4b55      	ldr	r3, [pc, #340]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a54      	ldr	r2, [pc, #336]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff fb32 	bl	8001e38 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7ff fb2e 	bl	8001e38 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0cb      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ee      	beq.n	80027d8 <HAL_RCC_OscConfig+0x334>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7ff fb1c 	bl	8001e38 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7ff fb18 	bl	8001e38 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0b5      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ee      	bne.n	8002804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a1 	beq.w	8002984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d05c      	beq.n	8002908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d141      	bne.n	80028da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff faec 	bl	8001e38 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff fae8 	bl	8001e38 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e087      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7ff fac1 	bl	8001e38 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7ff fabd 	bl	8001e38 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e05c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x416>
 80028d8:	e054      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff faaa 	bl	8001e38 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff faa6 	bl	8001e38 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e045      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x444>
 8002906:	e03d      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e038      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000
 800291c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x4ec>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d028      	beq.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d121      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d11a      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002958:	4293      	cmp	r3, r2
 800295a:	d111      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	3b01      	subs	r3, #1
 800296a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7ff f9d8 	bl	8001e38 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7ff f9d4 	bl	8001e38 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f83e 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	08008238 	.word	0x08008238
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b090      	sub	sp, #64	; 0x40
 8002b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b70:	2300      	movs	r3, #0
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d00d      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	f200 80a1 	bhi.w	8002ccc <HAL_RCC_GetSysClockFreq+0x16c>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b92:	e09b      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b98:	e09b      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9a:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b9e:	e098      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002baa:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d028      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bcc:	fb03 f201 	mul.w	r2, r3, r1
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	fb00 f303 	mul.w	r3, r0, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a43      	ldr	r2, [pc, #268]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bda:	fba0 1202 	umull	r1, r2, r0, r2
 8002bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be0:	460a      	mov	r2, r1
 8002be2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be6:	4413      	add	r3, r2
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	2200      	movs	r2, #0
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	61fa      	str	r2, [r7, #28]
 8002bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bfa:	f7fd faf1 	bl	80001e0 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4613      	mov	r3, r2
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c06:	e053      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	2200      	movs	r2, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	617a      	str	r2, [r7, #20]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c1a:	f04f 0b00 	mov.w	fp, #0
 8002c1e:	4652      	mov	r2, sl
 8002c20:	465b      	mov	r3, fp
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	0159      	lsls	r1, r3, #5
 8002c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c30:	0150      	lsls	r0, r2, #5
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	ebb2 080a 	subs.w	r8, r2, sl
 8002c3a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c52:	ebb2 0408 	subs.w	r4, r2, r8
 8002c56:	eb63 0509 	sbc.w	r5, r3, r9
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	00eb      	lsls	r3, r5, #3
 8002c64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c68:	00e2      	lsls	r2, r4, #3
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	461d      	mov	r5, r3
 8002c6e:	eb14 030a 	adds.w	r3, r4, sl
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	eb45 030b 	adc.w	r3, r5, fp
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c86:	4629      	mov	r1, r5
 8002c88:	028b      	lsls	r3, r1, #10
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c90:	4621      	mov	r1, r4
 8002c92:	028a      	lsls	r2, r1, #10
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca4:	f7fd fa9c 	bl	80001e0 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4613      	mov	r3, r2
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cca:	e002      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3740      	adds	r7, #64	; 0x40
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	00f42400 	.word	0x00f42400
 8002ce8:	017d7840 	.word	0x017d7840

08002cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000000 	.word	0x20000000

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d08:	f7ff fff0 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0a9b      	lsrs	r3, r3, #10
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	08008248 	.word	0x08008248

08002d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d30:	f7ff ffdc 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0b5b      	lsrs	r3, r3, #13
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4903      	ldr	r1, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08008248 	.word	0x08008248

08002d54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	220f      	movs	r2, #15
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0203 	and.w	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	08db      	lsrs	r3, r3, #3
 8002d8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_GetClockConfig+0x60>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0207 	and.w	r2, r3, #7
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	601a      	str	r2, [r3, #0]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07b      	b.n	8002ec2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dda:	d009      	beq.n	8002df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
 8002de2:	e005      	b.n	8002df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fdbe 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0104 	and.w	r1, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0210 	and.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e041      	b.n	8002f60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7fe fd93 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 fd27 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e044      	b.n	800300a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d018      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002faa:	d013      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	; (800301c <HAL_TIM_Base_Start_IT+0xb4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a19      	ldr	r2, [pc, #100]	; (8003020 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a16      	ldr	r2, [pc, #88]	; (8003028 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d111      	bne.n	8002ff8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d010      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff6:	e007      	b.n	8003008 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40014000 	.word	0x40014000

0800302c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a1a      	ldr	r2, [r3, #32]
 800304a:	f241 1311 	movw	r3, #4369	; 0x1111
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <HAL_TIM_Base_Stop_IT+0x48>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	f240 4344 	movw	r3, #1092	; 0x444
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_TIM_Base_Stop_IT+0x48>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e041      	b.n	8003120 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f839 	bl	8003128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fc47 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_TIM_PWM_Start+0x24>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e022      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d109      	bne.n	800317a <HAL_TIM_PWM_Start+0x3e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e015      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d109      	bne.n	8003194 <HAL_TIM_PWM_Start+0x58>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e008      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e068      	b.n	8003280 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0x82>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031bc:	e013      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0x92>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031cc:	e00b      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0xa2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	e003      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	6839      	ldr	r1, [r7, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 feeb 	bl	8003fca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a23      	ldr	r2, [pc, #140]	; (8003288 <HAL_TIM_PWM_Start+0x14c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d107      	bne.n	800320e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_TIM_PWM_Start+0x14c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d018      	beq.n	800324a <HAL_TIM_PWM_Start+0x10e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d013      	beq.n	800324a <HAL_TIM_PWM_Start+0x10e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_TIM_PWM_Start+0x150>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_TIM_PWM_Start+0x10e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_TIM_PWM_Start+0x154>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_TIM_PWM_Start+0x10e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_TIM_PWM_Start+0x158>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_TIM_PWM_Start+0x10e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIM_PWM_Start+0x15c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d111      	bne.n	800326e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b06      	cmp	r3, #6
 800325a:	d010      	beq.n	800327e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	e007      	b.n	800327e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40014000 	.word	0x40014000

0800329c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fe8b 	bl	8003fca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a29      	ldr	r2, [pc, #164]	; (8003360 <HAL_TIM_PWM_Stop+0xc4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d117      	bne.n	80032ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10f      	bne.n	80032ee <HAL_TIM_PWM_Stop+0x52>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	f240 4344 	movw	r3, #1092	; 0x444
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_TIM_PWM_Stop+0x52>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_TIM_PWM_Stop+0x82>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	f240 4344 	movw	r3, #1092	; 0x444
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_TIM_PWM_Stop+0x82>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Stop+0x92>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332c:	e013      	b.n	8003356 <HAL_TIM_PWM_Stop+0xba>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Stop+0xa2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	e00b      	b.n	8003356 <HAL_TIM_PWM_Stop+0xba>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Stop+0xb2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	e003      	b.n	8003356 <HAL_TIM_PWM_Stop+0xba>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40010000 	.word	0x40010000

08003364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0202 	mvn.w	r2, #2
 8003390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fab9 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 faab 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fabc 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0204 	mvn.w	r2, #4
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa8f 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa81 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa92 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b08      	cmp	r3, #8
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0208 	mvn.w	r2, #8
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa65 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa57 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fa68 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b10      	cmp	r3, #16
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0210 	mvn.w	r2, #16
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2208      	movs	r2, #8
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa3b 	bl	800391e <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa2d 	bl	800390a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa3e 	bl	8003932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0201 	mvn.w	r2, #1
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe f992 	bl	800180c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fdf8 	bl	8004104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fa03 	bl	8003946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d10e      	bne.n	800356c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b20      	cmp	r3, #32
 800355a:	d107      	bne.n	800356c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0220 	mvn.w	r2, #32
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fdc2 	bl	80040f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800358e:	2302      	movs	r3, #2
 8003590:	e0ae      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	f200 809f 	bhi.w	80036e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	080036e1 	.word	0x080036e1
 80035b0:	080036e1 	.word	0x080036e1
 80035b4:	080036e1 	.word	0x080036e1
 80035b8:	0800361d 	.word	0x0800361d
 80035bc:	080036e1 	.word	0x080036e1
 80035c0:	080036e1 	.word	0x080036e1
 80035c4:	080036e1 	.word	0x080036e1
 80035c8:	0800365f 	.word	0x0800365f
 80035cc:	080036e1 	.word	0x080036e1
 80035d0:	080036e1 	.word	0x080036e1
 80035d4:	080036e1 	.word	0x080036e1
 80035d8:	0800369f 	.word	0x0800369f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa3a 	bl	8003a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0208 	orr.w	r2, r2, #8
 80035f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6999      	ldr	r1, [r3, #24]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	619a      	str	r2, [r3, #24]
      break;
 800361a:	e064      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fa80 	bl	8003b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6999      	ldr	r1, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
      break;
 800365c:	e043      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 facb 	bl	8003c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0208 	orr.w	r2, r2, #8
 8003678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0204 	bic.w	r2, r2, #4
 8003688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69d9      	ldr	r1, [r3, #28]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	61da      	str	r2, [r3, #28]
      break;
 800369c:	e023      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fb15 	bl	8003cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69d9      	ldr	r1, [r3, #28]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	021a      	lsls	r2, r3, #8
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	61da      	str	r2, [r3, #28]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75fb      	strb	r3, [r7, #23]
      break;
 80036e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIM_ConfigClockSource+0x1c>
 8003710:	2302      	movs	r3, #2
 8003712:	e0b4      	b.n	800387e <HAL_TIM_ConfigClockSource+0x186>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374c:	d03e      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0xd4>
 800374e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003752:	f200 8087 	bhi.w	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	f000 8086 	beq.w	800386a <HAL_TIM_ConfigClockSource+0x172>
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	d87f      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b70      	cmp	r3, #112	; 0x70
 8003766:	d01a      	beq.n	800379e <HAL_TIM_ConfigClockSource+0xa6>
 8003768:	2b70      	cmp	r3, #112	; 0x70
 800376a:	d87b      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b60      	cmp	r3, #96	; 0x60
 800376e:	d050      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x11a>
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d877      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b50      	cmp	r3, #80	; 0x50
 8003776:	d03c      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003778:	2b50      	cmp	r3, #80	; 0x50
 800377a:	d873      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d058      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x13a>
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d86f      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d064      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d86b      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b20      	cmp	r3, #32
 800378e:	d060      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d867      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x15a>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d05a      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x15a>
 800379c:	e062      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f000 fbec 	bl	8003f8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	609a      	str	r2, [r3, #8]
      break;
 80037ca:	e04f      	b.n	800386c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6899      	ldr	r1, [r3, #8]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f000 fbd5 	bl	8003f8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ee:	609a      	str	r2, [r3, #8]
      break;
 80037f0:	e03c      	b.n	800386c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	461a      	mov	r2, r3
 8003800:	f000 fb49 	bl	8003e96 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2150      	movs	r1, #80	; 0x50
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fba2 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 8003810:	e02c      	b.n	800386c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	461a      	mov	r2, r3
 8003820:	f000 fb68 	bl	8003ef4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2160      	movs	r1, #96	; 0x60
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fb92 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 8003830:	e01c      	b.n	800386c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	461a      	mov	r2, r3
 8003840:	f000 fb29 	bl	8003e96 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fb82 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 8003850:	e00c      	b.n	800386c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f000 fb79 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 8003862:	e003      	b.n	800386c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e000      	b.n	800386c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800386a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_TIM_SlaveConfigSynchro+0x18>
 800389a:	2302      	movs	r3, #2
 800389c:	e031      	b.n	8003902 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80038ae:	6839      	ldr	r1, [r7, #0]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fa5f 	bl	8003d74 <TIM_SlaveTimer_SetConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e018      	b.n	8003902 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <TIM_Base_SetConfig+0xe4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00f      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a31      	ldr	r2, [pc, #196]	; (8003a44 <TIM_Base_SetConfig+0xe8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <TIM_Base_SetConfig+0xec>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <TIM_Base_SetConfig+0xf0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a25      	ldr	r2, [pc, #148]	; (8003a40 <TIM_Base_SetConfig+0xe4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <TIM_Base_SetConfig+0xe8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <TIM_Base_SetConfig+0xec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <TIM_Base_SetConfig+0xf0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <TIM_Base_SetConfig+0xf4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <TIM_Base_SetConfig+0xf8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <TIM_Base_SetConfig+0xfc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <TIM_Base_SetConfig+0xe4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40014400 	.word	0x40014400
 8003a58:	40014800 	.word	0x40014800

08003a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f023 0201 	bic.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0303 	bic.w	r3, r3, #3
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 0302 	bic.w	r3, r3, #2
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <TIM_OC1_SetConfig+0xc8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10c      	bne.n	8003ad2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0308 	bic.w	r3, r3, #8
 8003abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <TIM_OC1_SetConfig+0xc8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d111      	bne.n	8003afe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40010000 	.word	0x40010000

08003b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0210 	bic.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <TIM_OC2_SetConfig+0xd4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10d      	bne.n	8003ba4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <TIM_OC2_SetConfig+0xd4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d113      	bne.n	8003bd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000

08003c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <TIM_OC3_SetConfig+0xd0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10d      	bne.n	8003c7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <TIM_OC3_SetConfig+0xd0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d113      	bne.n	8003caa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40010000 	.word	0x40010000

08003cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	031b      	lsls	r3, r3, #12
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <TIM_OC4_SetConfig+0x9c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d109      	bne.n	8003d48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000

08003d74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 0307 	bic.w	r3, r3, #7
 8003da2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b70      	cmp	r3, #112	; 0x70
 8003dbc:	d01a      	beq.n	8003df4 <TIM_SlaveTimer_SetConfig+0x80>
 8003dbe:	2b70      	cmp	r3, #112	; 0x70
 8003dc0:	d860      	bhi.n	8003e84 <TIM_SlaveTimer_SetConfig+0x110>
 8003dc2:	2b60      	cmp	r3, #96	; 0x60
 8003dc4:	d054      	beq.n	8003e70 <TIM_SlaveTimer_SetConfig+0xfc>
 8003dc6:	2b60      	cmp	r3, #96	; 0x60
 8003dc8:	d85c      	bhi.n	8003e84 <TIM_SlaveTimer_SetConfig+0x110>
 8003dca:	2b50      	cmp	r3, #80	; 0x50
 8003dcc:	d046      	beq.n	8003e5c <TIM_SlaveTimer_SetConfig+0xe8>
 8003dce:	2b50      	cmp	r3, #80	; 0x50
 8003dd0:	d858      	bhi.n	8003e84 <TIM_SlaveTimer_SetConfig+0x110>
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d019      	beq.n	8003e0a <TIM_SlaveTimer_SetConfig+0x96>
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d854      	bhi.n	8003e84 <TIM_SlaveTimer_SetConfig+0x110>
 8003dda:	2b30      	cmp	r3, #48	; 0x30
 8003ddc:	d055      	beq.n	8003e8a <TIM_SlaveTimer_SetConfig+0x116>
 8003dde:	2b30      	cmp	r3, #48	; 0x30
 8003de0:	d850      	bhi.n	8003e84 <TIM_SlaveTimer_SetConfig+0x110>
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d051      	beq.n	8003e8a <TIM_SlaveTimer_SetConfig+0x116>
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d84c      	bhi.n	8003e84 <TIM_SlaveTimer_SetConfig+0x110>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d04d      	beq.n	8003e8a <TIM_SlaveTimer_SetConfig+0x116>
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d04b      	beq.n	8003e8a <TIM_SlaveTimer_SetConfig+0x116>
 8003df2:	e047      	b.n	8003e84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f000 f8c1 	bl	8003f8a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003e08:	e040      	b.n	8003e8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d101      	bne.n	8003e16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e03b      	b.n	8003e8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
      break;
 8003e5a:	e017      	b.n	8003e8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f000 f814 	bl	8003e96 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003e6e:	e00d      	b.n	8003e8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6899      	ldr	r1, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f000 f839 	bl	8003ef4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003e82:	e003      	b.n	8003e8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75fb      	strb	r3, [r7, #23]
      break;
 8003e88:	e000      	b.n	8003e8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e8a:	bf00      	nop
  }

  return status;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b087      	sub	sp, #28
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f023 0201 	bic.w	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 030a 	bic.w	r3, r3, #10
 8003ed2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f023 0210 	bic.w	r2, r3, #16
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	031b      	lsls	r3, r3, #12
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	621a      	str	r2, [r3, #32]
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f043 0307 	orr.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	609a      	str	r2, [r3, #8]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	021a      	lsls	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	609a      	str	r2, [r3, #8]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2201      	movs	r2, #1
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	401a      	ands	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1a      	ldr	r2, [r3, #32]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	431a      	orrs	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	621a      	str	r2, [r3, #32]
}
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004028:	2302      	movs	r3, #2
 800402a:	e050      	b.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d013      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10c      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40014000 	.word	0x40014000

080040f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e03f      	b.n	80041aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fcec 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fd7b 	bl	8004c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b08a      	sub	sp, #40	; 0x28
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d17c      	bne.n	80042cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_UART_Transmit+0x2c>
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e075      	b.n	80042ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_UART_Transmit+0x3e>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e06e      	b.n	80042ce <HAL_UART_Transmit+0x11c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2221      	movs	r2, #33	; 0x21
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004206:	f7fd fe17 	bl	8001e38 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d108      	bne.n	8004234 <HAL_UART_Transmit+0x82>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e003      	b.n	800423c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004244:	e02a      	b.n	800429c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 faf9 	bl	8004848 <UART_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e036      	b.n	80042ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	3302      	adds	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	e007      	b.n	800428e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3301      	adds	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1cf      	bne.n	8004246 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fac9 	bl	8004848 <UART_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e006      	b.n	80042ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b0ba      	sub	sp, #232	; 0xe8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_UART_IRQHandler+0x66>
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fbd3 	bl	8004ae2 <UART_Receive_IT>
      return;
 800433c:	e256      	b.n	80047ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800433e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80de 	beq.w	8004504 <HAL_UART_IRQHandler+0x22c>
 8004348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004358:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80d1 	beq.w	8004504 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <HAL_UART_IRQHandler+0xae>
 800436e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_UART_IRQHandler+0xd2>
 8004392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_UART_IRQHandler+0xf6>
 80043b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f043 0204 	orr.w	r2, r3, #4
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d011      	beq.n	80043fe <HAL_UART_IRQHandler+0x126>
 80043da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d105      	bne.n	80043f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0208 	orr.w	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 81ed 	beq.w	80047e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_UART_IRQHandler+0x14e>
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fb5e 	bl	8004ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <HAL_UART_IRQHandler+0x17a>
 800444a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d04f      	beq.n	80044f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fa66 	bl	8004924 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d141      	bne.n	80044ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800447c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004492:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800449e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1d9      	bne.n	8004466 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d013      	beq.n	80044e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	4a7d      	ldr	r2, [pc, #500]	; (80046b4 <HAL_UART_IRQHandler+0x3dc>)
 80044c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd fe14 	bl	80020f4 <HAL_DMA_Abort_IT>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044dc:	4610      	mov	r0, r2
 80044de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e0:	e00e      	b.n	8004500 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f99a 	bl	800481c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	e00a      	b.n	8004500 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f996 	bl	800481c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e006      	b.n	8004500 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f992 	bl	800481c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044fe:	e170      	b.n	80047e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	bf00      	nop
    return;
 8004502:	e16e      	b.n	80047e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	2b01      	cmp	r3, #1
 800450a:	f040 814a 	bne.w	80047a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800450e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8143 	beq.w	80047a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 813c 	beq.w	80047a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	f040 80b4 	bne.w	80046b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800455c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8140 	beq.w	80047e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800456a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800456e:	429a      	cmp	r2, r3
 8004570:	f080 8139 	bcs.w	80047e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800457a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	f000 8088 	beq.w	800469a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1d9      	bne.n	800458a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3314      	adds	r3, #20
 80045dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004602:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800460c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e1      	bne.n	80045d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3314      	adds	r3, #20
 8004618:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3314      	adds	r3, #20
 8004632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004636:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004638:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800463c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e3      	bne.n	8004612 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466a:	f023 0310 	bic.w	r3, r3, #16
 800466e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800467c:	65ba      	str	r2, [r7, #88]	; 0x58
 800467e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800468a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e3      	bne.n	8004658 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	4618      	mov	r0, r3
 8004696:	f7fd fcbd 	bl	8002014 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f8c0 	bl	8004830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046b0:	e099      	b.n	80047e6 <HAL_UART_IRQHandler+0x50e>
 80046b2:	bf00      	nop
 80046b4:	080049eb 	.word	0x080049eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 808b 	beq.w	80047ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8086 	beq.w	80047ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004702:	647a      	str	r2, [r7, #68]	; 0x44
 8004704:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	623b      	str	r3, [r7, #32]
   return(result);
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3314      	adds	r3, #20
 8004736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800473a:	633a      	str	r2, [r7, #48]	; 0x30
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e3      	bne.n	8004716 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	60fb      	str	r3, [r7, #12]
   return(result);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0310 	bic.w	r3, r3, #16
 8004772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004780:	61fa      	str	r2, [r7, #28]
 8004782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	69b9      	ldr	r1, [r7, #24]
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	617b      	str	r3, [r7, #20]
   return(result);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e3      	bne.n	800475c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f848 	bl	8004830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a0:	e023      	b.n	80047ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_UART_IRQHandler+0x4ea>
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f929 	bl	8004a12 <UART_Transmit_IT>
    return;
 80047c0:	e014      	b.n	80047ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <HAL_UART_IRQHandler+0x514>
 80047ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f969 	bl	8004ab2 <UART_EndTransmit_IT>
    return;
 80047e0:	e004      	b.n	80047ec <HAL_UART_IRQHandler+0x514>
    return;
 80047e2:	bf00      	nop
 80047e4:	e002      	b.n	80047ec <HAL_UART_IRQHandler+0x514>
      return;
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <HAL_UART_IRQHandler+0x514>
      return;
 80047ea:	bf00      	nop
  }
}
 80047ec:	37e8      	adds	r7, #232	; 0xe8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop

080047f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b090      	sub	sp, #64	; 0x40
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004858:	e050      	b.n	80048fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d04c      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0x30>
 8004868:	f7fd fae6 	bl	8001e38 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004874:	429a      	cmp	r2, r3
 8004876:	d241      	bcs.n	80048fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004898:	637a      	str	r2, [r7, #52]	; 0x34
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3314      	adds	r3, #20
 80048b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	613b      	str	r3, [r7, #16]
   return(result);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048cc:	623a      	str	r2, [r7, #32]
 80048ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69f9      	ldr	r1, [r7, #28]
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e00f      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	429a      	cmp	r2, r3
 8004918:	d09f      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3740      	adds	r7, #64	; 0x40
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b095      	sub	sp, #84	; 0x54
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800494c:	643a      	str	r2, [r7, #64]	; 0x40
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3314      	adds	r3, #20
 8004966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	2b01      	cmp	r3, #1
 800499a:	d119      	bne.n	80049d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0310 	bic.w	r3, r3, #16
 80049b2:	647b      	str	r3, [r7, #68]	; 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049bc:	61ba      	str	r2, [r7, #24]
 80049be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049de:	bf00      	nop
 80049e0:	3754      	adds	r7, #84	; 0x54
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff ff09 	bl	800481c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b21      	cmp	r3, #33	; 0x21
 8004a24:	d13e      	bne.n	8004aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d114      	bne.n	8004a5a <UART_Transmit_IT+0x48>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d110      	bne.n	8004a5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	621a      	str	r2, [r3, #32]
 8004a58:	e008      	b.n	8004a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6211      	str	r1, [r2, #32]
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fe8e 	bl	80047f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b08c      	sub	sp, #48	; 0x30
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b22      	cmp	r3, #34	; 0x22
 8004af4:	f040 80ab 	bne.w	8004c4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	d117      	bne.n	8004b32 <UART_Receive_IT+0x50>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d113      	bne.n	8004b32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	1c9a      	adds	r2, r3, #2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b30:	e026      	b.n	8004b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d007      	beq.n	8004b56 <UART_Receive_IT+0x74>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <UART_Receive_IT+0x82>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e008      	b.n	8004b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d15a      	bne.n	8004c4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0220 	bic.w	r2, r2, #32
 8004ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d135      	bne.n	8004c40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f023 0310 	bic.w	r3, r3, #16
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfa:	623a      	str	r2, [r7, #32]
 8004bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d10a      	bne.n	8004c32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff fdf9 	bl	8004830 <HAL_UARTEx_RxEventCallback>
 8004c3e:	e002      	b.n	8004c46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff fde1 	bl	8004808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e002      	b.n	8004c50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3730      	adds	r7, #48	; 0x30
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c5c:	b0c0      	sub	sp, #256	; 0x100
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	68d9      	ldr	r1, [r3, #12]
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	ea40 0301 	orr.w	r3, r0, r1
 8004c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cb0:	f021 010c 	bic.w	r1, r1, #12
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	6999      	ldr	r1, [r3, #24]
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	ea40 0301 	orr.w	r3, r0, r1
 8004cde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d005      	beq.n	8004cf8 <UART_SetConfig+0xa0>
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b8d      	ldr	r3, [pc, #564]	; (8004f28 <UART_SetConfig+0x2d0>)
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d104      	bne.n	8004d02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe f818 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8004cfc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d00:	e003      	b.n	8004d0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7fd ffff 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8004d06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d14:	f040 810c 	bne.w	8004f30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	1891      	adds	r1, r2, r2
 8004d30:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d32:	415b      	adcs	r3, r3
 8004d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	eb12 0801 	adds.w	r8, r2, r1
 8004d40:	4629      	mov	r1, r5
 8004d42:	eb43 0901 	adc.w	r9, r3, r1
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d5a:	4690      	mov	r8, r2
 8004d5c:	4699      	mov	r9, r3
 8004d5e:	4623      	mov	r3, r4
 8004d60:	eb18 0303 	adds.w	r3, r8, r3
 8004d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d68:	462b      	mov	r3, r5
 8004d6a:	eb49 0303 	adc.w	r3, r9, r3
 8004d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d86:	460b      	mov	r3, r1
 8004d88:	18db      	adds	r3, r3, r3
 8004d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	eb42 0303 	adc.w	r3, r2, r3
 8004d92:	657b      	str	r3, [r7, #84]	; 0x54
 8004d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d9c:	f7fb fa20 	bl	80001e0 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004da6:	fba3 2302 	umull	r2, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	011c      	lsls	r4, r3, #4
 8004dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004db8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	1891      	adds	r1, r2, r2
 8004dc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dc8:	415b      	adcs	r3, r3
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	eb12 0a01 	adds.w	sl, r2, r1
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004de8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df0:	4692      	mov	sl, r2
 8004df2:	469b      	mov	fp, r3
 8004df4:	4643      	mov	r3, r8
 8004df6:	eb1a 0303 	adds.w	r3, sl, r3
 8004dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	eb4b 0303 	adc.w	r3, fp, r3
 8004e04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	18db      	adds	r3, r3, r3
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40
 8004e22:	4613      	mov	r3, r2
 8004e24:	eb42 0303 	adc.w	r3, r2, r3
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e32:	f7fb f9d5 	bl	80001e0 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2264      	movs	r2, #100	; 0x64
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	1acb      	subs	r3, r1, r3
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004e54:	fba3 2302 	umull	r2, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e60:	441c      	add	r4, r3
 8004e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	1891      	adds	r1, r2, r2
 8004e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e7c:	415b      	adcs	r3, r3
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e84:	4641      	mov	r1, r8
 8004e86:	1851      	adds	r1, r2, r1
 8004e88:	6339      	str	r1, [r7, #48]	; 0x30
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	414b      	adcs	r3, r1
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	00cb      	lsls	r3, r1, #3
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	00ca      	lsls	r2, r1, #3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	189b      	adds	r3, r3, r2
 8004eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb8:	464b      	mov	r3, r9
 8004eba:	460a      	mov	r2, r1
 8004ebc:	eb42 0303 	adc.w	r3, r2, r3
 8004ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ed0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ed8:	460b      	mov	r3, r1
 8004eda:	18db      	adds	r3, r3, r3
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ede:	4613      	mov	r3, r2
 8004ee0:	eb42 0303 	adc.w	r3, r2, r3
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eee:	f7fb f977 	bl	80001e0 <__aeabi_uldivmod>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	2164      	movs	r1, #100	; 0x64
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	3332      	adds	r3, #50	; 0x32
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	f003 0207 	and.w	r2, r3, #7
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4422      	add	r2, r4
 8004f1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f20:	e106      	b.n	8005130 <UART_SetConfig+0x4d8>
 8004f22:	bf00      	nop
 8004f24:	40011000 	.word	0x40011000
 8004f28:	40011400 	.word	0x40011400
 8004f2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f42:	4642      	mov	r2, r8
 8004f44:	464b      	mov	r3, r9
 8004f46:	1891      	adds	r1, r2, r2
 8004f48:	6239      	str	r1, [r7, #32]
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f52:	4641      	mov	r1, r8
 8004f54:	1854      	adds	r4, r2, r1
 8004f56:	4649      	mov	r1, r9
 8004f58:	eb43 0501 	adc.w	r5, r3, r1
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	00eb      	lsls	r3, r5, #3
 8004f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6a:	00e2      	lsls	r2, r4, #3
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	461d      	mov	r5, r3
 8004f70:	4643      	mov	r3, r8
 8004f72:	18e3      	adds	r3, r4, r3
 8004f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f78:	464b      	mov	r3, r9
 8004f7a:	eb45 0303 	adc.w	r3, r5, r3
 8004f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	008b      	lsls	r3, r1, #2
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa8:	4621      	mov	r1, r4
 8004faa:	008a      	lsls	r2, r1, #2
 8004fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fb0:	f7fb f916 	bl	80001e0 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4b60      	ldr	r3, [pc, #384]	; (800513c <UART_SetConfig+0x4e4>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	011c      	lsls	r4, r3, #4
 8004fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	1891      	adds	r1, r2, r2
 8004fda:	61b9      	str	r1, [r7, #24]
 8004fdc:	415b      	adcs	r3, r3
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	1851      	adds	r1, r2, r1
 8004fe8:	6139      	str	r1, [r7, #16]
 8004fea:	4649      	mov	r1, r9
 8004fec:	414b      	adcs	r3, r1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	00cb      	lsls	r3, r1, #3
 8005000:	4651      	mov	r1, sl
 8005002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005006:	4651      	mov	r1, sl
 8005008:	00ca      	lsls	r2, r1, #3
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	4603      	mov	r3, r0
 8005010:	4642      	mov	r2, r8
 8005012:	189b      	adds	r3, r3, r2
 8005014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005018:	464b      	mov	r3, r9
 800501a:	460a      	mov	r2, r1
 800501c:	eb42 0303 	adc.w	r3, r2, r3
 8005020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	67bb      	str	r3, [r7, #120]	; 0x78
 800502e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800503c:	4649      	mov	r1, r9
 800503e:	008b      	lsls	r3, r1, #2
 8005040:	4641      	mov	r1, r8
 8005042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005046:	4641      	mov	r1, r8
 8005048:	008a      	lsls	r2, r1, #2
 800504a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800504e:	f7fb f8c7 	bl	80001e0 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4611      	mov	r1, r2
 8005058:	4b38      	ldr	r3, [pc, #224]	; (800513c <UART_SetConfig+0x4e4>)
 800505a:	fba3 2301 	umull	r2, r3, r3, r1
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2264      	movs	r2, #100	; 0x64
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	1acb      	subs	r3, r1, r3
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	3332      	adds	r3, #50	; 0x32
 800506c:	4a33      	ldr	r2, [pc, #204]	; (800513c <UART_SetConfig+0x4e4>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005078:	441c      	add	r4, r3
 800507a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507e:	2200      	movs	r2, #0
 8005080:	673b      	str	r3, [r7, #112]	; 0x70
 8005082:	677a      	str	r2, [r7, #116]	; 0x74
 8005084:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005088:	4642      	mov	r2, r8
 800508a:	464b      	mov	r3, r9
 800508c:	1891      	adds	r1, r2, r2
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	415b      	adcs	r3, r3
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005098:	4641      	mov	r1, r8
 800509a:	1851      	adds	r1, r2, r1
 800509c:	6039      	str	r1, [r7, #0]
 800509e:	4649      	mov	r1, r9
 80050a0:	414b      	adcs	r3, r1
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050b0:	4659      	mov	r1, fp
 80050b2:	00cb      	lsls	r3, r1, #3
 80050b4:	4651      	mov	r1, sl
 80050b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ba:	4651      	mov	r1, sl
 80050bc:	00ca      	lsls	r2, r1, #3
 80050be:	4610      	mov	r0, r2
 80050c0:	4619      	mov	r1, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	4642      	mov	r2, r8
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ca:	464b      	mov	r3, r9
 80050cc:	460a      	mov	r2, r1
 80050ce:	eb42 0303 	adc.w	r3, r2, r3
 80050d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	663b      	str	r3, [r7, #96]	; 0x60
 80050de:	667a      	str	r2, [r7, #100]	; 0x64
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050ec:	4649      	mov	r1, r9
 80050ee:	008b      	lsls	r3, r1, #2
 80050f0:	4641      	mov	r1, r8
 80050f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f6:	4641      	mov	r1, r8
 80050f8:	008a      	lsls	r2, r1, #2
 80050fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050fe:	f7fb f86f 	bl	80001e0 <__aeabi_uldivmod>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <UART_SetConfig+0x4e4>)
 8005108:	fba3 1302 	umull	r1, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2164      	movs	r1, #100	; 0x64
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a08      	ldr	r2, [pc, #32]	; (800513c <UART_SetConfig+0x4e4>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 020f 	and.w	r2, r3, #15
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4422      	add	r2, r4
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005136:	46bd      	mov	sp, r7
 8005138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800513c:	51eb851f 	.word	0x51eb851f

08005140 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800514e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005152:	2b84      	cmp	r3, #132	; 0x84
 8005154:	d005      	beq.n	8005162 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005156:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	3303      	adds	r3, #3
 8005160:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005174:	f001 f9ec 	bl	8006550 <vTaskStartScheduler>
  
  return osOK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	bd80      	pop	{r7, pc}

0800517e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800517e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005180:	b089      	sub	sp, #36	; 0x24
 8005182:	af04      	add	r7, sp, #16
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <osThreadCreate+0x54>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01c      	beq.n	80051d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685c      	ldr	r4, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691e      	ldr	r6, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ffc8 	bl	8005140 <makeFreeRtosPriority>
 80051b0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ba:	9202      	str	r2, [sp, #8]
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	9100      	str	r1, [sp, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	4632      	mov	r2, r6
 80051c4:	4629      	mov	r1, r5
 80051c6:	4620      	mov	r0, r4
 80051c8:	f000 fffa 	bl	80061c0 <xTaskCreateStatic>
 80051cc:	4603      	mov	r3, r0
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e01c      	b.n	800520c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685c      	ldr	r4, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ffaa 	bl	8005140 <makeFreeRtosPriority>
 80051ec:	4602      	mov	r2, r0
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	9200      	str	r2, [sp, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	4632      	mov	r2, r6
 80051fa:	4629      	mov	r1, r5
 80051fc:	4620      	mov	r0, r4
 80051fe:	f001 f83c 	bl	800627a <xTaskCreate>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005216 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800521c:	201c      	movs	r0, #28
 800521e:	f002 fd53 	bl	8007cc8 <pvPortMalloc>
 8005222:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f9ed 	bl	8005614 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005240:	687b      	ldr	r3, [r7, #4]
	}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b090      	sub	sp, #64	; 0x40
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	61fb      	str	r3, [r7, #28]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xEventGroupWaitBits+0x72>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	61bb      	str	r3, [r7, #24]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052be:	f001 fe25 	bl	8006f0c <xTaskGetSchedulerState>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <xEventGroupWaitBits+0x82>
 80052c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <xEventGroupWaitBits+0x86>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xEventGroupWaitBits+0x88>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <xEventGroupWaitBits+0xa2>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	617b      	str	r3, [r7, #20]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80052ee:	f001 f995 	bl	800661c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052fe:	f000 f967 	bl	80055d0 <prvTestWaitCondition>
 8005302:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800530e:	2300      	movs	r3, #0
 8005310:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d028      	beq.n	800536a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	43db      	mvns	r3, r3
 8005320:	401a      	ands	r2, r3
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e020      	b.n	800536a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	2b00      	cmp	r3, #0
 800532c:	d104      	bne.n	8005338 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005332:	2301      	movs	r3, #1
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
 8005336:	e018      	b.n	800536a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005344:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005352:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	1d18      	adds	r0, r3, #4
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	4313      	orrs	r3, r2
 800535e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005360:	4619      	mov	r1, r3
 8005362:	f001 fb4d 	bl	8006a00 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800536a:	f001 f965 	bl	8006638 <xTaskResumeAll>
 800536e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005372:	2b00      	cmp	r3, #0
 8005374:	d031      	beq.n	80053da <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d107      	bne.n	800538c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <xEventGroupWaitBits+0x198>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800538c:	f001 fe62 	bl	8007054 <uxTaskResetEventItemValue>
 8005390:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11a      	bne.n	80053d2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800539c:	f002 fb72 	bl	8007a84 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80053ac:	f000 f910 	bl	80055d0 <prvTestWaitCondition>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	401a      	ands	r2, r3
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80053ce:	f002 fb89 	bl	8007ae4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80053da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3740      	adds	r7, #64	; 0x40
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xEventGroupClearBits+0x2a>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60fb      	str	r3, [r7, #12]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <xEventGroupClearBits+0x4a>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	60bb      	str	r3, [r7, #8]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005432:	f002 fb27 	bl	8007a84 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	43db      	mvns	r3, r3
 8005444:	401a      	ands	r2, r3
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800544a:	f002 fb4b 	bl	8007ae4 <vPortExitCritical>

	return uxReturn;
 800544e:	693b      	ldr	r3, [r7, #16]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	; 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005464:	f3ef 8211 	mrs	r2, BASEPRI
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60fa      	str	r2, [r7, #12]
 800547a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800547c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800547e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005490:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005492:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005494:	4618      	mov	r0, r3
 8005496:	3724      	adds	r7, #36	; 0x24
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	; 0x38
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80054aa:	2300      	movs	r3, #0
 80054ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xEventGroupSetBits+0x32>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	613b      	str	r3, [r7, #16]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <xEventGroupSetBits+0x52>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60fb      	str	r3, [r7, #12]
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	3304      	adds	r3, #4
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	3308      	adds	r3, #8
 80054fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80054fe:	f001 f88d 	bl	800661c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	431a      	orrs	r2, r3
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005514:	e03c      	b.n	8005590 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005522:	2300      	movs	r3, #0
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800552c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005534:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d108      	bne.n	8005552 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005550:	e008      	b.n	8005564 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	429a      	cmp	r2, r3
 800555e:	d101      	bne.n	8005564 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d010      	beq.n	800558c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	4313      	orrs	r3, r2
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005584:	4619      	mov	r1, r3
 8005586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005588:	f001 fb04 	bl	8006b94 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	429a      	cmp	r2, r3
 8005596:	d1be      	bne.n	8005516 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	43db      	mvns	r3, r3
 80055a0:	401a      	ands	r2, r3
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80055a6:	f001 f847 	bl	8006638 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	681b      	ldr	r3, [r3, #0]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3738      	adds	r7, #56	; 0x38
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ff6c 	bl	80054a0 <xEventGroupSetBits>
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e007      	b.n	8005606 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d101      	bne.n	8005606 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005602:	2301      	movs	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005606:	697b      	ldr	r3, [r7, #20]
}
 8005608:	4618      	mov	r0, r3
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f103 0208 	add.w	r2, r3, #8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f103 0208 	add.w	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f103 0208 	add.w	r2, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d103      	bne.n	80056d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e00c      	b.n	80056f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3308      	adds	r3, #8
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e002      	b.n	80056e4 <vListInsert+0x2e>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d2f6      	bcs.n	80056de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6892      	ldr	r2, [r2, #8]
 800573e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6852      	ldr	r2, [r2, #4]
 8005748:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d103      	bne.n	800575c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	60bb      	str	r3, [r7, #8]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057a6:	f002 f96d 	bl	8007a84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	441a      	add	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	3b01      	subs	r3, #1
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	441a      	add	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	22ff      	movs	r2, #255	; 0xff
 80057ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d114      	bne.n	8005826 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01a      	beq.n	800583a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3310      	adds	r3, #16
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f961 	bl	8006ad0 <xTaskRemoveFromEventList>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <xQueueGenericReset+0xcc>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	e009      	b.n	800583a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3310      	adds	r3, #16
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fef2 	bl	8005614 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3324      	adds	r3, #36	; 0x24
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff feed 	bl	8005614 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800583a:	f002 f953 	bl	8007ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800583e:	2301      	movs	r3, #1
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <xQueueGenericCreateStatic+0x52>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <xQueueGenericCreateStatic+0x56>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <xQueueGenericCreateStatic+0x58>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	623b      	str	r3, [r7, #32]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <xQueueGenericCreateStatic+0x7e>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <xQueueGenericCreateStatic+0x82>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <xQueueGenericCreateStatic+0x84>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	61fb      	str	r3, [r7, #28]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058ea:	2348      	movs	r3, #72	; 0x48
 80058ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b48      	cmp	r3, #72	; 0x48
 80058f2:	d00a      	beq.n	800590a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61bb      	str	r3, [r7, #24]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800590a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00d      	beq.n	8005932 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800591e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	4613      	mov	r3, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f83f 	bl	80059b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005934:	4618      	mov	r0, r3
 8005936:	3730      	adds	r7, #48	; 0x30
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	613b      	str	r3, [r7, #16]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3348      	adds	r3, #72	; 0x48
 8005974:	4618      	mov	r0, r3
 8005976:	f002 f9a7 	bl	8007cc8 <pvPortMalloc>
 800597a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d011      	beq.n	80059a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	3348      	adds	r3, #72	; 0x48
 800598a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005994:	79fa      	ldrb	r2, [r7, #7]
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f805 	bl	80059b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059a6:	69bb      	ldr	r3, [r7, #24]
	}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059de:	2101      	movs	r1, #1
 80059e0:	69b8      	ldr	r0, [r7, #24]
 80059e2:	f7ff fecb 	bl	800577c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08e      	sub	sp, #56	; 0x38
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059fe:	2300      	movs	r3, #0
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <xQueueGenericSend+0x32>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <xQueueGenericSend+0x40>
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <xQueueGenericSend+0x44>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <xQueueGenericSend+0x46>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <xQueueGenericSend+0x60>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d103      	bne.n	8005a5e <xQueueGenericSend+0x6e>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <xQueueGenericSend+0x72>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <xQueueGenericSend+0x74>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xQueueGenericSend+0x8e>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	623b      	str	r3, [r7, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a7e:	f001 fa45 	bl	8006f0c <xTaskGetSchedulerState>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <xQueueGenericSend+0x9e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <xQueueGenericSend+0xa2>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <xQueueGenericSend+0xa4>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xQueueGenericSend+0xbe>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	61fb      	str	r3, [r7, #28]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aae:	f001 ffe9 	bl	8007a84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <xQueueGenericSend+0xd4>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d129      	bne.n	8005b18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	68b9      	ldr	r1, [r7, #8]
 8005ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aca:	f000 fa0b 	bl	8005ee4 <prvCopyDataToQueue>
 8005ace:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d010      	beq.n	8005afa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	3324      	adds	r3, #36	; 0x24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fff7 	bl	8006ad0 <xTaskRemoveFromEventList>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d013      	beq.n	8005b10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ae8:	4b3f      	ldr	r3, [pc, #252]	; (8005be8 <xQueueGenericSend+0x1f8>)
 8005aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	e00a      	b.n	8005b10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b00:	4b39      	ldr	r3, [pc, #228]	; (8005be8 <xQueueGenericSend+0x1f8>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b10:	f001 ffe8 	bl	8007ae4 <vPortExitCritical>
				return pdPASS;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e063      	b.n	8005be0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b1e:	f001 ffe1 	bl	8007ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e05c      	b.n	8005be0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b2c:	f107 0314 	add.w	r3, r7, #20
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 f891 	bl	8006c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b3a:	f001 ffd3 	bl	8007ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b3e:	f000 fd6d 	bl	800661c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b42:	f001 ff9f 	bl	8007a84 <vPortEnterCritical>
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d103      	bne.n	8005b5c <xQueueGenericSend+0x16c>
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b62:	b25b      	sxtb	r3, r3
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSend+0x182>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b72:	f001 ffb7 	bl	8007ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b76:	1d3a      	adds	r2, r7, #4
 8005b78:	f107 0314 	add.w	r3, r7, #20
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f880 	bl	8006c84 <xTaskCheckForTimeOut>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d124      	bne.n	8005bd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8c:	f000 faa2 	bl	80060d4 <prvIsQueueFull>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d018      	beq.n	8005bc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	3310      	adds	r3, #16
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 ff0a 	bl	80069b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba6:	f000 fa2d 	bl	8006004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005baa:	f000 fd45 	bl	8006638 <xTaskResumeAll>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f47f af7c 	bne.w	8005aae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <xQueueGenericSend+0x1f8>)
 8005bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	e772      	b.n	8005aae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bca:	f000 fa1b 	bl	8006004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bce:	f000 fd33 	bl	8006638 <xTaskResumeAll>
 8005bd2:	e76c      	b.n	8005aae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bd6:	f000 fa15 	bl	8006004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bda:	f000 fd2d 	bl	8006638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3738      	adds	r7, #56	; 0x38
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b090      	sub	sp, #64	; 0x40
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d103      	bne.n	8005c28 <xQueueGenericSendFromISR+0x3c>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <xQueueGenericSendFromISR+0x40>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <xQueueGenericSendFromISR+0x42>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d103      	bne.n	8005c56 <xQueueGenericSendFromISR+0x6a>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <xQueueGenericSendFromISR+0x6e>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xQueueGenericSendFromISR+0x70>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	623b      	str	r3, [r7, #32]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c76:	f001 ffe7 	bl	8007c48 <vPortValidateInterruptPriority>
	__asm volatile
 8005c7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	61fa      	str	r2, [r7, #28]
 8005c90:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005c92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <xQueueGenericSendFromISR+0xbc>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d12f      	bne.n	8005d08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cbe:	f000 f911 	bl	8005ee4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d112      	bne.n	8005cf2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d016      	beq.n	8005d02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	3324      	adds	r3, #36	; 0x24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fef9 	bl	8006ad0 <xTaskRemoveFromEventList>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00e      	beq.n	8005d02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e007      	b.n	8005d02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	b25a      	sxtb	r2, r3
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d02:	2301      	movs	r3, #1
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d06:	e001      	b.n	8005d0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f383 8811 	msr	BASEPRI, r3
}
 8005d16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3740      	adds	r7, #64	; 0x40
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d30:	2300      	movs	r3, #0
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <xQueueReceive+0x30>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	623b      	str	r3, [r7, #32]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <xQueueReceive+0x3e>
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <xQueueReceive+0x42>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <xQueueReceive+0x44>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <xQueueReceive+0x5e>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	61fb      	str	r3, [r7, #28]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d82:	f001 f8c3 	bl	8006f0c <xTaskGetSchedulerState>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <xQueueReceive+0x6e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <xQueueReceive+0x72>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueReceive+0x74>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueReceive+0x8e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	61bb      	str	r3, [r7, #24]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005db2:	f001 fe67 	bl	8007a84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01f      	beq.n	8005e02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc6:	f000 f8f7 	bl	8005fb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1e5a      	subs	r2, r3, #1
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00f      	beq.n	8005dfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	3310      	adds	r3, #16
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fe76 	bl	8006ad0 <xTaskRemoveFromEventList>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dea:	4b3d      	ldr	r3, [pc, #244]	; (8005ee0 <xQueueReceive+0x1bc>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dfa:	f001 fe73 	bl	8007ae4 <vPortExitCritical>
				return pdPASS;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e069      	b.n	8005ed6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e08:	f001 fe6c 	bl	8007ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e062      	b.n	8005ed6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e16:	f107 0310 	add.w	r3, r7, #16
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff1c 	bl	8006c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e24:	f001 fe5e 	bl	8007ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e28:	f000 fbf8 	bl	800661c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e2c:	f001 fe2a 	bl	8007a84 <vPortEnterCritical>
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e36:	b25b      	sxtb	r3, r3
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d103      	bne.n	8005e46 <xQueueReceive+0x122>
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e4c:	b25b      	sxtb	r3, r3
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d103      	bne.n	8005e5c <xQueueReceive+0x138>
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e5c:	f001 fe42 	bl	8007ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e60:	1d3a      	adds	r2, r7, #4
 8005e62:	f107 0310 	add.w	r3, r7, #16
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 ff0b 	bl	8006c84 <xTaskCheckForTimeOut>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d123      	bne.n	8005ebc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e76:	f000 f917 	bl	80060a8 <prvIsQueueEmpty>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d017      	beq.n	8005eb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	3324      	adds	r3, #36	; 0x24
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fd95 	bl	80069b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e90:	f000 f8b8 	bl	8006004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e94:	f000 fbd0 	bl	8006638 <xTaskResumeAll>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d189      	bne.n	8005db2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <xQueueReceive+0x1bc>)
 8005ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	e780      	b.n	8005db2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb2:	f000 f8a7 	bl	8006004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eb6:	f000 fbbf 	bl	8006638 <xTaskResumeAll>
 8005eba:	e77a      	b.n	8005db2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ebe:	f000 f8a1 	bl	8006004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ec2:	f000 fbb9 	bl	8006638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec8:	f000 f8ee 	bl	80060a8 <prvIsQueueEmpty>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f43f af6f 	beq.w	8005db2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ed4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3730      	adds	r7, #48	; 0x30
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10d      	bne.n	8005f1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d14d      	bne.n	8005fa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 f81a 	bl	8006f48 <xTaskPriorityDisinherit>
 8005f14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	e043      	b.n	8005fa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d119      	bne.n	8005f58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6858      	ldr	r0, [r3, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	f002 f8e0 	bl	80080f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	441a      	add	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d32b      	bcc.n	8005fa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	e026      	b.n	8005fa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68d8      	ldr	r0, [r3, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	461a      	mov	r2, r3
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	f002 f8c6 	bl	80080f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	425b      	negs	r3, r3
 8005f72:	441a      	add	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d207      	bcs.n	8005f94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	425b      	negs	r3, r3
 8005f8e:	441a      	add	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d105      	bne.n	8005fa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fae:	697b      	ldr	r3, [r7, #20]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d018      	beq.n	8005ffc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	441a      	add	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d303      	bcc.n	8005fec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68d9      	ldr	r1, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6838      	ldr	r0, [r7, #0]
 8005ff8:	f002 f87c 	bl	80080f4 <memcpy>
	}
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800600c:	f001 fd3a 	bl	8007a84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006018:	e011      	b.n	800603e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d012      	beq.n	8006048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3324      	adds	r3, #36	; 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fd52 	bl	8006ad0 <xTaskRemoveFromEventList>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006032:	f000 fe89 	bl	8006d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	3b01      	subs	r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800603e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dce9      	bgt.n	800601a <prvUnlockQueue+0x16>
 8006046:	e000      	b.n	800604a <prvUnlockQueue+0x46>
					break;
 8006048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	22ff      	movs	r2, #255	; 0xff
 800604e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006052:	f001 fd47 	bl	8007ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006056:	f001 fd15 	bl	8007a84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006062:	e011      	b.n	8006088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3310      	adds	r3, #16
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fd2d 	bl	8006ad0 <xTaskRemoveFromEventList>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800607c:	f000 fe64 	bl	8006d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	3b01      	subs	r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dce9      	bgt.n	8006064 <prvUnlockQueue+0x60>
 8006090:	e000      	b.n	8006094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	22ff      	movs	r2, #255	; 0xff
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800609c:	f001 fd22 	bl	8007ae4 <vPortExitCritical>
}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060b0:	f001 fce8 	bl	8007a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060bc:	2301      	movs	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	e001      	b.n	80060c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060c6:	f001 fd0d 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 80060ca:	68fb      	ldr	r3, [r7, #12]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060dc:	f001 fcd2 	bl	8007a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d102      	bne.n	80060f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e001      	b.n	80060f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f6:	f001 fcf5 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	e014      	b.n	800613e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006114:	4a0f      	ldr	r2, [pc, #60]	; (8006154 <vQueueAddToRegistry+0x50>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10b      	bne.n	8006138 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006120:	490c      	ldr	r1, [pc, #48]	; (8006154 <vQueueAddToRegistry+0x50>)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800612a:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <vQueueAddToRegistry+0x50>)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4413      	add	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006136:	e006      	b.n	8006146 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b07      	cmp	r3, #7
 8006142:	d9e7      	bls.n	8006114 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000954 	.word	0x20000954

08006158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006168:	f001 fc8c 	bl	8007a84 <vPortEnterCritical>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006172:	b25b      	sxtb	r3, r3
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d103      	bne.n	8006182 <vQueueWaitForMessageRestricted+0x2a>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006188:	b25b      	sxtb	r3, r3
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	d103      	bne.n	8006198 <vQueueWaitForMessageRestricted+0x40>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006198:	f001 fca4 	bl	8007ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	3324      	adds	r3, #36	; 0x24
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fc63 	bl	8006a78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061b2:	6978      	ldr	r0, [r7, #20]
 80061b4:	f7ff ff26 	bl	8006004 <prvUnlockQueue>
	}
 80061b8:	bf00      	nop
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08e      	sub	sp, #56	; 0x38
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	623b      	str	r3, [r7, #32]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <xTaskCreateStatic+0x46>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	61fb      	str	r3, [r7, #28]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006206:	2364      	movs	r3, #100	; 0x64
 8006208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b64      	cmp	r3, #100	; 0x64
 800620e:	d00a      	beq.n	8006226 <xTaskCreateStatic+0x66>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	61bb      	str	r3, [r7, #24]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006226:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01e      	beq.n	800626c <xTaskCreateStatic+0xac>
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01b      	beq.n	800626c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800623c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006246:	2300      	movs	r3, #0
 8006248:	9303      	str	r3, [sp, #12]
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	f107 0314 	add.w	r3, r7, #20
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f850 	bl	8006304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006266:	f000 f8d5 	bl	8006414 <prvAddNewTaskToReadyList>
 800626a:	e001      	b.n	8006270 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006270:	697b      	ldr	r3, [r7, #20]
	}
 8006272:	4618      	mov	r0, r3
 8006274:	3728      	adds	r7, #40	; 0x28
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800627a:	b580      	push	{r7, lr}
 800627c:	b08c      	sub	sp, #48	; 0x30
 800627e:	af04      	add	r7, sp, #16
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4618      	mov	r0, r3
 8006290:	f001 fd1a 	bl	8007cc8 <pvPortMalloc>
 8006294:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800629c:	2064      	movs	r0, #100	; 0x64
 800629e:	f001 fd13 	bl	8007cc8 <pvPortMalloc>
 80062a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
 80062b0:	e005      	b.n	80062be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062b2:	6978      	ldr	r0, [r7, #20]
 80062b4:	f001 fdd4 	bl	8007e60 <vPortFree>
 80062b8:	e001      	b.n	80062be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d017      	beq.n	80062f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	2300      	movs	r3, #0
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	9302      	str	r3, [sp, #8]
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f80e 	bl	8006304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062e8:	69f8      	ldr	r0, [r7, #28]
 80062ea:	f000 f893 	bl	8006414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062ee:	2301      	movs	r3, #1
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	e002      	b.n	80062fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062f4:	f04f 33ff 	mov.w	r3, #4294967295
 80062f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062fa:	69bb      	ldr	r3, [r7, #24]
	}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800631c:	3b01      	subs	r3, #1
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	617b      	str	r3, [r7, #20]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01f      	beq.n	8006392 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	e012      	b.n	800637e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4413      	add	r3, r2
 800635e:	7819      	ldrb	r1, [r3, #0]
 8006360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	3334      	adds	r3, #52	; 0x34
 8006368:	460a      	mov	r2, r1
 800636a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	2b1f      	cmp	r3, #31
 8006382:	d9e9      	bls.n	8006358 <prvInitialiseNewTask+0x54>
 8006384:	e000      	b.n	8006388 <prvInitialiseNewTask+0x84>
			{
				break;
 8006386:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006390:	e003      	b.n	800639a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	2b06      	cmp	r3, #6
 800639e:	d901      	bls.n	80063a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063a0:	2306      	movs	r3, #6
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2200      	movs	r2, #0
 80063b4:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	3304      	adds	r3, #4
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff f94a 	bl	8005654 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	3318      	adds	r3, #24
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff f945 	bl	8005654 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	f1c3 0207 	rsb	r2, r3, #7
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	2200      	movs	r2, #0
 80063e4:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	69b8      	ldr	r0, [r7, #24]
 80063f4:	f001 fa1a 	bl	800782c <pxPortInitialiseStack>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800640a:	bf00      	nop
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800641c:	f001 fb32 	bl	8007a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006420:	4b2a      	ldr	r3, [pc, #168]	; (80064cc <prvAddNewTaskToReadyList+0xb8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a29      	ldr	r2, [pc, #164]	; (80064cc <prvAddNewTaskToReadyList+0xb8>)
 8006428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800642a:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006438:	4b24      	ldr	r3, [pc, #144]	; (80064cc <prvAddNewTaskToReadyList+0xb8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d110      	bne.n	8006462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006440:	f000 fca6 	bl	8006d90 <prvInitialiseTaskLists>
 8006444:	e00d      	b.n	8006462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006446:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <prvAddNewTaskToReadyList+0xc0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	429a      	cmp	r2, r3
 800645a:	d802      	bhi.n	8006462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800645c:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006462:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <prvAddNewTaskToReadyList+0xc4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <prvAddNewTaskToReadyList+0xc4>)
 800646a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	2201      	movs	r2, #1
 8006472:	409a      	lsls	r2, r3
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <prvAddNewTaskToReadyList+0xc8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4313      	orrs	r3, r2
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <prvAddNewTaskToReadyList+0xc8>)
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <prvAddNewTaskToReadyList+0xcc>)
 800648c:	441a      	add	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f7ff f8ea 	bl	800566e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800649a:	f001 fb23 	bl	8007ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <prvAddNewTaskToReadyList+0xc0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d207      	bcs.n	80064c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <prvAddNewTaskToReadyList+0xd0>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000a94 	.word	0x20000a94
 80064d0:	20000994 	.word	0x20000994
 80064d4:	20000aa0 	.word	0x20000aa0
 80064d8:	20000ab0 	.word	0x20000ab0
 80064dc:	20000a9c 	.word	0x20000a9c
 80064e0:	20000998 	.word	0x20000998
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d017      	beq.n	800652a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <vTaskDelay+0x60>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <vTaskDelay+0x30>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	60bb      	str	r3, [r7, #8]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006518:	f000 f880 	bl	800661c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800651c:	2100      	movs	r1, #0
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fdb0 	bl	8007084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006524:	f000 f888 	bl	8006638 <xTaskResumeAll>
 8006528:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <vTaskDelay+0x64>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000abc 	.word	0x20000abc
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800655e:	463a      	mov	r2, r7
 8006560:	1d39      	adds	r1, r7, #4
 8006562:	f107 0308 	add.w	r3, r7, #8
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 ffb8 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	9202      	str	r2, [sp, #8]
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	2300      	movs	r3, #0
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	460a      	mov	r2, r1
 800657e:	4921      	ldr	r1, [pc, #132]	; (8006604 <vTaskStartScheduler+0xb4>)
 8006580:	4821      	ldr	r0, [pc, #132]	; (8006608 <vTaskStartScheduler+0xb8>)
 8006582:	f7ff fe1d 	bl	80061c0 <xTaskCreateStatic>
 8006586:	4603      	mov	r3, r0
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <vTaskStartScheduler+0xbc>)
 800658a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <vTaskStartScheduler+0xbc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e001      	b.n	800659e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d102      	bne.n	80065aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065a4:	f000 fdd4 	bl	8007150 <xTimerCreateTimerTask>
 80065a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d116      	bne.n	80065de <vTaskStartScheduler+0x8e>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	613b      	str	r3, [r7, #16]
}
 80065c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065c4:	4b12      	ldr	r3, [pc, #72]	; (8006610 <vTaskStartScheduler+0xc0>)
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <vTaskStartScheduler+0xc4>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <vTaskStartScheduler+0xc8>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065d8:	f001 f9b2 	bl	8007940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065dc:	e00e      	b.n	80065fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d10a      	bne.n	80065fc <vTaskStartScheduler+0xac>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60fb      	str	r3, [r7, #12]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <vTaskStartScheduler+0xaa>
}
 80065fc:	bf00      	nop
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	08008220 	.word	0x08008220
 8006608:	08006d61 	.word	0x08006d61
 800660c:	20000ab8 	.word	0x20000ab8
 8006610:	20000ab4 	.word	0x20000ab4
 8006614:	20000aa0 	.word	0x20000aa0
 8006618:	20000a98 	.word	0x20000a98

0800661c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <vTaskSuspendAll+0x18>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	4a03      	ldr	r2, [pc, #12]	; (8006634 <vTaskSuspendAll+0x18>)
 8006628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800662a:	bf00      	nop
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000abc 	.word	0x20000abc

08006638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006646:	4b41      	ldr	r3, [pc, #260]	; (800674c <xTaskResumeAll+0x114>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <xTaskResumeAll+0x2c>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	603b      	str	r3, [r7, #0]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006664:	f001 fa0e 	bl	8007a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006668:	4b38      	ldr	r3, [pc, #224]	; (800674c <xTaskResumeAll+0x114>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a37      	ldr	r2, [pc, #220]	; (800674c <xTaskResumeAll+0x114>)
 8006670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006672:	4b36      	ldr	r3, [pc, #216]	; (800674c <xTaskResumeAll+0x114>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d161      	bne.n	800673e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800667a:	4b35      	ldr	r3, [pc, #212]	; (8006750 <xTaskResumeAll+0x118>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d05d      	beq.n	800673e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006682:	e02e      	b.n	80066e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006684:	4b33      	ldr	r3, [pc, #204]	; (8006754 <xTaskResumeAll+0x11c>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3318      	adds	r3, #24
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff f849 	bl	8005728 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff f844 	bl	8005728 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	2201      	movs	r2, #1
 80066a6:	409a      	lsls	r2, r3
 80066a8:	4b2b      	ldr	r3, [pc, #172]	; (8006758 <xTaskResumeAll+0x120>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	4a2a      	ldr	r2, [pc, #168]	; (8006758 <xTaskResumeAll+0x120>)
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4a27      	ldr	r2, [pc, #156]	; (800675c <xTaskResumeAll+0x124>)
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7fe ffd0 	bl	800566e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d2:	4b23      	ldr	r3, [pc, #140]	; (8006760 <xTaskResumeAll+0x128>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	429a      	cmp	r2, r3
 80066da:	d302      	bcc.n	80066e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066dc:	4b21      	ldr	r3, [pc, #132]	; (8006764 <xTaskResumeAll+0x12c>)
 80066de:	2201      	movs	r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <xTaskResumeAll+0x11c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1cc      	bne.n	8006684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066f0:	f000 fbec 	bl	8006ecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <xTaskResumeAll+0x130>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d010      	beq.n	8006722 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006700:	f000 f846 	bl	8006790 <xTaskIncrementTick>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800670a:	4b16      	ldr	r3, [pc, #88]	; (8006764 <xTaskResumeAll+0x12c>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3b01      	subs	r3, #1
 8006714:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f1      	bne.n	8006700 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <xTaskResumeAll+0x130>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006722:	4b10      	ldr	r3, [pc, #64]	; (8006764 <xTaskResumeAll+0x12c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800672a:	2301      	movs	r3, #1
 800672c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <xTaskResumeAll+0x134>)
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800673e:	f001 f9d1 	bl	8007ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8006742:	68bb      	ldr	r3, [r7, #8]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000abc 	.word	0x20000abc
 8006750:	20000a94 	.word	0x20000a94
 8006754:	20000a54 	.word	0x20000a54
 8006758:	20000a9c 	.word	0x20000a9c
 800675c:	20000998 	.word	0x20000998
 8006760:	20000994 	.word	0x20000994
 8006764:	20000aa8 	.word	0x20000aa8
 8006768:	20000aa4 	.word	0x20000aa4
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <xTaskGetTickCount+0x1c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800677c:	687b      	ldr	r3, [r7, #4]
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	20000a98 	.word	0x20000a98

08006790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679a:	4b4e      	ldr	r3, [pc, #312]	; (80068d4 <xTaskIncrementTick+0x144>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 808e 	bne.w	80068c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067a4:	4b4c      	ldr	r3, [pc, #304]	; (80068d8 <xTaskIncrementTick+0x148>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067ac:	4a4a      	ldr	r2, [pc, #296]	; (80068d8 <xTaskIncrementTick+0x148>)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d120      	bne.n	80067fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067b8:	4b48      	ldr	r3, [pc, #288]	; (80068dc <xTaskIncrementTick+0x14c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	603b      	str	r3, [r7, #0]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xTaskIncrementTick+0x46>
 80067d8:	4b40      	ldr	r3, [pc, #256]	; (80068dc <xTaskIncrementTick+0x14c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	4b40      	ldr	r3, [pc, #256]	; (80068e0 <xTaskIncrementTick+0x150>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a3e      	ldr	r2, [pc, #248]	; (80068dc <xTaskIncrementTick+0x14c>)
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4a3e      	ldr	r2, [pc, #248]	; (80068e0 <xTaskIncrementTick+0x150>)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4b3d      	ldr	r3, [pc, #244]	; (80068e4 <xTaskIncrementTick+0x154>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	4a3c      	ldr	r2, [pc, #240]	; (80068e4 <xTaskIncrementTick+0x154>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	f000 fb69 	bl	8006ecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067fa:	4b3b      	ldr	r3, [pc, #236]	; (80068e8 <xTaskIncrementTick+0x158>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	429a      	cmp	r2, r3
 8006802:	d348      	bcc.n	8006896 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006804:	4b35      	ldr	r3, [pc, #212]	; (80068dc <xTaskIncrementTick+0x14c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800680e:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <xTaskIncrementTick+0x158>)
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	601a      	str	r2, [r3, #0]
					break;
 8006816:	e03e      	b.n	8006896 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006818:	4b30      	ldr	r3, [pc, #192]	; (80068dc <xTaskIncrementTick+0x14c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d203      	bcs.n	8006838 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006830:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <xTaskIncrementTick+0x158>)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006836:	e02e      	b.n	8006896 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	3304      	adds	r3, #4
 800683c:	4618      	mov	r0, r3
 800683e:	f7fe ff73 	bl	8005728 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3318      	adds	r3, #24
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe ff6a 	bl	8005728 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	2201      	movs	r2, #1
 800685a:	409a      	lsls	r2, r3
 800685c:	4b23      	ldr	r3, [pc, #140]	; (80068ec <xTaskIncrementTick+0x15c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4313      	orrs	r3, r2
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <xTaskIncrementTick+0x15c>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4a1f      	ldr	r2, [pc, #124]	; (80068f0 <xTaskIncrementTick+0x160>)
 8006874:	441a      	add	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fe fef6 	bl	800566e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006886:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <xTaskIncrementTick+0x164>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	429a      	cmp	r2, r3
 800688e:	d3b9      	bcc.n	8006804 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006894:	e7b6      	b.n	8006804 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006896:	4b17      	ldr	r3, [pc, #92]	; (80068f4 <xTaskIncrementTick+0x164>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4914      	ldr	r1, [pc, #80]	; (80068f0 <xTaskIncrementTick+0x160>)
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d901      	bls.n	80068b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <xTaskIncrementTick+0x168>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e004      	b.n	80068ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068c0:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <xTaskIncrementTick+0x16c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <xTaskIncrementTick+0x16c>)
 80068c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068ca:	697b      	ldr	r3, [r7, #20]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000abc 	.word	0x20000abc
 80068d8:	20000a98 	.word	0x20000a98
 80068dc:	20000a4c 	.word	0x20000a4c
 80068e0:	20000a50 	.word	0x20000a50
 80068e4:	20000aac 	.word	0x20000aac
 80068e8:	20000ab4 	.word	0x20000ab4
 80068ec:	20000a9c 	.word	0x20000a9c
 80068f0:	20000998 	.word	0x20000998
 80068f4:	20000994 	.word	0x20000994
 80068f8:	20000aa8 	.word	0x20000aa8
 80068fc:	20000aa4 	.word	0x20000aa4

08006900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006906:	4b27      	ldr	r3, [pc, #156]	; (80069a4 <vTaskSwitchContext+0xa4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800690e:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <vTaskSwitchContext+0xa8>)
 8006910:	2201      	movs	r2, #1
 8006912:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006914:	e03f      	b.n	8006996 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006916:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <vTaskSwitchContext+0xa8>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691c:	4b23      	ldr	r3, [pc, #140]	; (80069ac <vTaskSwitchContext+0xac>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	fab3 f383 	clz	r3, r3
 8006928:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800692a:	7afb      	ldrb	r3, [r7, #11]
 800692c:	f1c3 031f 	rsb	r3, r3, #31
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	491f      	ldr	r1, [pc, #124]	; (80069b0 <vTaskSwitchContext+0xb0>)
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10a      	bne.n	800695c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	607b      	str	r3, [r7, #4]
}
 8006958:	bf00      	nop
 800695a:	e7fe      	b.n	800695a <vTaskSwitchContext+0x5a>
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4a12      	ldr	r2, [pc, #72]	; (80069b0 <vTaskSwitchContext+0xb0>)
 8006968:	4413      	add	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	605a      	str	r2, [r3, #4]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3308      	adds	r3, #8
 800697e:	429a      	cmp	r2, r3
 8006980:	d104      	bne.n	800698c <vTaskSwitchContext+0x8c>
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <vTaskSwitchContext+0xb4>)
 8006994:	6013      	str	r3, [r2, #0]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000abc 	.word	0x20000abc
 80069a8:	20000aa8 	.word	0x20000aa8
 80069ac:	20000a9c 	.word	0x20000a9c
 80069b0:	20000998 	.word	0x20000998
 80069b4:	20000994 	.word	0x20000994

080069b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60fb      	str	r3, [r7, #12]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <vTaskPlaceOnEventList+0x44>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3318      	adds	r3, #24
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fe fe65 	bl	80056b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069ec:	2101      	movs	r1, #1
 80069ee:	6838      	ldr	r0, [r7, #0]
 80069f0:	f000 fb48 	bl	8007084 <prvAddCurrentTaskToDelayedList>
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000994 	.word	0x20000994

08006a00 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	617b      	str	r3, [r7, #20]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006a28:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	613b      	str	r3, [r7, #16]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a50:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a52:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3318      	adds	r3, #24
 8006a58:	4619      	mov	r1, r3
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7fe fe07 	bl	800566e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a60:	2101      	movs	r1, #1
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb0e 	bl	8007084 <prvAddCurrentTaskToDelayedList>
}
 8006a68:	bf00      	nop
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000abc 	.word	0x20000abc
 8006a74:	20000994 	.word	0x20000994

08006a78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	617b      	str	r3, [r7, #20]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <vTaskPlaceOnEventListRestricted+0x54>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7fe fde0 	bl	800566e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	68b8      	ldr	r0, [r7, #8]
 8006abe:	f000 fae1 	bl	8007084 <prvAddCurrentTaskToDelayedList>
	}
 8006ac2:	bf00      	nop
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000994 	.word	0x20000994

08006ad0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3318      	adds	r3, #24
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe fe11 	bl	8005728 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b06:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <xTaskRemoveFromEventList+0xac>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d11c      	bne.n	8006b48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fe08 	bl	8005728 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	409a      	lsls	r2, r3
 8006b20:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <xTaskRemoveFromEventList+0xb0>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <xTaskRemoveFromEventList+0xb0>)
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <xTaskRemoveFromEventList+0xb4>)
 8006b38:	441a      	add	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f7fe fd94 	bl	800566e <vListInsertEnd>
 8006b46:	e005      	b.n	8006b54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	3318      	adds	r3, #24
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	480e      	ldr	r0, [pc, #56]	; (8006b88 <xTaskRemoveFromEventList+0xb8>)
 8006b50:	f7fe fd8d 	bl	800566e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <xTaskRemoveFromEventList+0xbc>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d905      	bls.n	8006b6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <xTaskRemoveFromEventList+0xc0>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e001      	b.n	8006b72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b72:	697b      	ldr	r3, [r7, #20]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000abc 	.word	0x20000abc
 8006b80:	20000a9c 	.word	0x20000a9c
 8006b84:	20000998 	.word	0x20000998
 8006b88:	20000a54 	.word	0x20000a54
 8006b8c:	20000994 	.word	0x20000994
 8006b90:	20000aa8 	.word	0x20000aa8

08006b94 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b9e:	4b29      	ldr	r3, [pc, #164]	; (8006c44 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	613b      	str	r3, [r7, #16]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60fb      	str	r3, [r7, #12]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fe fd9d 	bl	8005728 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fd98 	bl	8005728 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006c18:	441a      	add	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7fe fd24 	bl	800566e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d902      	bls.n	8006c3a <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006c34:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000abc 	.word	0x20000abc
 8006c48:	20000a9c 	.word	0x20000a9c
 8006c4c:	20000998 	.word	0x20000998
 8006c50:	20000994 	.word	0x20000994
 8006c54:	20000aa8 	.word	0x20000aa8

08006c58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <vTaskInternalSetTimeOutState+0x24>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <vTaskInternalSetTimeOutState+0x28>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	605a      	str	r2, [r3, #4]
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20000aac 	.word	0x20000aac
 8006c80:	20000a98 	.word	0x20000a98

08006c84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	613b      	str	r3, [r7, #16]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cc6:	f000 fedd 	bl	8007a84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <xTaskCheckForTimeOut+0xbc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	d102      	bne.n	8006cea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	e023      	b.n	8006d32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b15      	ldr	r3, [pc, #84]	; (8006d44 <xTaskCheckForTimeOut+0xc0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d007      	beq.n	8006d06 <xTaskCheckForTimeOut+0x82>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d302      	bcc.n	8006d06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	e015      	b.n	8006d32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d20b      	bcs.n	8006d28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff ff9b 	bl	8006c58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	e004      	b.n	8006d32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d32:	f000 fed7 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 8006d36:	69fb      	ldr	r3, [r7, #28]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3720      	adds	r7, #32
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000a98 	.word	0x20000a98
 8006d44:	20000aac 	.word	0x20000aac

08006d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d4c:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <vTaskMissedYield+0x14>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000aa8 	.word	0x20000aa8

08006d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d68:	f000 f852 	bl	8006e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <prvIdleTask+0x28>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d9f9      	bls.n	8006d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <prvIdleTask+0x2c>)
 8006d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d84:	e7f0      	b.n	8006d68 <prvIdleTask+0x8>
 8006d86:	bf00      	nop
 8006d88:	20000998 	.word	0x20000998
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d96:	2300      	movs	r3, #0
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	e00c      	b.n	8006db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4a12      	ldr	r2, [pc, #72]	; (8006df0 <prvInitialiseTaskLists+0x60>)
 8006da8:	4413      	add	r3, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fc32 	bl	8005614 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3301      	adds	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b06      	cmp	r3, #6
 8006dba:	d9ef      	bls.n	8006d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dbc:	480d      	ldr	r0, [pc, #52]	; (8006df4 <prvInitialiseTaskLists+0x64>)
 8006dbe:	f7fe fc29 	bl	8005614 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dc2:	480d      	ldr	r0, [pc, #52]	; (8006df8 <prvInitialiseTaskLists+0x68>)
 8006dc4:	f7fe fc26 	bl	8005614 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dc8:	480c      	ldr	r0, [pc, #48]	; (8006dfc <prvInitialiseTaskLists+0x6c>)
 8006dca:	f7fe fc23 	bl	8005614 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dce:	480c      	ldr	r0, [pc, #48]	; (8006e00 <prvInitialiseTaskLists+0x70>)
 8006dd0:	f7fe fc20 	bl	8005614 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dd4:	480b      	ldr	r0, [pc, #44]	; (8006e04 <prvInitialiseTaskLists+0x74>)
 8006dd6:	f7fe fc1d 	bl	8005614 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <prvInitialiseTaskLists+0x78>)
 8006ddc:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <prvInitialiseTaskLists+0x64>)
 8006dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <prvInitialiseTaskLists+0x7c>)
 8006de2:	4a05      	ldr	r2, [pc, #20]	; (8006df8 <prvInitialiseTaskLists+0x68>)
 8006de4:	601a      	str	r2, [r3, #0]
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000998 	.word	0x20000998
 8006df4:	20000a24 	.word	0x20000a24
 8006df8:	20000a38 	.word	0x20000a38
 8006dfc:	20000a54 	.word	0x20000a54
 8006e00:	20000a68 	.word	0x20000a68
 8006e04:	20000a80 	.word	0x20000a80
 8006e08:	20000a4c 	.word	0x20000a4c
 8006e0c:	20000a50 	.word	0x20000a50

08006e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e16:	e019      	b.n	8006e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e18:	f000 fe34 	bl	8007a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1c:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <prvCheckTasksWaitingTermination+0x50>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fc7d 	bl	8005728 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <prvCheckTasksWaitingTermination+0x54>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <prvCheckTasksWaitingTermination+0x54>)
 8006e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <prvCheckTasksWaitingTermination+0x58>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <prvCheckTasksWaitingTermination+0x58>)
 8006e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e42:	f000 fe4f 	bl	8007ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f810 	bl	8006e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <prvCheckTasksWaitingTermination+0x58>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e1      	bne.n	8006e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000a68 	.word	0x20000a68
 8006e64:	20000a94 	.word	0x20000a94
 8006e68:	20000a7c 	.word	0x20000a7c

08006e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 ffec 	bl	8007e60 <vPortFree>
				vPortFree( pxTCB );
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 ffe9 	bl	8007e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e8e:	e018      	b.n	8006ec2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d103      	bne.n	8006ea2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 ffe0 	bl	8007e60 <vPortFree>
	}
 8006ea0:	e00f      	b.n	8006ec2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d00a      	beq.n	8006ec2 <prvDeleteTCB+0x56>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <prvDeleteTCB+0x54>
	}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <prvResetNextTaskUnblockTime+0x38>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <prvResetNextTaskUnblockTime+0x3c>)
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ee4:	e008      	b.n	8006ef8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <prvResetNextTaskUnblockTime+0x38>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvResetNextTaskUnblockTime+0x3c>)
 8006ef6:	6013      	str	r3, [r2, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000a4c 	.word	0x20000a4c
 8006f08:	20000ab4 	.word	0x20000ab4

08006f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <xTaskGetSchedulerState+0x34>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	e008      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <xTaskGetSchedulerState+0x38>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e001      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f32:	687b      	ldr	r3, [r7, #4]
	}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000aa0 	.word	0x20000aa0
 8006f44:	20000abc 	.word	0x20000abc

08006f48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d06e      	beq.n	800703c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f5e:	4b3a      	ldr	r3, [pc, #232]	; (8007048 <xTaskPriorityDisinherit+0x100>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d00a      	beq.n	8006f7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60fb      	str	r3, [r7, #12]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	60bb      	str	r3, [r7, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d044      	beq.n	800703c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d140      	bne.n	800703c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fbb2 	bl	8005728 <uxListRemove>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d115      	bne.n	8006ff6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fce:	491f      	ldr	r1, [pc, #124]	; (800704c <xTaskPriorityDisinherit+0x104>)
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xTaskPriorityDisinherit+0xae>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	43da      	mvns	r2, r3
 8006fec:	4b18      	ldr	r3, [pc, #96]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	4a17      	ldr	r2, [pc, #92]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 8006ff4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f1c3 0207 	rsb	r2, r3, #7
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	2201      	movs	r2, #1
 8007010:	409a      	lsls	r2, r3
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4313      	orrs	r3, r2
 8007018:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <xTaskPriorityDisinherit+0x104>)
 800702a:	441a      	add	r2, r3
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f7fe fb1b 	bl	800566e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800703c:	697b      	ldr	r3, [r7, #20]
	}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000994 	.word	0x20000994
 800704c:	20000998 	.word	0x20000998
 8007050:	20000a9c 	.word	0x20000a9c

08007054 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <uxTaskResetEventItemValue+0x2c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <uxTaskResetEventItemValue+0x2c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <uxTaskResetEventItemValue+0x2c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f1c2 0207 	rsb	r2, r2, #7
 8007070:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007072:	687b      	ldr	r3, [r7, #4]
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000994 	.word	0x20000994

08007084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800708e:	4b29      	ldr	r3, [pc, #164]	; (8007134 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007094:	4b28      	ldr	r3, [pc, #160]	; (8007138 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3304      	adds	r3, #4
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fb44 	bl	8005728 <uxListRemove>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070a6:	4b24      	ldr	r3, [pc, #144]	; (8007138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	2201      	movs	r2, #1
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	43da      	mvns	r2, r3
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <prvAddCurrentTaskToDelayedList+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4013      	ands	r3, r2
 80070ba:	4a20      	ldr	r2, [pc, #128]	; (800713c <prvAddCurrentTaskToDelayedList+0xb8>)
 80070bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d10a      	bne.n	80070dc <prvAddCurrentTaskToDelayedList+0x58>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070cc:	4b1a      	ldr	r3, [pc, #104]	; (8007138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3304      	adds	r3, #4
 80070d2:	4619      	mov	r1, r3
 80070d4:	481a      	ldr	r0, [pc, #104]	; (8007140 <prvAddCurrentTaskToDelayedList+0xbc>)
 80070d6:	f7fe faca 	bl	800566e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070da:	e026      	b.n	800712a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070e4:	4b14      	ldr	r3, [pc, #80]	; (8007138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d209      	bcs.n	8007108 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070f4:	4b13      	ldr	r3, [pc, #76]	; (8007144 <prvAddCurrentTaskToDelayedList+0xc0>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	4b0f      	ldr	r3, [pc, #60]	; (8007138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f7fe fad8 	bl	80056b6 <vListInsert>
}
 8007106:	e010      	b.n	800712a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <prvAddCurrentTaskToDelayedList+0xc4>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f7fe face 	bl	80056b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <prvAddCurrentTaskToDelayedList+0xc8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	429a      	cmp	r2, r3
 8007122:	d202      	bcs.n	800712a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007124:	4a09      	ldr	r2, [pc, #36]	; (800714c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6013      	str	r3, [r2, #0]
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000a98 	.word	0x20000a98
 8007138:	20000994 	.word	0x20000994
 800713c:	20000a9c 	.word	0x20000a9c
 8007140:	20000a80 	.word	0x20000a80
 8007144:	20000a50 	.word	0x20000a50
 8007148:	20000a4c 	.word	0x20000a4c
 800714c:	20000ab4 	.word	0x20000ab4

08007150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800715a:	f000 fb07 	bl	800776c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800715e:	4b1c      	ldr	r3, [pc, #112]	; (80071d0 <xTimerCreateTimerTask+0x80>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d021      	beq.n	80071aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800716e:	1d3a      	adds	r2, r7, #4
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	f107 030c 	add.w	r3, r7, #12
 8007178:	4618      	mov	r0, r3
 800717a:	f7f9 f9c9 	bl	8000510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	9202      	str	r2, [sp, #8]
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	2302      	movs	r3, #2
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	460a      	mov	r2, r1
 8007190:	4910      	ldr	r1, [pc, #64]	; (80071d4 <xTimerCreateTimerTask+0x84>)
 8007192:	4811      	ldr	r0, [pc, #68]	; (80071d8 <xTimerCreateTimerTask+0x88>)
 8007194:	f7ff f814 	bl	80061c0 <xTaskCreateStatic>
 8007198:	4603      	mov	r3, r0
 800719a:	4a10      	ldr	r2, [pc, #64]	; (80071dc <xTimerCreateTimerTask+0x8c>)
 800719c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <xTimerCreateTimerTask+0x8c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071a6:	2301      	movs	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	613b      	str	r3, [r7, #16]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071c6:	697b      	ldr	r3, [r7, #20]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000af0 	.word	0x20000af0
 80071d4:	08008228 	.word	0x08008228
 80071d8:	08007315 	.word	0x08007315
 80071dc:	20000af4 	.word	0x20000af4

080071e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xTimerGenericCommand+0x2e>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	623b      	str	r3, [r7, #32]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800720e:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <xTimerGenericCommand+0x98>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d02a      	beq.n	800726c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b05      	cmp	r3, #5
 8007226:	dc18      	bgt.n	800725a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007228:	f7ff fe70 	bl	8006f0c <xTaskGetSchedulerState>
 800722c:	4603      	mov	r3, r0
 800722e:	2b02      	cmp	r3, #2
 8007230:	d109      	bne.n	8007246 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <xTimerGenericCommand+0x98>)
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	f107 0110 	add.w	r1, r7, #16
 800723a:	2300      	movs	r3, #0
 800723c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723e:	f7fe fbd7 	bl	80059f0 <xQueueGenericSend>
 8007242:	6278      	str	r0, [r7, #36]	; 0x24
 8007244:	e012      	b.n	800726c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <xTimerGenericCommand+0x98>)
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	f107 0110 	add.w	r1, r7, #16
 800724e:	2300      	movs	r3, #0
 8007250:	2200      	movs	r2, #0
 8007252:	f7fe fbcd 	bl	80059f0 <xQueueGenericSend>
 8007256:	6278      	str	r0, [r7, #36]	; 0x24
 8007258:	e008      	b.n	800726c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <xTimerGenericCommand+0x98>)
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	f107 0110 	add.w	r1, r7, #16
 8007262:	2300      	movs	r3, #0
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	f7fe fcc1 	bl	8005bec <xQueueGenericSendFromISR>
 800726a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800726e:	4618      	mov	r0, r3
 8007270:	3728      	adds	r7, #40	; 0x28
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000af0 	.word	0x20000af0

0800727c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af02      	add	r7, sp, #8
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007286:	4b22      	ldr	r3, [pc, #136]	; (8007310 <prvProcessExpiredTimer+0x94>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	3304      	adds	r3, #4
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fa47 	bl	8005728 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d022      	beq.n	80072ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	18d1      	adds	r1, r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	6978      	ldr	r0, [r7, #20]
 80072b6:	f000 f8d1 	bl	800745c <prvInsertTimerInActiveList>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01f      	beq.n	8007300 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072c0:	2300      	movs	r3, #0
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2300      	movs	r3, #0
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	2100      	movs	r1, #0
 80072ca:	6978      	ldr	r0, [r7, #20]
 80072cc:	f7ff ff88 	bl	80071e0 <xTimerGenericCommand>
 80072d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d113      	bne.n	8007300 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	60fb      	str	r3, [r7, #12]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	6978      	ldr	r0, [r7, #20]
 8007306:	4798      	blx	r3
}
 8007308:	bf00      	nop
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000ae8 	.word	0x20000ae8

08007314 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800731c:	f107 0308 	add.w	r3, r7, #8
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f857 	bl	80073d4 <prvGetNextExpireTime>
 8007326:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4619      	mov	r1, r3
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f803 	bl	8007338 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007332:	f000 f8d5 	bl	80074e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007336:	e7f1      	b.n	800731c <prvTimerTask+0x8>

08007338 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007342:	f7ff f96b 	bl	800661c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007346:	f107 0308 	add.w	r3, r7, #8
 800734a:	4618      	mov	r0, r3
 800734c:	f000 f866 	bl	800741c <prvSampleTimeNow>
 8007350:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d130      	bne.n	80073ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <prvProcessTimerOrBlockTask+0x3c>
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	429a      	cmp	r2, r3
 8007364:	d806      	bhi.n	8007374 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007366:	f7ff f967 	bl	8006638 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ff85 	bl	800727c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007372:	e024      	b.n	80073be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <prvProcessTimerOrBlockTask+0x90>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <prvProcessTimerOrBlockTask+0x50>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <prvProcessTimerOrBlockTask+0x52>
 8007388:	2300      	movs	r3, #0
 800738a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800738c:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <prvProcessTimerOrBlockTask+0x94>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	f7fe fedd 	bl	8006158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800739e:	f7ff f94b 	bl	8006638 <xTaskResumeAll>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073a8:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <prvProcessTimerOrBlockTask+0x98>)
 80073aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	f3bf 8f6f 	isb	sy
}
 80073b8:	e001      	b.n	80073be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073ba:	f7ff f93d 	bl	8006638 <xTaskResumeAll>
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000aec 	.word	0x20000aec
 80073cc:	20000af0 	.word	0x20000af0
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <prvGetNextExpireTime+0x44>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <prvGetNextExpireTime+0x16>
 80073e6:	2201      	movs	r2, #1
 80073e8:	e000      	b.n	80073ec <prvGetNextExpireTime+0x18>
 80073ea:	2200      	movs	r2, #0
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d105      	bne.n	8007404 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073f8:	4b07      	ldr	r3, [pc, #28]	; (8007418 <prvGetNextExpireTime+0x44>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e001      	b.n	8007408 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007408:	68fb      	ldr	r3, [r7, #12]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	20000ae8 	.word	0x20000ae8

0800741c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007424:	f7ff f9a4 	bl	8006770 <xTaskGetTickCount>
 8007428:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800742a:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <prvSampleTimeNow+0x3c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	429a      	cmp	r2, r3
 8007432:	d205      	bcs.n	8007440 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007434:	f000 f936 	bl	80076a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e002      	b.n	8007446 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007446:	4a04      	ldr	r2, [pc, #16]	; (8007458 <prvSampleTimeNow+0x3c>)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800744c:	68fb      	ldr	r3, [r7, #12]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000af8 	.word	0x20000af8

0800745c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	429a      	cmp	r2, r3
 8007480:	d812      	bhi.n	80074a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	429a      	cmp	r2, r3
 800748e:	d302      	bcc.n	8007496 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007490:	2301      	movs	r3, #1
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	e01b      	b.n	80074ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007496:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <prvInsertTimerInActiveList+0x7c>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3304      	adds	r3, #4
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f7fe f908 	bl	80056b6 <vListInsert>
 80074a6:	e012      	b.n	80074ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d206      	bcs.n	80074be <prvInsertTimerInActiveList+0x62>
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d302      	bcc.n	80074be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e007      	b.n	80074ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074be:	4b07      	ldr	r3, [pc, #28]	; (80074dc <prvInsertTimerInActiveList+0x80>)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f7fe f8f4 	bl	80056b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074ce:	697b      	ldr	r3, [r7, #20]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000aec 	.word	0x20000aec
 80074dc:	20000ae8 	.word	0x20000ae8

080074e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08e      	sub	sp, #56	; 0x38
 80074e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074e6:	e0ca      	b.n	800767e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da18      	bge.n	8007520 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	3304      	adds	r3, #4
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	61fb      	str	r3, [r7, #28]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007516:	6850      	ldr	r0, [r2, #4]
 8007518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800751a:	6892      	ldr	r2, [r2, #8]
 800751c:	4611      	mov	r1, r2
 800751e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f2c0 80ab 	blt.w	800767e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	3304      	adds	r3, #4
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe f8f5 	bl	8005728 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800753e:	463b      	mov	r3, r7
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff ff6b 	bl	800741c <prvSampleTimeNow>
 8007546:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b09      	cmp	r3, #9
 800754c:	f200 8096 	bhi.w	800767c <prvProcessReceivedCommands+0x19c>
 8007550:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <prvProcessReceivedCommands+0x78>)
 8007552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007556:	bf00      	nop
 8007558:	08007581 	.word	0x08007581
 800755c:	08007581 	.word	0x08007581
 8007560:	08007581 	.word	0x08007581
 8007564:	080075f5 	.word	0x080075f5
 8007568:	08007609 	.word	0x08007609
 800756c:	08007653 	.word	0x08007653
 8007570:	08007581 	.word	0x08007581
 8007574:	08007581 	.word	0x08007581
 8007578:	080075f5 	.word	0x080075f5
 800757c:	08007609 	.word	0x08007609
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	b2da      	uxtb	r2, r3
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	18d1      	adds	r1, r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a0:	f7ff ff5c 	bl	800745c <prvInsertTimerInActiveList>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d069      	beq.n	800767e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d05e      	beq.n	800767e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	441a      	add	r2, r3
 80075c8:	2300      	movs	r3, #0
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2300      	movs	r3, #0
 80075ce:	2100      	movs	r1, #0
 80075d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d2:	f7ff fe05 	bl	80071e0 <xTimerGenericCommand>
 80075d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d14f      	bne.n	800767e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61bb      	str	r3, [r7, #24]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007606:	e03a      	b.n	800767e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	b2da      	uxtb	r2, r3
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	617b      	str	r3, [r7, #20]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	18d1      	adds	r1, r2, r3
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800764c:	f7ff ff06 	bl	800745c <prvInsertTimerInActiveList>
					break;
 8007650:	e015      	b.n	800767e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007662:	f000 fbfd 	bl	8007e60 <vPortFree>
 8007666:	e00a      	b.n	800767e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800766e:	f023 0301 	bic.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800767a:	e000      	b.n	800767e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800767c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800767e:	4b08      	ldr	r3, [pc, #32]	; (80076a0 <prvProcessReceivedCommands+0x1c0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	1d39      	adds	r1, r7, #4
 8007684:	2200      	movs	r2, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fb4c 	bl	8005d24 <xQueueReceive>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	f47f af2a 	bne.w	80074e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	3730      	adds	r7, #48	; 0x30
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000af0 	.word	0x20000af0

080076a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076aa:	e048      	b.n	800773e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076ac:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <prvSwitchTimerLists+0xc0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b6:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <prvSwitchTimerLists+0xc0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe f82f 	bl	8005728 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02e      	beq.n	800773e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4413      	add	r3, r2
 80076e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d90e      	bls.n	8007710 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <prvSwitchTimerLists+0xc0>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3304      	adds	r3, #4
 8007706:	4619      	mov	r1, r3
 8007708:	4610      	mov	r0, r2
 800770a:	f7fd ffd4 	bl	80056b6 <vListInsert>
 800770e:	e016      	b.n	800773e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007710:	2300      	movs	r3, #0
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	2100      	movs	r1, #0
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f7ff fd60 	bl	80071e0 <xTimerGenericCommand>
 8007720:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	603b      	str	r3, [r7, #0]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <prvSwitchTimerLists+0xc0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1b1      	bne.n	80076ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007748:	4b06      	ldr	r3, [pc, #24]	; (8007764 <prvSwitchTimerLists+0xc0>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800774e:	4b06      	ldr	r3, [pc, #24]	; (8007768 <prvSwitchTimerLists+0xc4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a04      	ldr	r2, [pc, #16]	; (8007764 <prvSwitchTimerLists+0xc0>)
 8007754:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007756:	4a04      	ldr	r2, [pc, #16]	; (8007768 <prvSwitchTimerLists+0xc4>)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	6013      	str	r3, [r2, #0]
}
 800775c:	bf00      	nop
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000ae8 	.word	0x20000ae8
 8007768:	20000aec 	.word	0x20000aec

0800776c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007772:	f000 f987 	bl	8007a84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d120      	bne.n	80077c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800777e:	4814      	ldr	r0, [pc, #80]	; (80077d0 <prvCheckForValidListAndQueue+0x64>)
 8007780:	f7fd ff48 	bl	8005614 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007784:	4813      	ldr	r0, [pc, #76]	; (80077d4 <prvCheckForValidListAndQueue+0x68>)
 8007786:	f7fd ff45 	bl	8005614 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <prvCheckForValidListAndQueue+0x6c>)
 800778c:	4a10      	ldr	r2, [pc, #64]	; (80077d0 <prvCheckForValidListAndQueue+0x64>)
 800778e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007790:	4b12      	ldr	r3, [pc, #72]	; (80077dc <prvCheckForValidListAndQueue+0x70>)
 8007792:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <prvCheckForValidListAndQueue+0x68>)
 8007794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007796:	2300      	movs	r3, #0
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <prvCheckForValidListAndQueue+0x74>)
 800779c:	4a11      	ldr	r2, [pc, #68]	; (80077e4 <prvCheckForValidListAndQueue+0x78>)
 800779e:	2110      	movs	r1, #16
 80077a0:	200a      	movs	r0, #10
 80077a2:	f7fe f853 	bl	800584c <xQueueGenericCreateStatic>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4a08      	ldr	r2, [pc, #32]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 80077aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077ac:	4b07      	ldr	r3, [pc, #28]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	490b      	ldr	r1, [pc, #44]	; (80077e8 <prvCheckForValidListAndQueue+0x7c>)
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fca2 	bl	8006104 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077c0:	f000 f990 	bl	8007ae4 <vPortExitCritical>
}
 80077c4:	bf00      	nop
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000af0 	.word	0x20000af0
 80077d0:	20000ac0 	.word	0x20000ac0
 80077d4:	20000ad4 	.word	0x20000ad4
 80077d8:	20000ae8 	.word	0x20000ae8
 80077dc:	20000aec 	.word	0x20000aec
 80077e0:	20000b9c 	.word	0x20000b9c
 80077e4:	20000afc 	.word	0x20000afc
 80077e8:	08008230 	.word	0x08008230

080077ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80077fa:	f06f 0301 	mvn.w	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <xTimerPendFunctionCallFromISR+0x3c>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	f107 0114 	add.w	r1, r7, #20
 8007814:	2300      	movs	r3, #0
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	f7fe f9e8 	bl	8005bec <xQueueGenericSendFromISR>
 800781c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007820:	4618      	mov	r0, r3
 8007822:	3728      	adds	r7, #40	; 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000af0 	.word	0x20000af0

0800782c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3b04      	subs	r3, #4
 800783c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b04      	subs	r3, #4
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800785c:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <pxPortInitialiseStack+0x64>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b14      	subs	r3, #20
 8007866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3b04      	subs	r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f06f 0202 	mvn.w	r2, #2
 800787a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3b20      	subs	r3, #32
 8007880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007882:	68fb      	ldr	r3, [r7, #12]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	08007895 	.word	0x08007895

08007894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <prvTaskExitError+0x54>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d00a      	beq.n	80078be <prvTaskExitError+0x2a>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	60fb      	str	r3, [r7, #12]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <prvTaskExitError+0x28>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60bb      	str	r3, [r7, #8]
}
 80078d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078d2:	bf00      	nop
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0fc      	beq.n	80078d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	2000000c 	.word	0x2000000c
 80078ec:	00000000 	.word	0x00000000

080078f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <pxCurrentTCBConst2>)
 80078f2:	6819      	ldr	r1, [r3, #0]
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	f380 8809 	msr	PSP, r0
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8811 	msr	BASEPRI, r0
 800790a:	4770      	bx	lr
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst2>:
 8007910:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007918:	4808      	ldr	r0, [pc, #32]	; (800793c <prvPortStartFirstTask+0x24>)
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f380 8808 	msr	MSP, r0
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8814 	msr	CONTROL, r0
 800792a:	b662      	cpsie	i
 800792c:	b661      	cpsie	f
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	df00      	svc	0
 8007938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800793a:	bf00      	nop
 800793c:	e000ed08 	.word	0xe000ed08

08007940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007946:	4b46      	ldr	r3, [pc, #280]	; (8007a60 <xPortStartScheduler+0x120>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a46      	ldr	r2, [pc, #280]	; (8007a64 <xPortStartScheduler+0x124>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10a      	bne.n	8007966 <xPortStartScheduler+0x26>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007966:	4b3e      	ldr	r3, [pc, #248]	; (8007a60 <xPortStartScheduler+0x120>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a3f      	ldr	r2, [pc, #252]	; (8007a68 <xPortStartScheduler+0x128>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10a      	bne.n	8007986 <xPortStartScheduler+0x46>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007986:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <xPortStartScheduler+0x12c>)
 8007988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	4b31      	ldr	r3, [pc, #196]	; (8007a70 <xPortStartScheduler+0x130>)
 80079ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ae:	4b31      	ldr	r3, [pc, #196]	; (8007a74 <xPortStartScheduler+0x134>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079b4:	e009      	b.n	80079ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079b6:	4b2f      	ldr	r3, [pc, #188]	; (8007a74 <xPortStartScheduler+0x134>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4a2d      	ldr	r2, [pc, #180]	; (8007a74 <xPortStartScheduler+0x134>)
 80079be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b80      	cmp	r3, #128	; 0x80
 80079d4:	d0ef      	beq.n	80079b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079d6:	4b27      	ldr	r3, [pc, #156]	; (8007a74 <xPortStartScheduler+0x134>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f1c3 0307 	rsb	r3, r3, #7
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d00a      	beq.n	80079f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	60bb      	str	r3, [r7, #8]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079f8:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <xPortStartScheduler+0x134>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	4a1d      	ldr	r2, [pc, #116]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a02:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a0a:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a16:	4b18      	ldr	r3, [pc, #96]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a14      	ldr	r2, [pc, #80]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a2e:	f000 f8dd 	bl	8007bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a32:	4b12      	ldr	r3, [pc, #72]	; (8007a7c <xPortStartScheduler+0x13c>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a38:	f000 f8fc 	bl	8007c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <xPortStartScheduler+0x140>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a0f      	ldr	r2, [pc, #60]	; (8007a80 <xPortStartScheduler+0x140>)
 8007a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a48:	f7ff ff66 	bl	8007918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a4c:	f7fe ff58 	bl	8006900 <vTaskSwitchContext>
	prvTaskExitError();
 8007a50:	f7ff ff20 	bl	8007894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	e000ed00 	.word	0xe000ed00
 8007a64:	410fc271 	.word	0x410fc271
 8007a68:	410fc270 	.word	0x410fc270
 8007a6c:	e000e400 	.word	0xe000e400
 8007a70:	20000be4 	.word	0x20000be4
 8007a74:	20000be8 	.word	0x20000be8
 8007a78:	e000ed20 	.word	0xe000ed20
 8007a7c:	2000000c 	.word	0x2000000c
 8007a80:	e000ef34 	.word	0xe000ef34

08007a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	607b      	str	r3, [r7, #4]
}
 8007a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <vPortEnterCritical+0x58>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	4a0d      	ldr	r2, [pc, #52]	; (8007adc <vPortEnterCritical+0x58>)
 8007aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <vPortEnterCritical+0x58>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d10f      	bne.n	8007ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortEnterCritical+0x5c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	603b      	str	r3, [r7, #0]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <vPortEnterCritical+0x4a>
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	2000000c 	.word	0x2000000c
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <vPortExitCritical+0x50>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <vPortExitCritical+0x24>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	607b      	str	r3, [r7, #4]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <vPortExitCritical+0x50>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <vPortExitCritical+0x50>)
 8007b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b12:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <vPortExitCritical+0x50>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <vPortExitCritical+0x42>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f383 8811 	msr	BASEPRI, r3
}
 8007b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000000c 	.word	0x2000000c
	...

08007b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b40:	f3ef 8009 	mrs	r0, PSP
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <pxCurrentTCBConst>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f01e 0f10 	tst.w	lr, #16
 8007b50:	bf08      	it	eq
 8007b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	6010      	str	r0, [r2, #0]
 8007b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b64:	f380 8811 	msr	BASEPRI, r0
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f7fe fec6 	bl	8006900 <vTaskSwitchContext>
 8007b74:	f04f 0000 	mov.w	r0, #0
 8007b78:	f380 8811 	msr	BASEPRI, r0
 8007b7c:	bc09      	pop	{r0, r3}
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	6808      	ldr	r0, [r1, #0]
 8007b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b86:	f01e 0f10 	tst.w	lr, #16
 8007b8a:	bf08      	it	eq
 8007b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b90:	f380 8809 	msr	PSP, r0
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst>:
 8007ba0:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bc2:	f7fe fde5 	bl	8006790 <xTaskIncrementTick>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <SysTick_Handler+0x40>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f383 8811 	msr	BASEPRI, r3
}
 8007bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <vPortSetupTimerInterrupt+0x38>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <vPortSetupTimerInterrupt+0x3c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <vPortSetupTimerInterrupt+0x40>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <vPortSetupTimerInterrupt+0x44>)
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010
 8007c24:	e000e018 	.word	0xe000e018
 8007c28:	20000000 	.word	0x20000000
 8007c2c:	10624dd3 	.word	0x10624dd3
 8007c30:	e000e014 	.word	0xe000e014

08007c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c44 <vPortEnableVFP+0x10>
 8007c38:	6801      	ldr	r1, [r0, #0]
 8007c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c3e:	6001      	str	r1, [r0, #0]
 8007c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c42:	bf00      	nop
 8007c44:	e000ed88 	.word	0xe000ed88

08007c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d914      	bls.n	8007c84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c5a:	4a17      	ldr	r2, [pc, #92]	; (8007cb8 <vPortValidateInterruptPriority+0x70>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c64:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <vPortValidateInterruptPriority+0x74>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	7afa      	ldrb	r2, [r7, #11]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d20a      	bcs.n	8007c84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <vPortValidateInterruptPriority+0x78>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <vPortValidateInterruptPriority+0x7c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d90a      	bls.n	8007caa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	603b      	str	r3, [r7, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <vPortValidateInterruptPriority+0x60>
	}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	e000e3f0 	.word	0xe000e3f0
 8007cbc:	20000be4 	.word	0x20000be4
 8007cc0:	e000ed0c 	.word	0xe000ed0c
 8007cc4:	20000be8 	.word	0x20000be8

08007cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cd4:	f7fe fca2 	bl	800661c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cd8:	4b5b      	ldr	r3, [pc, #364]	; (8007e48 <pvPortMalloc+0x180>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ce0:	f000 f920 	bl	8007f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ce4:	4b59      	ldr	r3, [pc, #356]	; (8007e4c <pvPortMalloc+0x184>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f040 8093 	bne.w	8007e18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01d      	beq.n	8007d34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d014      	beq.n	8007d34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f023 0307 	bic.w	r3, r3, #7
 8007d10:	3308      	adds	r3, #8
 8007d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <pvPortMalloc+0x6c>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	617b      	str	r3, [r7, #20]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d06e      	beq.n	8007e18 <pvPortMalloc+0x150>
 8007d3a:	4b45      	ldr	r3, [pc, #276]	; (8007e50 <pvPortMalloc+0x188>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d869      	bhi.n	8007e18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d44:	4b43      	ldr	r3, [pc, #268]	; (8007e54 <pvPortMalloc+0x18c>)
 8007d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d48:	4b42      	ldr	r3, [pc, #264]	; (8007e54 <pvPortMalloc+0x18c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d4e:	e004      	b.n	8007d5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d903      	bls.n	8007d6c <pvPortMalloc+0xa4>
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f1      	bne.n	8007d50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d6c:	4b36      	ldr	r3, [pc, #216]	; (8007e48 <pvPortMalloc+0x180>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d050      	beq.n	8007e18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	2308      	movs	r3, #8
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d91f      	bls.n	8007dd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <pvPortMalloc+0xf8>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	613b      	str	r3, [r7, #16]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dd2:	69b8      	ldr	r0, [r7, #24]
 8007dd4:	f000 f908 	bl	8007fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dd8:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <pvPortMalloc+0x188>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <pvPortMalloc+0x188>)
 8007de4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007de6:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <pvPortMalloc+0x188>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <pvPortMalloc+0x190>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d203      	bcs.n	8007dfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007df2:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <pvPortMalloc+0x188>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <pvPortMalloc+0x190>)
 8007df8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <pvPortMalloc+0x184>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <pvPortMalloc+0x194>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	4a11      	ldr	r2, [pc, #68]	; (8007e5c <pvPortMalloc+0x194>)
 8007e16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e18:	f7fe fc0e 	bl	8006638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <pvPortMalloc+0x174>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60fb      	str	r3, [r7, #12]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <pvPortMalloc+0x172>
	return pvReturn;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3728      	adds	r7, #40	; 0x28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	200047f4 	.word	0x200047f4
 8007e4c:	20004808 	.word	0x20004808
 8007e50:	200047f8 	.word	0x200047f8
 8007e54:	200047ec 	.word	0x200047ec
 8007e58:	200047fc 	.word	0x200047fc
 8007e5c:	20004800 	.word	0x20004800

08007e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d04d      	beq.n	8007f0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e72:	2308      	movs	r3, #8
 8007e74:	425b      	negs	r3, r3
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4413      	add	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	4b24      	ldr	r3, [pc, #144]	; (8007f18 <vPortFree+0xb8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <vPortFree+0x44>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60fb      	str	r3, [r7, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <vPortFree+0x62>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60bb      	str	r3, [r7, #8]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <vPortFree+0xb8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01e      	beq.n	8007f0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11a      	bne.n	8007f0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <vPortFree+0xb8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	401a      	ands	r2, r3
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ee8:	f7fe fb98 	bl	800661c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <vPortFree+0xbc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4a09      	ldr	r2, [pc, #36]	; (8007f1c <vPortFree+0xbc>)
 8007ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007efa:	6938      	ldr	r0, [r7, #16]
 8007efc:	f000 f874 	bl	8007fe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <vPortFree+0xc0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	4a06      	ldr	r2, [pc, #24]	; (8007f20 <vPortFree+0xc0>)
 8007f08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f0a:	f7fe fb95 	bl	8006638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f0e:	bf00      	nop
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20004808 	.word	0x20004808
 8007f1c:	200047f8 	.word	0x200047f8
 8007f20:	20004804 	.word	0x20004804

08007f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <prvHeapInit+0xac>)
 8007f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3307      	adds	r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <prvHeapInit+0xac>)
 8007f54:	4413      	add	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f70:	2208      	movs	r2, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvHeapInit+0xb4>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <prvHeapInit+0xb8>)
 8007fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <prvHeapInit+0xbc>)
 8007fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <prvHeapInit+0xc0>)
 8007fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000bec 	.word	0x20000bec
 8007fd4:	200047ec 	.word	0x200047ec
 8007fd8:	200047f4 	.word	0x200047f4
 8007fdc:	200047fc 	.word	0x200047fc
 8007fe0:	200047f8 	.word	0x200047f8
 8007fe4:	20004808 	.word	0x20004808

08007fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ff0:	4b28      	ldr	r3, [pc, #160]	; (8008094 <prvInsertBlockIntoFreeList+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	e002      	b.n	8007ffc <prvInsertBlockIntoFreeList+0x14>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d8f7      	bhi.n	8007ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d108      	bne.n	800802a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	441a      	add	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d118      	bne.n	8008070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d00d      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	441a      	add	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e008      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e003      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	d002      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	200047ec 	.word	0x200047ec
 8008098:	200047f4 	.word	0x200047f4

0800809c <memset>:
 800809c:	4402      	add	r2, r0
 800809e:	4603      	mov	r3, r0
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d100      	bne.n	80080a6 <memset+0xa>
 80080a4:	4770      	bx	lr
 80080a6:	f803 1b01 	strb.w	r1, [r3], #1
 80080aa:	e7f9      	b.n	80080a0 <memset+0x4>

080080ac <__libc_init_array>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4d0d      	ldr	r5, [pc, #52]	; (80080e4 <__libc_init_array+0x38>)
 80080b0:	4c0d      	ldr	r4, [pc, #52]	; (80080e8 <__libc_init_array+0x3c>)
 80080b2:	1b64      	subs	r4, r4, r5
 80080b4:	10a4      	asrs	r4, r4, #2
 80080b6:	2600      	movs	r6, #0
 80080b8:	42a6      	cmp	r6, r4
 80080ba:	d109      	bne.n	80080d0 <__libc_init_array+0x24>
 80080bc:	4d0b      	ldr	r5, [pc, #44]	; (80080ec <__libc_init_array+0x40>)
 80080be:	4c0c      	ldr	r4, [pc, #48]	; (80080f0 <__libc_init_array+0x44>)
 80080c0:	f000 f826 	bl	8008110 <_init>
 80080c4:	1b64      	subs	r4, r4, r5
 80080c6:	10a4      	asrs	r4, r4, #2
 80080c8:	2600      	movs	r6, #0
 80080ca:	42a6      	cmp	r6, r4
 80080cc:	d105      	bne.n	80080da <__libc_init_array+0x2e>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d4:	4798      	blx	r3
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7ee      	b.n	80080b8 <__libc_init_array+0xc>
 80080da:	f855 3b04 	ldr.w	r3, [r5], #4
 80080de:	4798      	blx	r3
 80080e0:	3601      	adds	r6, #1
 80080e2:	e7f2      	b.n	80080ca <__libc_init_array+0x1e>
 80080e4:	08008258 	.word	0x08008258
 80080e8:	08008258 	.word	0x08008258
 80080ec:	08008258 	.word	0x08008258
 80080f0:	0800825c 	.word	0x0800825c

080080f4 <memcpy>:
 80080f4:	440a      	add	r2, r1
 80080f6:	4291      	cmp	r1, r2
 80080f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080fc:	d100      	bne.n	8008100 <memcpy+0xc>
 80080fe:	4770      	bx	lr
 8008100:	b510      	push	{r4, lr}
 8008102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800810a:	4291      	cmp	r1, r2
 800810c:	d1f9      	bne.n	8008102 <memcpy+0xe>
 800810e:	bd10      	pop	{r4, pc}

08008110 <_init>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	bf00      	nop
 8008114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008116:	bc08      	pop	{r3}
 8008118:	469e      	mov	lr, r3
 800811a:	4770      	bx	lr

0800811c <_fini>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	bf00      	nop
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr

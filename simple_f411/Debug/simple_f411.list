
simple_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006658  08006658  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006660  08006660  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000418c  20000010  08006678  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000419c  08006678  0002419c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014723  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e1  00000000  00000000  000347a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8b  00000000  00000000  00038d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179ee  00000000  00000000  00039bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001523c  00000000  00000000  000515b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000969bc  00000000  00000000  000667ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dec  00000000  00000000  000fd1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00101f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006540 	.word	0x08006540

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006540 	.word	0x08006540

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000090 	.word	0x20000090

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b0a0      	sub	sp, #128	; 0x80
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000516:	2300      	movs	r3, #0
 8000518:	67fb      	str	r3, [r7, #124]	; 0x7c
 800051a:	e007      	b.n	800052c <main+0x1c>
		exm.execution_memory[i] = 0;
 800051c:	4a65      	ldr	r2, [pc, #404]	; (80006b4 <main+0x1a4>)
 800051e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000520:	4413      	add	r3, r2
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000528:	3301      	adds	r3, #1
 800052a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800052c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800052e:	2b76      	cmp	r3, #118	; 0x76
 8000530:	d9f4      	bls.n	800051c <main+0xc>
	}
	exm.memory_pointer = exm.execution_memory;
 8000532:	4b60      	ldr	r3, [pc, #384]	; (80006b4 <main+0x1a4>)
 8000534:	4a5f      	ldr	r2, [pc, #380]	; (80006b4 <main+0x1a4>)
 8000536:	679a      	str	r2, [r3, #120]	; 0x78
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000538:	2300      	movs	r3, #0
 800053a:	67bb      	str	r3, [r7, #120]	; 0x78
 800053c:	e008      	b.n	8000550 <main+0x40>
		exm.sizes_of_instruction[i] = 1;
 800053e:	4a5d      	ldr	r2, [pc, #372]	; (80006b4 <main+0x1a4>)
 8000540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000542:	4413      	add	r3, r2
 8000544:	337c      	adds	r3, #124	; 0x7c
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 800054a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800054c:	3301      	adds	r3, #1
 800054e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000552:	2b3b      	cmp	r3, #59	; 0x3b
 8000554:	d9f3      	bls.n	800053e <main+0x2e>
	}
	exm.sizes_pointer = exm.sizes_of_instruction;
 8000556:	4b57      	ldr	r3, [pc, #348]	; (80006b4 <main+0x1a4>)
 8000558:	4a57      	ldr	r2, [pc, #348]	; (80006b8 <main+0x1a8>)
 800055a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 800055e:	2300      	movs	r3, #0
 8000560:	677b      	str	r3, [r7, #116]	; 0x74
 8000562:	e008      	b.n	8000576 <main+0x66>
		exm.current_instruction[i] = 0;
 8000564:	4a53      	ldr	r2, [pc, #332]	; (80006b4 <main+0x1a4>)
 8000566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000568:	4413      	add	r3, r2
 800056a:	33bc      	adds	r3, #188	; 0xbc
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000572:	3301      	adds	r3, #1
 8000574:	677b      	str	r3, [r7, #116]	; 0x74
 8000576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000578:	2b03      	cmp	r3, #3
 800057a:	d9f3      	bls.n	8000564 <main+0x54>
	}
	exm.start_speed_value = 0;
 800057c:	4b4d      	ldr	r3, [pc, #308]	; (80006b4 <main+0x1a4>)
 800057e:	2200      	movs	r2, #0
 8000580:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 8000584:	4b4b      	ldr	r3, [pc, #300]	; (80006b4 <main+0x1a4>)
 8000586:	2200      	movs	r2, #0
 8000588:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 febe 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f8b0 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f986 	bl	80008a4 <MX_GPIO_Init>
  MX_TIM10_Init();
 8000598:	f000 f90a 	bl	80007b0 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800059c:	f000 f956 	bl	800084c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 80005a0:	4b46      	ldr	r3, [pc, #280]	; (80006bc <main+0x1ac>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4a45      	ldr	r2, [pc, #276]	; (80006bc <main+0x1ac>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <main+0x1ac>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	4a42      	ldr	r2, [pc, #264]	; (80006bc <main+0x1ac>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 80005b8:	4b40      	ldr	r3, [pc, #256]	; (80006bc <main+0x1ac>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	4a3f      	ldr	r2, [pc, #252]	; (80006bc <main+0x1ac>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 80005c4:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <main+0x1ac>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a3c      	ldr	r2, [pc, #240]	; (80006bc <main+0x1ac>)
 80005ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ce:	60d3      	str	r3, [r2, #12]

  GPIOB->ODR &= ~GPIO_ODR_OD10; //Enable stepper driver
 80005d0:	4b3b      	ldr	r3, [pc, #236]	; (80006c0 <main+0x1b0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a3a      	ldr	r2, [pc, #232]	; (80006c0 <main+0x1b0>)
 80005d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005da:	6153      	str	r3, [r2, #20]
  HAL_TIM_Base_Start_IT(&htim10);
 80005dc:	4839      	ldr	r0, [pc, #228]	; (80006c4 <main+0x1b4>)
 80005de:	f001 fec3 	bl	8002368 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 80005e2:	f003 fce2 	bl	8003faa <xEventGroupCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a37      	ldr	r2, [pc, #220]	; (80006c8 <main+0x1b8>)
 80005ea:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <main+0x1b8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fdfa 	bl	80041ec <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(32, 1);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	2020      	movs	r0, #32
 80005fe:	f003 ffbf 	bl	8004580 <xQueueGenericCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a31      	ldr	r2, [pc, #196]	; (80006cc <main+0x1bc>)
 8000606:	6013      	str	r3, [r2, #0]
  programing_queue = xQueueCreate(64, 1);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	2040      	movs	r0, #64	; 0x40
 800060e:	f003 ffb7 	bl	8004580 <xQueueGenericCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a2e      	ldr	r2, [pc, #184]	; (80006d0 <main+0x1c0>)
 8000616:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 500);
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <main+0x1c4>)
 800061a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 800062c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fc6d 	bl	8003f12 <osThreadCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <main+0x1c8>)
 800063c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 500);
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x1cc>)
 8000640:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000644:	461d      	mov	r5, r3
 8000646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 8000652:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fc5a 	bl	8003f12 <osThreadCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <main+0x1d0>)
 8000662:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_comunication */
  osThreadDef(UART_comunication, uart_comunication, osPriorityNormal, 0, 160);
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <main+0x1d4>)
 8000666:	f107 0420 	add.w	r4, r7, #32
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_comunicationHandle = osThreadCreate(osThread(UART_comunication), NULL);
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fc47 	bl	8003f12 <osThreadCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <main+0x1d8>)
 8000688:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 500);
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0x1dc>)
 800068c:	1d3c      	adds	r4, r7, #4
 800068e:	461d      	mov	r5, r3
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fc36 	bl	8003f12 <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <main+0x1e0>)
 80006aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ac:	f003 fc2a 	bl	8003f04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x1a0>
 80006b2:	bf00      	nop
 80006b4:	20000334 	.word	0x20000334
 80006b8:	200003b0 	.word	0x200003b0
 80006bc:	40011000 	.word	0x40011000
 80006c0:	40020400 	.word	0x40020400
 80006c4:	20000290 	.word	0x20000290
 80006c8:	200003f8 	.word	0x200003f8
 80006cc:	2000032c 	.word	0x2000032c
 80006d0:	20000330 	.word	0x20000330
 80006d4:	08006568 	.word	0x08006568
 80006d8:	2000031c 	.word	0x2000031c
 80006dc:	08006590 	.word	0x08006590
 80006e0:	20000320 	.word	0x20000320
 80006e4:	080065c0 	.word	0x080065c0
 80006e8:	20000324 	.word	0x20000324
 80006ec:	080065f0 	.word	0x080065f0
 80006f0:	20000328 	.word	0x20000328

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f005 fee2 	bl	80064cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xb4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xb4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xb4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <SystemClock_Config+0xb8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemClock_Config+0xb8>)
 800073e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <SystemClock_Config+0xb8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f925 	bl	80019b4 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000770:	f000 fc03 	bl	8000f7a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fb88 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800079a:	f000 fbee 	bl	8000f7a <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_TIM10_Init+0x94>)
 80007ca:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <MX_TIM10_Init+0x98>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM10_Init+0x94>)
 80007d0:	220f      	movs	r2, #15
 80007d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM10_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_TIM10_Init+0x94>)
 80007dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80007e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM10_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM10_Init+0x94>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007ee:	4815      	ldr	r0, [pc, #84]	; (8000844 <MX_TIM10_Init+0x94>)
 80007f0:	f001 fd6a 	bl	80022c8 <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f000 fbbe 	bl	8000f7a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80007fe:	4811      	ldr	r0, [pc, #68]	; (8000844 <MX_TIM10_Init+0x94>)
 8000800:	f001 fe14 	bl	800242c <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800080a:	f000 fbb6 	bl	8000f7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080e:	2360      	movs	r3, #96	; 0x60
 8000810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8000812:	f241 3388 	movw	r3, #5000	; 0x1388
 8000816:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM10_Init+0x94>)
 8000828:	f002 f812 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8000832:	f000 fba2 	bl	8000f7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM10_Init+0x94>)
 8000838:	f000 fbf2 	bl	8001020 <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000290 	.word	0x20000290
 8000848:	40014400 	.word	0x40014400

0800084c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_USART1_UART_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000858:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800085c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x50>)
 800086e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000888:	f002 fb11 	bl	8002eae <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fb72 	bl	8000f7a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002d8 	.word	0x200002d8
 80008a0:	40011000 	.word	0x40011000

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_GPIO_Init+0x80>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_GPIO_Init+0x80>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_GPIO_Init+0x80>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_GPIO_Init+0x80>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <MX_GPIO_Init+0x80>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_GPIO_Init+0x80>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENA_stepper_Pin|DIR_stepper_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <MX_GPIO_Init+0x84>)
 80008fa:	f001 f841 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENA_stepper_Pin DIR_stepper_Pin */
  GPIO_InitStruct.Pin = ENA_stepper_Pin|DIR_stepper_Pin;
 80008fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_GPIO_Init+0x84>)
 8000918:	f000 feae 	bl	8001678 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400

0800092c <uart1_rx_callback>:

/* USER CODE BEGIN 4 */
void uart1_rx_callback(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <uart1_rx_callback+0x18>)
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	2300      	movs	r3, #0
 8000936:	2201      	movs	r2, #1
 8000938:	4903      	ldr	r1, [pc, #12]	; (8000948 <uart1_rx_callback+0x1c>)
 800093a:	f003 ff79 	bl	8004830 <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 800093e:	bf00      	nop

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000032c 	.word	0x2000032c
 8000948:	40011004 	.word	0x40011004

0800094c <enter_programing>:

void enter_programing()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	xEventGroupClearBits(EventGroup, 0x40);
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <enter_programing+0x34>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fc10 	bl	800417c <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <enter_programing+0x38>)
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <enter_programing+0x38>)
 8000960:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <enter_programing+0x38>)
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <enter_programing+0x3c>)
 8000966:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	erase_exm();
 800096a:	f000 f8db 	bl	8000b24 <erase_exm>
	xEventGroupSetBits(EventGroup, 0x80);
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <enter_programing+0x34>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fc39 	bl	80041ec <xEventGroupSetBits>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200003f8 	.word	0x200003f8
 8000984:	20000334 	.word	0x20000334
 8000988:	200003b0 	.word	0x200003b0

0800098c <exit_programing>:

void exit_programing()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	xEventGroupClearBits(EventGroup, 0x80);
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <exit_programing+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fbf0 	bl	800417c <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <exit_programing+0x44>)
 800099e:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <exit_programing+0x44>)
 80009a0:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <exit_programing+0x44>)
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <exit_programing+0x48>)
 80009a6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	exm.start_speed_value = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <exit_programing+0x44>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <exit_programing+0x44>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

	xEventGroupSetBits(EventGroup, 0x40);
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <exit_programing+0x40>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 fc13 	bl	80041ec <xEventGroupSetBits>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200003f8 	.word	0x200003f8
 80009d0:	20000334 	.word	0x20000334
 80009d4:	200003b0 	.word	0x200003b0

080009d8 <write_to_exm>:

void write_to_exm(uint8_t* start_of_data, uint8_t size_of_data)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size_of_data; i++){
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e017      	b.n	8000a1a <write_to_exm+0x42>
//		exm.execution_memory[exm.memory_pointer] = start_of_data[i];
		*exm.memory_pointer = start_of_data[i];
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	441a      	add	r2, r3
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <write_to_exm+0x84>)
 80009f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <write_to_exm+0x84>)
 80009fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <write_to_exm+0x84>)
 8000a00:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <write_to_exm+0x84>)
 8000a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <write_to_exm+0x88>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d303      	bcc.n	8000a14 <write_to_exm+0x3c>
			exm.memory_pointer = exm.execution_memory + 118;
 8000a0c:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <write_to_exm+0x8c>)
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <write_to_exm+0x84>)
 8000a10:	679a      	str	r2, [r3, #120]	; 0x78
			return;
 8000a12:	e01d      	b.n	8000a50 <write_to_exm+0x78>
	for(int i = 0; i < size_of_data; i++){
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dbe3      	blt.n	80009ea <write_to_exm+0x12>
		}
	}
//	exm.sizes_of_instruction[exm.sizes_pointer] = size_of_data;
	*exm.sizes_pointer = size_of_data;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <write_to_exm+0x84>)
 8000a24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000a28:	78fa      	ldrb	r2, [r7, #3]
 8000a2a:	701a      	strb	r2, [r3, #0]
	exm.sizes_pointer++;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <write_to_exm+0x84>)
 8000a2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <write_to_exm+0x84>)
 8000a36:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <write_to_exm+0x84>)
 8000a3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <write_to_exm+0x90>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d304      	bcc.n	8000a50 <write_to_exm+0x78>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <write_to_exm+0x94>)
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <write_to_exm+0x84>)
 8000a4a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return;
 8000a4e:	bf00      	nop
	}
}
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000334 	.word	0x20000334
 8000a60:	200003ab 	.word	0x200003ab
 8000a64:	200003aa 	.word	0x200003aa
 8000a68:	200003ec 	.word	0x200003ec
 8000a6c:	200003eb 	.word	0x200003eb

08000a70 <read_from_exm>:

void read_from_exm()
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	e008      	b.n	8000a8e <read_from_exm+0x1e>
		exm.current_instruction[i] = 0;
 8000a7c:	4a24      	ldr	r2, [pc, #144]	; (8000b10 <read_from_exm+0xa0>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	33bc      	adds	r3, #188	; 0xbc
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	ddf3      	ble.n	8000a7c <read_from_exm+0xc>
	}
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	e019      	b.n	8000ace <read_from_exm+0x5e>
		exm.current_instruction[i] = *exm.memory_pointer;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <read_from_exm+0xa0>)
 8000a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a9e:	7819      	ldrb	r1, [r3, #0]
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <read_from_exm+0xa0>)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	33bc      	adds	r3, #188	; 0xbc
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <read_from_exm+0xa0>)
 8000aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <read_from_exm+0xa0>)
 8000ab4:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <read_from_exm+0xa0>)
 8000ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000aba:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <read_from_exm+0xa4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d303      	bcc.n	8000ac8 <read_from_exm+0x58>
			exm.memory_pointer = exm.execution_memory + 118;
 8000ac0:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <read_from_exm+0xa8>)
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <read_from_exm+0xa0>)
 8000ac4:	679a      	str	r2, [r3, #120]	; 0x78
			return ;
 8000ac6:	e01d      	b.n	8000b04 <read_from_exm+0x94>
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <read_from_exm+0xa0>)
 8000ad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	4293      	cmp	r3, r2
 8000adc:	dbdd      	blt.n	8000a9a <read_from_exm+0x2a>
		}
	}
	exm.sizes_pointer++;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <read_from_exm+0xa0>)
 8000ae0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <read_from_exm+0xa0>)
 8000ae8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <read_from_exm+0xa0>)
 8000aee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <read_from_exm+0xac>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d304      	bcc.n	8000b02 <read_from_exm+0x92>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <read_from_exm+0xb0>)
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <read_from_exm+0xa0>)
 8000afc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return ;
 8000b00:	e000      	b.n	8000b04 <read_from_exm+0x94>
	}
	return ;
 8000b02:	bf00      	nop
}
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000334 	.word	0x20000334
 8000b14:	200003ab 	.word	0x200003ab
 8000b18:	200003aa 	.word	0x200003aa
 8000b1c:	200003ec 	.word	0x200003ec
 8000b20:	200003eb 	.word	0x200003eb

08000b24 <erase_exm>:

void erase_exm()
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	e007      	b.n	8000b40 <erase_exm+0x1c>
		exm.execution_memory[i] = 0;
 8000b30:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <erase_exm+0x50>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b76      	cmp	r3, #118	; 0x76
 8000b44:	d9f4      	bls.n	8000b30 <erase_exm+0xc>
	}
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	e008      	b.n	8000b5e <erase_exm+0x3a>
		exm.sizes_of_instruction[i] = 1;
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <erase_exm+0x50>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	337c      	adds	r3, #124	; 0x7c
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2b3b      	cmp	r3, #59	; 0x3b
 8000b62:	d9f3      	bls.n	8000b4c <erase_exm+0x28>
	}
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000334 	.word	0x20000334

08000b78 <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <programing_mode+0xa8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	f003 fa26 	bl	8003fe0 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	2211      	movs	r2, #17
 8000b98:	4922      	ldr	r1, [pc, #136]	; (8000c24 <programing_mode+0xac>)
 8000b9a:	4823      	ldr	r0, [pc, #140]	; (8000c28 <programing_mode+0xb0>)
 8000b9c:	f002 f9d4 	bl	8002f48 <HAL_UART_Transmit>
	  //vTaskDelay(200);
	  char instruction_for_programing = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]
	  xQueueReceive(programing_queue, &instruction_for_programing, portMAX_DELAY);
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <programing_mode+0xb4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f107 0117 	add.w	r1, r7, #23
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fed9 	bl	8004968 <xQueueReceive>
	  switch (instruction_for_programing) {
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	2b53      	cmp	r3, #83	; 0x53
 8000bba:	d002      	beq.n	8000bc2 <programing_mode+0x4a>
 8000bbc:	2b54      	cmp	r3, #84	; 0x54
 8000bbe:	d017      	beq.n	8000bf0 <programing_mode+0x78>
		case 'T':
			uint8_t data2[4] = {'T', (uint8_t)(exm.top_speed_value), (uint8_t)((exm.top_speed_value>>8)), 0};
			write_to_exm(data2, sizeof(data2));
			break;
		default:
			break;
 8000bc0:	e02d      	b.n	8000c1e <programing_mode+0xa6>
			uint8_t data1[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
 8000bc2:	2353      	movs	r3, #83	; 0x53
 8000bc4:	743b      	strb	r3, [r7, #16]
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <programing_mode+0xb8>)
 8000bc8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	747b      	strb	r3, [r7, #17]
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <programing_mode+0xb8>)
 8000bd2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	74bb      	strb	r3, [r7, #18]
 8000bde:	2300      	movs	r3, #0
 8000be0:	74fb      	strb	r3, [r7, #19]
			write_to_exm(data1, sizeof(data1));
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2104      	movs	r1, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fef5 	bl	80009d8 <write_to_exm>
			break;
 8000bee:	e016      	b.n	8000c1e <programing_mode+0xa6>
			uint8_t data2[4] = {'T', (uint8_t)(exm.top_speed_value), (uint8_t)((exm.top_speed_value>>8)), 0};
 8000bf0:	2354      	movs	r3, #84	; 0x54
 8000bf2:	733b      	strb	r3, [r7, #12]
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <programing_mode+0xb8>)
 8000bf6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	737b      	strb	r3, [r7, #13]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <programing_mode+0xb8>)
 8000c00:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	73bb      	strb	r3, [r7, #14]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
			write_to_exm(data2, sizeof(data2));
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2104      	movs	r1, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fede 	bl	80009d8 <write_to_exm>
			break;
 8000c1c:	bf00      	nop
  {
 8000c1e:	e7af      	b.n	8000b80 <programing_mode+0x8>
 8000c20:	200003f8 	.word	0x200003f8
 8000c24:	0800660c 	.word	0x0800660c
 8000c28:	200002d8 	.word	0x200002d8
 8000c2c:	20000330 	.word	0x20000330
 8000c30:	20000334 	.word	0x20000334

08000c34 <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8000c3c:	4b94      	ldr	r3, [pc, #592]	; (8000e90 <interpreter+0x25c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f107 010f 	add.w	r1, r7, #15
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 fe8d 	bl	8004968 <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000c4e:	f107 010f 	add.w	r1, r7, #15
 8000c52:	230a      	movs	r3, #10
 8000c54:	2201      	movs	r2, #1
 8000c56:	488f      	ldr	r0, [pc, #572]	; (8000e94 <interpreter+0x260>)
 8000c58:	f002 f976 	bl	8002f48 <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da04      	bge.n	8000c6e <interpreter+0x3a>
		  pData &= ~(1<<7);
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	73fb      	strb	r3, [r7, #15]
	  }
	  __asm__ volatile("NOP");
 8000c6e:	bf00      	nop
	  char temp = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73bb      	strb	r3, [r7, #14]
	  switch (pData) {
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 8100 	beq.w	8000e7c <interpreter+0x248>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f2c0 80ff 	blt.w	8000e80 <interpreter+0x24c>
 8000c82:	2b54      	cmp	r3, #84	; 0x54
 8000c84:	f300 80fc 	bgt.w	8000e80 <interpreter+0x24c>
 8000c88:	2b45      	cmp	r3, #69	; 0x45
 8000c8a:	f2c0 80f9 	blt.w	8000e80 <interpreter+0x24c>
 8000c8e:	3b45      	subs	r3, #69	; 0x45
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	f200 80f5 	bhi.w	8000e80 <interpreter+0x24c>
 8000c96:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <interpreter+0x68>)
 8000c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9c:	08000d29 	.word	0x08000d29
 8000ca0:	08000e81 	.word	0x08000e81
 8000ca4:	08000e81 	.word	0x08000e81
 8000ca8:	08000e81 	.word	0x08000e81
 8000cac:	08000e81 	.word	0x08000e81
 8000cb0:	08000e81 	.word	0x08000e81
 8000cb4:	08000e81 	.word	0x08000e81
 8000cb8:	08000e81 	.word	0x08000e81
 8000cbc:	08000e81 	.word	0x08000e81
 8000cc0:	08000e81 	.word	0x08000e81
 8000cc4:	08000e81 	.word	0x08000e81
 8000cc8:	08000cdd 	.word	0x08000cdd
 8000ccc:	08000e81 	.word	0x08000e81
 8000cd0:	08000e81 	.word	0x08000e81
 8000cd4:	08000d2f 	.word	0x08000d2f
 8000cd8:	08000dd7 	.word	0x08000dd7
		case 'P':
			xQueueReceive(uart_queue_rx, &pData, 5);
 8000cdc:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <interpreter+0x25c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f107 010f 	add.w	r1, r7, #15
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fe3e 	bl	8004968 <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000cec:	f107 010f 	add.w	r1, r7, #15
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4867      	ldr	r0, [pc, #412]	; (8000e94 <interpreter+0x260>)
 8000cf6:	f002 f927 	bl	8002f48 <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	da04      	bge.n	8000d0c <interpreter+0xd8>
					  pData &= ~(1<<7);
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	73fb      	strb	r3, [r7, #15]
				  }
			__asm__ volatile("NOP");
 8000d0c:	bf00      	nop
			switch (pData) {
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b6f      	cmp	r3, #111	; 0x6f
 8000d12:	d002      	beq.n	8000d1a <interpreter+0xe6>
 8000d14:	2b78      	cmp	r3, #120	; 0x78
 8000d16:	d003      	beq.n	8000d20 <interpreter+0xec>
//					exm.memory_pointer = 0;
//					xEventGroupSetBits(EventGroup, 0x40);
					exit_programing();
					break;
				default:
					break;
 8000d18:	e005      	b.n	8000d26 <interpreter+0xf2>
					enter_programing();
 8000d1a:	f7ff fe17 	bl	800094c <enter_programing>
					break;
 8000d1e:	e002      	b.n	8000d26 <interpreter+0xf2>
					exit_programing();
 8000d20:	f7ff fe34 	bl	800098c <exit_programing>
					break;
 8000d24:	bf00      	nop
			}
			break;
 8000d26:	e0b0      	b.n	8000e8a <interpreter+0x256>
	    case 'E':
//	    	xEventGroupClearBits(EventGroup, 0x80);
//	    	exm.memory_pointer = 0;
//	    	xEventGroupSetBits(EventGroup, 0x40);
	    	exit_programing();
 8000d28:	f7ff fe30 	bl	800098c <exit_programing>
	    	break;
 8000d2c:	e0ad      	b.n	8000e8a <interpreter+0x256>
		case 'S':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000d2e:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <interpreter+0x264>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fa21 	bl	800417c <xEventGroupClearBits>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d40:	2b80      	cmp	r3, #128	; 0x80
 8000d42:	f040 809f 	bne.w	8000e84 <interpreter+0x250>
			exm.start_speed_value = 0;
 8000d46:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <interpreter+0x268>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			temp = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73bb      	strb	r3, [r7, #14]
			for(int i = 0; i < 4; i++){
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	e030      	b.n	8000dba <interpreter+0x186>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000d58:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <interpreter+0x25c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f107 010e 	add.w	r1, r7, #14
 8000d60:	2205      	movs	r2, #5
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fe00 	bl	8004968 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	2b0d      	cmp	r3, #13
 8000d6c:	d02a      	beq.n	8000dc4 <interpreter+0x190>
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d027      	beq.n	8000dc4 <interpreter+0x190>
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d024      	beq.n	8000dc4 <interpreter+0x190>
				if(i == 3) break;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d020      	beq.n	8000dc2 <interpreter+0x18e>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	da04      	bge.n	8000d92 <interpreter+0x15e>
					temp &= ~(1<<7);
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73bb      	strb	r3, [r7, #14]
			    }
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 8000d92:	4b42      	ldr	r3, [pc, #264]	; (8000e9c <interpreter+0x268>)
 8000d94:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4413      	add	r3, r2
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	3b30      	subs	r3, #48	; 0x30
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <interpreter+0x268>)
 8000db0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			for(int i = 0; i < 4; i++){
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3301      	adds	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	ddcb      	ble.n	8000d58 <interpreter+0x124>
 8000dc0:	e000      	b.n	8000dc4 <interpreter+0x190>
				if(i == 3) break;
 8000dc2:	bf00      	nop
			}
//			uint8_t data[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
//			write_to_exm(data, sizeof(data));
			xQueueSendToBack(programing_queue, (void*)"S", 100);
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <interpreter+0x26c>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	2264      	movs	r2, #100	; 0x64
 8000dcc:	4935      	ldr	r1, [pc, #212]	; (8000ea4 <interpreter+0x270>)
 8000dce:	f003 fc31 	bl	8004634 <xQueueGenericSend>
			//exm.
			__asm__ volatile("NOP");
 8000dd2:	bf00      	nop
			break;
 8000dd4:	e059      	b.n	8000e8a <interpreter+0x256>
		case 'T':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <interpreter+0x264>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 f9cd 	bl	800417c <xEventGroupClearBits>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de8:	2b80      	cmp	r3, #128	; 0x80
 8000dea:	d14d      	bne.n	8000e88 <interpreter+0x254>
			exm.top_speed_value = 0;
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <interpreter+0x268>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			temp = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73bb      	strb	r3, [r7, #14]
			for(int i = 0; i < 4; i++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e030      	b.n	8000e60 <interpreter+0x22c>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <interpreter+0x25c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f107 010e 	add.w	r1, r7, #14
 8000e06:	2205      	movs	r2, #5
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fdad 	bl	8004968 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	2b0d      	cmp	r3, #13
 8000e12:	d02a      	beq.n	8000e6a <interpreter+0x236>
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d027      	beq.n	8000e6a <interpreter+0x236>
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d024      	beq.n	8000e6a <interpreter+0x236>
				if(i == 3) break;
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d020      	beq.n	8000e68 <interpreter+0x234>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da04      	bge.n	8000e38 <interpreter+0x204>
					temp &= ~(1<<7);
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73bb      	strb	r3, [r7, #14]
			    }
				exm.top_speed_value = (exm.top_speed_value*10) + (temp - 48);
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <interpreter+0x268>)
 8000e3a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000e3e:	461a      	mov	r2, r3
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	3b30      	subs	r3, #48	; 0x30
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <interpreter+0x268>)
 8000e56:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			for(int i = 0; i < 4; i++){
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	ddcb      	ble.n	8000dfe <interpreter+0x1ca>
 8000e66:	e000      	b.n	8000e6a <interpreter+0x236>
				if(i == 3) break;
 8000e68:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"T", 100);
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <interpreter+0x26c>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2264      	movs	r2, #100	; 0x64
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <interpreter+0x274>)
 8000e74:	f003 fbde 	bl	8004634 <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000e78:	bf00      	nop
			break;
 8000e7a:	e006      	b.n	8000e8a <interpreter+0x256>
	    case 0:
			break;
 8000e7c:	bf00      	nop
 8000e7e:	e004      	b.n	8000e8a <interpreter+0x256>
		default:
			break;
 8000e80:	bf00      	nop
 8000e82:	e002      	b.n	8000e8a <interpreter+0x256>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000e84:	bf00      	nop
 8000e86:	e000      	b.n	8000e8a <interpreter+0x256>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000e88:	bf00      	nop
	}

	  pData = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  {
 8000e8e:	e6d5      	b.n	8000c3c <interpreter+0x8>
 8000e90:	2000032c 	.word	0x2000032c
 8000e94:	200002d8 	.word	0x200002d8
 8000e98:	200003f8 	.word	0x200003f8
 8000e9c:	20000334 	.word	0x20000334
 8000ea0:	20000330 	.word	0x20000330
 8000ea4:	08006620 	.word	0x08006620
 8000ea8:	08006624 	.word	0x08006624

08000eac <uart_comunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_comunication */
void uart_comunication(void const * argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_comunication */
	GPIOB->ODR |= GPIO_ODR_OD9;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <uart_comunication+0x20>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <uart_comunication+0x20>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6153      	str	r3, [r2, #20]
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <uart_comunication+0x24>)
 8000ec4:	f001 fb0c 	bl	80024e0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
 8000ec8:	e7fe      	b.n	8000ec8 <uart_comunication+0x1c>
 8000eca:	bf00      	nop
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	20000290 	.word	0x20000290

08000ed4 <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <execution_from_memory+0x74>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	f003 f878 	bl	8003fe0 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	4915      	ldr	r1, [pc, #84]	; (8000f4c <execution_from_memory+0x78>)
 8000ef6:	4816      	ldr	r0, [pc, #88]	; (8000f50 <execution_from_memory+0x7c>)
 8000ef8:	f002 f826 	bl	8002f48 <HAL_UART_Transmit>
	  read_from_exm();
 8000efc:	f7ff fdb8 	bl	8000a70 <read_from_exm>
	  HAL_UART_Transmit(&huart1, exm.current_instruction, sizeof(exm.current_instruction), 100);
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	2204      	movs	r2, #4
 8000f04:	4913      	ldr	r1, [pc, #76]	; (8000f54 <execution_from_memory+0x80>)
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <execution_from_memory+0x7c>)
 8000f08:	f002 f81e 	bl	8002f48 <HAL_UART_Transmit>
	  switch (exm.current_instruction[0]) {
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <execution_from_memory+0x84>)
 8000f0e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8000f12:	2b53      	cmp	r3, #83	; 0x53
 8000f14:	d113      	bne.n	8000f3e <execution_from_memory+0x6a>
		case 'S':
			exm.start_speed_value = 0;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <execution_from_memory+0x84>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			exm.start_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <execution_from_memory+0x84>)
 8000f20:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <execution_from_memory+0x84>)
 8000f28:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <execution_from_memory+0x84>)
 8000f38:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			break;
 8000f3c:	e000      	b.n	8000f40 <execution_from_memory+0x6c>
		default:
			break;
 8000f3e:	bf00      	nop
	}
	  vTaskDelay(200);
 8000f40:	20c8      	movs	r0, #200	; 0xc8
 8000f42:	f004 f895 	bl	8005070 <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8000f46:	e7c9      	b.n	8000edc <execution_from_memory+0x8>
 8000f48:	200003f8 	.word	0x200003f8
 8000f4c:	08006628 	.word	0x08006628
 8000f50:	200002d8 	.word	0x200002d8
 8000f54:	200003f0 	.word	0x200003f0
 8000f58:	20000334 	.word	0x20000334

08000f5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f6c:	d101      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f6e:	f000 f9ef 	bl	8001350 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7e:	b672      	cpsid	i
}
 8000f80:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_MspInit+0x54>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <HAL_MspInit+0x54>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x54>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_MspInit+0x54>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_MspInit+0x54>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_MspInit+0x54>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	f06f 0001 	mvn.w	r0, #1
 8000fca:	f000 fa99 	bl	8001500 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <HAL_TIM_Base_MspInit+0x3c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10d      	bne.n	800100a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40014400 	.word	0x40014400
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11e      	bne.n	8001080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = PUL_stepper_Pin;
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	2301      	movs	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106c:	2302      	movs	r3, #2
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001070:	2303      	movs	r3, #3
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUL_stepper_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_TIM_MspPostInit+0x70>)
 800107c:	f000 fafc 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40014400 	.word	0x40014400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020400 	.word	0x40020400

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <HAL_UART_MspInit+0x94>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d134      	bne.n	8001120 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_UART_MspInit+0x98>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a1b      	ldr	r2, [pc, #108]	; (800112c <HAL_UART_MspInit+0x98>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_UART_MspInit+0x98>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0x98>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_UART_MspInit+0x98>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_UART_MspInit+0x98>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001100:	2307      	movs	r3, #7
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_UART_MspInit+0x9c>)
 800110c:	f000 fab4 	bl	8001678 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2105      	movs	r1, #5
 8001114:	2025      	movs	r0, #37	; 0x25
 8001116:	f000 f9f3 	bl	8001500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800111a:	2025      	movs	r0, #37	; 0x25
 800111c:	f000 fa0c 	bl	8001538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40011000 	.word	0x40011000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08e      	sub	sp, #56	; 0x38
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_InitTick+0xe8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a33      	ldr	r2, [pc, #204]	; (800121c <HAL_InitTick+0xe8>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_InitTick+0xe8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001160:	f107 0210 	add.w	r2, r7, #16
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f87a 	bl	8002264 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800117a:	f001 f84b 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 800117e:	6378      	str	r0, [r7, #52]	; 0x34
 8001180:	e004      	b.n	800118c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001182:	f001 f847 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8001186:	4603      	mov	r3, r0
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_InitTick+0xec>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9b      	lsrs	r3, r3, #18
 8001196:	3b01      	subs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_InitTick+0xf0>)
 800119c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_InitTick+0xf0>)
 80011a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_InitTick+0xf0>)
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_InitTick+0xf0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_InitTick+0xf0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_InitTick+0xf0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <HAL_InitTick+0xf0>)
 80011c4:	f001 f880 	bl	80022c8 <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11b      	bne.n	800120e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <HAL_InitTick+0xf0>)
 80011d8:	f001 f8c6 	bl	8002368 <HAL_TIM_Base_Start_IT>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ea:	201c      	movs	r0, #28
 80011ec:	f000 f9a4 	bl	8001538 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d808      	bhi.n	8001208 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80011f6:	2200      	movs	r2, #0
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	201c      	movs	r0, #28
 80011fc:	f000 f980 	bl	8001500 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_InitTick+0xf4>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e002      	b.n	800120e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800120e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001212:	4618      	mov	r0, r3
 8001214:	3738      	adds	r7, #56	; 0x38
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	431bde83 	.word	0x431bde83
 8001224:	200003fc 	.word	0x200003fc
 8001228:	20000004 	.word	0x20000004

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM2_IRQHandler+0x10>)
 800125e:	f001 f9ef 	bl	8002640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200003fc 	.word	0x200003fc

0800126c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <USART1_IRQHandler+0x20>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0320 	and.w	r3, r3, #32
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 800127c:	f7ff fb56 	bl	800092c <uart1_rx_callback>
		__asm__ volatile("NOP");
 8001280:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <USART1_IRQHandler+0x24>)
 8001284:	f001 fef2 	bl	800306c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40011000 	.word	0x40011000
 8001290:	200002d8 	.word	0x200002d8

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d4:	4c0b      	ldr	r4, [pc, #44]	; (8001304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012e2:	f7ff ffd7 	bl	8001294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f005 f8f9 	bl	80064dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff f911 	bl	8000510 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012fc:	08006668 	.word	0x08006668
  ldr r2, =_sbss
 8001300:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001304:	2000419c 	.word	0x2000419c

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_Init+0x40>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_Init+0x40>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_Init+0x40>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f8d8 	bl	80014ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff fefa 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fe20 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	20000444 	.word	0x20000444

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000444 	.word	0x20000444

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff4c 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001512:	f7ff ff61 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	6978      	ldr	r0, [r7, #20]
 800151e:	f7ff ffb1 	bl	8001484 <NVIC_EncodePriority>
 8001522:	4602      	mov	r2, r0
 8001524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff80 	bl	8001430 <__NVIC_SetPriority>
}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff54 	bl	80013f4 <__NVIC_EnableIRQ>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001562:	f7ff ff09 	bl	8001378 <HAL_GetTick>
 8001566:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d008      	beq.n	8001586 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e052      	b.n	800162c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0216 	bic.w	r2, r2, #22
 8001594:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <HAL_DMA_Abort+0x62>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0208 	bic.w	r2, r2, #8
 80015c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	e013      	b.n	8001600 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d8:	f7ff fece 	bl	8001378 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d90c      	bls.n	8001600 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2220      	movs	r2, #32
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e015      	b.n	800162c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e4      	bne.n	80015d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	223f      	movs	r2, #63	; 0x3f
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d004      	beq.n	8001652 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00c      	b.n	800166c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2205      	movs	r2, #5
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e159      	b.n	8001948 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8148 	bne.w	8001942 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d005      	beq.n	80016ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d130      	bne.n	800172c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 0201 	and.w	r2, r3, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b03      	cmp	r3, #3
 8001736:	d017      	beq.n	8001768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d123      	bne.n	80017bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	69b9      	ldr	r1, [r7, #24]
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0203 	and.w	r2, r3, #3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a2 	beq.w	8001942 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a56      	ldr	r2, [pc, #344]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b54      	ldr	r3, [pc, #336]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181a:	4a52      	ldr	r2, [pc, #328]	; (8001964 <HAL_GPIO_Init+0x2ec>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a49      	ldr	r2, [pc, #292]	; (8001968 <HAL_GPIO_Init+0x2f0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d019      	beq.n	800187a <HAL_GPIO_Init+0x202>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a48      	ldr	r2, [pc, #288]	; (800196c <HAL_GPIO_Init+0x2f4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x1fe>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a47      	ldr	r2, [pc, #284]	; (8001970 <HAL_GPIO_Init+0x2f8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00d      	beq.n	8001872 <HAL_GPIO_Init+0x1fa>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a46      	ldr	r2, [pc, #280]	; (8001974 <HAL_GPIO_Init+0x2fc>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x1f6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_GPIO_Init+0x300>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_GPIO_Init+0x1f2>
 8001866:	2304      	movs	r3, #4
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x204>
 800186a:	2307      	movs	r3, #7
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x204>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x204>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x204>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x204>
 800187a:	2300      	movs	r3, #0
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <HAL_GPIO_Init+0x2ec>)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_GPIO_Init+0x304>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a2f      	ldr	r2, [pc, #188]	; (800197c <HAL_GPIO_Init+0x304>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_GPIO_Init+0x304>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a24      	ldr	r2, [pc, #144]	; (800197c <HAL_GPIO_Init+0x304>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ee:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_GPIO_Init+0x304>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001912:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_GPIO_Init+0x304>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_GPIO_Init+0x304>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_GPIO_Init+0x304>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3301      	adds	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	f67f aea2 	bls.w	8001694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40013800 	.word	0x40013800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40021000 	.word	0x40021000
 800197c:	40013c00 	.word	0x40013c00

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800199c:	e003      	b.n	80019a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	041a      	lsls	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	619a      	str	r2, [r3, #24]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e267      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d075      	beq.n	8001abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d00c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019de:	4b85      	ldr	r3, [pc, #532]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d112      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4b82      	ldr	r3, [pc, #520]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f6:	d10b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	4b7e      	ldr	r3, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d05b      	beq.n	8001abc <HAL_RCC_OscConfig+0x108>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d157      	bne.n	8001abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e242      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a18:	d106      	bne.n	8001a28 <HAL_RCC_OscConfig+0x74>
 8001a1a:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0xb0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x98>
 8001a32:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6f      	ldr	r2, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6c      	ldr	r2, [pc, #432]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0xb0>
 8001a4c:	4b69      	ldr	r3, [pc, #420]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a68      	ldr	r2, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fc84 	bl	8001378 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fc80 	bl	8001378 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e207      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0xc0>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc70 	bl	8001378 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fc6c 	bl	8001378 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1f3      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0xe8>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aca:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d11c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d116      	bne.n	8001b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x152>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e1c7      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	e03a      	b.n	8001b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_OscConfig+0x244>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fc25 	bl	8001378 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fc21 	bl	8001378 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1a8      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x244>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fc04 	bl	8001378 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff fc00 	bl	8001378 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e187      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d036      	beq.n	8001c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x248>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fbe4 	bl	8001378 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fbe0 	bl	8001378 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e167      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x200>
 8001bd2:	e01b      	b.n	8001c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_OscConfig+0x248>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fbcd 	bl	8001378 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	e00e      	b.n	8001c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be2:	f7ff fbc9 	bl	8001378 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d907      	bls.n	8001c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e150      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	42470000 	.word	0x42470000
 8001bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ea      	bne.n	8001be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8097 	beq.w	8001d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b7d      	ldr	r3, [pc, #500]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a7c      	ldr	r2, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a73      	ldr	r2, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb89 	bl	8001378 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff fb85 	bl	8001378 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e10c      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x474>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2ea>
 8001c90:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a63      	ldr	r2, [pc, #396]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x324>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x30c>
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a5e      	ldr	r2, [pc, #376]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a5b      	ldr	r2, [pc, #364]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x324>
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a57      	ldr	r2, [pc, #348]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fb4a 	bl	8001378 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb46 	bl	8001378 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0cb      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ee      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x334>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fb34 	bl	8001378 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7ff fb30 	bl	8001378 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0b5      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ee      	bne.n	8001d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a38      	ldr	r2, [pc, #224]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80a1 	beq.w	8001e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d05c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d141      	bne.n	8001dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_RCC_OscConfig+0x478>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb04 	bl	8001378 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff fb00 	bl	8001378 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e087      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	085b      	lsrs	r3, r3, #1
 8001daa:	3b01      	subs	r3, #1
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	491b      	ldr	r1, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x478>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fad9 	bl	8001378 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff fad5 	bl	8001378 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e05c      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x416>
 8001de8:	e054      	b.n	8001e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x478>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fac2 	bl	8001378 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fabe 	bl	8001378 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e045      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x444>
 8001e16:	e03d      	b.n	8001e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e038      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x4ec>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d028      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d121      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d11a      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e60:	4013      	ands	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	085b      	lsrs	r3, r3, #1
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0cc      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d90c      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b65      	ldr	r3, [pc, #404]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d044      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d119      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d003      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e06f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e067      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4934      	ldr	r1, [pc, #208]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff f9f0 	bl	8001378 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7ff f9ec 	bl	8001378 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e04f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d20c      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f821 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f872 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00
 8002060:	40023800 	.word	0x40023800
 8002064:	08006640 	.word	0x08006640
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b090      	sub	sp, #64	; 0x40
 8002076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d00d      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002094:	2b08      	cmp	r3, #8
 8002096:	f200 80a1 	bhi.w	80021dc <HAL_RCC_GetSysClockFreq+0x16c>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x34>
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x3a>
 80020a2:	e09b      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80020a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020a8:	e09b      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020aa:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020ae:	e098      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ba:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d028      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	099b      	lsrs	r3, r3, #6
 80020cc:	2200      	movs	r2, #0
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	627a      	str	r2, [r7, #36]	; 0x24
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020d8:	2100      	movs	r1, #0
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020dc:	fb03 f201 	mul.w	r2, r3, r1
 80020e0:	2300      	movs	r3, #0
 80020e2:	fb00 f303 	mul.w	r3, r0, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	4a43      	ldr	r2, [pc, #268]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ea:	fba0 1202 	umull	r1, r2, r0, r2
 80020ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020f0:	460a      	mov	r2, r1
 80020f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80020f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f6:	4413      	add	r3, r2
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fc:	2200      	movs	r2, #0
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	61fa      	str	r2, [r7, #28]
 8002102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002106:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800210a:	f7fe f869 	bl	80001e0 <__aeabi_uldivmod>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4613      	mov	r3, r2
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002116:	e053      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	2200      	movs	r2, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	617a      	str	r2, [r7, #20]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800212a:	f04f 0b00 	mov.w	fp, #0
 800212e:	4652      	mov	r2, sl
 8002130:	465b      	mov	r3, fp
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	0159      	lsls	r1, r3, #5
 800213c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002140:	0150      	lsls	r0, r2, #5
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	ebb2 080a 	subs.w	r8, r2, sl
 800214a:	eb63 090b 	sbc.w	r9, r3, fp
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800215a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800215e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002162:	ebb2 0408 	subs.w	r4, r2, r8
 8002166:	eb63 0509 	sbc.w	r5, r3, r9
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	00eb      	lsls	r3, r5, #3
 8002174:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002178:	00e2      	lsls	r2, r4, #3
 800217a:	4614      	mov	r4, r2
 800217c:	461d      	mov	r5, r3
 800217e:	eb14 030a 	adds.w	r3, r4, sl
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	eb45 030b 	adc.w	r3, r5, fp
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002196:	4629      	mov	r1, r5
 8002198:	028b      	lsls	r3, r1, #10
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a0:	4621      	mov	r1, r4
 80021a2:	028a      	lsls	r2, r1, #10
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021aa:	2200      	movs	r2, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	60fa      	str	r2, [r7, #12]
 80021b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b4:	f7fe f814 	bl	80001e0 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3740      	adds	r7, #64	; 0x40
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	017d7840 	.word	0x017d7840

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	08006650 	.word	0x08006650

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffdc 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0b5b      	lsrs	r3, r3, #13
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08006650 	.word	0x08006650

08002264 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	220f      	movs	r2, #15
 8002272:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_GetClockConfig+0x5c>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	08db      	lsrs	r3, r3, #3
 800229e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_RCC_GetClockConfig+0x60>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0207 	and.w	r2, r3, #7
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	601a      	str	r2, [r3, #0]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e041      	b.n	800235e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fe74 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 fb8c 	bl	8002a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d001      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e044      	b.n	800240a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_TIM_Base_Start_IT+0xb0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d018      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x6c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d013      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x6c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1a      	ldr	r2, [pc, #104]	; (800241c <HAL_TIM_Base_Start_IT+0xb4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00e      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x6c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_TIM_Base_Start_IT+0xb8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x6c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_TIM_Base_Start_IT+0xbc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d004      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x6c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a16      	ldr	r2, [pc, #88]	; (8002428 <HAL_TIM_Base_Start_IT+0xc0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d111      	bne.n	80023f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d010      	beq.n	8002408 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f6:	e007      	b.n	8002408 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800
 8002424:	40000c00 	.word	0x40000c00
 8002428:	40014000 	.word	0x40014000

0800242c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e041      	b.n	80024c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f839 	bl	80024ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 fada 	bl	8002a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_TIM_PWM_Start+0x24>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e022      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b04      	cmp	r3, #4
 8002508:	d109      	bne.n	800251e <HAL_TIM_PWM_Start+0x3e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e015      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d109      	bne.n	8002538 <HAL_TIM_PWM_Start+0x58>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e008      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e068      	b.n	8002624 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d104      	bne.n	8002562 <HAL_TIM_PWM_Start+0x82>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002560:	e013      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d104      	bne.n	8002572 <HAL_TIM_PWM_Start+0x92>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002570:	e00b      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start+0xa2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	e003      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	6839      	ldr	r1, [r7, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fc52 	bl	8002e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_TIM_PWM_Start+0x14c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_TIM_PWM_Start+0x14c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d013      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_TIM_PWM_Start+0x150>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_TIM_PWM_Start+0x154>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a16      	ldr	r2, [pc, #88]	; (8002638 <HAL_TIM_PWM_Start+0x158>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_TIM_PWM_Start+0x15c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d111      	bne.n	8002612 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d010      	beq.n	8002622 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	e007      	b.n	8002622 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40010000 	.word	0x40010000
 8002630:	40000400 	.word	0x40000400
 8002634:	40000800 	.word	0x40000800
 8002638:	40000c00 	.word	0x40000c00
 800263c:	40014000 	.word	0x40014000

08002640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b02      	cmp	r3, #2
 8002654:	d122      	bne.n	800269c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b02      	cmp	r3, #2
 8002662:	d11b      	bne.n	800269c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0202 	mvn.w	r2, #2
 800266c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9b0 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 8002688:	e005      	b.n	8002696 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9a2 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f9b3 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d122      	bne.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d11b      	bne.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0204 	mvn.w	r2, #4
 80026c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f986 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f978 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f989 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b08      	cmp	r3, #8
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0208 	mvn.w	r2, #8
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f95c 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f94e 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f95f 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b10      	cmp	r3, #16
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0210 	mvn.w	r2, #16
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2208      	movs	r2, #8
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f932 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f924 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f935 	bl	80029fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0201 	mvn.w	r2, #1
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fbcc 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fb55 	bl	8002e9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8fa 	bl	8002a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b20      	cmp	r3, #32
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0220 	mvn.w	r2, #32
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fb1f 	bl	8002e86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800286a:	2302      	movs	r3, #2
 800286c:	e0ae      	b.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	f200 809f 	bhi.w	80029bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028b9 	.word	0x080028b9
 8002888:	080029bd 	.word	0x080029bd
 800288c:	080029bd 	.word	0x080029bd
 8002890:	080029bd 	.word	0x080029bd
 8002894:	080028f9 	.word	0x080028f9
 8002898:	080029bd 	.word	0x080029bd
 800289c:	080029bd 	.word	0x080029bd
 80028a0:	080029bd 	.word	0x080029bd
 80028a4:	0800293b 	.word	0x0800293b
 80028a8:	080029bd 	.word	0x080029bd
 80028ac:	080029bd 	.word	0x080029bd
 80028b0:	080029bd 	.word	0x080029bd
 80028b4:	0800297b 	.word	0x0800297b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f930 	bl	8002b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0208 	orr.w	r2, r2, #8
 80028d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	619a      	str	r2, [r3, #24]
      break;
 80028f6:	e064      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f976 	bl	8002bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6999      	ldr	r1, [r3, #24]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	021a      	lsls	r2, r3, #8
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	619a      	str	r2, [r3, #24]
      break;
 8002938:	e043      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f9c1 	bl	8002cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0208 	orr.w	r2, r2, #8
 8002954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0204 	bic.w	r2, r2, #4
 8002964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	61da      	str	r2, [r3, #28]
      break;
 8002978:	e023      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fa0b 	bl	8002d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69d9      	ldr	r1, [r3, #28]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	021a      	lsls	r2, r3, #8
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	61da      	str	r2, [r3, #28]
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	75fb      	strb	r3, [r7, #23]
      break;
 80029c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a34      	ldr	r2, [pc, #208]	; (8002b08 <TIM_Base_SetConfig+0xe4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00f      	beq.n	8002a5c <TIM_Base_SetConfig+0x38>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d00b      	beq.n	8002a5c <TIM_Base_SetConfig+0x38>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <TIM_Base_SetConfig+0xe8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <TIM_Base_SetConfig+0x38>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <TIM_Base_SetConfig+0xec>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0x38>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <TIM_Base_SetConfig+0xf0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <TIM_Base_SetConfig+0xe4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01b      	beq.n	8002aae <TIM_Base_SetConfig+0x8a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d017      	beq.n	8002aae <TIM_Base_SetConfig+0x8a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <TIM_Base_SetConfig+0xe8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <TIM_Base_SetConfig+0x8a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <TIM_Base_SetConfig+0xec>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00f      	beq.n	8002aae <TIM_Base_SetConfig+0x8a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <TIM_Base_SetConfig+0xf0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00b      	beq.n	8002aae <TIM_Base_SetConfig+0x8a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <TIM_Base_SetConfig+0xf4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0x8a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <TIM_Base_SetConfig+0xf8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0x8a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <TIM_Base_SetConfig+0xfc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <TIM_Base_SetConfig+0xe4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	615a      	str	r2, [r3, #20]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800

08002b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f023 0201 	bic.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0303 	bic.w	r3, r3, #3
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 0302 	bic.w	r3, r3, #2
 8002b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <TIM_OC1_SetConfig+0xc8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10c      	bne.n	8002b9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0308 	bic.w	r3, r3, #8
 8002b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a13      	ldr	r2, [pc, #76]	; (8002bec <TIM_OC1_SetConfig+0xc8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d111      	bne.n	8002bc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	621a      	str	r2, [r3, #32]
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40010000 	.word	0x40010000

08002bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f023 0210 	bic.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0320 	bic.w	r3, r3, #32
 8002c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <TIM_OC2_SetConfig+0xd4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10d      	bne.n	8002c6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <TIM_OC2_SetConfig+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d113      	bne.n	8002c9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000

08002cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <TIM_OC3_SetConfig+0xd0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10d      	bne.n	8002d42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <TIM_OC3_SetConfig+0xd0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d113      	bne.n	8002d72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	621a      	str	r2, [r3, #32]
}
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40010000 	.word	0x40010000

08002d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	031b      	lsls	r3, r3, #12
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <TIM_OC4_SetConfig+0x9c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d109      	bne.n	8002e10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	019b      	lsls	r3, r3, #6
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40010000 	.word	0x40010000

08002e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2201      	movs	r2, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	401a      	ands	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e03f      	b.n	8002f40 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe f8dd 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2224      	movs	r2, #36	; 0x24
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fd7a 	bl	80039ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d17c      	bne.n	8003062 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_UART_Transmit+0x2c>
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e075      	b.n	8003064 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Transmit+0x3e>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e06e      	b.n	8003064 <HAL_UART_Transmit+0x11c>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2221      	movs	r2, #33	; 0x21
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe f9ec 	bl	8001378 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb6:	d108      	bne.n	8002fca <HAL_UART_Transmit+0x82>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e003      	b.n	8002fd2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fda:	e02a      	b.n	8003032 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 faf8 	bl	80035dc <UART_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e036      	b.n	8003064 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	3302      	adds	r3, #2
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e007      	b.n	8003024 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1cf      	bne.n	8002fdc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fac8 	bl	80035dc <UART_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e006      	b.n	8003064 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0ba      	sub	sp, #232	; 0xe8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_UART_IRQHandler+0x66>
 80030be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fbd3 	bl	8003876 <UART_Receive_IT>
      return;
 80030d0:	e256      	b.n	8003580 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80de 	beq.w	8003298 <HAL_UART_IRQHandler+0x22c>
 80030dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80d1 	beq.w	8003298 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_UART_IRQHandler+0xae>
 8003102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800311a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_UART_IRQHandler+0xd2>
 8003126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0202 	orr.w	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_UART_IRQHandler+0xf6>
 800314a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0204 	orr.w	r2, r3, #4
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <HAL_UART_IRQHandler+0x126>
 800316e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800317a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0208 	orr.w	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 81ed 	beq.w	8003576 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800319c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_UART_IRQHandler+0x14e>
 80031a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb5e 	bl	8003876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_UART_IRQHandler+0x17a>
 80031de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04f      	beq.n	8003286 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa66 	bl	80036b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d141      	bne.n	800327e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3314      	adds	r3, #20
 8003200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003226:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800322a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800323e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1d9      	bne.n	80031fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	2b00      	cmp	r3, #0
 800324c:	d013      	beq.n	8003276 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	4a7d      	ldr	r2, [pc, #500]	; (8003448 <HAL_UART_IRQHandler+0x3dc>)
 8003254:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f9ea 	bl	8001634 <HAL_DMA_Abort_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003270:	4610      	mov	r0, r2
 8003272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	e00e      	b.n	8003294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f99a 	bl	80035b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e00a      	b.n	8003294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f996 	bl	80035b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e006      	b.n	8003294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f992 	bl	80035b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003292:	e170      	b.n	8003576 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	bf00      	nop
    return;
 8003296:	e16e      	b.n	8003576 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	2b01      	cmp	r3, #1
 800329e:	f040 814a 	bne.w	8003536 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8143 	beq.w	8003536 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 813c 	beq.w	8003536 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	f040 80b4 	bne.w	800344c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8140 	beq.w	800357a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003302:	429a      	cmp	r2, r3
 8003304:	f080 8139 	bcs.w	800357a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800330e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331a:	f000 8088 	beq.w	800342e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800333c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800334a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800334e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003352:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1d9      	bne.n	800331e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800337a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800338e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003392:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003396:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e1      	bne.n	800336a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3314      	adds	r3, #20
 80033c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e3      	bne.n	80033a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fe:	f023 0310 	bic.w	r3, r3, #16
 8003402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003410:	65ba      	str	r2, [r7, #88]	; 0x58
 8003412:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800341e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e3      	bne.n	80033ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe f893 	bl	8001554 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003436:	b29b      	uxth	r3, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8c0 	bl	80035c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003444:	e099      	b.n	800357a <HAL_UART_IRQHandler+0x50e>
 8003446:	bf00      	nop
 8003448:	0800377f 	.word	0x0800377f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003454:	b29b      	uxth	r3, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 808b 	beq.w	800357e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8086 	beq.w	800357e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003488:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003496:	647a      	str	r2, [r7, #68]	; 0x44
 8003498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800349c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e3      	bne.n	8003472 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3314      	adds	r3, #20
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034ce:	633a      	str	r2, [r7, #48]	; 0x30
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e3      	bne.n	80034aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0310 	bic.w	r3, r3, #16
 8003506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003514:	61fa      	str	r2, [r7, #28]
 8003516:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	69b9      	ldr	r1, [r7, #24]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	617b      	str	r3, [r7, #20]
   return(result);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e3      	bne.n	80034f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f848 	bl	80035c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003534:	e023      	b.n	800357e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_UART_IRQHandler+0x4ea>
 8003542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f929 	bl	80037a6 <UART_Transmit_IT>
    return;
 8003554:	e014      	b.n	8003580 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00e      	beq.n	8003580 <HAL_UART_IRQHandler+0x514>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f969 	bl	8003846 <UART_EndTransmit_IT>
    return;
 8003574:	e004      	b.n	8003580 <HAL_UART_IRQHandler+0x514>
    return;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <HAL_UART_IRQHandler+0x514>
      return;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_UART_IRQHandler+0x514>
      return;
 800357e:	bf00      	nop
  }
}
 8003580:	37e8      	adds	r7, #232	; 0xe8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop

08003588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b090      	sub	sp, #64	; 0x40
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ec:	e050      	b.n	8003690 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d04c      	beq.n	8003690 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <UART_WaitOnFlagUntilTimeout+0x30>
 80035fc:	f7fd febc 	bl	8001378 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003608:	429a      	cmp	r2, r3
 800360a:	d241      	bcs.n	8003690 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800362c:	637a      	str	r2, [r7, #52]	; 0x34
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	613b      	str	r3, [r7, #16]
   return(result);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	63bb      	str	r3, [r7, #56]	; 0x38
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003660:	623a      	str	r2, [r7, #32]
 8003662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	69f9      	ldr	r1, [r7, #28]
 8003666:	6a3a      	ldr	r2, [r7, #32]
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	61bb      	str	r3, [r7, #24]
   return(result);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e00f      	b.n	80036b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d09f      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3740      	adds	r7, #64	; 0x40
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b095      	sub	sp, #84	; 0x54
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	330c      	adds	r3, #12
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e0:	643a      	str	r2, [r7, #64]	; 0x40
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e5      	bne.n	80036c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3314      	adds	r3, #20
 80036fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	61fb      	str	r3, [r7, #28]
   return(result);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e5      	bne.n	80036f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	2b01      	cmp	r3, #1
 800372e:	d119      	bne.n	8003764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f023 0310 	bic.w	r3, r3, #16
 8003746:	647b      	str	r3, [r7, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003750:	61ba      	str	r2, [r7, #24]
 8003752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6979      	ldr	r1, [r7, #20]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	613b      	str	r3, [r7, #16]
   return(result);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003772:	bf00      	nop
 8003774:	3754      	adds	r7, #84	; 0x54
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff ff09 	bl	80035b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b21      	cmp	r3, #33	; 0x21
 80037b8:	d13e      	bne.n	8003838 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d114      	bne.n	80037ee <UART_Transmit_IT+0x48>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d110      	bne.n	80037ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	621a      	str	r2, [r3, #32]
 80037ec:	e008      	b.n	8003800 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6211      	str	r1, [r2, #32]
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29b      	uxth	r3, r3
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4619      	mov	r1, r3
 800380e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10f      	bne.n	8003834 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003822:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003832:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fe8e 	bl	8003588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b08c      	sub	sp, #48	; 0x30
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b22      	cmp	r3, #34	; 0x22
 8003888:	f040 80ab 	bne.w	80039e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d117      	bne.n	80038c6 <UART_Receive_IT+0x50>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d113      	bne.n	80038c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
 80038c4:	e026      	b.n	8003914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d8:	d007      	beq.n	80038ea <UART_Receive_IT+0x74>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <UART_Receive_IT+0x82>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e008      	b.n	800390a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	b2da      	uxtb	r2, r3
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29b      	uxth	r3, r3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4619      	mov	r1, r3
 8003922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003924:	2b00      	cmp	r3, #0
 8003926:	d15a      	bne.n	80039de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0220 	bic.w	r2, r2, #32
 8003936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	2b01      	cmp	r3, #1
 8003966:	d135      	bne.n	80039d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	613b      	str	r3, [r7, #16]
   return(result);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f023 0310 	bic.w	r3, r3, #16
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	623a      	str	r2, [r7, #32]
 8003990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	69f9      	ldr	r1, [r7, #28]
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	61bb      	str	r3, [r7, #24]
   return(result);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d10a      	bne.n	80039c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fdf9 	bl	80035c4 <HAL_UARTEx_RxEventCallback>
 80039d2:	e002      	b.n	80039da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fde1 	bl	800359c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e002      	b.n	80039e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3730      	adds	r7, #48	; 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f0:	b0c0      	sub	sp, #256	; 0x100
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	ea40 0301 	orr.w	r3, r0, r1
 8003a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a44:	f021 010c 	bic.w	r1, r1, #12
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a52:	430b      	orrs	r3, r1
 8003a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	6999      	ldr	r1, [r3, #24]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	ea40 0301 	orr.w	r3, r0, r1
 8003a72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b8f      	ldr	r3, [pc, #572]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d005      	beq.n	8003a8c <UART_SetConfig+0xa0>
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b8d      	ldr	r3, [pc, #564]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d104      	bne.n	8003a96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a8c:	f7fe fbd6 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8003a90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a94:	e003      	b.n	8003a9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a96:	f7fe fbbd 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003a9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa8:	f040 810c 	bne.w	8003cc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003abe:	4622      	mov	r2, r4
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	1891      	adds	r1, r2, r2
 8003ac4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ac6:	415b      	adcs	r3, r3
 8003ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ace:	4621      	mov	r1, r4
 8003ad0:	eb12 0801 	adds.w	r8, r2, r1
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	eb43 0901 	adc.w	r9, r3, r1
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aee:	4690      	mov	r8, r2
 8003af0:	4699      	mov	r9, r3
 8003af2:	4623      	mov	r3, r4
 8003af4:	eb18 0303 	adds.w	r3, r8, r3
 8003af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003afc:	462b      	mov	r3, r5
 8003afe:	eb49 0303 	adc.w	r3, r9, r3
 8003b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	18db      	adds	r3, r3, r3
 8003b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b20:	4613      	mov	r3, r2
 8003b22:	eb42 0303 	adc.w	r3, r2, r3
 8003b26:	657b      	str	r3, [r7, #84]	; 0x54
 8003b28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b30:	f7fc fb56 	bl	80001e0 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <UART_SetConfig+0x2d4>)
 8003b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	011c      	lsls	r4, r3, #4
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b64:	4641      	mov	r1, r8
 8003b66:	eb12 0a01 	adds.w	sl, r2, r1
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b84:	4692      	mov	sl, r2
 8003b86:	469b      	mov	fp, r3
 8003b88:	4643      	mov	r3, r8
 8003b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b92:	464b      	mov	r3, r9
 8003b94:	eb4b 0303 	adc.w	r3, fp, r3
 8003b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	18db      	adds	r3, r3, r3
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	eb42 0303 	adc.w	r3, r2, r3
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bc6:	f7fc fb0b 	bl	80001e0 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <UART_SetConfig+0x2d4>)
 8003bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2264      	movs	r2, #100	; 0x64
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	1acb      	subs	r3, r1, r3
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <UART_SetConfig+0x2d4>)
 8003be8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bf4:	441c      	add	r4, r3
 8003bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	1891      	adds	r1, r2, r2
 8003c0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c10:	415b      	adcs	r3, r3
 8003c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c18:	4641      	mov	r1, r8
 8003c1a:	1851      	adds	r1, r2, r1
 8003c1c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c1e:	4649      	mov	r1, r9
 8003c20:	414b      	adcs	r3, r1
 8003c22:	637b      	str	r3, [r7, #52]	; 0x34
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c30:	4659      	mov	r1, fp
 8003c32:	00cb      	lsls	r3, r1, #3
 8003c34:	4651      	mov	r1, sl
 8003c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	00ca      	lsls	r2, r1, #3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	4642      	mov	r2, r8
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	460a      	mov	r2, r1
 8003c50:	eb42 0303 	adc.w	r3, r2, r3
 8003c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	18db      	adds	r3, r3, r3
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c72:	4613      	mov	r3, r2
 8003c74:	eb42 0303 	adc.w	r3, r2, r3
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c82:	f7fc faad 	bl	80001e0 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <UART_SetConfig+0x2d4>)
 8003c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	2164      	movs	r1, #100	; 0x64
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	4a08      	ldr	r2, [pc, #32]	; (8003cc0 <UART_SetConfig+0x2d4>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f003 0207 	and.w	r2, r3, #7
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4422      	add	r2, r4
 8003cb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cb4:	e106      	b.n	8003ec4 <UART_SetConfig+0x4d8>
 8003cb6:	bf00      	nop
 8003cb8:	40011000 	.word	0x40011000
 8003cbc:	40011400 	.word	0x40011400
 8003cc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cd6:	4642      	mov	r2, r8
 8003cd8:	464b      	mov	r3, r9
 8003cda:	1891      	adds	r1, r2, r2
 8003cdc:	6239      	str	r1, [r7, #32]
 8003cde:	415b      	adcs	r3, r3
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	1854      	adds	r4, r2, r1
 8003cea:	4649      	mov	r1, r9
 8003cec:	eb43 0501 	adc.w	r5, r3, r1
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	00eb      	lsls	r3, r5, #3
 8003cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfe:	00e2      	lsls	r2, r4, #3
 8003d00:	4614      	mov	r4, r2
 8003d02:	461d      	mov	r5, r3
 8003d04:	4643      	mov	r3, r8
 8003d06:	18e3      	adds	r3, r4, r3
 8003d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	eb45 0303 	adc.w	r3, r5, r3
 8003d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d32:	4629      	mov	r1, r5
 8003d34:	008b      	lsls	r3, r1, #2
 8003d36:	4621      	mov	r1, r4
 8003d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	008a      	lsls	r2, r1, #2
 8003d40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d44:	f7fc fa4c 	bl	80001e0 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4b60      	ldr	r3, [pc, #384]	; (8003ed0 <UART_SetConfig+0x4e4>)
 8003d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	011c      	lsls	r4, r3, #4
 8003d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d68:	4642      	mov	r2, r8
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	1891      	adds	r1, r2, r2
 8003d6e:	61b9      	str	r1, [r7, #24]
 8003d70:	415b      	adcs	r3, r3
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d78:	4641      	mov	r1, r8
 8003d7a:	1851      	adds	r1, r2, r1
 8003d7c:	6139      	str	r1, [r7, #16]
 8003d7e:	4649      	mov	r1, r9
 8003d80:	414b      	adcs	r3, r1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d90:	4659      	mov	r1, fp
 8003d92:	00cb      	lsls	r3, r1, #3
 8003d94:	4651      	mov	r1, sl
 8003d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	00ca      	lsls	r2, r1, #3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	4642      	mov	r2, r8
 8003da6:	189b      	adds	r3, r3, r2
 8003da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dac:	464b      	mov	r3, r9
 8003dae:	460a      	mov	r2, r1
 8003db0:	eb42 0303 	adc.w	r3, r2, r3
 8003db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	008b      	lsls	r3, r1, #2
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dda:	4641      	mov	r1, r8
 8003ddc:	008a      	lsls	r2, r1, #2
 8003dde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003de2:	f7fc f9fd 	bl	80001e0 <__aeabi_uldivmod>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <UART_SetConfig+0x4e4>)
 8003dee:	fba3 2301 	umull	r2, r3, r3, r1
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2264      	movs	r2, #100	; 0x64
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	1acb      	subs	r3, r1, r3
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	3332      	adds	r3, #50	; 0x32
 8003e00:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <UART_SetConfig+0x4e4>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	441c      	add	r4, r3
 8003e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e12:	2200      	movs	r2, #0
 8003e14:	673b      	str	r3, [r7, #112]	; 0x70
 8003e16:	677a      	str	r2, [r7, #116]	; 0x74
 8003e18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	1891      	adds	r1, r2, r2
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	415b      	adcs	r3, r3
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	1851      	adds	r1, r2, r1
 8003e30:	6039      	str	r1, [r7, #0]
 8003e32:	4649      	mov	r1, r9
 8003e34:	414b      	adcs	r3, r1
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e44:	4659      	mov	r1, fp
 8003e46:	00cb      	lsls	r3, r1, #3
 8003e48:	4651      	mov	r1, sl
 8003e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e4e:	4651      	mov	r1, sl
 8003e50:	00ca      	lsls	r2, r1, #3
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	4642      	mov	r2, r8
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e5e:	464b      	mov	r3, r9
 8003e60:	460a      	mov	r2, r1
 8003e62:	eb42 0303 	adc.w	r3, r2, r3
 8003e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
 8003e72:	667a      	str	r2, [r7, #100]	; 0x64
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e80:	4649      	mov	r1, r9
 8003e82:	008b      	lsls	r3, r1, #2
 8003e84:	4641      	mov	r1, r8
 8003e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	008a      	lsls	r2, r1, #2
 8003e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e92:	f7fc f9a5 	bl	80001e0 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <UART_SetConfig+0x4e4>)
 8003e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2164      	movs	r1, #100	; 0x64
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	3332      	adds	r3, #50	; 0x32
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <UART_SetConfig+0x4e4>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	f003 020f 	and.w	r2, r3, #15
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4422      	add	r2, r4
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed0:	51eb851f 	.word	0x51eb851f

08003ed4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ee6:	2b84      	cmp	r3, #132	; 0x84
 8003ee8:	d005      	beq.n	8003ef6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003eea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3303      	adds	r3, #3
 8003ef4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f08:	f001 f8e6 	bl	80050d8 <vTaskStartScheduler>
  
  return osOK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f14:	b089      	sub	sp, #36	; 0x24
 8003f16:	af04      	add	r7, sp, #16
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <osThreadCreate+0x54>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685c      	ldr	r4, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691e      	ldr	r6, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ffc8 	bl	8003ed4 <makeFreeRtosPriority>
 8003f44:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f4e:	9202      	str	r2, [sp, #8]
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	9100      	str	r1, [sp, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4632      	mov	r2, r6
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f000 fef4 	bl	8004d48 <xTaskCreateStatic>
 8003f60:	4603      	mov	r3, r0
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e01c      	b.n	8003fa0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685c      	ldr	r4, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f72:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ffaa 	bl	8003ed4 <makeFreeRtosPriority>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f107 030c 	add.w	r3, r7, #12
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	9200      	str	r2, [sp, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 ff36 	bl	8004e02 <xTaskCreate>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003faa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003fb0:	201c      	movs	r0, #28
 8003fb2:	f002 f8a1 	bl	80060f8 <pvPortMalloc>
 8003fb6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f9bc 	bl	8004346 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003fd4:	687b      	ldr	r3, [r7, #4]
	}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b090      	sub	sp, #64	; 0x40
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61fb      	str	r3, [r7, #28]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xEventGroupWaitBits+0x72>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61bb      	str	r3, [r7, #24]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004052:	f001 fcdd 	bl	8005a10 <xTaskGetSchedulerState>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <xEventGroupWaitBits+0x82>
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <xEventGroupWaitBits+0x86>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xEventGroupWaitBits+0x88>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	617b      	str	r3, [r7, #20]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004082:	f001 f889 	bl	8005198 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004092:	f000 f936 	bl	8004302 <prvTestWaitCondition>
 8004096:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d028      	beq.n	80040fe <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	401a      	ands	r2, r3
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e020      	b.n	80040fe <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80040bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d104      	bne.n	80040cc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ca:	e018      	b.n	80040fe <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	1d18      	adds	r0, r3, #4
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	4313      	orrs	r3, r2
 80040f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f4:	4619      	mov	r1, r3
 80040f6:	f001 fa31 	bl	800555c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80040fe:	f001 f859 	bl	80051b4 <xTaskResumeAll>
 8004102:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004106:	2b00      	cmp	r3, #0
 8004108:	d031      	beq.n	800416e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <xEventGroupWaitBits+0x198>)
 8004112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004120:	f001 fd1a 	bl	8005b58 <uxTaskResetEventItemValue>
 8004124:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11a      	bne.n	8004166 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004130:	f001 fec0 	bl	8005eb4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004140:	f000 f8df 	bl	8004302 <prvTestWaitCondition>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	43db      	mvns	r3, r3
 8004158:	401a      	ands	r2, r3
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800415e:	2301      	movs	r3, #1
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004162:	f001 fed7 	bl	8005f14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800416c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004170:	4618      	mov	r0, r3
 8004172:	3740      	adds	r7, #64	; 0x40
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <xEventGroupClearBits+0x4a>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60bb      	str	r3, [r7, #8]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80041c6:	f001 fe75 	bl	8005eb4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	401a      	ands	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80041de:	f001 fe99 	bl	8005f14 <vPortExitCritical>

	return uxReturn;
 80041e2:	693b      	ldr	r3, [r7, #16]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08e      	sub	sp, #56	; 0x38
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80041f6:	2300      	movs	r3, #0
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80041fe:	2300      	movs	r3, #0
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xEventGroupSetBits+0x32>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	613b      	str	r3, [r7, #16]
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <xEventGroupSetBits+0x52>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	3304      	adds	r3, #4
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	3308      	adds	r3, #8
 8004248:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800424a:	f000 ffa5 	bl	8005198 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	431a      	orrs	r2, r3
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004260:	e03c      	b.n	80042dc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800426e:	2300      	movs	r3, #0
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004278:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004280:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d108      	bne.n	800429e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429c:	e008      	b.n	80042b0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d101      	bne.n	80042b0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80042ac:	2301      	movs	r3, #1
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042d0:	4619      	mov	r1, r3
 80042d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042d4:	f001 f9e0 	bl	8005698 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80042dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1be      	bne.n	8004262 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	43db      	mvns	r3, r3
 80042ec:	401a      	ands	r2, r3
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80042f2:	f000 ff5f 	bl	80051b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	681b      	ldr	r3, [r3, #0]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3738      	adds	r7, #56	; 0x38
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004302:	b480      	push	{r7}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e007      	b.n	8004338 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d101      	bne.n	8004338 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004338:	697b      	ldr	r3, [r7, #20]
}
 800433a:	4618      	mov	r0, r3
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f103 0208 	add.w	r2, r3, #8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f103 0208 	add.w	r2, r3, #8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f103 0208 	add.w	r2, r3, #8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d103      	bne.n	8004408 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e00c      	b.n	8004422 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3308      	adds	r3, #8
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e002      	b.n	8004416 <vListInsert+0x2e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	d2f6      	bcs.n	8004410 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6892      	ldr	r2, [r2, #8]
 8004470:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6852      	ldr	r2, [r2, #4]
 800447a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d103      	bne.n	800448e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1e5a      	subs	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <xQueueGenericReset+0x2a>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60bb      	str	r3, [r7, #8]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044da:	f001 fceb 	bl	8005eb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	441a      	add	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	3b01      	subs	r3, #1
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	441a      	add	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d114      	bne.n	800455a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01a      	beq.n	800456e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3310      	adds	r3, #16
 800453c:	4618      	mov	r0, r3
 800453e:	f001 f849 	bl	80055d4 <xTaskRemoveFromEventList>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d012      	beq.n	800456e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <xQueueGenericReset+0xcc>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	e009      	b.n	800456e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3310      	adds	r3, #16
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fef1 	bl	8004346 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3324      	adds	r3, #36	; 0x24
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff feec 	bl	8004346 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800456e:	f001 fcd1 	bl	8005f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004572:	2301      	movs	r3, #1
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	613b      	str	r3, [r7, #16]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3348      	adds	r3, #72	; 0x48
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 fd9d 	bl	80060f8 <pvPortMalloc>
 80045be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d011      	beq.n	80045ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	3348      	adds	r3, #72	; 0x48
 80045ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045d8:	79fa      	ldrb	r2, [r7, #7]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f805 	bl	80045f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045ea:	69bb      	ldr	r3, [r7, #24]
	}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	e002      	b.n	8004616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004622:	2101      	movs	r1, #1
 8004624:	69b8      	ldr	r0, [r7, #24]
 8004626:	f7ff ff43 	bl	80044b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08e      	sub	sp, #56	; 0x38
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004642:	2300      	movs	r3, #0
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <xQueueGenericSend+0x32>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <xQueueGenericSend+0x40>
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <xQueueGenericSend+0x44>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <xQueueGenericSend+0x46>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <xQueueGenericSend+0x60>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d103      	bne.n	80046a2 <xQueueGenericSend+0x6e>
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <xQueueGenericSend+0x72>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <xQueueGenericSend+0x74>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	623b      	str	r3, [r7, #32]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c2:	f001 f9a5 	bl	8005a10 <xTaskGetSchedulerState>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <xQueueGenericSend+0x9e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <xQueueGenericSend+0xa2>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <xQueueGenericSend+0xa4>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	61fb      	str	r3, [r7, #28]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f2:	f001 fbdf 	bl	8005eb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	429a      	cmp	r2, r3
 8004700:	d302      	bcc.n	8004708 <xQueueGenericSend+0xd4>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d129      	bne.n	800475c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470e:	f000 fa0b 	bl	8004b28 <prvCopyDataToQueue>
 8004712:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	d010      	beq.n	800473e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	3324      	adds	r3, #36	; 0x24
 8004720:	4618      	mov	r0, r3
 8004722:	f000 ff57 	bl	80055d4 <xTaskRemoveFromEventList>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800472c:	4b3f      	ldr	r3, [pc, #252]	; (800482c <xQueueGenericSend+0x1f8>)
 800472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	e00a      	b.n	8004754 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004744:	4b39      	ldr	r3, [pc, #228]	; (800482c <xQueueGenericSend+0x1f8>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004754:	f001 fbde 	bl	8005f14 <vPortExitCritical>
				return pdPASS;
 8004758:	2301      	movs	r3, #1
 800475a:	e063      	b.n	8004824 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004762:	f001 fbd7 	bl	8005f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004766:	2300      	movs	r3, #0
 8004768:	e05c      	b.n	8004824 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004770:	f107 0314 	add.w	r3, r7, #20
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fff1 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800477a:	2301      	movs	r3, #1
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800477e:	f001 fbc9 	bl	8005f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004782:	f000 fd09 	bl	8005198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004786:	f001 fb95 	bl	8005eb4 <vPortEnterCritical>
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004790:	b25b      	sxtb	r3, r3
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d103      	bne.n	80047a0 <xQueueGenericSend+0x16c>
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d103      	bne.n	80047b6 <xQueueGenericSend+0x182>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b6:	f001 fbad 	bl	8005f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ba:	1d3a      	adds	r2, r7, #4
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 ffe0 	bl	8005788 <xTaskCheckForTimeOut>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d124      	bne.n	8004818 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d0:	f000 faa2 	bl	8004d18 <prvIsQueueFull>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d018      	beq.n	800480c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	3310      	adds	r3, #16
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fe96 	bl	8005514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ea:	f000 fa2d 	bl	8004c48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047ee:	f000 fce1 	bl	80051b4 <xTaskResumeAll>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f47f af7c 	bne.w	80046f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <xQueueGenericSend+0x1f8>)
 80047fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	e772      	b.n	80046f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800480c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480e:	f000 fa1b 	bl	8004c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004812:	f000 fccf 	bl	80051b4 <xTaskResumeAll>
 8004816:	e76c      	b.n	80046f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481a:	f000 fa15 	bl	8004c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800481e:	f000 fcc9 	bl	80051b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004822:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004824:	4618      	mov	r0, r3
 8004826:	3738      	adds	r7, #56	; 0x38
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	e000ed04 	.word	0xe000ed04

08004830 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b090      	sub	sp, #64	; 0x40
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <xQueueGenericSendFromISR+0x3c>
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <xQueueGenericSendFromISR+0x40>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <xQueueGenericSendFromISR+0x42>
 8004870:	2300      	movs	r3, #0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d103      	bne.n	800489a <xQueueGenericSendFromISR+0x6a>
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <xQueueGenericSendFromISR+0x6e>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueGenericSendFromISR+0x70>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	623b      	str	r3, [r7, #32]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ba:	f001 fbdd 	bl	8006078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048be:	f3ef 8211 	mrs	r2, BASEPRI
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	61fa      	str	r2, [r7, #28]
 80048d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <xQueueGenericSendFromISR+0xbc>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d12f      	bne.n	800494c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004902:	f000 f911 	bl	8004b28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004906:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d112      	bne.n	8004936 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d016      	beq.n	8004946 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fe59 	bl	80055d4 <xTaskRemoveFromEventList>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00e      	beq.n	8004946 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e007      	b.n	8004946 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004936:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800493a:	3301      	adds	r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	b25a      	sxtb	r2, r3
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004946:	2301      	movs	r3, #1
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800494a:	e001      	b.n	8004950 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800494c:	2300      	movs	r3, #0
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800495a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800495c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800495e:	4618      	mov	r0, r3
 8004960:	3740      	adds	r7, #64	; 0x40
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08c      	sub	sp, #48	; 0x30
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004974:	2300      	movs	r3, #0
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <xQueueReceive+0x30>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	623b      	str	r3, [r7, #32]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <xQueueReceive+0x3e>
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <xQueueReceive+0x42>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueReceive+0x44>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueReceive+0x5e>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61fb      	str	r3, [r7, #28]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c6:	f001 f823 	bl	8005a10 <xTaskGetSchedulerState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <xQueueReceive+0x6e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <xQueueReceive+0x72>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <xQueueReceive+0x74>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueReceive+0x8e>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	61bb      	str	r3, [r7, #24]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049f6:	f001 fa5d 	bl	8005eb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01f      	beq.n	8004a46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0a:	f000 f8f7 	bl	8004bfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	1e5a      	subs	r2, r3, #1
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00f      	beq.n	8004a3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	3310      	adds	r3, #16
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fdd6 	bl	80055d4 <xTaskRemoveFromEventList>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a2e:	4b3d      	ldr	r3, [pc, #244]	; (8004b24 <xQueueReceive+0x1bc>)
 8004a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a3e:	f001 fa69 	bl	8005f14 <vPortExitCritical>
				return pdPASS;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e069      	b.n	8004b1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a4c:	f001 fa62 	bl	8005f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e062      	b.n	8004b1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a5a:	f107 0310 	add.w	r3, r7, #16
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fe7c 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a68:	f001 fa54 	bl	8005f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a6c:	f000 fb94 	bl	8005198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a70:	f001 fa20 	bl	8005eb4 <vPortEnterCritical>
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a7a:	b25b      	sxtb	r3, r3
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d103      	bne.n	8004a8a <xQueueReceive+0x122>
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a90:	b25b      	sxtb	r3, r3
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d103      	bne.n	8004aa0 <xQueueReceive+0x138>
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa0:	f001 fa38 	bl	8005f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aa4:	1d3a      	adds	r2, r7, #4
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fe6b 	bl	8005788 <xTaskCheckForTimeOut>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d123      	bne.n	8004b00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aba:	f000 f917 	bl	8004cec <prvIsQueueEmpty>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	3324      	adds	r3, #36	; 0x24
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fd21 	bl	8005514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad4:	f000 f8b8 	bl	8004c48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ad8:	f000 fb6c 	bl	80051b4 <xTaskResumeAll>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d189      	bne.n	80049f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <xQueueReceive+0x1bc>)
 8004ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	e780      	b.n	80049f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af6:	f000 f8a7 	bl	8004c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004afa:	f000 fb5b 	bl	80051b4 <xTaskResumeAll>
 8004afe:	e77a      	b.n	80049f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b02:	f000 f8a1 	bl	8004c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b06:	f000 fb55 	bl	80051b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0c:	f000 f8ee 	bl	8004cec <prvIsQueueEmpty>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f43f af6f 	beq.w	80049f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3730      	adds	r7, #48	; 0x30
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	e000ed04 	.word	0xe000ed04

08004b28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d14d      	bne.n	8004bea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 ff7a 	bl	8005a4c <xTaskPriorityDisinherit>
 8004b58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	e043      	b.n	8004bea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d119      	bne.n	8004b9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6858      	ldr	r0, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	461a      	mov	r2, r3
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	f001 fcd6 	bl	8006524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d32b      	bcc.n	8004bea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	e026      	b.n	8004bea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68d8      	ldr	r0, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	f001 fcbc 	bl	8006524 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	441a      	add	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d207      	bcs.n	8004bd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	425b      	negs	r3, r3
 8004bd2:	441a      	add	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d105      	bne.n	8004bea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bf2:	697b      	ldr	r3, [r7, #20]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	441a      	add	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d303      	bcc.n	8004c30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68d9      	ldr	r1, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6838      	ldr	r0, [r7, #0]
 8004c3c:	f001 fc72 	bl	8006524 <memcpy>
	}
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c50:	f001 f930 	bl	8005eb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c5c:	e011      	b.n	8004c82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fcb2 	bl	80055d4 <xTaskRemoveFromEventList>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c76:	f000 fde9 	bl	800584c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dce9      	bgt.n	8004c5e <prvUnlockQueue+0x16>
 8004c8a:	e000      	b.n	8004c8e <prvUnlockQueue+0x46>
					break;
 8004c8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	22ff      	movs	r2, #255	; 0xff
 8004c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c96:	f001 f93d 	bl	8005f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c9a:	f001 f90b 	bl	8005eb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ca6:	e011      	b.n	8004ccc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fc8d 	bl	80055d4 <xTaskRemoveFromEventList>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cc0:	f000 fdc4 	bl	800584c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cc4:	7bbb      	ldrb	r3, [r7, #14]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	dce9      	bgt.n	8004ca8 <prvUnlockQueue+0x60>
 8004cd4:	e000      	b.n	8004cd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	22ff      	movs	r2, #255	; 0xff
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ce0:	f001 f918 	bl	8005f14 <vPortExitCritical>
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf4:	f001 f8de 	bl	8005eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e001      	b.n	8004d0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d0a:	f001 f903 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d20:	f001 f8c8 	bl	8005eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d102      	bne.n	8004d36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e001      	b.n	8004d3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d3a:	f001 f8eb 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08e      	sub	sp, #56	; 0x38
 8004d4c:	af04      	add	r7, sp, #16
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	623b      	str	r3, [r7, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xTaskCreateStatic+0x46>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	61fb      	str	r3, [r7, #28]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d8e:	2364      	movs	r3, #100	; 0x64
 8004d90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b64      	cmp	r3, #100	; 0x64
 8004d96:	d00a      	beq.n	8004dae <xTaskCreateStatic+0x66>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	61bb      	str	r3, [r7, #24]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004dae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01e      	beq.n	8004df4 <xTaskCreateStatic+0xac>
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01b      	beq.n	8004df4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9303      	str	r3, [sp, #12]
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	9302      	str	r3, [sp, #8]
 8004dd6:	f107 0314 	add.w	r3, r7, #20
 8004dda:	9301      	str	r3, [sp, #4]
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f850 	bl	8004e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dee:	f000 f8d5 	bl	8004f9c <prvAddNewTaskToReadyList>
 8004df2:	e001      	b.n	8004df8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004df8:	697b      	ldr	r3, [r7, #20]
	}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3728      	adds	r7, #40	; 0x28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b08c      	sub	sp, #48	; 0x30
 8004e06:	af04      	add	r7, sp, #16
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 f96e 	bl	80060f8 <pvPortMalloc>
 8004e1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00e      	beq.n	8004e42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e24:	2064      	movs	r0, #100	; 0x64
 8004e26:	f001 f967 	bl	80060f8 <pvPortMalloc>
 8004e2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
 8004e38:	e005      	b.n	8004e46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e3a:	6978      	ldr	r0, [r7, #20]
 8004e3c:	f001 fa28 	bl	8006290 <vPortFree>
 8004e40:	e001      	b.n	8004e46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d017      	beq.n	8004e7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e54:	88fa      	ldrh	r2, [r7, #6]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9303      	str	r3, [sp, #12]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	9302      	str	r3, [sp, #8]
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f80e 	bl	8004e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e70:	69f8      	ldr	r0, [r7, #28]
 8004e72:	f000 f893 	bl	8004f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e76:	2301      	movs	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e002      	b.n	8004e82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e82:	69bb      	ldr	r3, [r7, #24]
	}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f023 0307 	bic.w	r3, r3, #7
 8004eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	617b      	str	r3, [r7, #20]
}
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01f      	beq.n	8004f1a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e012      	b.n	8004f06 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	7819      	ldrb	r1, [r3, #0]
 8004ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	3334      	adds	r3, #52	; 0x34
 8004ef0:	460a      	mov	r2, r1
 8004ef2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3301      	adds	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b1f      	cmp	r3, #31
 8004f0a:	d9e9      	bls.n	8004ee0 <prvInitialiseNewTask+0x54>
 8004f0c:	e000      	b.n	8004f10 <prvInitialiseNewTask+0x84>
			{
				break;
 8004f0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004f18:	e003      	b.n	8004f22 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d901      	bls.n	8004f2c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f28:	2306      	movs	r3, #6
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	3304      	adds	r3, #4
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fa1f 	bl	8004386 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fa1a 	bl	8004386 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	f1c3 0207 	rsb	r2, r3, #7
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	68f9      	ldr	r1, [r7, #12]
 8004f7a:	69b8      	ldr	r0, [r7, #24]
 8004f7c:	f000 fe6a 	bl	8005c54 <pxPortInitialiseStack>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f92:	bf00      	nop
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fa4:	f000 ff86 	bl	8005eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <prvAddNewTaskToReadyList+0xb8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a29      	ldr	r2, [pc, #164]	; (8005054 <prvAddNewTaskToReadyList+0xb8>)
 8004fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fba:	4a27      	ldr	r2, [pc, #156]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fc0:	4b24      	ldr	r3, [pc, #144]	; (8005054 <prvAddNewTaskToReadyList+0xb8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d110      	bne.n	8004fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fc8:	f000 fc64 	bl	8005894 <prvInitialiseTaskLists>
 8004fcc:	e00d      	b.n	8004fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <prvAddNewTaskToReadyList+0xc0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d802      	bhi.n	8004fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <prvAddNewTaskToReadyList+0xc4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <prvAddNewTaskToReadyList+0xc4>)
 8004ff2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4313      	orrs	r3, r2
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <prvAddNewTaskToReadyList+0xcc>)
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7ff f9bf 	bl	80043a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005022:	f000 ff77 	bl	8005f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <prvAddNewTaskToReadyList+0xc0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00e      	beq.n	800504c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	429a      	cmp	r2, r3
 800503a:	d207      	bcs.n	800504c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <prvAddNewTaskToReadyList+0xd0>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000548 	.word	0x20000548
 8005058:	20000448 	.word	0x20000448
 800505c:	20000554 	.word	0x20000554
 8005060:	20000564 	.word	0x20000564
 8005064:	20000550 	.word	0x20000550
 8005068:	2000044c 	.word	0x2000044c
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d017      	beq.n	80050b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <vTaskDelay+0x60>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <vTaskDelay+0x30>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	60bb      	str	r3, [r7, #8]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050a0:	f000 f87a 	bl	8005198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050a4:	2100      	movs	r1, #0
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fd6e 	bl	8005b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050ac:	f000 f882 	bl	80051b4 <xTaskResumeAll>
 80050b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <vTaskDelay+0x64>)
 80050ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000570 	.word	0x20000570
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050e6:	463a      	mov	r2, r7
 80050e8:	1d39      	adds	r1, r7, #4
 80050ea:	f107 0308 	add.w	r3, r7, #8
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fb f9f4 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	9202      	str	r2, [sp, #8]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	2300      	movs	r3, #0
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	460a      	mov	r2, r1
 8005106:	491e      	ldr	r1, [pc, #120]	; (8005180 <vTaskStartScheduler+0xa8>)
 8005108:	481e      	ldr	r0, [pc, #120]	; (8005184 <vTaskStartScheduler+0xac>)
 800510a:	f7ff fe1d 	bl	8004d48 <xTaskCreateStatic>
 800510e:	4603      	mov	r3, r0
 8005110:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <vTaskStartScheduler+0xb0>)
 8005112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <vTaskStartScheduler+0xb0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e001      	b.n	8005126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d116      	bne.n	800515a <vTaskStartScheduler+0x82>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	613b      	str	r3, [r7, #16]
}
 800513e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005140:	4b12      	ldr	r3, [pc, #72]	; (800518c <vTaskStartScheduler+0xb4>)
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <vTaskStartScheduler+0xb8>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800514e:	4b11      	ldr	r3, [pc, #68]	; (8005194 <vTaskStartScheduler+0xbc>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005154:	f000 fe0c 	bl	8005d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005158:	e00e      	b.n	8005178 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d10a      	bne.n	8005178 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	60fb      	str	r3, [r7, #12]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <vTaskStartScheduler+0x9e>
}
 8005178:	bf00      	nop
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	08006638 	.word	0x08006638
 8005184:	08005865 	.word	0x08005865
 8005188:	2000056c 	.word	0x2000056c
 800518c:	20000568 	.word	0x20000568
 8005190:	20000554 	.word	0x20000554
 8005194:	2000054c 	.word	0x2000054c

08005198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <vTaskSuspendAll+0x18>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a03      	ldr	r2, [pc, #12]	; (80051b0 <vTaskSuspendAll+0x18>)
 80051a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000570 	.word	0x20000570

080051b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <xTaskResumeAll+0x114>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	603b      	str	r3, [r7, #0]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051e0:	f000 fe68 	bl	8005eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051e4:	4b38      	ldr	r3, [pc, #224]	; (80052c8 <xTaskResumeAll+0x114>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	4a37      	ldr	r2, [pc, #220]	; (80052c8 <xTaskResumeAll+0x114>)
 80051ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ee:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <xTaskResumeAll+0x114>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d161      	bne.n	80052ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051f6:	4b35      	ldr	r3, [pc, #212]	; (80052cc <xTaskResumeAll+0x118>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d05d      	beq.n	80052ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051fe:	e02e      	b.n	800525e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005200:	4b33      	ldr	r3, [pc, #204]	; (80052d0 <xTaskResumeAll+0x11c>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3318      	adds	r3, #24
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff f924 	bl	800445a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3304      	adds	r3, #4
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff f91f 	bl	800445a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	2201      	movs	r2, #1
 8005222:	409a      	lsls	r2, r3
 8005224:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <xTaskResumeAll+0x120>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4313      	orrs	r3, r2
 800522a:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <xTaskResumeAll+0x120>)
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <xTaskResumeAll+0x124>)
 800523c:	441a      	add	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3304      	adds	r3, #4
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f7ff f8ab 	bl	80043a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	4b23      	ldr	r3, [pc, #140]	; (80052dc <xTaskResumeAll+0x128>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	429a      	cmp	r2, r3
 8005256:	d302      	bcc.n	800525e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005258:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <xTaskResumeAll+0x12c>)
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525e:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <xTaskResumeAll+0x11c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1cc      	bne.n	8005200 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800526c:	f000 fbb0 	bl	80059d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005270:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <xTaskResumeAll+0x130>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d010      	beq.n	800529e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800527c:	f000 f836 	bl	80052ec <xTaskIncrementTick>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005286:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <xTaskResumeAll+0x12c>)
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3b01      	subs	r3, #1
 8005290:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f1      	bne.n	800527c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <xTaskResumeAll+0x130>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <xTaskResumeAll+0x12c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <xTaskResumeAll+0x134>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ba:	f000 fe2b 	bl	8005f14 <vPortExitCritical>

	return xAlreadyYielded;
 80052be:	68bb      	ldr	r3, [r7, #8]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000570 	.word	0x20000570
 80052cc:	20000548 	.word	0x20000548
 80052d0:	20000508 	.word	0x20000508
 80052d4:	20000550 	.word	0x20000550
 80052d8:	2000044c 	.word	0x2000044c
 80052dc:	20000448 	.word	0x20000448
 80052e0:	2000055c 	.word	0x2000055c
 80052e4:	20000558 	.word	0x20000558
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f6:	4b4e      	ldr	r3, [pc, #312]	; (8005430 <xTaskIncrementTick+0x144>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f040 808e 	bne.w	800541c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005300:	4b4c      	ldr	r3, [pc, #304]	; (8005434 <xTaskIncrementTick+0x148>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005308:	4a4a      	ldr	r2, [pc, #296]	; (8005434 <xTaskIncrementTick+0x148>)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d120      	bne.n	8005356 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005314:	4b48      	ldr	r3, [pc, #288]	; (8005438 <xTaskIncrementTick+0x14c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <xTaskIncrementTick+0x48>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	603b      	str	r3, [r7, #0]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <xTaskIncrementTick+0x46>
 8005334:	4b40      	ldr	r3, [pc, #256]	; (8005438 <xTaskIncrementTick+0x14c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	4b40      	ldr	r3, [pc, #256]	; (800543c <xTaskIncrementTick+0x150>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3e      	ldr	r2, [pc, #248]	; (8005438 <xTaskIncrementTick+0x14c>)
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4a3e      	ldr	r2, [pc, #248]	; (800543c <xTaskIncrementTick+0x150>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4b3d      	ldr	r3, [pc, #244]	; (8005440 <xTaskIncrementTick+0x154>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	4a3c      	ldr	r2, [pc, #240]	; (8005440 <xTaskIncrementTick+0x154>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	f000 fb3d 	bl	80059d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <xTaskIncrementTick+0x158>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	429a      	cmp	r2, r3
 800535e:	d348      	bcc.n	80053f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005360:	4b35      	ldr	r3, [pc, #212]	; (8005438 <xTaskIncrementTick+0x14c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800536a:	4b36      	ldr	r3, [pc, #216]	; (8005444 <xTaskIncrementTick+0x158>)
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	601a      	str	r2, [r3, #0]
					break;
 8005372:	e03e      	b.n	80053f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005374:	4b30      	ldr	r3, [pc, #192]	; (8005438 <xTaskIncrementTick+0x14c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d203      	bcs.n	8005394 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800538c:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <xTaskIncrementTick+0x158>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005392:	e02e      	b.n	80053f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	3304      	adds	r3, #4
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff f85e 	bl	800445a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3318      	adds	r3, #24
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff f855 	bl	800445a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	2201      	movs	r2, #1
 80053b6:	409a      	lsls	r2, r3
 80053b8:	4b23      	ldr	r3, [pc, #140]	; (8005448 <xTaskIncrementTick+0x15c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4313      	orrs	r3, r2
 80053be:	4a22      	ldr	r2, [pc, #136]	; (8005448 <xTaskIncrementTick+0x15c>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a1f      	ldr	r2, [pc, #124]	; (800544c <xTaskIncrementTick+0x160>)
 80053d0:	441a      	add	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fe ffe1 	bl	80043a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e2:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <xTaskIncrementTick+0x164>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d3b9      	bcc.n	8005360 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053f0:	e7b6      	b.n	8005360 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053f2:	4b17      	ldr	r3, [pc, #92]	; (8005450 <xTaskIncrementTick+0x164>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4914      	ldr	r1, [pc, #80]	; (800544c <xTaskIncrementTick+0x160>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d901      	bls.n	800540e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800540a:	2301      	movs	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800540e:	4b11      	ldr	r3, [pc, #68]	; (8005454 <xTaskIncrementTick+0x168>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005416:	2301      	movs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e004      	b.n	8005426 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <xTaskIncrementTick+0x16c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <xTaskIncrementTick+0x16c>)
 8005424:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005426:	697b      	ldr	r3, [r7, #20]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000570 	.word	0x20000570
 8005434:	2000054c 	.word	0x2000054c
 8005438:	20000500 	.word	0x20000500
 800543c:	20000504 	.word	0x20000504
 8005440:	20000560 	.word	0x20000560
 8005444:	20000568 	.word	0x20000568
 8005448:	20000550 	.word	0x20000550
 800544c:	2000044c 	.word	0x2000044c
 8005450:	20000448 	.word	0x20000448
 8005454:	2000055c 	.word	0x2000055c
 8005458:	20000558 	.word	0x20000558

0800545c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005462:	4b27      	ldr	r3, [pc, #156]	; (8005500 <vTaskSwitchContext+0xa4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800546a:	4b26      	ldr	r3, [pc, #152]	; (8005504 <vTaskSwitchContext+0xa8>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005470:	e03f      	b.n	80054f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <vTaskSwitchContext+0xa8>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005478:	4b23      	ldr	r3, [pc, #140]	; (8005508 <vTaskSwitchContext+0xac>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	fab3 f383 	clz	r3, r3
 8005484:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005486:	7afb      	ldrb	r3, [r7, #11]
 8005488:	f1c3 031f 	rsb	r3, r3, #31
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	491f      	ldr	r1, [pc, #124]	; (800550c <vTaskSwitchContext+0xb0>)
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	607b      	str	r3, [r7, #4]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vTaskSwitchContext+0x5a>
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <vTaskSwitchContext+0xb0>)
 80054c4:	4413      	add	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3308      	adds	r3, #8
 80054da:	429a      	cmp	r2, r3
 80054dc:	d104      	bne.n	80054e8 <vTaskSwitchContext+0x8c>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4a08      	ldr	r2, [pc, #32]	; (8005510 <vTaskSwitchContext+0xb4>)
 80054f0:	6013      	str	r3, [r2, #0]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000570 	.word	0x20000570
 8005504:	2000055c 	.word	0x2000055c
 8005508:	20000550 	.word	0x20000550
 800550c:	2000044c 	.word	0x2000044c
 8005510:	20000448 	.word	0x20000448

08005514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60fb      	str	r3, [r7, #12]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <vTaskPlaceOnEventList+0x44>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3318      	adds	r3, #24
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fe ff50 	bl	80043e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005548:	2101      	movs	r1, #1
 800554a:	6838      	ldr	r0, [r7, #0]
 800554c:	f000 fb1c 	bl	8005b88 <prvAddCurrentTaskToDelayedList>
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000448 	.word	0x20000448

0800555c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	617b      	str	r3, [r7, #20]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <vTaskPlaceOnUnorderedEventList+0x70>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	613b      	str	r3, [r7, #16]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80055a2:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80055ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3318      	adds	r3, #24
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7fe fef2 	bl	80043a0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055bc:	2101      	movs	r1, #1
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fae2 	bl	8005b88 <prvAddCurrentTaskToDelayedList>
}
 80055c4:	bf00      	nop
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000570 	.word	0x20000570
 80055d0:	20000448 	.word	0x20000448

080055d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3318      	adds	r3, #24
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe ff28 	bl	800445a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <xTaskRemoveFromEventList+0xac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d11c      	bne.n	800564c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3304      	adds	r3, #4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe ff1f 	bl	800445a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	2201      	movs	r2, #1
 8005622:	409a      	lsls	r2, r3
 8005624:	4b17      	ldr	r3, [pc, #92]	; (8005684 <xTaskRemoveFromEventList+0xb0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4313      	orrs	r3, r2
 800562a:	4a16      	ldr	r2, [pc, #88]	; (8005684 <xTaskRemoveFromEventList+0xb0>)
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4a13      	ldr	r2, [pc, #76]	; (8005688 <xTaskRemoveFromEventList+0xb4>)
 800563c:	441a      	add	r2, r3
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	3304      	adds	r3, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f7fe feab 	bl	80043a0 <vListInsertEnd>
 800564a:	e005      	b.n	8005658 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	3318      	adds	r3, #24
 8005650:	4619      	mov	r1, r3
 8005652:	480e      	ldr	r0, [pc, #56]	; (800568c <xTaskRemoveFromEventList+0xb8>)
 8005654:	f7fe fea4 	bl	80043a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <xTaskRemoveFromEventList+0xbc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	429a      	cmp	r2, r3
 8005664:	d905      	bls.n	8005672 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005666:	2301      	movs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800566a:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <xTaskRemoveFromEventList+0xc0>)
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e001      	b.n	8005676 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005676:	697b      	ldr	r3, [r7, #20]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000570 	.word	0x20000570
 8005684:	20000550 	.word	0x20000550
 8005688:	2000044c 	.word	0x2000044c
 800568c:	20000508 	.word	0x20000508
 8005690:	20000448 	.word	0x20000448
 8005694:	2000055c 	.word	0x2000055c

08005698 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80056a2:	4b29      	ldr	r3, [pc, #164]	; (8005748 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	613b      	str	r3, [r7, #16]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	60fb      	str	r3, [r7, #12]
}
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fe feb4 	bl	800445a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe feaf 	bl	800445a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	2201      	movs	r2, #1
 8005702:	409a      	lsls	r2, r3
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4313      	orrs	r3, r2
 800570a:	4a10      	ldr	r2, [pc, #64]	; (800574c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4a0d      	ldr	r2, [pc, #52]	; (8005750 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800571c:	441a      	add	r2, r3
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	3304      	adds	r3, #4
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f7fe fe3b 	bl	80043a0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	429a      	cmp	r2, r3
 8005736:	d902      	bls.n	800573e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005738:	4b07      	ldr	r3, [pc, #28]	; (8005758 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]
	}
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000570 	.word	0x20000570
 800574c:	20000550 	.word	0x20000550
 8005750:	2000044c 	.word	0x2000044c
 8005754:	20000448 	.word	0x20000448
 8005758:	2000055c 	.word	0x2000055c

0800575c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <vTaskInternalSetTimeOutState+0x24>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <vTaskInternalSetTimeOutState+0x28>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000560 	.word	0x20000560
 8005784:	2000054c 	.word	0x2000054c

08005788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60fb      	str	r3, [r7, #12]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057ca:	f000 fb73 	bl	8005eb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ce:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <xTaskCheckForTimeOut+0xbc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d102      	bne.n	80057ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	e023      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <xTaskCheckForTimeOut+0xc0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d007      	beq.n	800580a <xTaskCheckForTimeOut+0x82>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e015      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	429a      	cmp	r2, r3
 8005812:	d20b      	bcs.n	800582c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff9b 	bl	800575c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	e004      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005832:	2301      	movs	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005836:	f000 fb6d 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	2000054c 	.word	0x2000054c
 8005848:	20000560 	.word	0x20000560

0800584c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005850:	4b03      	ldr	r3, [pc, #12]	; (8005860 <vTaskMissedYield+0x14>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	2000055c 	.word	0x2000055c

08005864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800586c:	f000 f852 	bl	8005914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <prvIdleTask+0x28>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d9f9      	bls.n	800586c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <prvIdleTask+0x2c>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005888:	e7f0      	b.n	800586c <prvIdleTask+0x8>
 800588a:	bf00      	nop
 800588c:	2000044c 	.word	0x2000044c
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800589a:	2300      	movs	r3, #0
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	e00c      	b.n	80058ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <prvInitialiseTaskLists+0x60>)
 80058ac:	4413      	add	r3, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fd49 	bl	8004346 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3301      	adds	r3, #1
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d9ef      	bls.n	80058a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058c0:	480d      	ldr	r0, [pc, #52]	; (80058f8 <prvInitialiseTaskLists+0x64>)
 80058c2:	f7fe fd40 	bl	8004346 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058c6:	480d      	ldr	r0, [pc, #52]	; (80058fc <prvInitialiseTaskLists+0x68>)
 80058c8:	f7fe fd3d 	bl	8004346 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058cc:	480c      	ldr	r0, [pc, #48]	; (8005900 <prvInitialiseTaskLists+0x6c>)
 80058ce:	f7fe fd3a 	bl	8004346 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058d2:	480c      	ldr	r0, [pc, #48]	; (8005904 <prvInitialiseTaskLists+0x70>)
 80058d4:	f7fe fd37 	bl	8004346 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058d8:	480b      	ldr	r0, [pc, #44]	; (8005908 <prvInitialiseTaskLists+0x74>)
 80058da:	f7fe fd34 	bl	8004346 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <prvInitialiseTaskLists+0x78>)
 80058e0:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <prvInitialiseTaskLists+0x64>)
 80058e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <prvInitialiseTaskLists+0x7c>)
 80058e6:	4a05      	ldr	r2, [pc, #20]	; (80058fc <prvInitialiseTaskLists+0x68>)
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	2000044c 	.word	0x2000044c
 80058f8:	200004d8 	.word	0x200004d8
 80058fc:	200004ec 	.word	0x200004ec
 8005900:	20000508 	.word	0x20000508
 8005904:	2000051c 	.word	0x2000051c
 8005908:	20000534 	.word	0x20000534
 800590c:	20000500 	.word	0x20000500
 8005910:	20000504 	.word	0x20000504

08005914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800591a:	e019      	b.n	8005950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800591c:	f000 faca 	bl	8005eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <prvCheckTasksWaitingTermination+0x50>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe fd94 	bl	800445a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005932:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <prvCheckTasksWaitingTermination+0x54>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3b01      	subs	r3, #1
 8005938:	4a0b      	ldr	r2, [pc, #44]	; (8005968 <prvCheckTasksWaitingTermination+0x54>)
 800593a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3b01      	subs	r3, #1
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 8005944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005946:	f000 fae5 	bl	8005f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f810 	bl	8005970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e1      	bne.n	800591c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	2000051c 	.word	0x2000051c
 8005968:	20000548 	.word	0x20000548
 800596c:	20000530 	.word	0x20000530

08005970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fc82 	bl	8006290 <vPortFree>
				vPortFree( pxTCB );
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fc7f 	bl	8006290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005992:	e018      	b.n	80059c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800599a:	2b01      	cmp	r3, #1
 800599c:	d103      	bne.n	80059a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fc76 	bl	8006290 <vPortFree>
	}
 80059a4:	e00f      	b.n	80059c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d00a      	beq.n	80059c6 <prvDeleteTCB+0x56>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <prvDeleteTCB+0x54>
	}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvResetNextTaskUnblockTime+0x38>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <prvResetNextTaskUnblockTime+0x3c>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059e8:	e008      	b.n	80059fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <prvResetNextTaskUnblockTime+0x38>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <prvResetNextTaskUnblockTime+0x3c>)
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	20000500 	.word	0x20000500
 8005a0c:	20000568 	.word	0x20000568

08005a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <xTaskGetSchedulerState+0x34>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	607b      	str	r3, [r7, #4]
 8005a22:	e008      	b.n	8005a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a24:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <xTaskGetSchedulerState+0x38>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	e001      	b.n	8005a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a32:	2300      	movs	r3, #0
 8005a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a36:	687b      	ldr	r3, [r7, #4]
	}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	20000554 	.word	0x20000554
 8005a48:	20000570 	.word	0x20000570

08005a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d06e      	beq.n	8005b40 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a62:	4b3a      	ldr	r3, [pc, #232]	; (8005b4c <xTaskPriorityDisinherit+0x100>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d00a      	beq.n	8005a82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60fb      	str	r3, [r7, #12]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60bb      	str	r3, [r7, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	1e5a      	subs	r2, r3, #1
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d044      	beq.n	8005b40 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d140      	bne.n	8005b40 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fcc9 	bl	800445a <uxListRemove>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d115      	bne.n	8005afa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	491f      	ldr	r1, [pc, #124]	; (8005b50 <xTaskPriorityDisinherit+0x104>)
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xTaskPriorityDisinherit+0xae>
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	2201      	movs	r2, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43da      	mvns	r2, r3
 8005af0:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <xTaskPriorityDisinherit+0x108>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4013      	ands	r3, r2
 8005af6:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <xTaskPriorityDisinherit+0x108>)
 8005af8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	f1c3 0207 	rsb	r2, r3, #7
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	2201      	movs	r2, #1
 8005b14:	409a      	lsls	r2, r3
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <xTaskPriorityDisinherit+0x108>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	4a0d      	ldr	r2, [pc, #52]	; (8005b54 <xTaskPriorityDisinherit+0x108>)
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <xTaskPriorityDisinherit+0x104>)
 8005b2e:	441a      	add	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fe fc32 	bl	80043a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b40:	697b      	ldr	r3, [r7, #20]
	}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000448 	.word	0x20000448
 8005b50:	2000044c 	.word	0x2000044c
 8005b54:	20000550 	.word	0x20000550

08005b58 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <uxTaskResetEventItemValue+0x2c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <uxTaskResetEventItemValue+0x2c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <uxTaskResetEventItemValue+0x2c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f1c2 0207 	rsb	r2, r2, #7
 8005b74:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005b76:	687b      	ldr	r3, [r7, #4]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	20000448 	.word	0x20000448

08005b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b92:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b98:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fc5b 	bl	800445a <uxListRemove>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	4b21      	ldr	r3, [pc, #132]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d10a      	bne.n	8005be0 <prvAddCurrentTaskToDelayedList+0x58>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	481a      	ldr	r0, [pc, #104]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bda:	f7fe fbe1 	bl	80043a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bde:	e026      	b.n	8005c2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005be8:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d209      	bcs.n	8005c0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf8:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f7fe fbef 	bl	80043e8 <vListInsert>
}
 8005c0a:	e010      	b.n	8005c2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f7fe fbe5 	bl	80043e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d202      	bcs.n	8005c2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6013      	str	r3, [r2, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000054c 	.word	0x2000054c
 8005c3c:	20000448 	.word	0x20000448
 8005c40:	20000550 	.word	0x20000550
 8005c44:	20000534 	.word	0x20000534
 8005c48:	20000504 	.word	0x20000504
 8005c4c:	20000500 	.word	0x20000500
 8005c50:	20000568 	.word	0x20000568

08005c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3b04      	subs	r3, #4
 8005c64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b04      	subs	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f023 0201 	bic.w	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3b04      	subs	r3, #4
 8005c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c84:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <pxPortInitialiseStack+0x64>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3b14      	subs	r3, #20
 8005c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3b04      	subs	r3, #4
 8005c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f06f 0202 	mvn.w	r2, #2
 8005ca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3b20      	subs	r3, #32
 8005ca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005caa:	68fb      	ldr	r3, [r7, #12]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	08005cbd 	.word	0x08005cbd

08005cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <prvTaskExitError+0x54>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d00a      	beq.n	8005ce6 <prvTaskExitError+0x2a>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60fb      	str	r3, [r7, #12]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <prvTaskExitError+0x28>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60bb      	str	r3, [r7, #8]
}
 8005cf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cfa:	bf00      	nop
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0fc      	beq.n	8005cfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d02:	bf00      	nop
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	2000000c 	.word	0x2000000c
	...

08005d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <pxCurrentTCBConst2>)
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	6808      	ldr	r0, [r1, #0]
 8005d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2a:	f380 8809 	msr	PSP, r0
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8811 	msr	BASEPRI, r0
 8005d3a:	4770      	bx	lr
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst2>:
 8005d40:	20000448 	.word	0x20000448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d48:	4808      	ldr	r0, [pc, #32]	; (8005d6c <prvPortStartFirstTask+0x24>)
 8005d4a:	6800      	ldr	r0, [r0, #0]
 8005d4c:	6800      	ldr	r0, [r0, #0]
 8005d4e:	f380 8808 	msr	MSP, r0
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8814 	msr	CONTROL, r0
 8005d5a:	b662      	cpsie	i
 8005d5c:	b661      	cpsie	f
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	df00      	svc	0
 8005d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d6a:	bf00      	nop
 8005d6c:	e000ed08 	.word	0xe000ed08

08005d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d76:	4b46      	ldr	r3, [pc, #280]	; (8005e90 <xPortStartScheduler+0x120>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <xPortStartScheduler+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10a      	bne.n	8005d96 <xPortStartScheduler+0x26>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d96:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <xPortStartScheduler+0x120>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a3f      	ldr	r2, [pc, #252]	; (8005e98 <xPortStartScheduler+0x128>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10a      	bne.n	8005db6 <xPortStartScheduler+0x46>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005db6:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <xPortStartScheduler+0x12c>)
 8005db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b31      	ldr	r3, [pc, #196]	; (8005ea0 <xPortStartScheduler+0x130>)
 8005ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005de0:	2207      	movs	r2, #7
 8005de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005de4:	e009      	b.n	8005dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005de6:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e02:	2b80      	cmp	r3, #128	; 0x80
 8005e04:	d0ef      	beq.n	8005de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e06:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1c3 0307 	rsb	r3, r3, #7
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00a      	beq.n	8005e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60bb      	str	r3, [r7, #8]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e28:	4b1e      	ldr	r3, [pc, #120]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e46:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e5e:	f000 f8dd 	bl	800601c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <xPortStartScheduler+0x13c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e68:	f000 f8fc 	bl	8006064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e6c:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <xPortStartScheduler+0x140>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a0f      	ldr	r2, [pc, #60]	; (8005eb0 <xPortStartScheduler+0x140>)
 8005e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e78:	f7ff ff66 	bl	8005d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e7c:	f7ff faee 	bl	800545c <vTaskSwitchContext>
	prvTaskExitError();
 8005e80:	f7ff ff1c 	bl	8005cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed00 	.word	0xe000ed00
 8005e94:	410fc271 	.word	0x410fc271
 8005e98:	410fc270 	.word	0x410fc270
 8005e9c:	e000e400 	.word	0xe000e400
 8005ea0:	20000574 	.word	0x20000574
 8005ea4:	20000578 	.word	0x20000578
 8005ea8:	e000ed20 	.word	0xe000ed20
 8005eac:	2000000c 	.word	0x2000000c
 8005eb0:	e000ef34 	.word	0xe000ef34

08005eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	607b      	str	r3, [r7, #4]
}
 8005ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <vPortEnterCritical+0x58>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <vPortEnterCritical+0x58>)
 8005ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <vPortEnterCritical+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d10f      	bne.n	8005f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortEnterCritical+0x5c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	603b      	str	r3, [r7, #0]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <vPortEnterCritical+0x4a>
	}
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	2000000c 	.word	0x2000000c
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <vPortExitCritical+0x50>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <vPortExitCritical+0x24>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	607b      	str	r3, [r7, #4]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <vPortExitCritical+0x50>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <vPortExitCritical+0x50>)
 8005f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <vPortExitCritical+0x50>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d105      	bne.n	8005f56 <vPortExitCritical+0x42>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	f383 8811 	msr	BASEPRI, r3
}
 8005f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c
	...

08005f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f70:	f3ef 8009 	mrs	r0, PSP
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <pxCurrentTCBConst>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	f01e 0f10 	tst.w	lr, #16
 8005f80:	bf08      	it	eq
 8005f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	6010      	str	r0, [r2, #0]
 8005f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f94:	f380 8811 	msr	BASEPRI, r0
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f7ff fa5c 	bl	800545c <vTaskSwitchContext>
 8005fa4:	f04f 0000 	mov.w	r0, #0
 8005fa8:	f380 8811 	msr	BASEPRI, r0
 8005fac:	bc09      	pop	{r0, r3}
 8005fae:	6819      	ldr	r1, [r3, #0]
 8005fb0:	6808      	ldr	r0, [r1, #0]
 8005fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb6:	f01e 0f10 	tst.w	lr, #16
 8005fba:	bf08      	it	eq
 8005fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fc0:	f380 8809 	msr	PSP, r0
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w

08005fd0 <pxCurrentTCBConst>:
 8005fd0:	20000448 	.word	0x20000448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop

08005fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	607b      	str	r3, [r7, #4]
}
 8005ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ff2:	f7ff f97b 	bl	80052ec <xTaskIncrementTick>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <SysTick_Handler+0x40>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f383 8811 	msr	BASEPRI, r3
}
 800600e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <vPortSetupTimerInterrupt+0x34>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <vPortSetupTimerInterrupt+0x38>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <vPortSetupTimerInterrupt+0x3c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <vPortSetupTimerInterrupt+0x40>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	4a09      	ldr	r2, [pc, #36]	; (8006060 <vPortSetupTimerInterrupt+0x44>)
 800603a:	3b01      	subs	r3, #1
 800603c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800603e:	4b04      	ldr	r3, [pc, #16]	; (8006050 <vPortSetupTimerInterrupt+0x34>)
 8006040:	2207      	movs	r2, #7
 8006042:	601a      	str	r2, [r3, #0]
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	e000e010 	.word	0xe000e010
 8006054:	e000e018 	.word	0xe000e018
 8006058:	20000000 	.word	0x20000000
 800605c:	10624dd3 	.word	0x10624dd3
 8006060:	e000e014 	.word	0xe000e014

08006064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006074 <vPortEnableVFP+0x10>
 8006068:	6801      	ldr	r1, [r0, #0]
 800606a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800606e:	6001      	str	r1, [r0, #0]
 8006070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006072:	bf00      	nop
 8006074:	e000ed88 	.word	0xe000ed88

08006078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800607e:	f3ef 8305 	mrs	r3, IPSR
 8006082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d914      	bls.n	80060b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <vPortValidateInterruptPriority+0x70>)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006094:	4b15      	ldr	r3, [pc, #84]	; (80060ec <vPortValidateInterruptPriority+0x74>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	7afa      	ldrb	r2, [r7, #11]
 800609a:	429a      	cmp	r2, r3
 800609c:	d20a      	bcs.n	80060b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	607b      	str	r3, [r7, #4]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060b4:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <vPortValidateInterruptPriority+0x78>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <vPortValidateInterruptPriority+0x7c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d90a      	bls.n	80060da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	603b      	str	r3, [r7, #0]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <vPortValidateInterruptPriority+0x60>
	}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	e000e3f0 	.word	0xe000e3f0
 80060ec:	20000574 	.word	0x20000574
 80060f0:	e000ed0c 	.word	0xe000ed0c
 80060f4:	20000578 	.word	0x20000578

080060f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006104:	f7ff f848 	bl	8005198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006108:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <pvPortMalloc+0x180>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006110:	f000 f920 	bl	8006354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006114:	4b59      	ldr	r3, [pc, #356]	; (800627c <pvPortMalloc+0x184>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4013      	ands	r3, r2
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 8093 	bne.w	8006248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01d      	beq.n	8006164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006128:	2208      	movs	r2, #8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b00      	cmp	r3, #0
 8006138:	d014      	beq.n	8006164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f023 0307 	bic.w	r3, r3, #7
 8006140:	3308      	adds	r3, #8
 8006142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <pvPortMalloc+0x6c>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	617b      	str	r3, [r7, #20]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06e      	beq.n	8006248 <pvPortMalloc+0x150>
 800616a:	4b45      	ldr	r3, [pc, #276]	; (8006280 <pvPortMalloc+0x188>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d869      	bhi.n	8006248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006174:	4b43      	ldr	r3, [pc, #268]	; (8006284 <pvPortMalloc+0x18c>)
 8006176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006178:	4b42      	ldr	r3, [pc, #264]	; (8006284 <pvPortMalloc+0x18c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800617e:	e004      	b.n	800618a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <pvPortMalloc+0xa4>
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f1      	bne.n	8006180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800619c:	4b36      	ldr	r3, [pc, #216]	; (8006278 <pvPortMalloc+0x180>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d050      	beq.n	8006248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2208      	movs	r2, #8
 80061ac:	4413      	add	r3, r2
 80061ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	2308      	movs	r3, #8
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d91f      	bls.n	8006208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4413      	add	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <pvPortMalloc+0xf8>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	613b      	str	r3, [r7, #16]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	1ad2      	subs	r2, r2, r3
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006202:	69b8      	ldr	r0, [r7, #24]
 8006204:	f000 f908 	bl	8006418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006208:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <pvPortMalloc+0x188>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <pvPortMalloc+0x188>)
 8006214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006216:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <pvPortMalloc+0x188>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <pvPortMalloc+0x190>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d203      	bcs.n	800622a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006222:	4b17      	ldr	r3, [pc, #92]	; (8006280 <pvPortMalloc+0x188>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a18      	ldr	r2, [pc, #96]	; (8006288 <pvPortMalloc+0x190>)
 8006228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <pvPortMalloc+0x184>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	431a      	orrs	r2, r3
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <pvPortMalloc+0x194>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a11      	ldr	r2, [pc, #68]	; (800628c <pvPortMalloc+0x194>)
 8006246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006248:	f7fe ffb4 	bl	80051b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <pvPortMalloc+0x174>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	60fb      	str	r3, [r7, #12]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <pvPortMalloc+0x172>
	return pvReturn;
 800626c:	69fb      	ldr	r3, [r7, #28]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3728      	adds	r7, #40	; 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20004184 	.word	0x20004184
 800627c:	20004198 	.word	0x20004198
 8006280:	20004188 	.word	0x20004188
 8006284:	2000417c 	.word	0x2000417c
 8006288:	2000418c 	.word	0x2000418c
 800628c:	20004190 	.word	0x20004190

08006290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d04d      	beq.n	800633e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062a2:	2308      	movs	r3, #8
 80062a4:	425b      	negs	r3, r3
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	4b24      	ldr	r3, [pc, #144]	; (8006348 <vPortFree+0xb8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <vPortFree+0x44>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	60fb      	str	r3, [r7, #12]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <vPortFree+0x62>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	60bb      	str	r3, [r7, #8]
}
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <vPortFree+0xb8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01e      	beq.n	800633e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11a      	bne.n	800633e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <vPortFree+0xb8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006318:	f7fe ff3e 	bl	8005198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <vPortFree+0xbc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4413      	add	r3, r2
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <vPortFree+0xbc>)
 8006328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800632a:	6938      	ldr	r0, [r7, #16]
 800632c:	f000 f874 	bl	8006418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <vPortFree+0xc0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	4a06      	ldr	r2, [pc, #24]	; (8006350 <vPortFree+0xc0>)
 8006338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800633a:	f7fe ff3b 	bl	80051b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20004198 	.word	0x20004198
 800634c:	20004188 	.word	0x20004188
 8006350:	20004194 	.word	0x20004194

08006354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800635a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800635e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006360:	4b27      	ldr	r3, [pc, #156]	; (8006400 <prvHeapInit+0xac>)
 8006362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00c      	beq.n	8006388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3307      	adds	r3, #7
 8006372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <prvHeapInit+0xac>)
 8006384:	4413      	add	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800638c:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <prvHeapInit+0xb0>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <prvHeapInit+0xb0>)
 8006394:	2200      	movs	r2, #0
 8006396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	4413      	add	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063a0:	2208      	movs	r2, #8
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0307 	bic.w	r3, r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <prvHeapInit+0xb4>)
 80063b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <prvHeapInit+0xb4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063be:	4b12      	ldr	r3, [pc, #72]	; (8006408 <prvHeapInit+0xb4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <prvHeapInit+0xb4>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	4a0a      	ldr	r2, [pc, #40]	; (800640c <prvHeapInit+0xb8>)
 80063e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	4a09      	ldr	r2, [pc, #36]	; (8006410 <prvHeapInit+0xbc>)
 80063ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063ec:	4b09      	ldr	r3, [pc, #36]	; (8006414 <prvHeapInit+0xc0>)
 80063ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063f2:	601a      	str	r2, [r3, #0]
}
 80063f4:	bf00      	nop
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	2000057c 	.word	0x2000057c
 8006404:	2000417c 	.word	0x2000417c
 8006408:	20004184 	.word	0x20004184
 800640c:	2000418c 	.word	0x2000418c
 8006410:	20004188 	.word	0x20004188
 8006414:	20004198 	.word	0x20004198

08006418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006420:	4b28      	ldr	r3, [pc, #160]	; (80064c4 <prvInsertBlockIntoFreeList+0xac>)
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e002      	b.n	800642c <prvInsertBlockIntoFreeList+0x14>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d8f7      	bhi.n	8006426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4413      	add	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	429a      	cmp	r2, r3
 8006446:	d108      	bne.n	800645a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	441a      	add	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d118      	bne.n	80064a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d00d      	beq.n	8006496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	441a      	add	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e008      	b.n	80064a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e003      	b.n	80064a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d002      	beq.n	80064b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	2000417c 	.word	0x2000417c
 80064c8:	20004184 	.word	0x20004184

080064cc <memset>:
 80064cc:	4402      	add	r2, r0
 80064ce:	4603      	mov	r3, r0
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d100      	bne.n	80064d6 <memset+0xa>
 80064d4:	4770      	bx	lr
 80064d6:	f803 1b01 	strb.w	r1, [r3], #1
 80064da:	e7f9      	b.n	80064d0 <memset+0x4>

080064dc <__libc_init_array>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4d0d      	ldr	r5, [pc, #52]	; (8006514 <__libc_init_array+0x38>)
 80064e0:	4c0d      	ldr	r4, [pc, #52]	; (8006518 <__libc_init_array+0x3c>)
 80064e2:	1b64      	subs	r4, r4, r5
 80064e4:	10a4      	asrs	r4, r4, #2
 80064e6:	2600      	movs	r6, #0
 80064e8:	42a6      	cmp	r6, r4
 80064ea:	d109      	bne.n	8006500 <__libc_init_array+0x24>
 80064ec:	4d0b      	ldr	r5, [pc, #44]	; (800651c <__libc_init_array+0x40>)
 80064ee:	4c0c      	ldr	r4, [pc, #48]	; (8006520 <__libc_init_array+0x44>)
 80064f0:	f000 f826 	bl	8006540 <_init>
 80064f4:	1b64      	subs	r4, r4, r5
 80064f6:	10a4      	asrs	r4, r4, #2
 80064f8:	2600      	movs	r6, #0
 80064fa:	42a6      	cmp	r6, r4
 80064fc:	d105      	bne.n	800650a <__libc_init_array+0x2e>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	f855 3b04 	ldr.w	r3, [r5], #4
 8006504:	4798      	blx	r3
 8006506:	3601      	adds	r6, #1
 8006508:	e7ee      	b.n	80064e8 <__libc_init_array+0xc>
 800650a:	f855 3b04 	ldr.w	r3, [r5], #4
 800650e:	4798      	blx	r3
 8006510:	3601      	adds	r6, #1
 8006512:	e7f2      	b.n	80064fa <__libc_init_array+0x1e>
 8006514:	08006660 	.word	0x08006660
 8006518:	08006660 	.word	0x08006660
 800651c:	08006660 	.word	0x08006660
 8006520:	08006664 	.word	0x08006664

08006524 <memcpy>:
 8006524:	440a      	add	r2, r1
 8006526:	4291      	cmp	r1, r2
 8006528:	f100 33ff 	add.w	r3, r0, #4294967295
 800652c:	d100      	bne.n	8006530 <memcpy+0xc>
 800652e:	4770      	bx	lr
 8006530:	b510      	push	{r4, lr}
 8006532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800653a:	4291      	cmp	r1, r2
 800653c:	d1f9      	bne.n	8006532 <memcpy+0xe>
 800653e:	bd10      	pop	{r4, pc}

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr

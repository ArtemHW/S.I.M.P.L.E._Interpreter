
simple_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008220  08008220  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008228  08008228  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047fc  20000010  08008240  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000480c  08008240  0002480c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ec0  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000391f  00000000  00000000  00037f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fe  00000000  00000000  0003ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181cd  00000000  00000000  0003df36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018454  00000000  00000000  00056103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098f78  00000000  00000000  0006e557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b7c  00000000  00000000  001074d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010d04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080e0 	.word	0x080080e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080080e0 	.word	0x080080e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000090 	.word	0x20000090

08000510 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetTimerTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetTimerTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000290 	.word	0x20000290
 8000540:	200002f4 	.word	0x200002f4

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b0a0      	sub	sp, #128	; 0x80
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 800054a:	2300      	movs	r3, #0
 800054c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800054e:	e007      	b.n	8000560 <main+0x1c>
		exm.execution_memory[i] = 0;
 8000550:	4a6f      	ldr	r2, [pc, #444]	; (8000710 <main+0x1cc>)
 8000552:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000554:	4413      	add	r3, r2
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 800055a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800055c:	3301      	adds	r3, #1
 800055e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000562:	2b76      	cmp	r3, #118	; 0x76
 8000564:	d9f4      	bls.n	8000550 <main+0xc>
	}
	exm.memory_pointer = exm.execution_memory;
 8000566:	4b6a      	ldr	r3, [pc, #424]	; (8000710 <main+0x1cc>)
 8000568:	4a69      	ldr	r2, [pc, #420]	; (8000710 <main+0x1cc>)
 800056a:	679a      	str	r2, [r3, #120]	; 0x78
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 800056c:	2300      	movs	r3, #0
 800056e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000570:	e008      	b.n	8000584 <main+0x40>
		exm.sizes_of_instruction[i] = 1;
 8000572:	4a67      	ldr	r2, [pc, #412]	; (8000710 <main+0x1cc>)
 8000574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000576:	4413      	add	r3, r2
 8000578:	337c      	adds	r3, #124	; 0x7c
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 800057e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000580:	3301      	adds	r3, #1
 8000582:	67bb      	str	r3, [r7, #120]	; 0x78
 8000584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000586:	2b3b      	cmp	r3, #59	; 0x3b
 8000588:	d9f3      	bls.n	8000572 <main+0x2e>
	}
	exm.sizes_pointer = exm.sizes_of_instruction;
 800058a:	4b61      	ldr	r3, [pc, #388]	; (8000710 <main+0x1cc>)
 800058c:	4a61      	ldr	r2, [pc, #388]	; (8000714 <main+0x1d0>)
 800058e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000592:	2300      	movs	r3, #0
 8000594:	677b      	str	r3, [r7, #116]	; 0x74
 8000596:	e008      	b.n	80005aa <main+0x66>
		exm.current_instruction[i] = 0;
 8000598:	4a5d      	ldr	r2, [pc, #372]	; (8000710 <main+0x1cc>)
 800059a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800059c:	4413      	add	r3, r2
 800059e:	33bc      	adds	r3, #188	; 0xbc
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 80005a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005a6:	3301      	adds	r3, #1
 80005a8:	677b      	str	r3, [r7, #116]	; 0x74
 80005aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d9f3      	bls.n	8000598 <main+0x54>
	}
	exm.start_speed_value = 0;
 80005b0:	4b57      	ldr	r3, [pc, #348]	; (8000710 <main+0x1cc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 80005b8:	4b55      	ldr	r3, [pc, #340]	; (8000710 <main+0x1cc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 80005c0:	4b53      	ldr	r3, [pc, #332]	; (8000710 <main+0x1cc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 80005c8:	4b51      	ldr	r3, [pc, #324]	; (8000710 <main+0x1cc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	exm.step_counter_second_part = 0;
 80005d0:	4b4f      	ldr	r3, [pc, #316]	; (8000710 <main+0x1cc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	exm.position = 0; // temporary
 80005d8:	4b4d      	ldr	r3, [pc, #308]	; (8000710 <main+0x1cc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fbd8 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8b4 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa3a 	bl	8000a60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 fa0c 	bl	8000a08 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80005f0:	f000 f942 	bl	8000878 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005f4:	f000 f990 	bl	8000918 <MX_TIM4_Init>
  MX_SPI1_Init();
 80005f8:	f000 f908 	bl	800080c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <main+0x1d4>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a45      	ldr	r2, [pc, #276]	; (8000718 <main+0x1d4>)
 8000602:	f043 0320 	orr.w	r3, r3, #32
 8000606:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 8000608:	4b43      	ldr	r3, [pc, #268]	; (8000718 <main+0x1d4>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a42      	ldr	r2, [pc, #264]	; (8000718 <main+0x1d4>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 8000614:	4b40      	ldr	r3, [pc, #256]	; (8000718 <main+0x1d4>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a3f      	ldr	r2, [pc, #252]	; (8000718 <main+0x1d4>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 8000620:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <main+0x1d4>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a3c      	ldr	r2, [pc, #240]	; (8000718 <main+0x1d4>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062a:	60d3      	str	r3, [r2, #12]

  GPIOB->ODR &= ~GPIO_ODR_OD10; //Enable stepper driver
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <main+0x1d8>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a3a      	ldr	r2, [pc, #232]	; (800071c <main+0x1d8>)
 8000632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000636:	6153      	str	r3, [r2, #20]
  HAL_TIM_Base_Start_IT(&htim3);
 8000638:	4839      	ldr	r0, [pc, #228]	; (8000720 <main+0x1dc>)
 800063a:	f002 fc79 	bl	8002f30 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 800063e:	f004 fdce 	bl	80051de <xEventGroupCreate>
 8000642:	4603      	mov	r3, r0
 8000644:	4a37      	ldr	r2, [pc, #220]	; (8000724 <main+0x1e0>)
 8000646:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <main+0x1e0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	4618      	mov	r0, r3
 8000650:	f004 ff0a 	bl	8005468 <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(32, 1);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	2020      	movs	r0, #32
 800065a:	f005 f953 	bl	8005904 <xQueueGenericCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a31      	ldr	r2, [pc, #196]	; (8000728 <main+0x1e4>)
 8000662:	6013      	str	r3, [r2, #0]
  programing_queue = xQueueCreate(64, 1);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	2040      	movs	r0, #64	; 0x40
 800066a:	f005 f94b 	bl	8005904 <xQueueGenericCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a2e      	ldr	r2, [pc, #184]	; (800072c <main+0x1e8>)
 8000672:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 500);
 8000674:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <main+0x1ec>)
 8000676:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800067a:	461d      	mov	r5, r3
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 8000688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fd59 	bl	8005146 <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a27      	ldr	r2, [pc, #156]	; (8000734 <main+0x1f0>)
 8000698:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 500);
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <main+0x1f4>)
 800069c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006a0:	461d      	mov	r5, r3
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 80006ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fd46 	bl	8005146 <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a1f      	ldr	r2, [pc, #124]	; (800073c <main+0x1f8>)
 80006be:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_comunication */
  osThreadDef(UART_comunication, uart_comunication, osPriorityNormal, 0, 160);
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <main+0x1fc>)
 80006c2:	f107 0420 	add.w	r4, r7, #32
 80006c6:	461d      	mov	r5, r3
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_comunicationHandle = osThreadCreate(osThread(UART_comunication), NULL);
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fd33 	bl	8005146 <osThreadCreate>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <main+0x200>)
 80006e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 1000);
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <main+0x204>)
 80006e8:	1d3c      	adds	r4, r7, #4
 80006ea:	461d      	mov	r5, r3
 80006ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 fd22 	bl	8005146 <osThreadCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a11      	ldr	r2, [pc, #68]	; (800074c <main+0x208>)
 8000706:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000708:	f004 fd16 	bl	8005138 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x1c8>
 800070e:	bf00      	nop
 8000710:	20000838 	.word	0x20000838
 8000714:	200008b4 	.word	0x200008b4
 8000718:	40011000 	.word	0x40011000
 800071c:	40020400 	.word	0x40020400
 8000720:	2000074c 	.word	0x2000074c
 8000724:	20000904 	.word	0x20000904
 8000728:	20000830 	.word	0x20000830
 800072c:	20000834 	.word	0x20000834
 8000730:	08008108 	.word	0x08008108
 8000734:	20000820 	.word	0x20000820
 8000738:	08008130 	.word	0x08008130
 800073c:	20000824 	.word	0x20000824
 8000740:	08008160 	.word	0x08008160
 8000744:	20000828 	.word	0x20000828
 8000748:	08008190 	.word	0x08008190
 800074c:	2000082c 	.word	0x2000082c

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 fc84 	bl	800806c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xb4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <SystemClock_Config+0xb4>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xb4>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <SystemClock_Config+0xb8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <SystemClock_Config+0xb8>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <SystemClock_Config+0xb8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fe53 	bl	800246c <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007cc:	f001 f890 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f8b6 	bl	800295c <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007f6:	f001 f87b 	bl	80018f0 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_SPI1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_SPI1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_SPI1_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SPI1_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_SPI1_Init+0x64>)
 800085e:	f002 fa8f 	bl	8002d80 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f001 f842 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200006f4 	.word	0x200006f4
 8000874:	40013000 	.word	0x40013000

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_TIM3_Init+0x98>)
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <MX_TIM3_Init+0x9c>)
 800089a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_TIM3_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_TIM3_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_TIM3_Init+0x98>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_TIM3_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_TIM3_Init+0x98>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008bc:	4814      	ldr	r0, [pc, #80]	; (8000910 <MX_TIM3_Init+0x98>)
 80008be:	f002 fae8 	bl	8002e92 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008c8:	f001 f812 	bl	80018f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80008cc:	2307      	movs	r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80008d0:	2330      	movs	r3, #48	; 0x30
 80008d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_TIM3_Init+0x98>)
 80008dc:	f002 ffb7 	bl	800384e <HAL_TIM_SlaveConfigSynchro>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008e6:	f001 f803 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_TIM3_Init+0x98>)
 80008f8:	f003 fb70 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000902:	f000 fff5 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000074c 	.word	0x2000074c
 8000914:	40000400 	.word	0x40000400

08000918 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800094a:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <MX_TIM4_Init+0xec>)
 800094c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000950:	220f      	movs	r2, #15
 8000952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800095a:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800095c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <MX_TIM4_Init+0xe8>)
 8000970:	f002 fa8f 	bl	8002e92 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800097a:	f000 ffb9 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000988:	4619      	mov	r1, r3
 800098a:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800098c:	f002 fe98 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000996:	f000 ffab 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <MX_TIM4_Init+0xe8>)
 800099c:	f002 fb59 	bl	8003052 <HAL_TIM_PWM_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009a6:	f000 ffa3 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009aa:	2320      	movs	r3, #32
 80009ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	4619      	mov	r1, r3
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_TIM4_Init+0xe8>)
 80009ba:	f003 fb0f 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009c4:	f000 ff94 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	2360      	movs	r3, #96	; 0x60
 80009ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80009cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <MX_TIM4_Init+0xe8>)
 80009e2:	f002 fdab 	bl	800353c <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80009ec:	f000 ff80 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <MX_TIM4_Init+0xe8>)
 80009f2:	f001 f83d 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 80009f6:	bf00      	nop
 80009f8:	3738      	adds	r7, #56	; 0x38
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000794 	.word	0x20000794
 8000a04:	40000800 	.word	0x40000800

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_USART1_UART_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a44:	f003 fb4c 	bl	80040e0 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 ff4f 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200007dc 	.word	0x200007dc
 8000a5c:	40011000 	.word	0x40011000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b48      	ldr	r3, [pc, #288]	; (8000b9c <MX_GPIO_Init+0x13c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a47      	ldr	r2, [pc, #284]	; (8000b9c <MX_GPIO_Init+0x13c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b45      	ldr	r3, [pc, #276]	; (8000b9c <MX_GPIO_Init+0x13c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b41      	ldr	r3, [pc, #260]	; (8000b9c <MX_GPIO_Init+0x13c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a40      	ldr	r2, [pc, #256]	; (8000b9c <MX_GPIO_Init+0x13c>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <MX_GPIO_Init+0x13c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOV_Pin|RAMP_Pin|RDY_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	211a      	movs	r1, #26
 8000ab2:	483b      	ldr	r0, [pc, #236]	; (8000ba0 <MX_GPIO_Init+0x140>)
 8000ab4:	f001 fca8 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENA_stepper_Pin|S0_Pin|S1_Pin|S2_Pin
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4176 	mov.w	r1, #62976	; 0xf600
 8000abe:	4839      	ldr	r0, [pc, #228]	; (8000ba4 <MX_GPIO_Init+0x144>)
 8000ac0:	f001 fca2 	bl	8002408 <HAL_GPIO_WritePin>
                          |S3_Pin|DIR_stepper_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : HOME_Pin */
  GPIO_InitStruct.Pin = HOME_Pin;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HOME_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4831      	ldr	r0, [pc, #196]	; (8000ba0 <MX_GPIO_Init+0x140>)
 8000ada:	f001 fb11 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOV_Pin RAMP_Pin RDY_Pin */
  GPIO_InitStruct.Pin = MOV_Pin|RAMP_Pin|RDY_Pin;
 8000ade:	231a      	movs	r3, #26
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	482a      	ldr	r0, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0x140>)
 8000af6:	f001 fb03 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOVE_EN_Pin */
  GPIO_InitStruct.Pin = MOVE_EN_Pin;
 8000afa:	2304      	movs	r3, #4
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOVE_EN_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4824      	ldr	r0, [pc, #144]	; (8000ba0 <MX_GPIO_Init+0x140>)
 8000b10:	f001 faf6 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : REC_Pin */
  GPIO_InitStruct.Pin = REC_Pin;
 8000b14:	2301      	movs	r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REC_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <MX_GPIO_Init+0x144>)
 8000b28:	f001 faea 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA_stepper_Pin DIR_stepper_Pin */
  GPIO_InitStruct.Pin = ENA_stepper_Pin|DIR_stepper_Pin;
 8000b2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <MX_GPIO_Init+0x144>)
 8000b46:	f001 fadb 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8000b4a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <MX_GPIO_Init+0x144>)
 8000b64:	f001 facc 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : COM_IO_Pin */
  GPIO_InitStruct.Pin = COM_IO_Pin;
 8000b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COM_IO_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_GPIO_Init+0x140>)
 8000b7e:	f001 fabf 	bl	8002100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	2006      	movs	r0, #6
 8000b88:	f001 f9fe 	bl	8001f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b8c:	2006      	movs	r0, #6
 8000b8e:	f001 fa17 	bl	8001fc0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <uart1_rx_callback>:

/* USER CODE BEGIN 4 */
void uart1_rx_callback(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <uart1_rx_callback+0x18>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4903      	ldr	r1, [pc, #12]	; (8000bc4 <uart1_rx_callback+0x1c>)
 8000bb6:	f004 fffd 	bl	8005bb4 <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 8000bba:	bf00      	nop

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000830 	.word	0x20000830
 8000bc4:	40011004 	.word	0x40011004

08000bc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) // HOME position
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d109      	bne.n	8000bec <HAL_GPIO_EXTI_Callback+0x24>
	{
		HAL_UART_Transmit(&huart1, "HOME", 5, 100);
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	2205      	movs	r2, #5
 8000bdc:	4905      	ldr	r1, [pc, #20]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000be0:	f003 facb 	bl	800417a <HAL_UART_Transmit>
		exm.position = 0;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_GPIO_EXTI_Callback+0x34>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	}
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	080081ac 	.word	0x080081ac
 8000bf8:	200007dc 	.word	0x200007dc
 8000bfc:	20000838 	.word	0x20000838

08000c00 <enter_programing>:

void enter_programing()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x40);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <enter_programing+0x34>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fbcf 	bl	80053b0 <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <enter_programing+0x38>)
 8000c14:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <enter_programing+0x38>)
 8000c16:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <enter_programing+0x38>)
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <enter_programing+0x3c>)
 8000c1c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	erase_exm();
 8000c20:	f000 f8e2 	bl	8000de8 <erase_exm>
	xEventGroupSetBits(EventGroup, 0x80);
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <enter_programing+0x34>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 fc1c 	bl	8005468 <xEventGroupSetBits>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000904 	.word	0x20000904
 8000c38:	20000838 	.word	0x20000838
 8000c3c:	200008b4 	.word	0x200008b4

08000c40 <exit_programing>:

void exit_programing()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
//	xEventGroupClearBits(EventGroup, 0x80);
	xEventGroupClearBits(EventGroup, 0xFFFFFF);
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <exit_programing+0x50>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fbaf 	bl	80053b0 <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <exit_programing+0x54>)
 8000c54:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <exit_programing+0x54>)
 8000c56:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <exit_programing+0x54>)
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <exit_programing+0x58>)
 8000c5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	exm.start_speed_value = 0;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <exit_programing+0x54>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	exm.top_speed_value = 0;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <exit_programing+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	exm.ramp_value = 0;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <exit_programing+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	exm.G_sign_value = 0;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <exit_programing+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

	xEventGroupSetBits(EventGroup, 0x40);
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <exit_programing+0x50>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 fbee 	bl	8005468 <xEventGroupSetBits>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000904 	.word	0x20000904
 8000c94:	20000838 	.word	0x20000838
 8000c98:	200008b4 	.word	0x200008b4

08000c9c <write_to_exm>:

void write_to_exm(uint8_t* start_of_data, uint8_t size_of_data)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size_of_data; i++){
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e017      	b.n	8000cde <write_to_exm+0x42>
//		exm.execution_memory[exm.memory_pointer] = start_of_data[i];
		*exm.memory_pointer = start_of_data[i];
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	441a      	add	r2, r3
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <write_to_exm+0x84>)
 8000cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cb8:	7812      	ldrb	r2, [r2, #0]
 8000cba:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <write_to_exm+0x84>)
 8000cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <write_to_exm+0x84>)
 8000cc4:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <write_to_exm+0x84>)
 8000cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <write_to_exm+0x88>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d303      	bcc.n	8000cd8 <write_to_exm+0x3c>
			exm.memory_pointer = exm.execution_memory + 118;
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <write_to_exm+0x8c>)
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <write_to_exm+0x84>)
 8000cd4:	679a      	str	r2, [r3, #120]	; 0x78
			return;
 8000cd6:	e01d      	b.n	8000d14 <write_to_exm+0x78>
	for(int i = 0; i < size_of_data; i++){
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbe3      	blt.n	8000cae <write_to_exm+0x12>
		}
	}
//	exm.sizes_of_instruction[exm.sizes_pointer] = size_of_data;
	*exm.sizes_pointer = size_of_data;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <write_to_exm+0x84>)
 8000ce8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	701a      	strb	r2, [r3, #0]
	exm.sizes_pointer++;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <write_to_exm+0x84>)
 8000cf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <write_to_exm+0x84>)
 8000cfa:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <write_to_exm+0x84>)
 8000d00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <write_to_exm+0x90>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d304      	bcc.n	8000d14 <write_to_exm+0x78>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <write_to_exm+0x94>)
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <write_to_exm+0x84>)
 8000d0e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return;
 8000d12:	bf00      	nop
	}
}
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000838 	.word	0x20000838
 8000d24:	200008af 	.word	0x200008af
 8000d28:	200008ae 	.word	0x200008ae
 8000d2c:	200008f0 	.word	0x200008f0
 8000d30:	200008ef 	.word	0x200008ef

08000d34 <read_from_exm>:

void read_from_exm()
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	e008      	b.n	8000d52 <read_from_exm+0x1e>
		exm.current_instruction[i] = 0;
 8000d40:	4a24      	ldr	r2, [pc, #144]	; (8000dd4 <read_from_exm+0xa0>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	33bc      	adds	r3, #188	; 0xbc
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	ddf3      	ble.n	8000d40 <read_from_exm+0xc>
	}
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	e019      	b.n	8000d92 <read_from_exm+0x5e>
		exm.current_instruction[i] = *exm.memory_pointer;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <read_from_exm+0xa0>)
 8000d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d62:	7819      	ldrb	r1, [r3, #0]
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <read_from_exm+0xa0>)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	33bc      	adds	r3, #188	; 0xbc
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <read_from_exm+0xa0>)
 8000d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <read_from_exm+0xa0>)
 8000d78:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <read_from_exm+0xa0>)
 8000d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <read_from_exm+0xa4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d303      	bcc.n	8000d8c <read_from_exm+0x58>
			exm.memory_pointer = exm.execution_memory + 118;
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <read_from_exm+0xa8>)
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <read_from_exm+0xa0>)
 8000d88:	679a      	str	r2, [r3, #120]	; 0x78
			return ;
 8000d8a:	e01d      	b.n	8000dc8 <read_from_exm+0x94>
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <read_from_exm+0xa0>)
 8000d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	dbdd      	blt.n	8000d5e <read_from_exm+0x2a>
		}
	}
	exm.sizes_pointer++;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <read_from_exm+0xa0>)
 8000da4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <read_from_exm+0xa0>)
 8000dac:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <read_from_exm+0xa0>)
 8000db2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <read_from_exm+0xac>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d304      	bcc.n	8000dc6 <read_from_exm+0x92>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <read_from_exm+0xb0>)
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <read_from_exm+0xa0>)
 8000dc0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return ;
 8000dc4:	e000      	b.n	8000dc8 <read_from_exm+0x94>
	}
	return ;
 8000dc6:	bf00      	nop
}
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000838 	.word	0x20000838
 8000dd8:	200008af 	.word	0x200008af
 8000ddc:	200008ae 	.word	0x200008ae
 8000de0:	200008f0 	.word	0x200008f0
 8000de4:	200008ef 	.word	0x200008ef

08000de8 <erase_exm>:

void erase_exm()
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e007      	b.n	8000e04 <erase_exm+0x1c>
		exm.execution_memory[i] = 0;
 8000df4:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <erase_exm+0x50>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3301      	adds	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b76      	cmp	r3, #118	; 0x76
 8000e08:	d9f4      	bls.n	8000df4 <erase_exm+0xc>
	}
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	e008      	b.n	8000e22 <erase_exm+0x3a>
		exm.sizes_of_instruction[i] = 1;
 8000e10:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <erase_exm+0x50>)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	337c      	adds	r3, #124	; 0x7c
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b3b      	cmp	r3, #59	; 0x3b
 8000e26:	d9f3      	bls.n	8000e10 <erase_exm+0x28>
	}
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000838 	.word	0x20000838

08000e3c <start_motor>:

void start_motor()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	if(exm.start_speed_value == 0) return;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <start_motor+0x48>)
 8000e44:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d017      	beq.n	8000e7c <start_motor+0x40>
	HAL_TIM_Base_Start_IT(&htim4);
 8000e4c:	480e      	ldr	r0, [pc, #56]	; (8000e88 <start_motor+0x4c>)
 8000e4e:	f002 f86f 	bl	8002f30 <HAL_TIM_Base_Start_IT>
	uint16_t temp = (uint16_t)(CK_CNT / exm.start_speed_value);
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <start_motor+0x48>)
 8000e54:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <start_motor+0x50>)
 8000e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e60:	80fb      	strh	r3, [r7, #6]
	TIM4->ARR = temp;
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <start_motor+0x54>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CCR1 = temp/2;
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <start_motor+0x54>)
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e72:	2100      	movs	r1, #0
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <start_motor+0x4c>)
 8000e76:	f002 f945 	bl	8003104 <HAL_TIM_PWM_Start>
 8000e7a:	e000      	b.n	8000e7e <start_motor+0x42>
	if(exm.start_speed_value == 0) return;
 8000e7c:	bf00      	nop
}
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000838 	.word	0x20000838
 8000e88:	20000794 	.word	0x20000794
 8000e8c:	000f4240 	.word	0x000f4240
 8000e90:	40000800 	.word	0x40000800

08000e94 <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8000e9c:	4b66      	ldr	r3, [pc, #408]	; (8001038 <programing_mode+0x1a4>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	f004 f9b2 	bl	8005214 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8000eb0:	2364      	movs	r3, #100	; 0x64
 8000eb2:	2211      	movs	r2, #17
 8000eb4:	4961      	ldr	r1, [pc, #388]	; (800103c <programing_mode+0x1a8>)
 8000eb6:	4862      	ldr	r0, [pc, #392]	; (8001040 <programing_mode+0x1ac>)
 8000eb8:	f003 f95f 	bl	800417a <HAL_UART_Transmit>
	  //vTaskDelay(200);
	  char instruction_for_programing = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	77fb      	strb	r3, [r7, #31]
	  xQueueReceive(programing_queue, &instruction_for_programing, portMAX_DELAY);
 8000ec0:	4b60      	ldr	r3, [pc, #384]	; (8001044 <programing_mode+0x1b0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f107 011f 	add.w	r1, r7, #31
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 ff0d 	bl	8005cec <xQueueReceive>
	  switch (instruction_for_programing) {
 8000ed2:	7ffb      	ldrb	r3, [r7, #31]
 8000ed4:	3b47      	subs	r3, #71	; 0x47
 8000ed6:	2b0d      	cmp	r3, #13
 8000ed8:	f200 80ac 	bhi.w	8001034 <programing_mode+0x1a0>
 8000edc:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <programing_mode+0x50>)
 8000ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee2:	bf00      	nop
 8000ee4:	08000fa7 	.word	0x08000fa7
 8000ee8:	08001035 	.word	0x08001035
 8000eec:	08001035 	.word	0x08001035
 8000ef0:	08001035 	.word	0x08001035
 8000ef4:	08001035 	.word	0x08001035
 8000ef8:	08001035 	.word	0x08001035
 8000efc:	08001035 	.word	0x08001035
 8000f00:	08001035 	.word	0x08001035
 8000f04:	08001035 	.word	0x08001035
 8000f08:	08001035 	.word	0x08001035
 8000f0c:	08001035 	.word	0x08001035
 8000f10:	08000f79 	.word	0x08000f79
 8000f14:	08000f1d 	.word	0x08000f1d
 8000f18:	08000f4b 	.word	0x08000f4b
		case 'S':
			uint8_t data1[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
 8000f1c:	2353      	movs	r3, #83	; 0x53
 8000f1e:	763b      	strb	r3, [r7, #24]
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <programing_mode+0x1b4>)
 8000f22:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	767b      	strb	r3, [r7, #25]
 8000f2a:	4b47      	ldr	r3, [pc, #284]	; (8001048 <programing_mode+0x1b4>)
 8000f2c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	76bb      	strb	r3, [r7, #26]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	76fb      	strb	r3, [r7, #27]
			write_to_exm(data1, sizeof(data1));
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	2104      	movs	r1, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff feaa 	bl	8000c9c <write_to_exm>
			break;
 8000f48:	e075      	b.n	8001036 <programing_mode+0x1a2>
		case 'T':
			uint8_t data2[4] = {'T', (uint8_t)(exm.top_speed_value), (uint8_t)((exm.top_speed_value>>8)), 0};
 8000f4a:	2354      	movs	r3, #84	; 0x54
 8000f4c:	753b      	strb	r3, [r7, #20]
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <programing_mode+0x1b4>)
 8000f50:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	757b      	strb	r3, [r7, #21]
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <programing_mode+0x1b4>)
 8000f5a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8000f5e:	0a1b      	lsrs	r3, r3, #8
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	75bb      	strb	r3, [r7, #22]
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
			write_to_exm(data2, sizeof(data2));
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe93 	bl	8000c9c <write_to_exm>
			break;
 8000f76:	e05e      	b.n	8001036 <programing_mode+0x1a2>
		case 'R':
			uint8_t data3[4] = {'R', (uint8_t)(exm.ramp_value), (uint8_t)((exm.ramp_value>>8)), 0};
 8000f78:	2352      	movs	r3, #82	; 0x52
 8000f7a:	743b      	strb	r3, [r7, #16]
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <programing_mode+0x1b4>)
 8000f7e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	747b      	strb	r3, [r7, #17]
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <programing_mode+0x1b4>)
 8000f88:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	74bb      	strb	r3, [r7, #18]
 8000f94:	2300      	movs	r3, #0
 8000f96:	74fb      	strb	r3, [r7, #19]
			write_to_exm(data3, sizeof(data3));
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fe7c 	bl	8000c9c <write_to_exm>
			break;
 8000fa4:	e047      	b.n	8001036 <programing_mode+0x1a2>
		case 'G':
			instruction_for_programing = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	77fb      	strb	r3, [r7, #31]
			  xQueueReceive(programing_queue, &instruction_for_programing, 5);
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <programing_mode+0x1b0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f107 011f 	add.w	r1, r7, #31
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fe99 	bl	8005cec <xQueueReceive>
			  switch (instruction_for_programing) {
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	2b2b      	cmp	r3, #43	; 0x2b
 8000fbe:	d002      	beq.n	8000fc6 <programing_mode+0x132>
 8000fc0:	2b2d      	cmp	r3, #45	; 0x2d
 8000fc2:	d01b      	beq.n	8000ffc <programing_mode+0x168>
			  	  case '-':
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
						write_to_exm(data5, sizeof(data5));
			  		  break;
			  }
			break;
 8000fc4:	e037      	b.n	8001036 <programing_mode+0x1a2>
						uint8_t data4[4] = {('G'+'+'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8000fc6:	2372      	movs	r3, #114	; 0x72
 8000fc8:	733b      	strb	r3, [r7, #12]
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <programing_mode+0x1b4>)
 8000fcc:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	737b      	strb	r3, [r7, #13]
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <programing_mode+0x1b4>)
 8000fd6:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	73bb      	strb	r3, [r7, #14]
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <programing_mode+0x1b4>)
 8000fe4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000fe8:	141b      	asrs	r3, r3, #16
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73fb      	strb	r3, [r7, #15]
						write_to_exm(data4, sizeof(data4));
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fe51 	bl	8000c9c <write_to_exm>
			  		  break;
 8000ffa:	e01a      	b.n	8001032 <programing_mode+0x19e>
						uint8_t data5[4] = {('G'+'-'), (uint8_t)(exm.G_sign_value), (uint8_t)((exm.G_sign_value>>8)), (uint8_t)((exm.G_sign_value>>16))};
 8000ffc:	2374      	movs	r3, #116	; 0x74
 8000ffe:	723b      	strb	r3, [r7, #8]
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <programing_mode+0x1b4>)
 8001002:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001006:	b2db      	uxtb	r3, r3
 8001008:	727b      	strb	r3, [r7, #9]
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <programing_mode+0x1b4>)
 800100c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72bb      	strb	r3, [r7, #10]
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <programing_mode+0x1b4>)
 800101a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800101e:	141b      	asrs	r3, r3, #16
 8001020:	b2db      	uxtb	r3, r3
 8001022:	72fb      	strb	r3, [r7, #11]
						write_to_exm(data5, sizeof(data5));
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fe36 	bl	8000c9c <write_to_exm>
			  		  break;
 8001030:	bf00      	nop
			break;
 8001032:	e000      	b.n	8001036 <programing_mode+0x1a2>
		default:
			break;
 8001034:	bf00      	nop
  {
 8001036:	e731      	b.n	8000e9c <programing_mode+0x8>
 8001038:	20000904 	.word	0x20000904
 800103c:	080081b4 	.word	0x080081b4
 8001040:	200007dc 	.word	0x200007dc
 8001044:	20000834 	.word	0x20000834
 8001048:	20000838 	.word	0x20000838

0800104c <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8001054:	4b98      	ldr	r3, [pc, #608]	; (80012b8 <interpreter+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f107 010b 	add.w	r1, r7, #11
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fe43 	bl	8005cec <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8001066:	f107 010b 	add.w	r1, r7, #11
 800106a:	230a      	movs	r3, #10
 800106c:	2201      	movs	r2, #1
 800106e:	4893      	ldr	r0, [pc, #588]	; (80012bc <interpreter+0x270>)
 8001070:	f003 f883 	bl	800417a <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	da04      	bge.n	8001086 <interpreter+0x3a>
		  pData &= ~(1<<7);
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001082:	b2db      	uxtb	r3, r3
 8001084:	72fb      	strb	r3, [r7, #11]
	  }
	  __asm__ volatile("NOP");
 8001086:	bf00      	nop
	  char temp = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	72bb      	strb	r3, [r7, #10]
	  switch (pData) {
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8218 	beq.w	80014c4 <interpreter+0x478>
 8001094:	2b00      	cmp	r3, #0
 8001096:	f2c0 8217 	blt.w	80014c8 <interpreter+0x47c>
 800109a:	2b54      	cmp	r3, #84	; 0x54
 800109c:	f300 8214 	bgt.w	80014c8 <interpreter+0x47c>
 80010a0:	2b45      	cmp	r3, #69	; 0x45
 80010a2:	f2c0 8211 	blt.w	80014c8 <interpreter+0x47c>
 80010a6:	3b45      	subs	r3, #69	; 0x45
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	f200 820d 	bhi.w	80014c8 <interpreter+0x47c>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <interpreter+0x68>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	08001141 	.word	0x08001141
 80010b8:	080014c9 	.word	0x080014c9
 80010bc:	08001353 	.word	0x08001353
 80010c0:	080014c9 	.word	0x080014c9
 80010c4:	080014c9 	.word	0x080014c9
 80010c8:	080014c9 	.word	0x080014c9
 80010cc:	080014c9 	.word	0x080014c9
 80010d0:	080014c9 	.word	0x080014c9
 80010d4:	080014c9 	.word	0x080014c9
 80010d8:	080014c9 	.word	0x080014c9
 80010dc:	080014c9 	.word	0x080014c9
 80010e0:	080010f5 	.word	0x080010f5
 80010e4:	080014c9 	.word	0x080014c9
 80010e8:	0800128d 	.word	0x0800128d
 80010ec:	08001147 	.word	0x08001147
 80010f0:	080011e5 	.word	0x080011e5
		case 'P':
			xQueueReceive(uart_queue_rx, &pData, 5);
 80010f4:	4b70      	ldr	r3, [pc, #448]	; (80012b8 <interpreter+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f107 010b 	add.w	r1, r7, #11
 80010fc:	2205      	movs	r2, #5
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fdf4 	bl	8005cec <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8001104:	f107 010b 	add.w	r1, r7, #11
 8001108:	230a      	movs	r3, #10
 800110a:	2201      	movs	r2, #1
 800110c:	486b      	ldr	r0, [pc, #428]	; (80012bc <interpreter+0x270>)
 800110e:	f003 f834 	bl	800417a <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	da04      	bge.n	8001124 <interpreter+0xd8>
					  pData &= ~(1<<7);
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001120:	b2db      	uxtb	r3, r3
 8001122:	72fb      	strb	r3, [r7, #11]
				  }
			__asm__ volatile("NOP");
 8001124:	bf00      	nop
			switch (pData) {
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	2b6f      	cmp	r3, #111	; 0x6f
 800112a:	d002      	beq.n	8001132 <interpreter+0xe6>
 800112c:	2b78      	cmp	r3, #120	; 0x78
 800112e:	d003      	beq.n	8001138 <interpreter+0xec>
//					exm.memory_pointer = 0;
//					xEventGroupSetBits(EventGroup, 0x40);
					exit_programing();
					break;
				default:
					break;
 8001130:	e005      	b.n	800113e <interpreter+0xf2>
					enter_programing();
 8001132:	f7ff fd65 	bl	8000c00 <enter_programing>
					break;
 8001136:	e002      	b.n	800113e <interpreter+0xf2>
					exit_programing();
 8001138:	f7ff fd82 	bl	8000c40 <exit_programing>
					break;
 800113c:	bf00      	nop
			}
			break;
 800113e:	e1cc      	b.n	80014da <interpreter+0x48e>
	    case 'E':
//	    	xEventGroupClearBits(EventGroup, 0x80);
//	    	exm.memory_pointer = 0;
//	    	xEventGroupSetBits(EventGroup, 0x40);
	    	exit_programing();
 8001140:	f7ff fd7e 	bl	8000c40 <exit_programing>
	    	break;
 8001144:	e1c9      	b.n	80014da <interpreter+0x48e>
		case 'S':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001146:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <interpreter+0x274>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f004 f92f 	bl	80053b0 <xEventGroupClearBits>
 8001152:	4603      	mov	r3, r0
 8001154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001158:	2b80      	cmp	r3, #128	; 0x80
 800115a:	f040 81b7 	bne.w	80014cc <interpreter+0x480>
			exm.start_speed_value = 0;
 800115e:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <interpreter+0x278>)
 8001160:	2200      	movs	r2, #0
 8001162:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			temp = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 5; i++){
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e02d      	b.n	80011cc <interpreter+0x180>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8001170:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <interpreter+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f107 010a 	add.w	r1, r7, #10
 8001178:	2205      	movs	r2, #5
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fdb6 	bl	8005cec <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 4)) break;
 8001180:	7abb      	ldrb	r3, [r7, #10]
 8001182:	2b0d      	cmp	r3, #13
 8001184:	d025      	beq.n	80011d2 <interpreter+0x186>
 8001186:	7abb      	ldrb	r3, [r7, #10]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d022      	beq.n	80011d2 <interpreter+0x186>
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d01f      	beq.n	80011d2 <interpreter+0x186>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	b25b      	sxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	da04      	bge.n	80011a4 <interpreter+0x158>
					temp &= ~(1<<7);
 800119a:	7abb      	ldrb	r3, [r7, #10]
 800119c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	72bb      	strb	r3, [r7, #10]
			    }
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <interpreter+0x278>)
 80011a6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80011aa:	461a      	mov	r2, r3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	7abb      	ldrb	r3, [r7, #10]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3b30      	subs	r3, #48	; 0x30
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <interpreter+0x278>)
 80011c2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			for(int i = 0; i < 5; i++){
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	ddce      	ble.n	8001170 <interpreter+0x124>
			}
//			uint8_t data[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
//			write_to_exm(data, sizeof(data));
			xQueueSendToBack(programing_queue, (void*)"S", 100);
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <interpreter+0x27c>)
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2264      	movs	r2, #100	; 0x64
 80011da:	493c      	ldr	r1, [pc, #240]	; (80012cc <interpreter+0x280>)
 80011dc:	f004 fbec 	bl	80059b8 <xQueueGenericSend>
			//exm.
			__asm__ volatile("NOP");
 80011e0:	bf00      	nop
			break;
 80011e2:	e17a      	b.n	80014da <interpreter+0x48e>
		case 'T':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <interpreter+0x274>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 f8e0 	bl	80053b0 <xEventGroupClearBits>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	2b80      	cmp	r3, #128	; 0x80
 80011f8:	f040 816a 	bne.w	80014d0 <interpreter+0x484>
			exm.top_speed_value = 0;
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <interpreter+0x278>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			temp = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	e030      	b.n	8001270 <interpreter+0x224>
				xQueueReceive(uart_queue_rx, &temp, 5);
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <interpreter+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f107 010a 	add.w	r1, r7, #10
 8001216:	2205      	movs	r2, #5
 8001218:	4618      	mov	r0, r3
 800121a:	f004 fd67 	bl	8005cec <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 800121e:	7abb      	ldrb	r3, [r7, #10]
 8001220:	2b0d      	cmp	r3, #13
 8001222:	d02a      	beq.n	800127a <interpreter+0x22e>
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d027      	beq.n	800127a <interpreter+0x22e>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d024      	beq.n	800127a <interpreter+0x22e>
				if(i == 3) break;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d020      	beq.n	8001278 <interpreter+0x22c>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8001236:	7abb      	ldrb	r3, [r7, #10]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	da04      	bge.n	8001248 <interpreter+0x1fc>
					temp &= ~(1<<7);
 800123e:	7abb      	ldrb	r3, [r7, #10]
 8001240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001244:	b2db      	uxtb	r3, r3
 8001246:	72bb      	strb	r3, [r7, #10]
			    }
				exm.top_speed_value = (exm.top_speed_value*10) + (temp - 48);
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <interpreter+0x278>)
 800124a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800124e:	461a      	mov	r2, r3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	b29a      	uxth	r2, r3
 8001258:	7abb      	ldrb	r3, [r7, #10]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4413      	add	r3, r2
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b30      	subs	r3, #48	; 0x30
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <interpreter+0x278>)
 8001266:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			for(int i = 0; i < 4; i++){
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	3301      	adds	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b03      	cmp	r3, #3
 8001274:	ddcb      	ble.n	800120e <interpreter+0x1c2>
 8001276:	e000      	b.n	800127a <interpreter+0x22e>
				if(i == 3) break;
 8001278:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"T", 100);
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <interpreter+0x27c>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2264      	movs	r2, #100	; 0x64
 8001282:	4913      	ldr	r1, [pc, #76]	; (80012d0 <interpreter+0x284>)
 8001284:	f004 fb98 	bl	80059b8 <xQueueGenericSend>
			__asm__ volatile("NOP");
 8001288:	bf00      	nop
			break;
 800128a:	e126      	b.n	80014da <interpreter+0x48e>
		case 'R':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <interpreter+0x274>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f004 f88c 	bl	80053b0 <xEventGroupClearBits>
 8001298:	4603      	mov	r3, r0
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	2b80      	cmp	r3, #128	; 0x80
 80012a0:	f040 8118 	bne.w	80014d4 <interpreter+0x488>
			exm.ramp_value = 0;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <interpreter+0x278>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			temp = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e03f      	b.n	8001336 <interpreter+0x2ea>
 80012b6:	bf00      	nop
 80012b8:	20000830 	.word	0x20000830
 80012bc:	200007dc 	.word	0x200007dc
 80012c0:	20000904 	.word	0x20000904
 80012c4:	20000838 	.word	0x20000838
 80012c8:	20000834 	.word	0x20000834
 80012cc:	080081c8 	.word	0x080081c8
 80012d0:	080081cc 	.word	0x080081cc
				xQueueReceive(uart_queue_rx, &temp, 5);
 80012d4:	4b82      	ldr	r3, [pc, #520]	; (80014e0 <interpreter+0x494>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f107 010a 	add.w	r1, r7, #10
 80012dc:	2205      	movs	r2, #5
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 fd04 	bl	8005cec <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 80012e4:	7abb      	ldrb	r3, [r7, #10]
 80012e6:	2b0d      	cmp	r3, #13
 80012e8:	d02a      	beq.n	8001340 <interpreter+0x2f4>
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d027      	beq.n	8001340 <interpreter+0x2f4>
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d024      	beq.n	8001340 <interpreter+0x2f4>
				if(i == 3) break;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d020      	beq.n	800133e <interpreter+0x2f2>
				if ((temp & (1<<7)) == 0x80){ //Check odd parity
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	da04      	bge.n	800130e <interpreter+0x2c2>
					temp &= ~(1<<7);
 8001304:	7abb      	ldrb	r3, [r7, #10]
 8001306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800130a:	b2db      	uxtb	r3, r3
 800130c:	72bb      	strb	r3, [r7, #10]
			    }
				exm.ramp_value = (exm.ramp_value*10) + (temp - 48);
 800130e:	4b75      	ldr	r3, [pc, #468]	; (80014e4 <interpreter+0x498>)
 8001310:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001314:	461a      	mov	r2, r3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	7abb      	ldrb	r3, [r7, #10]
 8001320:	b29b      	uxth	r3, r3
 8001322:	4413      	add	r3, r2
 8001324:	b29b      	uxth	r3, r3
 8001326:	3b30      	subs	r3, #48	; 0x30
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b6e      	ldr	r3, [pc, #440]	; (80014e4 <interpreter+0x498>)
 800132c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			for(int i = 0; i < 4; i++){
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b03      	cmp	r3, #3
 800133a:	ddcb      	ble.n	80012d4 <interpreter+0x288>
 800133c:	e000      	b.n	8001340 <interpreter+0x2f4>
				if(i == 3) break;
 800133e:	bf00      	nop
			}
			xQueueSendToBack(programing_queue, (void*)"R", 100);
 8001340:	4b69      	ldr	r3, [pc, #420]	; (80014e8 <interpreter+0x49c>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	2300      	movs	r3, #0
 8001346:	2264      	movs	r2, #100	; 0x64
 8001348:	4968      	ldr	r1, [pc, #416]	; (80014ec <interpreter+0x4a0>)
 800134a:	f004 fb35 	bl	80059b8 <xQueueGenericSend>
			__asm__ volatile("NOP");
 800134e:	bf00      	nop
			break;
 8001350:	e0c3      	b.n	80014da <interpreter+0x48e>
		case 'G':
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8001352:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <interpreter+0x4a4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f004 f829 	bl	80053b0 <xEventGroupClearBits>
 800135e:	4603      	mov	r3, r0
 8001360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001364:	2b80      	cmp	r3, #128	; 0x80
 8001366:	f040 80b7 	bne.w	80014d8 <interpreter+0x48c>
			xQueueReceive(uart_queue_rx, &pData, 5);
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <interpreter+0x494>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f107 010b 	add.w	r1, r7, #11
 8001372:	2205      	movs	r2, #5
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fcb9 	bl	8005cec <xQueueReceive>
			  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	da04      	bge.n	800138c <interpreter+0x340>
				  pData &= ~(1<<7);
 8001382:	7afb      	ldrb	r3, [r7, #11]
 8001384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001388:	b2db      	uxtb	r3, r3
 800138a:	72fb      	strb	r3, [r7, #11]
			  }
			__asm__ volatile("NOP");
 800138c:	bf00      	nop
			switch (pData) {
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	2b2b      	cmp	r3, #43	; 0x2b
 8001392:	d002      	beq.n	800139a <interpreter+0x34e>
 8001394:	2b2d      	cmp	r3, #45	; 0x2d
 8001396:	d04a      	beq.n	800142e <interpreter+0x3e2>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
					xQueueSendToBack(programing_queue, (void*)"-", 100);
					__asm__ volatile("NOP");
					break;
				default:
					break;
 8001398:	e093      	b.n	80014c2 <interpreter+0x476>
					exm.G_sign_value = 0;
 800139a:	4b52      	ldr	r3, [pc, #328]	; (80014e4 <interpreter+0x498>)
 800139c:	2200      	movs	r2, #0
 800139e:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	e02d      	b.n	8001408 <interpreter+0x3bc>
						xQueueReceive(uart_queue_rx, &temp, 5);
 80013ac:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <interpreter+0x494>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f107 010a 	add.w	r1, r7, #10
 80013b4:	2205      	movs	r2, #5
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fc98 	bl	8005cec <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 80013bc:	7abb      	ldrb	r3, [r7, #10]
 80013be:	2b0d      	cmp	r3, #13
 80013c0:	d025      	beq.n	800140e <interpreter+0x3c2>
 80013c2:	7abb      	ldrb	r3, [r7, #10]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d022      	beq.n	800140e <interpreter+0x3c2>
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	d01f      	beq.n	800140e <interpreter+0x3c2>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 80013ce:	7abb      	ldrb	r3, [r7, #10]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	da04      	bge.n	80013e0 <interpreter+0x394>
							temp &= ~(1<<7);
 80013d6:	7abb      	ldrb	r3, [r7, #10]
 80013d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <interpreter+0x498>)
 80013e2:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80013e6:	461a      	mov	r2, r3
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	7abb      	ldrb	r3, [r7, #10]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b30      	subs	r3, #48	; 0x30
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <interpreter+0x498>)
 80013fe:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	3301      	adds	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b07      	cmp	r3, #7
 800140c:	ddce      	ble.n	80013ac <interpreter+0x360>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <interpreter+0x49c>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	2264      	movs	r2, #100	; 0x64
 8001416:	4937      	ldr	r1, [pc, #220]	; (80014f4 <interpreter+0x4a8>)
 8001418:	f004 face 	bl	80059b8 <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"+", 100);
 800141c:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <interpreter+0x49c>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	2300      	movs	r3, #0
 8001422:	2264      	movs	r2, #100	; 0x64
 8001424:	4934      	ldr	r1, [pc, #208]	; (80014f8 <interpreter+0x4ac>)
 8001426:	f004 fac7 	bl	80059b8 <xQueueGenericSend>
					__asm__ volatile("NOP");
 800142a:	bf00      	nop
					break;
 800142c:	e049      	b.n	80014c2 <interpreter+0x476>
					exm.G_sign_value = 0;
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <interpreter+0x498>)
 8001430:	2200      	movs	r2, #0
 8001432:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					temp = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	72bb      	strb	r3, [r7, #10]
					for(int i = 0; i < 8; i++){
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e02d      	b.n	800149c <interpreter+0x450>
						xQueueReceive(uart_queue_rx, &temp, 5);
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <interpreter+0x494>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f107 010a 	add.w	r1, r7, #10
 8001448:	2205      	movs	r2, #5
 800144a:	4618      	mov	r0, r3
 800144c:	f004 fc4e 	bl	8005cec <xQueueReceive>
						if((temp == 13) || (temp == 0) || (i == 7)) break;
 8001450:	7abb      	ldrb	r3, [r7, #10]
 8001452:	2b0d      	cmp	r3, #13
 8001454:	d025      	beq.n	80014a2 <interpreter+0x456>
 8001456:	7abb      	ldrb	r3, [r7, #10]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d022      	beq.n	80014a2 <interpreter+0x456>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b07      	cmp	r3, #7
 8001460:	d01f      	beq.n	80014a2 <interpreter+0x456>
						if ((temp & (1<<7)) == 0x80){ //Check odd parity
 8001462:	7abb      	ldrb	r3, [r7, #10]
 8001464:	b25b      	sxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	da04      	bge.n	8001474 <interpreter+0x428>
							temp &= ~(1<<7);
 800146a:	7abb      	ldrb	r3, [r7, #10]
 800146c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001470:	b2db      	uxtb	r3, r3
 8001472:	72bb      	strb	r3, [r7, #10]
						exm.G_sign_value = (exm.G_sign_value*10) + (temp - 48);
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <interpreter+0x498>)
 8001476:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800147a:	461a      	mov	r2, r3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4413      	add	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	7abb      	ldrb	r3, [r7, #10]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	3b30      	subs	r3, #48	; 0x30
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <interpreter+0x498>)
 8001492:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
					for(int i = 0; i < 8; i++){
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b07      	cmp	r3, #7
 80014a0:	ddce      	ble.n	8001440 <interpreter+0x3f4>
					xQueueSendToBack(programing_queue, (void*)"G", 100);
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <interpreter+0x49c>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	2264      	movs	r2, #100	; 0x64
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <interpreter+0x4a8>)
 80014ac:	f004 fa84 	bl	80059b8 <xQueueGenericSend>
					xQueueSendToBack(programing_queue, (void*)"-", 100);
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <interpreter+0x49c>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	2264      	movs	r2, #100	; 0x64
 80014b8:	4910      	ldr	r1, [pc, #64]	; (80014fc <interpreter+0x4b0>)
 80014ba:	f004 fa7d 	bl	80059b8 <xQueueGenericSend>
					__asm__ volatile("NOP");
 80014be:	bf00      	nop
					break;
 80014c0:	bf00      	nop
			}
			break;
 80014c2:	e00a      	b.n	80014da <interpreter+0x48e>
	    case 0:
			break;
 80014c4:	bf00      	nop
 80014c6:	e008      	b.n	80014da <interpreter+0x48e>
		default:
			break;
 80014c8:	bf00      	nop
 80014ca:	e006      	b.n	80014da <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 80014cc:	bf00      	nop
 80014ce:	e004      	b.n	80014da <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 80014d0:	bf00      	nop
 80014d2:	e002      	b.n	80014da <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 80014d4:	bf00      	nop
 80014d6:	e000      	b.n	80014da <interpreter+0x48e>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 80014d8:	bf00      	nop
	}

	  pData = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	72fb      	strb	r3, [r7, #11]
  {
 80014de:	e5b9      	b.n	8001054 <interpreter+0x8>
 80014e0:	20000830 	.word	0x20000830
 80014e4:	20000838 	.word	0x20000838
 80014e8:	20000834 	.word	0x20000834
 80014ec:	080081d0 	.word	0x080081d0
 80014f0:	20000904 	.word	0x20000904
 80014f4:	080081d4 	.word	0x080081d4
 80014f8:	080081d8 	.word	0x080081d8
 80014fc:	080081dc 	.word	0x080081dc

08001500 <uart_comunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_comunication */
void uart_comunication(void const * argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
//	GPIOB->ODR |= GPIO_ODR_OD9; //counterclockwise
//	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  /* Infinite loop */
  for(;;)
  {
	  EventBits_t res = xEventGroupGetBits(EventGroup); // EventBits_t is uint32_t
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <uart_comunication+0x20>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f003 ff4e 	bl	80053b0 <xEventGroupClearBits>
 8001514:	60f8      	str	r0, [r7, #12]
//	  HAL_UART_Transmit(&huart1, &res, 4, 100);
	  vTaskDelay(1500);
 8001516:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800151a:	f004 ffc9 	bl	80064b0 <vTaskDelay>
  {
 800151e:	e7f3      	b.n	8001508 <uart_comunication+0x8>
 8001520:	20000904 	.word	0x20000904

08001524 <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 800152c:	4ba3      	ldr	r3, [pc, #652]	; (80017bc <execution_from_memory+0x298>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2301      	movs	r3, #1
 8001538:	2200      	movs	r2, #0
 800153a:	2140      	movs	r1, #64	; 0x40
 800153c:	f003 fe6a 	bl	8005214 <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	220f      	movs	r2, #15
 8001544:	499e      	ldr	r1, [pc, #632]	; (80017c0 <execution_from_memory+0x29c>)
 8001546:	489f      	ldr	r0, [pc, #636]	; (80017c4 <execution_from_memory+0x2a0>)
 8001548:	f002 fe17 	bl	800417a <HAL_UART_Transmit>
	  read_from_exm();
 800154c:	f7ff fbf2 	bl	8000d34 <read_from_exm>
	  HAL_UART_Transmit(&huart1, exm.current_instruction, sizeof(exm.current_instruction), 100);
 8001550:	2364      	movs	r3, #100	; 0x64
 8001552:	2204      	movs	r2, #4
 8001554:	499c      	ldr	r1, [pc, #624]	; (80017c8 <execution_from_memory+0x2a4>)
 8001556:	489b      	ldr	r0, [pc, #620]	; (80017c4 <execution_from_memory+0x2a0>)
 8001558:	f002 fe0f 	bl	800417a <HAL_UART_Transmit>
	  switch (exm.current_instruction[0]) {
 800155c:	4b9b      	ldr	r3, [pc, #620]	; (80017cc <execution_from_memory+0x2a8>)
 800155e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001562:	3b52      	subs	r3, #82	; 0x52
 8001564:	2b22      	cmp	r3, #34	; 0x22
 8001566:	f200 811b 	bhi.w	80017a0 <execution_from_memory+0x27c>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <execution_from_memory+0x4c>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	0800164d 	.word	0x0800164d
 8001574:	080015fd 	.word	0x080015fd
 8001578:	08001625 	.word	0x08001625
 800157c:	080017a1 	.word	0x080017a1
 8001580:	080017a1 	.word	0x080017a1
 8001584:	080017a1 	.word	0x080017a1
 8001588:	080017a1 	.word	0x080017a1
 800158c:	080017a1 	.word	0x080017a1
 8001590:	080017a1 	.word	0x080017a1
 8001594:	080017a1 	.word	0x080017a1
 8001598:	080017a1 	.word	0x080017a1
 800159c:	080017a1 	.word	0x080017a1
 80015a0:	080017a1 	.word	0x080017a1
 80015a4:	080017a1 	.word	0x080017a1
 80015a8:	080017a1 	.word	0x080017a1
 80015ac:	080017a1 	.word	0x080017a1
 80015b0:	080017a1 	.word	0x080017a1
 80015b4:	080017a1 	.word	0x080017a1
 80015b8:	080017a1 	.word	0x080017a1
 80015bc:	080017a1 	.word	0x080017a1
 80015c0:	080017a1 	.word	0x080017a1
 80015c4:	080017a1 	.word	0x080017a1
 80015c8:	080017a1 	.word	0x080017a1
 80015cc:	080017a1 	.word	0x080017a1
 80015d0:	080017a1 	.word	0x080017a1
 80015d4:	080017a1 	.word	0x080017a1
 80015d8:	080017a1 	.word	0x080017a1
 80015dc:	080017a1 	.word	0x080017a1
 80015e0:	080017a1 	.word	0x080017a1
 80015e4:	080017a1 	.word	0x080017a1
 80015e8:	080017a1 	.word	0x080017a1
 80015ec:	080017a1 	.word	0x080017a1
 80015f0:	08001675 	.word	0x08001675
 80015f4:	080017a1 	.word	0x080017a1
 80015f8:	08001709 	.word	0x08001709
		case 'S':
			exm.start_speed_value = 0;
 80015fc:	4b73      	ldr	r3, [pc, #460]	; (80017cc <execution_from_memory+0x2a8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			exm.start_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001604:	4b71      	ldr	r3, [pc, #452]	; (80017cc <execution_from_memory+0x2a8>)
 8001606:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <execution_from_memory+0x2a8>)
 800160e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001612:	b29b      	uxth	r3, r3
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b29b      	uxth	r3, r3
 8001618:	4413      	add	r3, r2
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <execution_from_memory+0x2a8>)
 800161e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			break;
 8001622:	e0c6      	b.n	80017b2 <execution_from_memory+0x28e>
		case 'T':
			exm.top_speed_value = 0;
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <execution_from_memory+0x2a8>)
 8001626:	2200      	movs	r2, #0
 8001628:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			exm.top_speed_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 800162c:	4b67      	ldr	r3, [pc, #412]	; (80017cc <execution_from_memory+0x2a8>)
 800162e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <execution_from_memory+0x2a8>)
 8001636:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800163a:	b29b      	uxth	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b29b      	uxth	r3, r3
 8001640:	4413      	add	r3, r2
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b61      	ldr	r3, [pc, #388]	; (80017cc <execution_from_memory+0x2a8>)
 8001646:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			break;
 800164a:	e0b2      	b.n	80017b2 <execution_from_memory+0x28e>
		case 'R':
			exm.ramp_value = 0;
 800164c:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <execution_from_memory+0x2a8>)
 800164e:	2200      	movs	r2, #0
 8001650:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			exm.ramp_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8);
 8001654:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <execution_from_memory+0x2a8>)
 8001656:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <execution_from_memory+0x2a8>)
 800165e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8001662:	b29b      	uxth	r3, r3
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b29b      	uxth	r3, r3
 8001668:	4413      	add	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b57      	ldr	r3, [pc, #348]	; (80017cc <execution_from_memory+0x2a8>)
 800166e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
			break;
 8001672:	e09e      	b.n	80017b2 <execution_from_memory+0x28e>
		case ('G'+'+'):
			exm.G_sign_value = 0;
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <execution_from_memory+0x2a8>)
 8001676:	2200      	movs	r2, #0
 8001678:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <execution_from_memory+0x2a8>)
 800167e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b51      	ldr	r3, [pc, #324]	; (80017cc <execution_from_memory+0x2a8>)
 8001686:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800168a:	b29b      	uxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	4413      	add	r3, r2
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <execution_from_memory+0x2a8>)
 8001696:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == exm.G_sign_value) break;
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <execution_from_memory+0x2a8>)
 800169c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <execution_from_memory+0x2a8>)
 80016a4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d07b      	beq.n	80017a4 <execution_from_memory+0x280>
			else if(exm.position > exm.G_sign_value){
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <execution_from_memory+0x2a8>)
 80016ae:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b45      	ldr	r3, [pc, #276]	; (80017cc <execution_from_memory+0x2a8>)
 80016b6:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dd06      	ble.n	80016cc <execution_from_memory+0x1a8>
				GPIOB->ODR |= GPIO_ODR_OD9; //counterclockwise
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <execution_from_memory+0x2ac>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <execution_from_memory+0x2ac>)
 80016c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	e005      	b.n	80016d8 <execution_from_memory+0x1b4>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_OD9; //clockwise
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <execution_from_memory+0x2ac>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	4a3f      	ldr	r2, [pc, #252]	; (80017d0 <execution_from_memory+0x2ac>)
 80016d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016d6:	6153      	str	r3, [r2, #20]
			}
//			  HAL_TIM_Base_Start_IT(&htim4);
//			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			if(exm.start_speed_value == 0) break;
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <execution_from_memory+0x2a8>)
 80016da:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d062      	beq.n	80017a8 <execution_from_memory+0x284>
			start_motor();
 80016e2:	f7ff fbab 	bl	8000e3c <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 80016e6:	4b35      	ldr	r3, [pc, #212]	; (80017bc <execution_from_memory+0x298>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	2200      	movs	r2, #0
 80016f4:	2150      	movs	r1, #80	; 0x50
 80016f6:	f003 fd8d 	bl	8005214 <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <execution_from_memory+0x298>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2110      	movs	r1, #16
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fe55 	bl	80053b0 <xEventGroupClearBits>
			break;
 8001706:	e054      	b.n	80017b2 <execution_from_memory+0x28e>
		case ('G'+'-'):
			exm.G_sign_value = 0;
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <execution_from_memory+0x2a8>)
 800170a:	2200      	movs	r2, #0
 800170c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			exm.G_sign_value = exm.current_instruction[1] + (exm.current_instruction[2]<<8) + (exm.current_instruction[2]<<16);
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <execution_from_memory+0x2a8>)
 8001712:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <execution_from_memory+0x2a8>)
 800171a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800171e:	b29b      	uxth	r3, r3
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <execution_from_memory+0x2a8>)
 800172a:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
			if(exm.position == (0-exm.G_sign_value)) break;
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <execution_from_memory+0x2a8>)
 8001730:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001734:	461a      	mov	r2, r3
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <execution_from_memory+0x2a8>)
 8001738:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800173c:	425b      	negs	r3, r3
 800173e:	429a      	cmp	r2, r3
 8001740:	d034      	beq.n	80017ac <execution_from_memory+0x288>
			else if(exm.position > (0-exm.G_sign_value)){
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <execution_from_memory+0x2a8>)
 8001744:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001748:	461a      	mov	r2, r3
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <execution_from_memory+0x2a8>)
 800174c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001750:	425b      	negs	r3, r3
 8001752:	429a      	cmp	r2, r3
 8001754:	dd06      	ble.n	8001764 <execution_from_memory+0x240>
				GPIOB->ODR |= GPIO_ODR_OD9; //counterclockwise
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <execution_from_memory+0x2ac>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <execution_from_memory+0x2ac>)
 800175c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001760:	6153      	str	r3, [r2, #20]
 8001762:	e005      	b.n	8001770 <execution_from_memory+0x24c>
			}else{
				GPIOB->ODR &= ~GPIO_ODR_OD9; //clockwise
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <execution_from_memory+0x2ac>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <execution_from_memory+0x2ac>)
 800176a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800176e:	6153      	str	r3, [r2, #20]
			}
//			  HAL_TIM_Base_Start_IT(&htim4);
//			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
			if(exm.start_speed_value == 0) break;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <execution_from_memory+0x2a8>)
 8001772:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01a      	beq.n	80017b0 <execution_from_memory+0x28c>
			start_motor();
 800177a:	f7ff fb5f 	bl	8000e3c <start_motor>
			xEventGroupWaitBits(EventGroup, 0x50, pdFALSE, pdTRUE, portMAX_DELAY);
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <execution_from_memory+0x298>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	2200      	movs	r2, #0
 800178c:	2150      	movs	r1, #80	; 0x50
 800178e:	f003 fd41 	bl	8005214 <xEventGroupWaitBits>
			xEventGroupClearBits(EventGroup, 0x10);
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <execution_from_memory+0x298>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2110      	movs	r1, #16
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fe09 	bl	80053b0 <xEventGroupClearBits>
			break;
 800179e:	e008      	b.n	80017b2 <execution_from_memory+0x28e>
		default:
			break;
 80017a0:	bf00      	nop
 80017a2:	e006      	b.n	80017b2 <execution_from_memory+0x28e>
			if(exm.position == exm.G_sign_value) break;
 80017a4:	bf00      	nop
 80017a6:	e004      	b.n	80017b2 <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80017a8:	bf00      	nop
 80017aa:	e002      	b.n	80017b2 <execution_from_memory+0x28e>
			if(exm.position == (0-exm.G_sign_value)) break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <execution_from_memory+0x28e>
			if(exm.start_speed_value == 0) break;
 80017b0:	bf00      	nop
	}
	  vTaskDelay(200);
 80017b2:	20c8      	movs	r0, #200	; 0xc8
 80017b4:	f004 fe7c 	bl	80064b0 <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 80017b8:	e6b8      	b.n	800152c <execution_from_memory+0x8>
 80017ba:	bf00      	nop
 80017bc:	20000904 	.word	0x20000904
 80017c0:	080081e0 	.word	0x080081e0
 80017c4:	200007dc 	.word	0x200007dc
 80017c8:	200008f4 	.word	0x200008f4
 80017cc:	20000838 	.word	0x20000838
 80017d0:	40020400 	.word	0x40020400

080017d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a3c      	ldr	r2, [pc, #240]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d107      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x22>
		exm.step_counter_second_part++;
 80017e6:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80017e8:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80017ec:	3301      	adds	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80017f2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	}

	if (htim->Instance == TIM4) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a38      	ldr	r2, [pc, #224]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d15d      	bne.n	80018bc <HAL_TIM_PeriodElapsedCallback+0xe8>
		if((xEventGroupGetBitsFromISR(EventGroup) & (1<<7)) != 0x80) { // if  Programming mode is OFF
 8001800:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fe0b 	bl	8005420 <xEventGroupGetBitsFromISR>
 800180a:	4603      	mov	r3, r0
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	d053      	beq.n	80018bc <HAL_TIM_PeriodElapsedCallback+0xe8>
			switch ((GPIOB->ODR & (GPIO_ODR_OD9))) {
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181c:	2b00      	cmp	r3, #0
 800181e:	d026      	beq.n	800186e <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001824:	d145      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0xde>
				case (1<<9): //counterclockwise
					exm.position--;
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001828:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	b21a      	sxth	r2, r3
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001836:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
				if(exm.position == 0-((int16_t)exm.G_sign_value)){
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800183c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001840:	461a      	mov	r2, r3
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001844:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001848:	b21b      	sxth	r3, r3
 800184a:	425b      	negs	r3, r3
 800184c:	429a      	cmp	r2, r3
 800184e:	d132      	bne.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0xe2>
				  HAL_TIM_Base_Stop_IT(&htim4);
 8001850:	4825      	ldr	r0, [pc, #148]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001852:	f001 fbcf 	bl	8002ff4 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001856:	2100      	movs	r1, #0
 8001858:	4823      	ldr	r0, [pc, #140]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800185a:	f001 fd03 	bl	8003264 <HAL_TIM_PWM_Stop>
				xEventGroupSetBitsFromISR(EventGroup, 0x10, pdTRUE);
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	2301      	movs	r3, #1
 8001864:	2210      	movs	r2, #16
 8001866:	4821      	ldr	r0, [pc, #132]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001868:	f005 ffa4 	bl	80077b4 <xTimerPendFunctionCallFromISR>
				}
					break;
 800186c:	e023      	b.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0xe2>
				case (0<<9): //clockwise
					exm.position++;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001870:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001874:	b29b      	uxth	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21a      	sxth	r2, r3
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800187e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
					if(exm.position == exm.G_sign_value){
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001884:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8001888:	461a      	mov	r2, r3
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800188c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8001890:	429a      	cmp	r2, r3
 8001892:	d112      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0xe6>
					  HAL_TIM_Base_Stop_IT(&htim4);
 8001894:	4814      	ldr	r0, [pc, #80]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001896:	f001 fbad 	bl	8002ff4 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800189a:	2100      	movs	r1, #0
 800189c:	4812      	ldr	r0, [pc, #72]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800189e:	f001 fce1 	bl	8003264 <HAL_TIM_PWM_Stop>
					xEventGroupSetBitsFromISR(EventGroup, 0x10, pdTRUE);
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	2210      	movs	r2, #16
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018ac:	f005 ff82 	bl	80077b4 <xTimerPendFunctionCallFromISR>
					}
					break;
 80018b0:	e003      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0xe6>
				default:
					break;
 80018b2:	bf00      	nop
 80018b4:	e002      	b.n	80018bc <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80018b6:	bf00      	nop
 80018b8:	e000      	b.n	80018bc <HAL_TIM_PeriodElapsedCallback+0xe8>
					break;
 80018ba:	bf00      	nop
//				xEventGroupSetBitsFromISR(EventGroup, 0x10, pdTRUE);
//			}
//		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xf6>
    HAL_IncTick();
 80018c6:	f000 fa87 	bl	8001dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40000400 	.word	0x40000400
 80018d8:	20000838 	.word	0x20000838
 80018dc:	40000800 	.word	0x40000800
 80018e0:	20000904 	.word	0x20000904
 80018e4:	40020400 	.word	0x40020400
 80018e8:	20000794 	.word	0x20000794
 80018ec:	0800557f 	.word	0x0800557f

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_MspInit+0x54>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_MspInit+0x54>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_MspInit+0x54>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_MspInit+0x54>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_MspInit+0x54>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_MspInit+0x54>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	210f      	movs	r1, #15
 800193e:	f06f 0001 	mvn.w	r0, #1
 8001942:	f000 fb21 	bl	8001f88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_SPI_MspInit+0x84>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12b      	bne.n	80019ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_SPI_MspInit+0x88>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_SPI_MspInit+0x88>)
 8001980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_SPI_MspInit+0x88>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_SPI_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_SPI_MspInit+0x88>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_SPI_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ae:	23e0      	movs	r3, #224	; 0xe0
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019be:	2305      	movs	r3, #5
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_SPI_MspInit+0x8c>)
 80019ca:	f000 fb99 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40013000 	.word	0x40013000
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_TIM_Base_MspInit+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d116      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2105      	movs	r1, #5
 8001a16:	201d      	movs	r0, #29
 8001a18:	f000 fab6 	bl	8001f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a1c:	201d      	movs	r0, #29
 8001a1e:	f000 facf 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a22:	e01a      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_TIM_Base_MspInit+0x88>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d115      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	201e      	movs	r0, #30
 8001a50:	f000 fa9a 	bl	8001f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a54:	201e      	movs	r0, #30
 8001a56:	f000 fab3 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40000800 	.word	0x40000800

08001a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_TIM_MspPostInit+0x68>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11d      	bne.n	8001ace <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_TIM_MspPostInit+0x6c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_TIM_MspPostInit+0x6c>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_TIM_MspPostInit+0x6c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PUL_stepper_Pin;
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUL_stepper_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_TIM_MspPostInit+0x70>)
 8001aca:	f000 fb19 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3720      	adds	r7, #32
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40000800 	.word	0x40000800
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_UART_MspInit+0x94>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d134      	bne.n	8001b70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_UART_MspInit+0x98>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_UART_MspInit+0x98>)
 8001b10:	f043 0310 	orr.w	r3, r3, #16
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_UART_MspInit+0x98>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_UART_MspInit+0x98>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_UART_MspInit+0x98>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_UART_MspInit+0x98>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b50:	2307      	movs	r3, #7
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <HAL_UART_MspInit+0x9c>)
 8001b5c:	f000 fad0 	bl	8002100 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2105      	movs	r1, #5
 8001b64:	2025      	movs	r0, #37	; 0x25
 8001b66:	f000 fa0f 	bl	8001f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b6a:	2025      	movs	r0, #37	; 0x25
 8001b6c:	f000 fa28 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40011000 	.word	0x40011000
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_InitTick+0xe8>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <HAL_InitTick+0xe8>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_InitTick+0xe8>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb0:	f107 0210 	add.w	r2, r7, #16
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 f8ae 	bl	8002d1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bca:	f001 f87f 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8001bce:	6378      	str	r0, [r7, #52]	; 0x34
 8001bd0:	e004      	b.n	8001bdc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bd2:	f001 f87b 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bde:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <HAL_InitTick+0xec>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	0c9b      	lsrs	r3, r3, #18
 8001be6:	3b01      	subs	r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_InitTick+0xf0>)
 8001bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_InitTick+0xf0>)
 8001bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <HAL_InitTick+0xf0>)
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_InitTick+0xf0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_InitTick+0xf0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_InitTick+0xf0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <HAL_InitTick+0xf0>)
 8001c14:	f001 f93d 	bl	8002e92 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d11b      	bne.n	8001c5e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001c26:	4813      	ldr	r0, [pc, #76]	; (8001c74 <HAL_InitTick+0xf0>)
 8001c28:	f001 f982 	bl	8002f30 <HAL_TIM_Base_Start_IT>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d111      	bne.n	8001c5e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c3a:	201c      	movs	r0, #28
 8001c3c:	f000 f9c0 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	d808      	bhi.n	8001c58 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001c46:	2200      	movs	r2, #0
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	201c      	movs	r0, #28
 8001c4c:	f000 f99c 	bl	8001f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c50:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_InitTick+0xf4>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e002      	b.n	8001c5e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3738      	adds	r7, #56	; 0x38
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	20000908 	.word	0x20000908
 8001c78:	20000004 	.word	0x20000004

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <NMI_Handler+0x4>

08001c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler+0x4>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f000 fbc5 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <TIM2_IRQHandler+0x10>)
 8001cbe:	f001 fb35 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000908 	.word	0x20000908

08001ccc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <TIM3_IRQHandler+0x10>)
 8001cd2:	f001 fb2b 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000074c 	.word	0x2000074c

08001ce0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <TIM4_IRQHandler+0x10>)
 8001ce6:	f001 fb21 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000794 	.word	0x20000794

08001cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <USART1_IRQHandler+0x20>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 8001d04:	f7fe ff50 	bl	8000ba8 <uart1_rx_callback>
		__asm__ volatile("NOP");
 8001d08:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <USART1_IRQHandler+0x24>)
 8001d0c:	f002 fac8 	bl	80042a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40011000 	.word	0x40011000
 8001d18:	200007dc 	.word	0x200007dc

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6a:	f7ff ffd7 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f006 f985 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7fe fbe7 	bl	8000544 <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d84:	08008230 	.word	0x08008230
  ldr r2, =_sbss
 8001d88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d8c:	2000480c 	.word	0x2000480c

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_Init+0x40>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_Init+0x40>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_Init+0x40>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 f8d8 	bl	8001f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff fede 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fd98 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000950 	.word	0x20000950

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000950 	.word	0x20000950

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff4c 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9a:	f7ff ff61 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001f9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	6978      	ldr	r0, [r7, #20]
 8001fa6:	f7ff ffb1 	bl	8001f0c <NVIC_EncodePriority>
 8001faa:	4602      	mov	r2, r0
 8001fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff80 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff54 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fea:	f7ff ff09 	bl	8001e00 <HAL_GetTick>
 8001fee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d008      	beq.n	800200e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e052      	b.n	80020b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0216 	bic.w	r2, r2, #22
 800201c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800202c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_DMA_Abort+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0208 	bic.w	r2, r2, #8
 800204c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205e:	e013      	b.n	8002088 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002060:	f7ff fece 	bl	8001e00 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b05      	cmp	r3, #5
 800206c:	d90c      	bls.n	8002088 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2203      	movs	r2, #3
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e015      	b.n	80020b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1e4      	bne.n	8002060 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	223f      	movs	r2, #63	; 0x3f
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d004      	beq.n	80020da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00c      	b.n	80020f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2205      	movs	r2, #5
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e159      	b.n	80023d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8148 	bne.w	80023ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d005      	beq.n	8002152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	2b02      	cmp	r3, #2
 8002150:	d130      	bne.n	80021b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 0201 	and.w	r2, r3, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d017      	beq.n	80021f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d123      	bne.n	8002244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a2 	beq.w	80023ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_GPIO_Init+0x2e8>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a56      	ldr	r2, [pc, #344]	; (80023e8 <HAL_GPIO_Init+0x2e8>)
 8002290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b54      	ldr	r3, [pc, #336]	; (80023e8 <HAL_GPIO_Init+0x2e8>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_GPIO_Init+0x2ec>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a49      	ldr	r2, [pc, #292]	; (80023f0 <HAL_GPIO_Init+0x2f0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x202>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <HAL_GPIO_Init+0x2f4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x1fe>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a47      	ldr	r2, [pc, #284]	; (80023f8 <HAL_GPIO_Init+0x2f8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x1fa>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a46      	ldr	r2, [pc, #280]	; (80023fc <HAL_GPIO_Init+0x2fc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x1f6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a45      	ldr	r2, [pc, #276]	; (8002400 <HAL_GPIO_Init+0x300>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x1f2>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e008      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022f6:	2303      	movs	r3, #3
 80022f8:	e004      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x204>
 8002302:	2300      	movs	r3, #0
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	4093      	lsls	r3, r2
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002314:	4935      	ldr	r1, [pc, #212]	; (80023ec <HAL_GPIO_Init+0x2ec>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_GPIO_Init+0x304>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002346:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <HAL_GPIO_Init+0x304>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_GPIO_Init+0x304>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002370:	4a24      	ldr	r2, [pc, #144]	; (8002404 <HAL_GPIO_Init+0x304>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <HAL_GPIO_Init+0x304>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239a:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <HAL_GPIO_Init+0x304>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_GPIO_Init+0x304>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c4:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_GPIO_Init+0x304>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	f67f aea2 	bls.w	800211c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fbb4 	bl	8000bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e267      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d075      	beq.n	8002576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248a:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d00c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002496:	4b85      	ldr	r3, [pc, #532]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d112      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a2:	4b82      	ldr	r3, [pc, #520]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ae:	d10b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d05b      	beq.n	8002574 <HAL_RCC_OscConfig+0x108>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d157      	bne.n	8002574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e242      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x74>
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e01d      	b.n	800251c <HAL_RCC_OscConfig+0xb0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x98>
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6f      	ldr	r2, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xb0>
 8002504:	4b69      	ldr	r3, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a68      	ldr	r2, [pc, #416]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b66      	ldr	r3, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a65      	ldr	r2, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fc6c 	bl	8001e00 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff fc68 	bl	8001e00 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e207      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0xc0>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fc58 	bl	8001e00 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff fc54 	bl	8001e00 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1f3      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	4b51      	ldr	r3, [pc, #324]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0xe8>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d063      	beq.n	800264a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002596:	2b08      	cmp	r3, #8
 8002598:	d11c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259a:	4b44      	ldr	r3, [pc, #272]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x152>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1c7      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4937      	ldr	r1, [pc, #220]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	e03a      	b.n	800264a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_RCC_OscConfig+0x244>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff fc0d 	bl	8001e00 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff fc09 	bl	8001e00 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1a8      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4925      	ldr	r1, [pc, #148]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_OscConfig+0x244>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff fbec 	bl	8001e00 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262c:	f7ff fbe8 	bl	8001e00 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e187      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d036      	beq.n	80026c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_RCC_OscConfig+0x248>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff fbcc 	bl	8001e00 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266c:	f7ff fbc8 	bl	8001e00 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e167      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x240>)
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x200>
 800268a:	e01b      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_OscConfig+0x248>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7ff fbb5 	bl	8001e00 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	e00e      	b.n	80026b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269a:	f7ff fbb1 	bl	8001e00 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d907      	bls.n	80026b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e150      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
 80026ac:	40023800 	.word	0x40023800
 80026b0:	42470000 	.word	0x42470000
 80026b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b88      	ldr	r3, [pc, #544]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ea      	bne.n	800269a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8097 	beq.w	8002800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b7d      	ldr	r3, [pc, #500]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a7c      	ldr	r2, [pc, #496]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b7a      	ldr	r3, [pc, #488]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d118      	bne.n	8002740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a73      	ldr	r2, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7ff fb71 	bl	8001e00 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7ff fb6d 	bl	8001e00 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e10c      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x2ea>
 8002748:	4b64      	ldr	r3, [pc, #400]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a63      	ldr	r2, [pc, #396]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x324>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x30c>
 800275e:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	4b5c      	ldr	r3, [pc, #368]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a5b      	ldr	r2, [pc, #364]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0x324>
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a57      	ldr	r2, [pc, #348]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	4b55      	ldr	r3, [pc, #340]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a54      	ldr	r2, [pc, #336]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff fb32 	bl	8001e00 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff fb2e 	bl	8001e00 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0cb      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	4b49      	ldr	r3, [pc, #292]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0ee      	beq.n	80027a0 <HAL_RCC_OscConfig+0x334>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7ff fb1c 	bl	8001e00 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7ff fb18 	bl	8001e00 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0b5      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ee      	bne.n	80027cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b39      	ldr	r3, [pc, #228]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4a38      	ldr	r2, [pc, #224]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a1 	beq.w	800294c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	d05c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d141      	bne.n	80028a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_RCC_OscConfig+0x478>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff faec 	bl	8001e00 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7ff fae8 	bl	8001e00 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e087      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	491b      	ldr	r1, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x478>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff fac1 	bl	8001e00 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002882:	f7ff fabd 	bl	8001e00 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e05c      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x416>
 80028a0:	e054      	b.n	800294c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_RCC_OscConfig+0x478>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff faaa 	bl	8001e00 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff faa6 	bl	8001e00 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e045      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_OscConfig+0x470>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x444>
 80028ce:	e03d      	b.n	800294c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e038      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40007000 	.word	0x40007000
 80028e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x4ec>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d028      	beq.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d121      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d11a      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800291e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002920:	4293      	cmp	r3, r2
 8002922:	d111      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	3b01      	subs	r3, #1
 8002932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0cc      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d90c      	bls.n	8002998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d044      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e067      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7ff f9d8 	bl	8001e00 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7ff f9d4 	bl	8001e00 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f83e 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08008208 	.word	0x08008208
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b090      	sub	sp, #64	; 0x40
 8002b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
 8002b34:	2300      	movs	r3, #0
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b38:	2300      	movs	r3, #0
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d00d      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x40>
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	f200 80a1 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x34>
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5a:	e09b      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b60:	e09b      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b62:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b66:	e098      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b68:	4b4f      	ldr	r3, [pc, #316]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d028      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	2200      	movs	r2, #0
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	627a      	str	r2, [r7, #36]	; 0x24
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b90:	2100      	movs	r1, #0
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b94:	fb03 f201 	mul.w	r2, r3, r1
 8002b98:	2300      	movs	r3, #0
 8002b9a:	fb00 f303 	mul.w	r3, r0, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba8:	460a      	mov	r2, r1
 8002baa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	4413      	add	r3, r2
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bc2:	f7fd fb0d 	bl	80001e0 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bce:	e053      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	617a      	str	r2, [r7, #20]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002be2:	f04f 0b00 	mov.w	fp, #0
 8002be6:	4652      	mov	r2, sl
 8002be8:	465b      	mov	r3, fp
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	0159      	lsls	r1, r3, #5
 8002bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf8:	0150      	lsls	r0, r2, #5
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	ebb2 080a 	subs.w	r8, r2, sl
 8002c02:	eb63 090b 	sbc.w	r9, r3, fp
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	00eb      	lsls	r3, r5, #3
 8002c2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c30:	00e2      	lsls	r2, r4, #3
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
 8002c36:	eb14 030a 	adds.w	r3, r4, sl
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	eb45 030b 	adc.w	r3, r5, fp
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c62:	2200      	movs	r2, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	60fa      	str	r2, [r7, #12]
 8002c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c6c:	f7fd fab8 	bl	80001e0 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3740      	adds	r7, #64	; 0x40
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	017d7840 	.word	0x017d7840

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08008218 	.word	0x08008218

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08008218 	.word	0x08008218

08002d1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	220f      	movs	r2, #15
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_RCC_GetClockConfig+0x60>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0207 	and.w	r2, r3, #7
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07b      	b.n	8002e8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d108      	bne.n	8002dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da2:	d009      	beq.n	8002db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
 8002daa:	e005      	b.n	8002db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fdbe 	bl	8001954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	ea42 0103 	orr.w	r1, r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0104 	and.w	r1, r3, #4
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	f003 0210 	and.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e041      	b.n	8002f28 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7fe fd93 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f000 fd27 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d001      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e044      	b.n	8002fd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x6c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d013      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x6c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x6c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x6c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	; (8002fec <HAL_TIM_Base_Start_IT+0xbc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x6c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d111      	bne.n	8002fc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d010      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	e007      	b.n	8002fd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40014000 	.word	0x40014000

08002ff4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	f241 1311 	movw	r3, #4369	; 0x1111
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10f      	bne.n	800303c <HAL_TIM_Base_Stop_IT+0x48>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	f240 4344 	movw	r3, #1092	; 0x444
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_TIM_Base_Stop_IT+0x48>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e041      	b.n	80030e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f839 	bl	80030f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f000 fc47 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_TIM_PWM_Start+0x24>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e022      	b.n	800316e <HAL_TIM_PWM_Start+0x6a>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b04      	cmp	r3, #4
 800312c:	d109      	bne.n	8003142 <HAL_TIM_PWM_Start+0x3e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e015      	b.n	800316e <HAL_TIM_PWM_Start+0x6a>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d109      	bne.n	800315c <HAL_TIM_PWM_Start+0x58>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e008      	b.n	800316e <HAL_TIM_PWM_Start+0x6a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e068      	b.n	8003248 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start+0x82>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003184:	e013      	b.n	80031ae <HAL_TIM_PWM_Start+0xaa>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start+0x92>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003194:	e00b      	b.n	80031ae <HAL_TIM_PWM_Start+0xaa>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Start+0xa2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a4:	e003      	b.n	80031ae <HAL_TIM_PWM_Start+0xaa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 feeb 	bl	8003f92 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <HAL_TIM_PWM_Start+0x14c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d107      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_TIM_PWM_Start+0x14c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_TIM_PWM_Start+0x10e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d013      	beq.n	8003212 <HAL_TIM_PWM_Start+0x10e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a19      	ldr	r2, [pc, #100]	; (8003254 <HAL_TIM_PWM_Start+0x150>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIM_PWM_Start+0x10e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_TIM_PWM_Start+0x154>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_TIM_PWM_Start+0x10e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a16      	ldr	r2, [pc, #88]	; (800325c <HAL_TIM_PWM_Start+0x158>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIM_PWM_Start+0x10e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_TIM_PWM_Start+0x15c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d111      	bne.n	8003236 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d010      	beq.n	8003246 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	e007      	b.n	8003246 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40010000 	.word	0x40010000
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40014000 	.word	0x40014000

08003264 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fe8b 	bl	8003f92 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_TIM_PWM_Stop+0xc4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d117      	bne.n	80032b6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a1a      	ldr	r2, [r3, #32]
 800328c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10f      	bne.n	80032b6 <HAL_TIM_PWM_Stop+0x52>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	f240 4344 	movw	r3, #1092	; 0x444
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_TIM_PWM_Stop+0x52>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_TIM_PWM_Stop+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	f240 4344 	movw	r3, #1092	; 0x444
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_TIM_PWM_Stop+0x82>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_PWM_Stop+0x92>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f4:	e013      	b.n	800331e <HAL_TIM_PWM_Stop+0xba>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_PWM_Stop+0xa2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	e00b      	b.n	800331e <HAL_TIM_PWM_Stop+0xba>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d104      	bne.n	8003316 <HAL_TIM_PWM_Stop+0xb2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003314:	e003      	b.n	800331e <HAL_TIM_PWM_Stop+0xba>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40010000 	.word	0x40010000

0800332c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b02      	cmp	r3, #2
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0202 	mvn.w	r2, #2
 8003358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fab9 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 faab 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fabc 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0204 	mvn.w	r2, #4
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa8f 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa81 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fa92 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0208 	mvn.w	r2, #8
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa65 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa57 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa68 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b10      	cmp	r3, #16
 800343c:	d122      	bne.n	8003484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	d11b      	bne.n	8003484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0210 	mvn.w	r2, #16
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2208      	movs	r2, #8
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa3b 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa2d 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fa3e 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10e      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0201 	mvn.w	r2, #1
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe f992 	bl	80017d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b80      	cmp	r3, #128	; 0x80
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d107      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fdf8 	bl	80040cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d107      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa03 	bl	800390e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d10e      	bne.n	8003534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b20      	cmp	r3, #32
 8003522:	d107      	bne.n	8003534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0220 	mvn.w	r2, #32
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fdc2 	bl	80040b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003556:	2302      	movs	r3, #2
 8003558:	e0ae      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	f200 809f 	bhi.w	80036a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800356a:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080036a9 	.word	0x080036a9
 8003578:	080036a9 	.word	0x080036a9
 800357c:	080036a9 	.word	0x080036a9
 8003580:	080035e5 	.word	0x080035e5
 8003584:	080036a9 	.word	0x080036a9
 8003588:	080036a9 	.word	0x080036a9
 800358c:	080036a9 	.word	0x080036a9
 8003590:	08003627 	.word	0x08003627
 8003594:	080036a9 	.word	0x080036a9
 8003598:	080036a9 	.word	0x080036a9
 800359c:	080036a9 	.word	0x080036a9
 80035a0:	08003667 	.word	0x08003667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fa3a 	bl	8003a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0208 	orr.w	r2, r2, #8
 80035be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6999      	ldr	r1, [r3, #24]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	619a      	str	r2, [r3, #24]
      break;
 80035e2:	e064      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fa80 	bl	8003af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6999      	ldr	r1, [r3, #24]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	021a      	lsls	r2, r3, #8
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	619a      	str	r2, [r3, #24]
      break;
 8003624:	e043      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f000 facb 	bl	8003bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0208 	orr.w	r2, r2, #8
 8003640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0204 	bic.w	r2, r2, #4
 8003650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69d9      	ldr	r1, [r3, #28]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	61da      	str	r2, [r3, #28]
      break;
 8003664:	e023      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fb15 	bl	8003c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	021a      	lsls	r2, r3, #8
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	61da      	str	r2, [r3, #28]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
      break;
 80036ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_ConfigClockSource+0x1c>
 80036d8:	2302      	movs	r3, #2
 80036da:	e0b4      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x186>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003714:	d03e      	beq.n	8003794 <HAL_TIM_ConfigClockSource+0xd4>
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	f200 8087 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	f000 8086 	beq.w	8003832 <HAL_TIM_ConfigClockSource+0x172>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d87f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d01a      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0xa6>
 8003730:	2b70      	cmp	r3, #112	; 0x70
 8003732:	d87b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d050      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x11a>
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d877      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d03c      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0xfa>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d873      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d058      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x13a>
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d86f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d064      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d86b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d060      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d867      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05c      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b10      	cmp	r3, #16
 8003762:	d05a      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	e062      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6899      	ldr	r1, [r3, #8]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f000 fbec 	bl	8003f52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	609a      	str	r2, [r3, #8]
      break;
 8003792:	e04f      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f000 fbd5 	bl	8003f52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b6:	609a      	str	r2, [r3, #8]
      break;
 80037b8:	e03c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 fb49 	bl	8003e5e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2150      	movs	r1, #80	; 0x50
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fba2 	bl	8003f1c <TIM_ITRx_SetConfig>
      break;
 80037d8:	e02c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 fb68 	bl	8003ebc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2160      	movs	r1, #96	; 0x60
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fb92 	bl	8003f1c <TIM_ITRx_SetConfig>
      break;
 80037f8:	e01c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	f000 fb29 	bl	8003e5e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2140      	movs	r1, #64	; 0x40
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fb82 	bl	8003f1c <TIM_ITRx_SetConfig>
      break;
 8003818:	e00c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f000 fb79 	bl	8003f1c <TIM_ITRx_SetConfig>
      break;
 800382a:	e003      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      break;
 8003830:	e000      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003862:	2302      	movs	r3, #2
 8003864:	e031      	b.n	80038ca <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa5f 	bl	8003d3c <TIM_SlaveTimer_SetConfig>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e018      	b.n	80038ca <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038b6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <TIM_Base_SetConfig+0xe4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <TIM_Base_SetConfig+0xe8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a30      	ldr	r2, [pc, #192]	; (8003a10 <TIM_Base_SetConfig+0xec>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <TIM_Base_SetConfig+0xf0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d108      	bne.n	800396e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <TIM_Base_SetConfig+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01b      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d017      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <TIM_Base_SetConfig+0xe8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <TIM_Base_SetConfig+0xec>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00f      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <TIM_Base_SetConfig+0xf0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <TIM_Base_SetConfig+0xf4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <TIM_Base_SetConfig+0xf8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <TIM_Base_SetConfig+0xfc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <TIM_Base_SetConfig+0xe4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0302 	bic.w	r3, r3, #2
 8003a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <TIM_OC1_SetConfig+0xc8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10c      	bne.n	8003a9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0308 	bic.w	r3, r3, #8
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <TIM_OC1_SetConfig+0xc8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40010000 	.word	0x40010000

08003af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0320 	bic.w	r3, r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <TIM_OC2_SetConfig+0xd4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10d      	bne.n	8003b6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <TIM_OC2_SetConfig+0xd4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000

08003bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <TIM_OC3_SetConfig+0xd0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10d      	bne.n	8003c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <TIM_OC3_SetConfig+0xd0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d113      	bne.n	8003c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	621a      	str	r2, [r3, #32]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40010000 	.word	0x40010000

08003c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <TIM_OC4_SetConfig+0x9c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d109      	bne.n	8003d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000

08003d3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f023 0307 	bic.w	r3, r3, #7
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b70      	cmp	r3, #112	; 0x70
 8003d84:	d01a      	beq.n	8003dbc <TIM_SlaveTimer_SetConfig+0x80>
 8003d86:	2b70      	cmp	r3, #112	; 0x70
 8003d88:	d860      	bhi.n	8003e4c <TIM_SlaveTimer_SetConfig+0x110>
 8003d8a:	2b60      	cmp	r3, #96	; 0x60
 8003d8c:	d054      	beq.n	8003e38 <TIM_SlaveTimer_SetConfig+0xfc>
 8003d8e:	2b60      	cmp	r3, #96	; 0x60
 8003d90:	d85c      	bhi.n	8003e4c <TIM_SlaveTimer_SetConfig+0x110>
 8003d92:	2b50      	cmp	r3, #80	; 0x50
 8003d94:	d046      	beq.n	8003e24 <TIM_SlaveTimer_SetConfig+0xe8>
 8003d96:	2b50      	cmp	r3, #80	; 0x50
 8003d98:	d858      	bhi.n	8003e4c <TIM_SlaveTimer_SetConfig+0x110>
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d019      	beq.n	8003dd2 <TIM_SlaveTimer_SetConfig+0x96>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d854      	bhi.n	8003e4c <TIM_SlaveTimer_SetConfig+0x110>
 8003da2:	2b30      	cmp	r3, #48	; 0x30
 8003da4:	d055      	beq.n	8003e52 <TIM_SlaveTimer_SetConfig+0x116>
 8003da6:	2b30      	cmp	r3, #48	; 0x30
 8003da8:	d850      	bhi.n	8003e4c <TIM_SlaveTimer_SetConfig+0x110>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d051      	beq.n	8003e52 <TIM_SlaveTimer_SetConfig+0x116>
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d84c      	bhi.n	8003e4c <TIM_SlaveTimer_SetConfig+0x110>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04d      	beq.n	8003e52 <TIM_SlaveTimer_SetConfig+0x116>
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d04b      	beq.n	8003e52 <TIM_SlaveTimer_SetConfig+0x116>
 8003dba:	e047      	b.n	8003e4c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68d9      	ldr	r1, [r3, #12]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f000 f8c1 	bl	8003f52 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003dd0:	e040      	b.n	8003e54 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d101      	bne.n	8003dde <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e03b      	b.n	8003e56 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e04:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	621a      	str	r2, [r3, #32]
      break;
 8003e22:	e017      	b.n	8003e54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6899      	ldr	r1, [r3, #8]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 f814 	bl	8003e5e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003e36:	e00d      	b.n	8003e54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 f839 	bl	8003ebc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003e4a:	e003      	b.n	8003e54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e000      	b.n	8003e54 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e52:	bf00      	nop
  }

  return status;
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f023 0201 	bic.w	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 030a 	bic.w	r3, r3, #10
 8003e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f023 0210 	bic.w	r2, r3, #16
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	031b      	lsls	r3, r3, #12
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	621a      	str	r2, [r3, #32]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f043 0307 	orr.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b087      	sub	sp, #28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	021a      	lsls	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	609a      	str	r2, [r3, #8]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b087      	sub	sp, #28
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	401a      	ands	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	621a      	str	r2, [r3, #32]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e050      	b.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004040:	d013      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a16      	ldr	r2, [pc, #88]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10c      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	4313      	orrs	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40000c00 	.word	0x40000c00
 80040b4:	40014000 	.word	0x40014000

080040b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e03f      	b.n	8004172 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fcec 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	; 0x24
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fd7b 	bl	8004c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b08a      	sub	sp, #40	; 0x28
 800417e:	af02      	add	r7, sp, #8
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b20      	cmp	r3, #32
 8004198:	d17c      	bne.n	8004294 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_UART_Transmit+0x2c>
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e075      	b.n	8004296 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_UART_Transmit+0x3e>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e06e      	b.n	8004296 <HAL_UART_Transmit+0x11c>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2221      	movs	r2, #33	; 0x21
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ce:	f7fd fe17 	bl	8001e00 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d108      	bne.n	80041fc <HAL_UART_Transmit+0x82>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e003      	b.n	8004204 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800420c:	e02a      	b.n	8004264 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2200      	movs	r2, #0
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 faf9 	bl	8004810 <UART_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e036      	b.n	8004296 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3302      	adds	r3, #2
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	e007      	b.n	8004256 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1cf      	bne.n	800420e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	2140      	movs	r1, #64	; 0x40
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fac9 	bl	8004810 <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e006      	b.n	8004296 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b0ba      	sub	sp, #232	; 0xe8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_UART_IRQHandler+0x66>
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fbd3 	bl	8004aaa <UART_Receive_IT>
      return;
 8004304:	e256      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80de 	beq.w	80044cc <HAL_UART_IRQHandler+0x22c>
 8004310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004320:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80d1 	beq.w	80044cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_UART_IRQHandler+0xae>
 8004336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f043 0201 	orr.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_UART_IRQHandler+0xd2>
 800435a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f043 0202 	orr.w	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_UART_IRQHandler+0xf6>
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0204 	orr.w	r2, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_UART_IRQHandler+0x126>
 80043a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f043 0208 	orr.w	r2, r3, #8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 81ed 	beq.w	80047aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_UART_IRQHandler+0x14e>
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fb5e 	bl	8004aaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <HAL_UART_IRQHandler+0x17a>
 8004412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04f      	beq.n	80044ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa66 	bl	80048ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d141      	bne.n	80044b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800444c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3314      	adds	r3, #20
 8004456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800445a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800445e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1d9      	bne.n	800442e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	2b00      	cmp	r3, #0
 8004480:	d013      	beq.n	80044aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	4a7d      	ldr	r2, [pc, #500]	; (800467c <HAL_UART_IRQHandler+0x3dc>)
 8004488:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fe14 	bl	80020bc <HAL_DMA_Abort_IT>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a4:	4610      	mov	r0, r2
 80044a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	e00e      	b.n	80044c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f99a 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	e00a      	b.n	80044c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f996 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	e006      	b.n	80044c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f992 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044c6:	e170      	b.n	80047aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	bf00      	nop
    return;
 80044ca:	e16e      	b.n	80047aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	f040 814a 	bne.w	800476a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8143 	beq.w	800476a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 813c 	beq.w	800476a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	f040 80b4 	bne.w	8004680 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8140 	beq.w	80047ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004536:	429a      	cmp	r2, r3
 8004538:	f080 8139 	bcs.w	80047ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004542:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454e:	f000 8088 	beq.w	8004662 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800457e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800458a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1d9      	bne.n	8004552 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e1      	bne.n	800459e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800460c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e3      	bne.n	80045da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004644:	65ba      	str	r2, [r7, #88]	; 0x58
 8004646:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800464a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e3      	bne.n	8004620 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	4618      	mov	r0, r3
 800465e:	f7fd fcbd 	bl	8001fdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466a:	b29b      	uxth	r3, r3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8c0 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004678:	e099      	b.n	80047ae <HAL_UART_IRQHandler+0x50e>
 800467a:	bf00      	nop
 800467c:	080049b3 	.word	0x080049b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 808b 	beq.w	80047b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800469c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8086 	beq.w	80047b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046ca:	647a      	str	r2, [r7, #68]	; 0x44
 80046cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e3      	bne.n	80046a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	623b      	str	r3, [r7, #32]
   return(result);
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004702:	633a      	str	r2, [r7, #48]	; 0x30
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60fb      	str	r3, [r7, #12]
   return(result);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e3      	bne.n	8004724 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f848 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004768:	e023      	b.n	80047b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_UART_IRQHandler+0x4ea>
 8004776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f929 	bl	80049da <UART_Transmit_IT>
    return;
 8004788:	e014      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00e      	beq.n	80047b4 <HAL_UART_IRQHandler+0x514>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f969 	bl	8004a7a <UART_EndTransmit_IT>
    return;
 80047a8:	e004      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
    return;
 80047aa:	bf00      	nop
 80047ac:	e002      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
      return;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
      return;
 80047b2:	bf00      	nop
  }
}
 80047b4:	37e8      	adds	r7, #232	; 0xe8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop

080047bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b090      	sub	sp, #64	; 0x40
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	4613      	mov	r3, r2
 800481e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	e050      	b.n	80048c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d04c      	beq.n	80048c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <UART_WaitOnFlagUntilTimeout+0x30>
 8004830:	f7fd fae6 	bl	8001e00 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800483c:	429a      	cmp	r2, r3
 800483e:	d241      	bcs.n	80048c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004860:	637a      	str	r2, [r7, #52]	; 0x34
 8004862:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	613b      	str	r3, [r7, #16]
   return(result);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	63bb      	str	r3, [r7, #56]	; 0x38
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3314      	adds	r3, #20
 8004892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004894:	623a      	str	r2, [r7, #32]
 8004896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	69f9      	ldr	r1, [r7, #28]
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e5      	bne.n	8004874 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e00f      	b.n	80048e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4013      	ands	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d09f      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3740      	adds	r7, #64	; 0x40
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b095      	sub	sp, #84	; 0x54
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004914:	643a      	str	r2, [r7, #64]	; 0x40
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800491a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	61fb      	str	r3, [r7, #28]
   return(result);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e5      	bne.n	8004928 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	2b01      	cmp	r3, #1
 8004962:	d119      	bne.n	8004998 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	60bb      	str	r3, [r7, #8]
   return(result);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f023 0310 	bic.w	r3, r3, #16
 800497a:	647b      	str	r3, [r7, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004984:	61ba      	str	r2, [r7, #24]
 8004986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	613b      	str	r3, [r7, #16]
   return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049a6:	bf00      	nop
 80049a8:	3754      	adds	r7, #84	; 0x54
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff ff09 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b21      	cmp	r3, #33	; 0x21
 80049ec:	d13e      	bne.n	8004a6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	d114      	bne.n	8004a22 <UART_Transmit_IT+0x48>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d110      	bne.n	8004a22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]
 8004a20:	e008      	b.n	8004a34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6211      	str	r1, [r2, #32]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4619      	mov	r1, r3
 8004a42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10f      	bne.n	8004a68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fe8e 	bl	80047bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b08c      	sub	sp, #48	; 0x30
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b22      	cmp	r3, #34	; 0x22
 8004abc:	f040 80ab 	bne.w	8004c16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac8:	d117      	bne.n	8004afa <UART_Receive_IT+0x50>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d113      	bne.n	8004afa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	1c9a      	adds	r2, r3, #2
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
 8004af8:	e026      	b.n	8004b48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d007      	beq.n	8004b1e <UART_Receive_IT+0x74>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <UART_Receive_IT+0x82>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e008      	b.n	8004b3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d15a      	bne.n	8004c12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0220 	bic.w	r2, r2, #32
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d135      	bne.n	8004c08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	623a      	str	r2, [r7, #32]
 8004bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	69f9      	ldr	r1, [r7, #28]
 8004bc8:	6a3a      	ldr	r2, [r7, #32]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d10a      	bne.n	8004bfa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fdf9 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
 8004c06:	e002      	b.n	8004c0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fde1 	bl	80047d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e002      	b.n	8004c18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3730      	adds	r7, #48	; 0x30
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b0c0      	sub	sp, #256	; 0x100
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	ea40 0301 	orr.w	r3, r0, r1
 8004c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c78:	f021 010c 	bic.w	r1, r1, #12
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c86:	430b      	orrs	r3, r1
 8004c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	6999      	ldr	r1, [r3, #24]
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	ea40 0301 	orr.w	r3, r0, r1
 8004ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <UART_SetConfig+0x2cc>)
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d005      	beq.n	8004cc0 <UART_SetConfig+0xa0>
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <UART_SetConfig+0x2d0>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d104      	bne.n	8004cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7fe f818 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8004cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cc8:	e003      	b.n	8004cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cca:	f7fd ffff 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	f040 810c 	bne.w	8004ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	1891      	adds	r1, r2, r2
 8004cf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cfa:	415b      	adcs	r3, r3
 8004cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d02:	4621      	mov	r1, r4
 8004d04:	eb12 0801 	adds.w	r8, r2, r1
 8004d08:	4629      	mov	r1, r5
 8004d0a:	eb43 0901 	adc.w	r9, r3, r1
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d22:	4690      	mov	r8, r2
 8004d24:	4699      	mov	r9, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	eb18 0303 	adds.w	r3, r8, r3
 8004d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d30:	462b      	mov	r3, r5
 8004d32:	eb49 0303 	adc.w	r3, r9, r3
 8004d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d4e:	460b      	mov	r3, r1
 8004d50:	18db      	adds	r3, r3, r3
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50
 8004d54:	4613      	mov	r3, r2
 8004d56:	eb42 0303 	adc.w	r3, r2, r3
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d64:	f7fb fa3c 	bl	80001e0 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011c      	lsls	r4, r3, #4
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d90:	415b      	adcs	r3, r3
 8004d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d98:	4641      	mov	r1, r8
 8004d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0b01 	adc.w	fp, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db8:	4692      	mov	sl, r2
 8004dba:	469b      	mov	fp, r3
 8004dbc:	4643      	mov	r3, r8
 8004dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004de4:	460b      	mov	r3, r1
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dea:	4613      	mov	r3, r2
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
 8004df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dfa:	f7fb f9f1 	bl	80001e0 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2301 	umull	r2, r3, r3, r1
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2264      	movs	r2, #100	; 0x64
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	1acb      	subs	r3, r1, r3
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e1a:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e28:	441c      	add	r4, r3
 8004e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e44:	415b      	adcs	r3, r3
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6339      	str	r1, [r7, #48]	; 0x30
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e80:	464b      	mov	r3, r9
 8004e82:	460a      	mov	r2, r1
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	18db      	adds	r3, r3, r3
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eb6:	f7fb f993 	bl	80001e0 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 0207 	and.w	r2, r3, #7
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4422      	add	r2, r4
 8004ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ee8:	e106      	b.n	80050f8 <UART_SetConfig+0x4d8>
 8004eea:	bf00      	nop
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	40011400 	.word	0x40011400
 8004ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	1891      	adds	r1, r2, r2
 8004f10:	6239      	str	r1, [r7, #32]
 8004f12:	415b      	adcs	r3, r3
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
 8004f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	1854      	adds	r4, r2, r1
 8004f1e:	4649      	mov	r1, r9
 8004f20:	eb43 0501 	adc.w	r5, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	00eb      	lsls	r3, r5, #3
 8004f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f32:	00e2      	lsls	r2, r4, #3
 8004f34:	4614      	mov	r4, r2
 8004f36:	461d      	mov	r5, r3
 8004f38:	4643      	mov	r3, r8
 8004f3a:	18e3      	adds	r3, r4, r3
 8004f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f40:	464b      	mov	r3, r9
 8004f42:	eb45 0303 	adc.w	r3, r5, r3
 8004f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f66:	4629      	mov	r1, r5
 8004f68:	008b      	lsls	r3, r1, #2
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f70:	4621      	mov	r1, r4
 8004f72:	008a      	lsls	r2, r1, #2
 8004f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f78:	f7fb f932 	bl	80001e0 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4b60      	ldr	r3, [pc, #384]	; (8005104 <UART_SetConfig+0x4e4>)
 8004f82:	fba3 2302 	umull	r2, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	011c      	lsls	r4, r3, #4
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	1891      	adds	r1, r2, r2
 8004fa2:	61b9      	str	r1, [r7, #24]
 8004fa4:	415b      	adcs	r3, r3
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fac:	4641      	mov	r1, r8
 8004fae:	1851      	adds	r1, r2, r1
 8004fb0:	6139      	str	r1, [r7, #16]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	414b      	adcs	r3, r1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	00cb      	lsls	r3, r1, #3
 8004fc8:	4651      	mov	r1, sl
 8004fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fce:	4651      	mov	r1, sl
 8004fd0:	00ca      	lsls	r2, r1, #3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005016:	f7fb f8e3 	bl	80001e0 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4611      	mov	r1, r2
 8005020:	4b38      	ldr	r3, [pc, #224]	; (8005104 <UART_SetConfig+0x4e4>)
 8005022:	fba3 2301 	umull	r2, r3, r3, r1
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2264      	movs	r2, #100	; 0x64
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	1acb      	subs	r3, r1, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	3332      	adds	r3, #50	; 0x32
 8005034:	4a33      	ldr	r2, [pc, #204]	; (8005104 <UART_SetConfig+0x4e4>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005040:	441c      	add	r4, r3
 8005042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005046:	2200      	movs	r2, #0
 8005048:	673b      	str	r3, [r7, #112]	; 0x70
 800504a:	677a      	str	r2, [r7, #116]	; 0x74
 800504c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005050:	4642      	mov	r2, r8
 8005052:	464b      	mov	r3, r9
 8005054:	1891      	adds	r1, r2, r2
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	415b      	adcs	r3, r3
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005060:	4641      	mov	r1, r8
 8005062:	1851      	adds	r1, r2, r1
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	4649      	mov	r1, r9
 8005068:	414b      	adcs	r3, r1
 800506a:	607b      	str	r3, [r7, #4]
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005078:	4659      	mov	r1, fp
 800507a:	00cb      	lsls	r3, r1, #3
 800507c:	4651      	mov	r1, sl
 800507e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005082:	4651      	mov	r1, sl
 8005084:	00ca      	lsls	r2, r1, #3
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	4603      	mov	r3, r0
 800508c:	4642      	mov	r2, r8
 800508e:	189b      	adds	r3, r3, r2
 8005090:	66bb      	str	r3, [r7, #104]	; 0x68
 8005092:	464b      	mov	r3, r9
 8005094:	460a      	mov	r2, r1
 8005096:	eb42 0303 	adc.w	r3, r2, r3
 800509a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	663b      	str	r3, [r7, #96]	; 0x60
 80050a6:	667a      	str	r2, [r7, #100]	; 0x64
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050b4:	4649      	mov	r1, r9
 80050b6:	008b      	lsls	r3, r1, #2
 80050b8:	4641      	mov	r1, r8
 80050ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050be:	4641      	mov	r1, r8
 80050c0:	008a      	lsls	r2, r1, #2
 80050c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050c6:	f7fb f88b 	bl	80001e0 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <UART_SetConfig+0x4e4>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <UART_SetConfig+0x4e4>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 020f 	and.w	r2, r3, #15
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4422      	add	r2, r4
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050fe:	46bd      	mov	sp, r7
 8005100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005104:	51eb851f 	.word	0x51eb851f

08005108 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511a:	2b84      	cmp	r3, #132	; 0x84
 800511c:	d005      	beq.n	800512a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800511e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	3303      	adds	r3, #3
 8005128:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800513c:	f001 f9ec 	bl	8006518 <vTaskStartScheduler>
  
  return osOK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	bd80      	pop	{r7, pc}

08005146 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005148:	b089      	sub	sp, #36	; 0x24
 800514a:	af04      	add	r7, sp, #16
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d020      	beq.n	800519a <osThreadCreate+0x54>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01c      	beq.n	800519a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685c      	ldr	r4, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691e      	ldr	r6, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff ffc8 	bl	8005108 <makeFreeRtosPriority>
 8005178:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005182:	9202      	str	r2, [sp, #8]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	9100      	str	r1, [sp, #0]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4632      	mov	r2, r6
 800518c:	4629      	mov	r1, r5
 800518e:	4620      	mov	r0, r4
 8005190:	f000 fffa 	bl	8006188 <xTaskCreateStatic>
 8005194:	4603      	mov	r3, r0
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e01c      	b.n	80051d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685c      	ldr	r4, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff ffaa 	bl	8005108 <makeFreeRtosPriority>
 80051b4:	4602      	mov	r2, r0
 80051b6:	f107 030c 	add.w	r3, r7, #12
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	9200      	str	r2, [sp, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4632      	mov	r2, r6
 80051c2:	4629      	mov	r1, r5
 80051c4:	4620      	mov	r0, r4
 80051c6:	f001 f83c 	bl	8006242 <xTaskCreate>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d001      	beq.n	80051d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051d4:	68fb      	ldr	r3, [r7, #12]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051de <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80051e4:	201c      	movs	r0, #28
 80051e6:	f002 fd57 	bl	8007c98 <pvPortMalloc>
 80051ea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 f9ed 	bl	80055dc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005208:	687b      	ldr	r3, [r7, #4]
	}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b090      	sub	sp, #64	; 0x40
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <xEventGroupWaitBits+0x56>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	61fb      	str	r3, [r7, #28]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xEventGroupWaitBits+0x72>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005286:	f001 fe25 	bl	8006ed4 <xTaskGetSchedulerState>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <xEventGroupWaitBits+0x82>
 8005290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <xEventGroupWaitBits+0x86>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <xEventGroupWaitBits+0x88>
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	617b      	str	r3, [r7, #20]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80052b6:	f001 f995 	bl	80065e4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052c6:	f000 f967 	bl	8005598 <prvTestWaitCondition>
 80052ca:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00e      	beq.n	80052f0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d028      	beq.n	8005332 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	401a      	ands	r2, r3
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e020      	b.n	8005332 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80052f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80052fa:	2301      	movs	r3, #1
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
 80052fe:	e018      	b.n	8005332 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800530c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800531a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531e:	1d18      	adds	r0, r3, #4
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	4313      	orrs	r3, r2
 8005326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005328:	4619      	mov	r1, r3
 800532a:	f001 fb4d 	bl	80069c8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005332:	f001 f965 	bl	8006600 <xTaskResumeAll>
 8005336:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533a:	2b00      	cmp	r3, #0
 800533c:	d031      	beq.n	80053a2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005344:	4b19      	ldr	r3, [pc, #100]	; (80053ac <xEventGroupWaitBits+0x198>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005354:	f001 fe62 	bl	800701c <uxTaskResetEventItemValue>
 8005358:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11a      	bne.n	800539a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005364:	f002 fb76 	bl	8007a54 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005374:	f000 f910 	bl	8005598 <prvTestWaitCondition>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	43db      	mvns	r3, r3
 800538c:	401a      	ands	r2, r3
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005392:	2301      	movs	r3, #1
 8005394:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005396:	f002 fb8d 	bl	8007ab4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80053a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3740      	adds	r7, #64	; 0x40
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <xEventGroupClearBits+0x2a>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60fb      	str	r3, [r7, #12]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <xEventGroupClearBits+0x4a>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60bb      	str	r3, [r7, #8]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80053fa:	f002 fb2b 	bl	8007a54 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	43db      	mvns	r3, r3
 800540c:	401a      	ands	r2, r3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005412:	f002 fb4f 	bl	8007ab4 <vPortExitCritical>

	return uxReturn;
 8005416:	693b      	ldr	r3, [r7, #16]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005420:	b480      	push	{r7}
 8005422:	b089      	sub	sp, #36	; 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800542c:	f3ef 8211 	mrs	r2, BASEPRI
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fa      	str	r2, [r7, #12]
 8005442:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005444:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005446:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005458:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800545a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800545c:	4618      	mov	r0, r3
 800545e:	3724      	adds	r7, #36	; 0x24
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005472:	2300      	movs	r3, #0
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800547a:	2300      	movs	r3, #0
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xEventGroupSetBits+0x32>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	613b      	str	r3, [r7, #16]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <xEventGroupSetBits+0x52>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	60fb      	str	r3, [r7, #12]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	3304      	adds	r3, #4
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	3308      	adds	r3, #8
 80054c4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80054c6:	f001 f88d 	bl	80065e4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80054dc:	e03c      	b.n	8005558 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005518:	e008      	b.n	800552c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	429a      	cmp	r2, r3
 8005526:	d101      	bne.n	800552c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d010      	beq.n	8005554 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800553c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	4313      	orrs	r3, r2
 8005542:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800554c:	4619      	mov	r1, r3
 800554e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005550:	f001 fb04 	bl	8006b5c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	429a      	cmp	r2, r3
 800555e:	d1be      	bne.n	80054de <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	43db      	mvns	r3, r3
 8005568:	401a      	ands	r2, r3
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800556e:	f001 f847 	bl	8006600 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	681b      	ldr	r3, [r3, #0]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3738      	adds	r7, #56	; 0x38
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff6c 	bl	8005468 <xEventGroupSetBits>
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d107      	bne.n	80055be <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e007      	b.n	80055ce <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d101      	bne.n	80055ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f103 0208 	add.w	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f103 0208 	add.w	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d103      	bne.n	800569e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e00c      	b.n	80056b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3308      	adds	r3, #8
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e002      	b.n	80056ac <vListInsert+0x2e>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d2f6      	bcs.n	80056a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6852      	ldr	r2, [r2, #4]
 8005710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d103      	bne.n	8005724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xQueueGenericReset+0x2a>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60bb      	str	r3, [r7, #8]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800576e:	f002 f971 	bl	8007a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	441a      	add	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	3b01      	subs	r3, #1
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	441a      	add	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d114      	bne.n	80057ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01a      	beq.n	8005802 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3310      	adds	r3, #16
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 f961 	bl	8006a98 <xTaskRemoveFromEventList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d012      	beq.n	8005802 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <xQueueGenericReset+0xcc>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	e009      	b.n	8005802 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3310      	adds	r3, #16
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fef2 	bl	80055dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3324      	adds	r3, #36	; 0x24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff feed 	bl	80055dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005802:	f002 f957 	bl	8007ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005806:	2301      	movs	r3, #1
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08e      	sub	sp, #56	; 0x38
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <xQueueGenericCreateStatic+0x52>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <xQueueGenericCreateStatic+0x56>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueGenericCreateStatic+0x58>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	623b      	str	r3, [r7, #32]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <xQueueGenericCreateStatic+0x7e>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <xQueueGenericCreateStatic+0x82>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <xQueueGenericCreateStatic+0x84>
 8005896:	2300      	movs	r3, #0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	61fb      	str	r3, [r7, #28]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058b2:	2348      	movs	r3, #72	; 0x48
 80058b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b48      	cmp	r3, #72	; 0x48
 80058ba:	d00a      	beq.n	80058d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	61bb      	str	r3, [r7, #24]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00d      	beq.n	80058fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4613      	mov	r3, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f83f 	bl	8005978 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3730      	adds	r7, #48	; 0x30
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	613b      	str	r3, [r7, #16]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3348      	adds	r3, #72	; 0x48
 800593c:	4618      	mov	r0, r3
 800593e:	f002 f9ab 	bl	8007c98 <pvPortMalloc>
 8005942:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d011      	beq.n	800596e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3348      	adds	r3, #72	; 0x48
 8005952:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800595c:	79fa      	ldrb	r2, [r7, #7]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	4613      	mov	r3, r2
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f805 	bl	8005978 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800596e:	69bb      	ldr	r3, [r7, #24]
	}
 8005970:	4618      	mov	r0, r3
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e002      	b.n	800599a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059a6:	2101      	movs	r1, #1
 80059a8:	69b8      	ldr	r0, [r7, #24]
 80059aa:	f7ff fecb 	bl	8005744 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08e      	sub	sp, #56	; 0x38
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059c6:	2300      	movs	r3, #0
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGenericSend+0x32>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <xQueueGenericSend+0x40>
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <xQueueGenericSend+0x44>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <xQueueGenericSend+0x46>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <xQueueGenericSend+0x60>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d103      	bne.n	8005a26 <xQueueGenericSend+0x6e>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <xQueueGenericSend+0x72>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericSend+0x74>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericSend+0x8e>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	623b      	str	r3, [r7, #32]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a46:	f001 fa45 	bl	8006ed4 <xTaskGetSchedulerState>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <xQueueGenericSend+0x9e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueGenericSend+0xa2>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueGenericSend+0xa4>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xQueueGenericSend+0xbe>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61fb      	str	r3, [r7, #28]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a76:	f001 ffed 	bl	8007a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d302      	bcc.n	8005a8c <xQueueGenericSend+0xd4>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d129      	bne.n	8005ae0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a92:	f000 fa0b 	bl	8005eac <prvCopyDataToQueue>
 8005a96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d010      	beq.n	8005ac2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	3324      	adds	r3, #36	; 0x24
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fff7 	bl	8006a98 <xTaskRemoveFromEventList>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d013      	beq.n	8005ad8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ab0:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <xQueueGenericSend+0x1f8>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	e00a      	b.n	8005ad8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ac8:	4b39      	ldr	r3, [pc, #228]	; (8005bb0 <xQueueGenericSend+0x1f8>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ad8:	f001 ffec 	bl	8007ab4 <vPortExitCritical>
				return pdPASS;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e063      	b.n	8005ba8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ae6:	f001 ffe5 	bl	8007ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e05c      	b.n	8005ba8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 f891 	bl	8006c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005afe:	2301      	movs	r3, #1
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b02:	f001 ffd7 	bl	8007ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b06:	f000 fd6d 	bl	80065e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b0a:	f001 ffa3 	bl	8007a54 <vPortEnterCritical>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b14:	b25b      	sxtb	r3, r3
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d103      	bne.n	8005b24 <xQueueGenericSend+0x16c>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2a:	b25b      	sxtb	r3, r3
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d103      	bne.n	8005b3a <xQueueGenericSend+0x182>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3a:	f001 ffbb 	bl	8007ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b3e:	1d3a      	adds	r2, r7, #4
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	4611      	mov	r1, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 f880 	bl	8006c4c <xTaskCheckForTimeOut>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d124      	bne.n	8005b9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b54:	f000 faa2 	bl	800609c <prvIsQueueFull>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d018      	beq.n	8005b90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	3310      	adds	r3, #16
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 ff0a 	bl	8006980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6e:	f000 fa2d 	bl	8005fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b72:	f000 fd45 	bl	8006600 <xTaskResumeAll>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f47f af7c 	bne.w	8005a76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <xQueueGenericSend+0x1f8>)
 8005b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	e772      	b.n	8005a76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b92:	f000 fa1b 	bl	8005fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b96:	f000 fd33 	bl	8006600 <xTaskResumeAll>
 8005b9a:	e76c      	b.n	8005a76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9e:	f000 fa15 	bl	8005fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ba2:	f000 fd2d 	bl	8006600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3738      	adds	r7, #56	; 0x38
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	e000ed04 	.word	0xe000ed04

08005bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b090      	sub	sp, #64	; 0x40
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <xQueueGenericSendFromISR+0x3c>
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <xQueueGenericSendFromISR+0x40>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <xQueueGenericSendFromISR+0x42>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d103      	bne.n	8005c1e <xQueueGenericSendFromISR+0x6a>
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <xQueueGenericSendFromISR+0x6e>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <xQueueGenericSendFromISR+0x70>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	623b      	str	r3, [r7, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c3e:	f001 ffeb 	bl	8007c18 <vPortValidateInterruptPriority>
	__asm volatile
 8005c42:	f3ef 8211 	mrs	r2, BASEPRI
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	61fa      	str	r2, [r7, #28]
 8005c58:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <xQueueGenericSendFromISR+0xbc>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d12f      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c86:	f000 f911 	bl	8005eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d112      	bne.n	8005cba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d016      	beq.n	8005cca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	3324      	adds	r3, #36	; 0x24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fef9 	bl	8006a98 <xTaskRemoveFromEventList>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00e      	beq.n	8005cca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e007      	b.n	8005cca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	b25a      	sxtb	r2, r3
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005cce:	e001      	b.n	8005cd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f383 8811 	msr	BASEPRI, r3
}
 8005cde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3740      	adds	r7, #64	; 0x40
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <xQueueReceive+0x30>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	623b      	str	r3, [r7, #32]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <xQueueReceive+0x3e>
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <xQueueReceive+0x42>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <xQueueReceive+0x44>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <xQueueReceive+0x5e>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	61fb      	str	r3, [r7, #28]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d4a:	f001 f8c3 	bl	8006ed4 <xTaskGetSchedulerState>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <xQueueReceive+0x6e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <xQueueReceive+0x72>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <xQueueReceive+0x74>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueReceive+0x8e>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61bb      	str	r3, [r7, #24]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d7a:	f001 fe6b 	bl	8007a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01f      	beq.n	8005dca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d8e:	f000 f8f7 	bl	8005f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	1e5a      	subs	r2, r3, #1
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00f      	beq.n	8005dc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	3310      	adds	r3, #16
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fe76 	bl	8006a98 <xTaskRemoveFromEventList>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005db2:	4b3d      	ldr	r3, [pc, #244]	; (8005ea8 <xQueueReceive+0x1bc>)
 8005db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dc2:	f001 fe77 	bl	8007ab4 <vPortExitCritical>
				return pdPASS;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e069      	b.n	8005e9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dd0:	f001 fe70 	bl	8007ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e062      	b.n	8005e9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dde:	f107 0310 	add.w	r3, r7, #16
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 ff1c 	bl	8006c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dec:	f001 fe62 	bl	8007ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005df0:	f000 fbf8 	bl	80065e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005df4:	f001 fe2e 	bl	8007a54 <vPortEnterCritical>
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d103      	bne.n	8005e0e <xQueueReceive+0x122>
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e14:	b25b      	sxtb	r3, r3
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d103      	bne.n	8005e24 <xQueueReceive+0x138>
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e24:	f001 fe46 	bl	8007ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e28:	1d3a      	adds	r2, r7, #4
 8005e2a:	f107 0310 	add.w	r3, r7, #16
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 ff0b 	bl	8006c4c <xTaskCheckForTimeOut>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d123      	bne.n	8005e84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3e:	f000 f917 	bl	8006070 <prvIsQueueEmpty>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d017      	beq.n	8005e78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	3324      	adds	r3, #36	; 0x24
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4611      	mov	r1, r2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fd95 	bl	8006980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e58:	f000 f8b8 	bl	8005fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e5c:	f000 fbd0 	bl	8006600 <xTaskResumeAll>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d189      	bne.n	8005d7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e66:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <xQueueReceive+0x1bc>)
 8005e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	e780      	b.n	8005d7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e7a:	f000 f8a7 	bl	8005fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e7e:	f000 fbbf 	bl	8006600 <xTaskResumeAll>
 8005e82:	e77a      	b.n	8005d7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e86:	f000 f8a1 	bl	8005fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e8a:	f000 fbb9 	bl	8006600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e90:	f000 f8ee 	bl	8006070 <prvIsQueueEmpty>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f43f af6f 	beq.w	8005d7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3730      	adds	r7, #48	; 0x30
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d14d      	bne.n	8005f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 f81a 	bl	8006f10 <xTaskPriorityDisinherit>
 8005edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	609a      	str	r2, [r3, #8]
 8005ee4:	e043      	b.n	8005f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d119      	bne.n	8005f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6858      	ldr	r0, [r3, #4]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	f002 f8e4 	bl	80080c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d32b      	bcc.n	8005f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	e026      	b.n	8005f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68d8      	ldr	r0, [r3, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	f002 f8ca 	bl	80080c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	425b      	negs	r3, r3
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d207      	bcs.n	8005f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	425b      	negs	r3, r3
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d105      	bne.n	8005f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f76:	697b      	ldr	r3, [r7, #20]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d018      	beq.n	8005fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	441a      	add	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d303      	bcc.n	8005fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68d9      	ldr	r1, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6838      	ldr	r0, [r7, #0]
 8005fc0:	f002 f880 	bl	80080c4 <memcpy>
	}
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fd4:	f001 fd3e 	bl	8007a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe0:	e011      	b.n	8006006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d012      	beq.n	8006010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fd52 	bl	8006a98 <xTaskRemoveFromEventList>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ffa:	f000 fe89 	bl	8006d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	3b01      	subs	r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	dce9      	bgt.n	8005fe2 <prvUnlockQueue+0x16>
 800600e:	e000      	b.n	8006012 <prvUnlockQueue+0x46>
					break;
 8006010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800601a:	f001 fd4b 	bl	8007ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800601e:	f001 fd19 	bl	8007a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800602a:	e011      	b.n	8006050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3310      	adds	r3, #16
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fd2d 	bl	8006a98 <xTaskRemoveFromEventList>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006044:	f000 fe64 	bl	8006d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	3b01      	subs	r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dce9      	bgt.n	800602c <prvUnlockQueue+0x60>
 8006058:	e000      	b.n	800605c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800605a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	22ff      	movs	r2, #255	; 0xff
 8006060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006064:	f001 fd26 	bl	8007ab4 <vPortExitCritical>
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006078:	f001 fcec 	bl	8007a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006084:	2301      	movs	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e001      	b.n	800608e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800608e:	f001 fd11 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 8006092:	68fb      	ldr	r3, [r7, #12]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060a4:	f001 fcd6 	bl	8007a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d102      	bne.n	80060ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e001      	b.n	80060be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060be:	f001 fcf9 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e014      	b.n	8006106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060dc:	4a0f      	ldr	r2, [pc, #60]	; (800611c <vQueueAddToRegistry+0x50>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060e8:	490c      	ldr	r1, [pc, #48]	; (800611c <vQueueAddToRegistry+0x50>)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060f2:	4a0a      	ldr	r2, [pc, #40]	; (800611c <vQueueAddToRegistry+0x50>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060fe:	e006      	b.n	800610e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b07      	cmp	r3, #7
 800610a:	d9e7      	bls.n	80060dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20000954 	.word	0x20000954

08006120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006130:	f001 fc90 	bl	8007a54 <vPortEnterCritical>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800613a:	b25b      	sxtb	r3, r3
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d103      	bne.n	800614a <vQueueWaitForMessageRestricted+0x2a>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006150:	b25b      	sxtb	r3, r3
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d103      	bne.n	8006160 <vQueueWaitForMessageRestricted+0x40>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006160:	f001 fca8 	bl	8007ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fc63 	bl	8006a40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800617a:	6978      	ldr	r0, [r7, #20]
 800617c:	f7ff ff26 	bl	8005fcc <prvUnlockQueue>
	}
 8006180:	bf00      	nop
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	; 0x38
 800618c:	af04      	add	r7, sp, #16
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	623b      	str	r3, [r7, #32]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xTaskCreateStatic+0x46>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	61fb      	str	r3, [r7, #28]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061ce:	2364      	movs	r3, #100	; 0x64
 80061d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b64      	cmp	r3, #100	; 0x64
 80061d6:	d00a      	beq.n	80061ee <xTaskCreateStatic+0x66>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	61bb      	str	r3, [r7, #24]
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01e      	beq.n	8006234 <xTaskCreateStatic+0xac>
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006204:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	2202      	movs	r2, #2
 800620a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800620e:	2300      	movs	r3, #0
 8006210:	9303      	str	r3, [sp, #12]
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	9302      	str	r3, [sp, #8]
 8006216:	f107 0314 	add.w	r3, r7, #20
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f850 	bl	80062cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800622c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800622e:	f000 f8d5 	bl	80063dc <prvAddNewTaskToReadyList>
 8006232:	e001      	b.n	8006238 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006238:	697b      	ldr	r3, [r7, #20]
	}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	; 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006242:	b580      	push	{r7, lr}
 8006244:	b08c      	sub	sp, #48	; 0x30
 8006246:	af04      	add	r7, sp, #16
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	603b      	str	r3, [r7, #0]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fd1e 	bl	8007c98 <pvPortMalloc>
 800625c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00e      	beq.n	8006282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006264:	2064      	movs	r0, #100	; 0x64
 8006266:	f001 fd17 	bl	8007c98 <pvPortMalloc>
 800626a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
 8006278:	e005      	b.n	8006286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800627a:	6978      	ldr	r0, [r7, #20]
 800627c:	f001 fdd8 	bl	8007e30 <vPortFree>
 8006280:	e001      	b.n	8006286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006294:	88fa      	ldrh	r2, [r7, #6]
 8006296:	2300      	movs	r3, #0
 8006298:	9303      	str	r3, [sp, #12]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	9302      	str	r3, [sp, #8]
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f80e 	bl	80062cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062b0:	69f8      	ldr	r0, [r7, #28]
 80062b2:	f000 f893 	bl	80063dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062b6:	2301      	movs	r3, #1
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e002      	b.n	80062c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062bc:	f04f 33ff 	mov.w	r3, #4294967295
 80062c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062c2:	69bb      	ldr	r3, [r7, #24]
	}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062e4:	3b01      	subs	r3, #1
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f023 0307 	bic.w	r3, r3, #7
 80062f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <prvInitialiseNewTask+0x48>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	617b      	str	r3, [r7, #20]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d01f      	beq.n	800635a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	e012      	b.n	8006346 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	7819      	ldrb	r1, [r3, #0]
 8006328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	3334      	adds	r3, #52	; 0x34
 8006330:	460a      	mov	r2, r1
 8006332:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3301      	adds	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	2b1f      	cmp	r3, #31
 800634a:	d9e9      	bls.n	8006320 <prvInitialiseNewTask+0x54>
 800634c:	e000      	b.n	8006350 <prvInitialiseNewTask+0x84>
			{
				break;
 800634e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006358:	e003      	b.n	8006362 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	2b06      	cmp	r3, #6
 8006366:	d901      	bls.n	800636c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006368:	2306      	movs	r3, #6
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	2200      	movs	r2, #0
 800637c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	3304      	adds	r3, #4
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f94a 	bl	800561c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	3318      	adds	r3, #24
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff f945 	bl	800561c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	f1c3 0207 	rsb	r2, r3, #7
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	2200      	movs	r2, #0
 80063ac:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	68f9      	ldr	r1, [r7, #12]
 80063ba:	69b8      	ldr	r0, [r7, #24]
 80063bc:	f001 fa1a 	bl	80077f4 <pxPortInitialiseStack>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063d2:	bf00      	nop
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063e4:	f001 fb36 	bl	8007a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063e8:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <prvAddNewTaskToReadyList+0xb8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	4a29      	ldr	r2, [pc, #164]	; (8006494 <prvAddNewTaskToReadyList+0xb8>)
 80063f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063f2:	4b29      	ldr	r3, [pc, #164]	; (8006498 <prvAddNewTaskToReadyList+0xbc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063fa:	4a27      	ldr	r2, [pc, #156]	; (8006498 <prvAddNewTaskToReadyList+0xbc>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006400:	4b24      	ldr	r3, [pc, #144]	; (8006494 <prvAddNewTaskToReadyList+0xb8>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d110      	bne.n	800642a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006408:	f000 fca6 	bl	8006d58 <prvInitialiseTaskLists>
 800640c:	e00d      	b.n	800642a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800640e:	4b23      	ldr	r3, [pc, #140]	; (800649c <prvAddNewTaskToReadyList+0xc0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <prvAddNewTaskToReadyList+0xbc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	429a      	cmp	r2, r3
 8006422:	d802      	bhi.n	800642a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006424:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <prvAddNewTaskToReadyList+0xbc>)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800642a:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <prvAddNewTaskToReadyList+0xc4>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3301      	adds	r3, #1
 8006430:	4a1b      	ldr	r2, [pc, #108]	; (80064a0 <prvAddNewTaskToReadyList+0xc4>)
 8006432:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	2201      	movs	r2, #1
 800643a:	409a      	lsls	r2, r3
 800643c:	4b19      	ldr	r3, [pc, #100]	; (80064a4 <prvAddNewTaskToReadyList+0xc8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4313      	orrs	r3, r2
 8006442:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <prvAddNewTaskToReadyList+0xc8>)
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <prvAddNewTaskToReadyList+0xcc>)
 8006454:	441a      	add	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7ff f8ea 	bl	8005636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006462:	f001 fb27 	bl	8007ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <prvAddNewTaskToReadyList+0xc0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00e      	beq.n	800648c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <prvAddNewTaskToReadyList+0xbc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	429a      	cmp	r2, r3
 800647a:	d207      	bcs.n	800648c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <prvAddNewTaskToReadyList+0xd0>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000a94 	.word	0x20000a94
 8006498:	20000994 	.word	0x20000994
 800649c:	20000aa0 	.word	0x20000aa0
 80064a0:	20000ab0 	.word	0x20000ab0
 80064a4:	20000a9c 	.word	0x20000a9c
 80064a8:	20000998 	.word	0x20000998
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064c2:	4b13      	ldr	r3, [pc, #76]	; (8006510 <vTaskDelay+0x60>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <vTaskDelay+0x30>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60bb      	str	r3, [r7, #8]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064e0:	f000 f880 	bl	80065e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064e4:	2100      	movs	r1, #0
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fdb0 	bl	800704c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064ec:	f000 f888 	bl	8006600 <xTaskResumeAll>
 80064f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d107      	bne.n	8006508 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <vTaskDelay+0x64>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000abc 	.word	0x20000abc
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006526:	463a      	mov	r2, r7
 8006528:	1d39      	adds	r1, r7, #4
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f7f9 ffd4 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	9202      	str	r2, [sp, #8]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	2300      	movs	r3, #0
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	2300      	movs	r3, #0
 8006544:	460a      	mov	r2, r1
 8006546:	4921      	ldr	r1, [pc, #132]	; (80065cc <vTaskStartScheduler+0xb4>)
 8006548:	4821      	ldr	r0, [pc, #132]	; (80065d0 <vTaskStartScheduler+0xb8>)
 800654a:	f7ff fe1d 	bl	8006188 <xTaskCreateStatic>
 800654e:	4603      	mov	r3, r0
 8006550:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <vTaskStartScheduler+0xbc>)
 8006552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006554:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <vTaskStartScheduler+0xbc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800655c:	2301      	movs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e001      	b.n	8006566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800656c:	f000 fdd4 	bl	8007118 <xTimerCreateTimerTask>
 8006570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d116      	bne.n	80065a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	613b      	str	r3, [r7, #16]
}
 800658a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800658c:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <vTaskStartScheduler+0xc0>)
 800658e:	f04f 32ff 	mov.w	r2, #4294967295
 8006592:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <vTaskStartScheduler+0xc4>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800659a:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <vTaskStartScheduler+0xc8>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065a0:	f001 f9b6 	bl	8007910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065a4:	e00e      	b.n	80065c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d10a      	bne.n	80065c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60fb      	str	r3, [r7, #12]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vTaskStartScheduler+0xaa>
}
 80065c4:	bf00      	nop
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	080081f0 	.word	0x080081f0
 80065d0:	08006d29 	.word	0x08006d29
 80065d4:	20000ab8 	.word	0x20000ab8
 80065d8:	20000ab4 	.word	0x20000ab4
 80065dc:	20000aa0 	.word	0x20000aa0
 80065e0:	20000a98 	.word	0x20000a98

080065e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <vTaskSuspendAll+0x18>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	4a03      	ldr	r2, [pc, #12]	; (80065fc <vTaskSuspendAll+0x18>)
 80065f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20000abc 	.word	0x20000abc

08006600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800660a:	2300      	movs	r3, #0
 800660c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800660e:	4b41      	ldr	r3, [pc, #260]	; (8006714 <xTaskResumeAll+0x114>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <xTaskResumeAll+0x2c>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	603b      	str	r3, [r7, #0]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800662c:	f001 fa12 	bl	8007a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006630:	4b38      	ldr	r3, [pc, #224]	; (8006714 <xTaskResumeAll+0x114>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3b01      	subs	r3, #1
 8006636:	4a37      	ldr	r2, [pc, #220]	; (8006714 <xTaskResumeAll+0x114>)
 8006638:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663a:	4b36      	ldr	r3, [pc, #216]	; (8006714 <xTaskResumeAll+0x114>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d161      	bne.n	8006706 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006642:	4b35      	ldr	r3, [pc, #212]	; (8006718 <xTaskResumeAll+0x118>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d05d      	beq.n	8006706 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664a:	e02e      	b.n	80066aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	4b33      	ldr	r3, [pc, #204]	; (800671c <xTaskResumeAll+0x11c>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3318      	adds	r3, #24
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff f849 	bl	80056f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff f844 	bl	80056f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	2201      	movs	r2, #1
 800666e:	409a      	lsls	r2, r3
 8006670:	4b2b      	ldr	r3, [pc, #172]	; (8006720 <xTaskResumeAll+0x120>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4313      	orrs	r3, r2
 8006676:	4a2a      	ldr	r2, [pc, #168]	; (8006720 <xTaskResumeAll+0x120>)
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a27      	ldr	r2, [pc, #156]	; (8006724 <xTaskResumeAll+0x124>)
 8006688:	441a      	add	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f7fe ffd0 	bl	8005636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669a:	4b23      	ldr	r3, [pc, #140]	; (8006728 <xTaskResumeAll+0x128>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066a4:	4b21      	ldr	r3, [pc, #132]	; (800672c <xTaskResumeAll+0x12c>)
 80066a6:	2201      	movs	r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066aa:	4b1c      	ldr	r3, [pc, #112]	; (800671c <xTaskResumeAll+0x11c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1cc      	bne.n	800664c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066b8:	f000 fbec 	bl	8006e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066bc:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <xTaskResumeAll+0x130>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066c8:	f000 f846 	bl	8006758 <xTaskIncrementTick>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066d2:	4b16      	ldr	r3, [pc, #88]	; (800672c <xTaskResumeAll+0x12c>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3b01      	subs	r3, #1
 80066dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f1      	bne.n	80066c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <xTaskResumeAll+0x130>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066ea:	4b10      	ldr	r3, [pc, #64]	; (800672c <xTaskResumeAll+0x12c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066f2:	2301      	movs	r3, #1
 80066f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <xTaskResumeAll+0x134>)
 80066f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006706:	f001 f9d5 	bl	8007ab4 <vPortExitCritical>

	return xAlreadyYielded;
 800670a:	68bb      	ldr	r3, [r7, #8]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000abc 	.word	0x20000abc
 8006718:	20000a94 	.word	0x20000a94
 800671c:	20000a54 	.word	0x20000a54
 8006720:	20000a9c 	.word	0x20000a9c
 8006724:	20000998 	.word	0x20000998
 8006728:	20000994 	.word	0x20000994
 800672c:	20000aa8 	.word	0x20000aa8
 8006730:	20000aa4 	.word	0x20000aa4
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <xTaskGetTickCount+0x1c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006744:	687b      	ldr	r3, [r7, #4]
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000a98 	.word	0x20000a98

08006758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006762:	4b4e      	ldr	r3, [pc, #312]	; (800689c <xTaskIncrementTick+0x144>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f040 808e 	bne.w	8006888 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800676c:	4b4c      	ldr	r3, [pc, #304]	; (80068a0 <xTaskIncrementTick+0x148>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3301      	adds	r3, #1
 8006772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006774:	4a4a      	ldr	r2, [pc, #296]	; (80068a0 <xTaskIncrementTick+0x148>)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d120      	bne.n	80067c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006780:	4b48      	ldr	r3, [pc, #288]	; (80068a4 <xTaskIncrementTick+0x14c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	603b      	str	r3, [r7, #0]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <xTaskIncrementTick+0x46>
 80067a0:	4b40      	ldr	r3, [pc, #256]	; (80068a4 <xTaskIncrementTick+0x14c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	4b40      	ldr	r3, [pc, #256]	; (80068a8 <xTaskIncrementTick+0x150>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a3e      	ldr	r2, [pc, #248]	; (80068a4 <xTaskIncrementTick+0x14c>)
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	4a3e      	ldr	r2, [pc, #248]	; (80068a8 <xTaskIncrementTick+0x150>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	4b3d      	ldr	r3, [pc, #244]	; (80068ac <xTaskIncrementTick+0x154>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	4a3c      	ldr	r2, [pc, #240]	; (80068ac <xTaskIncrementTick+0x154>)
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	f000 fb69 	bl	8006e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067c2:	4b3b      	ldr	r3, [pc, #236]	; (80068b0 <xTaskIncrementTick+0x158>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d348      	bcc.n	800685e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067cc:	4b35      	ldr	r3, [pc, #212]	; (80068a4 <xTaskIncrementTick+0x14c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d6:	4b36      	ldr	r3, [pc, #216]	; (80068b0 <xTaskIncrementTick+0x158>)
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295
 80067dc:	601a      	str	r2, [r3, #0]
					break;
 80067de:	e03e      	b.n	800685e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e0:	4b30      	ldr	r3, [pc, #192]	; (80068a4 <xTaskIncrementTick+0x14c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d203      	bcs.n	8006800 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067f8:	4a2d      	ldr	r2, [pc, #180]	; (80068b0 <xTaskIncrementTick+0x158>)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067fe:	e02e      	b.n	800685e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe ff73 	bl	80056f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d004      	beq.n	800681c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	3318      	adds	r3, #24
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe ff6a 	bl	80056f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2201      	movs	r2, #1
 8006822:	409a      	lsls	r2, r3
 8006824:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <xTaskIncrementTick+0x15c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4313      	orrs	r3, r2
 800682a:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <xTaskIncrementTick+0x15c>)
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <xTaskIncrementTick+0x160>)
 800683c:	441a      	add	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	3304      	adds	r3, #4
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f7fe fef6 	bl	8005636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <xTaskIncrementTick+0x164>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	429a      	cmp	r2, r3
 8006856:	d3b9      	bcc.n	80067cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006858:	2301      	movs	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800685c:	e7b6      	b.n	80067cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800685e:	4b17      	ldr	r3, [pc, #92]	; (80068bc <xTaskIncrementTick+0x164>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4914      	ldr	r1, [pc, #80]	; (80068b8 <xTaskIncrementTick+0x160>)
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d901      	bls.n	800687a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006876:	2301      	movs	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800687a:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <xTaskIncrementTick+0x168>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e004      	b.n	8006892 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <xTaskIncrementTick+0x16c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3301      	adds	r3, #1
 800688e:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <xTaskIncrementTick+0x16c>)
 8006890:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006892:	697b      	ldr	r3, [r7, #20]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20000abc 	.word	0x20000abc
 80068a0:	20000a98 	.word	0x20000a98
 80068a4:	20000a4c 	.word	0x20000a4c
 80068a8:	20000a50 	.word	0x20000a50
 80068ac:	20000aac 	.word	0x20000aac
 80068b0:	20000ab4 	.word	0x20000ab4
 80068b4:	20000a9c 	.word	0x20000a9c
 80068b8:	20000998 	.word	0x20000998
 80068bc:	20000994 	.word	0x20000994
 80068c0:	20000aa8 	.word	0x20000aa8
 80068c4:	20000aa4 	.word	0x20000aa4

080068c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ce:	4b27      	ldr	r3, [pc, #156]	; (800696c <vTaskSwitchContext+0xa4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068d6:	4b26      	ldr	r3, [pc, #152]	; (8006970 <vTaskSwitchContext+0xa8>)
 80068d8:	2201      	movs	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068dc:	e03f      	b.n	800695e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <vTaskSwitchContext+0xa8>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e4:	4b23      	ldr	r3, [pc, #140]	; (8006974 <vTaskSwitchContext+0xac>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	fab3 f383 	clz	r3, r3
 80068f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	f1c3 031f 	rsb	r3, r3, #31
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	491f      	ldr	r1, [pc, #124]	; (8006978 <vTaskSwitchContext+0xb0>)
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <vTaskSwitchContext+0x5c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <vTaskSwitchContext+0x5a>
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a12      	ldr	r2, [pc, #72]	; (8006978 <vTaskSwitchContext+0xb0>)
 8006930:	4413      	add	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3308      	adds	r3, #8
 8006946:	429a      	cmp	r2, r3
 8006948:	d104      	bne.n	8006954 <vTaskSwitchContext+0x8c>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	4a08      	ldr	r2, [pc, #32]	; (800697c <vTaskSwitchContext+0xb4>)
 800695c:	6013      	str	r3, [r2, #0]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20000abc 	.word	0x20000abc
 8006970:	20000aa8 	.word	0x20000aa8
 8006974:	20000a9c 	.word	0x20000a9c
 8006978:	20000998 	.word	0x20000998
 800697c:	20000994 	.word	0x20000994

08006980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <vTaskPlaceOnEventList+0x44>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe fe65 	bl	800567e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069b4:	2101      	movs	r1, #1
 80069b6:	6838      	ldr	r0, [r7, #0]
 80069b8:	f000 fb48 	bl	800704c <prvAddCurrentTaskToDelayedList>
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000994 	.word	0x20000994

080069c8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10a      	bne.n	80069f0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	617b      	str	r3, [r7, #20]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <vTaskPlaceOnUnorderedEventList+0x70>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	613b      	str	r3, [r7, #16]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a18:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4619      	mov	r1, r3
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7fe fe07 	bl	8005636 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a28:	2101      	movs	r1, #1
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fb0e 	bl	800704c <prvAddCurrentTaskToDelayedList>
}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000abc 	.word	0x20000abc
 8006a3c:	20000994 	.word	0x20000994

08006a40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	617b      	str	r3, [r7, #20]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3318      	adds	r3, #24
 8006a6e:	4619      	mov	r1, r3
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7fe fde0 	bl	8005636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	68b8      	ldr	r0, [r7, #8]
 8006a86:	f000 fae1 	bl	800704c <prvAddCurrentTaskToDelayedList>
	}
 8006a8a:	bf00      	nop
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000994 	.word	0x20000994

08006a98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	60fb      	str	r3, [r7, #12]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3318      	adds	r3, #24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fe11 	bl	80056f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ace:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <xTaskRemoveFromEventList+0xac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d11c      	bne.n	8006b10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fe08 	bl	80056f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <xTaskRemoveFromEventList+0xb0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <xTaskRemoveFromEventList+0xb0>)
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <xTaskRemoveFromEventList+0xb4>)
 8006b00:	441a      	add	r2, r3
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7fe fd94 	bl	8005636 <vListInsertEnd>
 8006b0e:	e005      	b.n	8006b1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3318      	adds	r3, #24
 8006b14:	4619      	mov	r1, r3
 8006b16:	480e      	ldr	r0, [pc, #56]	; (8006b50 <xTaskRemoveFromEventList+0xb8>)
 8006b18:	f7fe fd8d 	bl	8005636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <xTaskRemoveFromEventList+0xbc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d905      	bls.n	8006b36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <xTaskRemoveFromEventList+0xc0>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e001      	b.n	8006b3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b3a:	697b      	ldr	r3, [r7, #20]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20000abc 	.word	0x20000abc
 8006b48:	20000a9c 	.word	0x20000a9c
 8006b4c:	20000998 	.word	0x20000998
 8006b50:	20000a54 	.word	0x20000a54
 8006b54:	20000994 	.word	0x20000994
 8006b58:	20000aa8 	.word	0x20000aa8

08006b5c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b66:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	613b      	str	r3, [r7, #16]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fe fd9d 	bl	80056f0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fd98 	bl	80056f0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	409a      	lsls	r2, r3
 8006bc8:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	4a10      	ldr	r2, [pc, #64]	; (8006c10 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006be0:	441a      	add	r2, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f7fe fd24 	bl	8005636 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf2:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d902      	bls.n	8006c02 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006bfc:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
	}
}
 8006c02:	bf00      	nop
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000abc 	.word	0x20000abc
 8006c10:	20000a9c 	.word	0x20000a9c
 8006c14:	20000998 	.word	0x20000998
 8006c18:	20000994 	.word	0x20000994
 8006c1c:	20000aa8 	.word	0x20000aa8

08006c20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c28:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <vTaskInternalSetTimeOutState+0x24>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <vTaskInternalSetTimeOutState+0x28>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	605a      	str	r2, [r3, #4]
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	20000aac 	.word	0x20000aac
 8006c48:	20000a98 	.word	0x20000a98

08006c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	613b      	str	r3, [r7, #16]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	60fb      	str	r3, [r7, #12]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c8e:	f000 fee1 	bl	8007a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c92:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <xTaskCheckForTimeOut+0xbc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d102      	bne.n	8006cb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	e023      	b.n	8006cfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <xTaskCheckForTimeOut+0xc0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d007      	beq.n	8006cce <xTaskCheckForTimeOut+0x82>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d302      	bcc.n	8006cce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	e015      	b.n	8006cfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d20b      	bcs.n	8006cf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff ff9b 	bl	8006c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	e004      	b.n	8006cfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cfa:	f000 fedb 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000a98 	.word	0x20000a98
 8006d0c:	20000aac 	.word	0x20000aac

08006d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d14:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <vTaskMissedYield+0x14>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
}
 8006d1a:	bf00      	nop
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20000aa8 	.word	0x20000aa8

08006d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d30:	f000 f852 	bl	8006dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <prvIdleTask+0x28>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d9f9      	bls.n	8006d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <prvIdleTask+0x2c>)
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d4c:	e7f0      	b.n	8006d30 <prvIdleTask+0x8>
 8006d4e:	bf00      	nop
 8006d50:	20000998 	.word	0x20000998
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d5e:	2300      	movs	r3, #0
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	e00c      	b.n	8006d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4a12      	ldr	r2, [pc, #72]	; (8006db8 <prvInitialiseTaskLists+0x60>)
 8006d70:	4413      	add	r3, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fc32 	bl	80055dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	607b      	str	r3, [r7, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b06      	cmp	r3, #6
 8006d82:	d9ef      	bls.n	8006d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d84:	480d      	ldr	r0, [pc, #52]	; (8006dbc <prvInitialiseTaskLists+0x64>)
 8006d86:	f7fe fc29 	bl	80055dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d8a:	480d      	ldr	r0, [pc, #52]	; (8006dc0 <prvInitialiseTaskLists+0x68>)
 8006d8c:	f7fe fc26 	bl	80055dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d90:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <prvInitialiseTaskLists+0x6c>)
 8006d92:	f7fe fc23 	bl	80055dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d96:	480c      	ldr	r0, [pc, #48]	; (8006dc8 <prvInitialiseTaskLists+0x70>)
 8006d98:	f7fe fc20 	bl	80055dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d9c:	480b      	ldr	r0, [pc, #44]	; (8006dcc <prvInitialiseTaskLists+0x74>)
 8006d9e:	f7fe fc1d 	bl	80055dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <prvInitialiseTaskLists+0x78>)
 8006da4:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <prvInitialiseTaskLists+0x64>)
 8006da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <prvInitialiseTaskLists+0x7c>)
 8006daa:	4a05      	ldr	r2, [pc, #20]	; (8006dc0 <prvInitialiseTaskLists+0x68>)
 8006dac:	601a      	str	r2, [r3, #0]
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000998 	.word	0x20000998
 8006dbc:	20000a24 	.word	0x20000a24
 8006dc0:	20000a38 	.word	0x20000a38
 8006dc4:	20000a54 	.word	0x20000a54
 8006dc8:	20000a68 	.word	0x20000a68
 8006dcc:	20000a80 	.word	0x20000a80
 8006dd0:	20000a4c 	.word	0x20000a4c
 8006dd4:	20000a50 	.word	0x20000a50

08006dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dde:	e019      	b.n	8006e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006de0:	f000 fe38 	bl	8007a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <prvCheckTasksWaitingTermination+0x50>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe fc7d 	bl	80056f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006df6:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <prvCheckTasksWaitingTermination+0x54>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	4a0b      	ldr	r2, [pc, #44]	; (8006e2c <prvCheckTasksWaitingTermination+0x54>)
 8006dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <prvCheckTasksWaitingTermination+0x58>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <prvCheckTasksWaitingTermination+0x58>)
 8006e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e0a:	f000 fe53 	bl	8007ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f810 	bl	8006e34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <prvCheckTasksWaitingTermination+0x58>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e1      	bne.n	8006de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000a68 	.word	0x20000a68
 8006e2c:	20000a94 	.word	0x20000a94
 8006e30:	20000a7c 	.word	0x20000a7c

08006e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d108      	bne.n	8006e58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fff0 	bl	8007e30 <vPortFree>
				vPortFree( pxTCB );
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 ffed 	bl	8007e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e56:	e018      	b.n	8006e8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d103      	bne.n	8006e6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 ffe4 	bl	8007e30 <vPortFree>
	}
 8006e68:	e00f      	b.n	8006e8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d00a      	beq.n	8006e8a <prvDeleteTCB+0x56>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <prvDeleteTCB+0x54>
	}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <prvResetNextTaskUnblockTime+0x38>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006eac:	e008      	b.n	8006ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <prvResetNextTaskUnblockTime+0x38>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4a04      	ldr	r2, [pc, #16]	; (8006ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	20000a4c 	.word	0x20000a4c
 8006ed0:	20000ab4 	.word	0x20000ab4

08006ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <xTaskGetSchedulerState+0x34>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	e008      	b.n	8006efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <xTaskGetSchedulerState+0x38>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	607b      	str	r3, [r7, #4]
 8006ef4:	e001      	b.n	8006efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006efa:	687b      	ldr	r3, [r7, #4]
	}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	20000aa0 	.word	0x20000aa0
 8006f0c:	20000abc 	.word	0x20000abc

08006f10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d06e      	beq.n	8007004 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f26:	4b3a      	ldr	r3, [pc, #232]	; (8007010 <xTaskPriorityDisinherit+0x100>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d00a      	beq.n	8006f46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60fb      	str	r3, [r7, #12]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60bb      	str	r3, [r7, #8]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f68:	1e5a      	subs	r2, r3, #1
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d044      	beq.n	8007004 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d140      	bne.n	8007004 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fbb2 	bl	80056f0 <uxListRemove>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d115      	bne.n	8006fbe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f96:	491f      	ldr	r1, [pc, #124]	; (8007014 <xTaskPriorityDisinherit+0x104>)
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xTaskPriorityDisinherit+0xae>
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	2201      	movs	r2, #1
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	43da      	mvns	r2, r3
 8006fb4:	4b18      	ldr	r3, [pc, #96]	; (8007018 <xTaskPriorityDisinherit+0x108>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	4a17      	ldr	r2, [pc, #92]	; (8007018 <xTaskPriorityDisinherit+0x108>)
 8006fbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	f1c3 0207 	rsb	r2, r3, #7
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <xTaskPriorityDisinherit+0x108>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	4a0d      	ldr	r2, [pc, #52]	; (8007018 <xTaskPriorityDisinherit+0x108>)
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4a08      	ldr	r2, [pc, #32]	; (8007014 <xTaskPriorityDisinherit+0x104>)
 8006ff2:	441a      	add	r2, r3
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f7fe fb1b 	bl	8005636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007000:	2301      	movs	r3, #1
 8007002:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007004:	697b      	ldr	r3, [r7, #20]
	}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000994 	.word	0x20000994
 8007014:	20000998 	.word	0x20000998
 8007018:	20000a9c 	.word	0x20000a9c

0800701c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <uxTaskResetEventItemValue+0x2c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <uxTaskResetEventItemValue+0x2c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <uxTaskResetEventItemValue+0x2c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1c2 0207 	rsb	r2, r2, #7
 8007038:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800703a:	687b      	ldr	r3, [r7, #4]
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20000994 	.word	0x20000994

0800704c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007056:	4b29      	ldr	r3, [pc, #164]	; (80070fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705c:	4b28      	ldr	r3, [pc, #160]	; (8007100 <prvAddCurrentTaskToDelayedList+0xb4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3304      	adds	r3, #4
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fb44 	bl	80056f0 <uxListRemove>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10b      	bne.n	8007086 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800706e:	4b24      	ldr	r3, [pc, #144]	; (8007100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	2201      	movs	r2, #1
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	43da      	mvns	r2, r3
 800707c:	4b21      	ldr	r3, [pc, #132]	; (8007104 <prvAddCurrentTaskToDelayedList+0xb8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4013      	ands	r3, r2
 8007082:	4a20      	ldr	r2, [pc, #128]	; (8007104 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007084:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d10a      	bne.n	80070a4 <prvAddCurrentTaskToDelayedList+0x58>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007094:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	481a      	ldr	r0, [pc, #104]	; (8007108 <prvAddCurrentTaskToDelayedList+0xbc>)
 800709e:	f7fe faca 	bl	8005636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070a2:	e026      	b.n	80070f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4413      	add	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070ac:	4b14      	ldr	r3, [pc, #80]	; (8007100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d209      	bcs.n	80070d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <prvAddCurrentTaskToDelayedList+0xc0>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3304      	adds	r3, #4
 80070c6:	4619      	mov	r1, r3
 80070c8:	4610      	mov	r0, r2
 80070ca:	f7fe fad8 	bl	800567e <vListInsert>
}
 80070ce:	e010      	b.n	80070f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070d0:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <prvAddCurrentTaskToDelayedList+0xc4>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f7fe face 	bl	800567e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d202      	bcs.n	80070f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80070ec:	4a09      	ldr	r2, [pc, #36]	; (8007114 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	6013      	str	r3, [r2, #0]
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000a98 	.word	0x20000a98
 8007100:	20000994 	.word	0x20000994
 8007104:	20000a9c 	.word	0x20000a9c
 8007108:	20000a80 	.word	0x20000a80
 800710c:	20000a50 	.word	0x20000a50
 8007110:	20000a4c 	.word	0x20000a4c
 8007114:	20000ab4 	.word	0x20000ab4

08007118 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007122:	f000 fb07 	bl	8007734 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007126:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <xTimerCreateTimerTask+0x80>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d021      	beq.n	8007172 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007136:	1d3a      	adds	r2, r7, #4
 8007138:	f107 0108 	add.w	r1, r7, #8
 800713c:	f107 030c 	add.w	r3, r7, #12
 8007140:	4618      	mov	r0, r3
 8007142:	f7f9 f9e5 	bl	8000510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	9202      	str	r2, [sp, #8]
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	2302      	movs	r3, #2
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	460a      	mov	r2, r1
 8007158:	4910      	ldr	r1, [pc, #64]	; (800719c <xTimerCreateTimerTask+0x84>)
 800715a:	4811      	ldr	r0, [pc, #68]	; (80071a0 <xTimerCreateTimerTask+0x88>)
 800715c:	f7ff f814 	bl	8006188 <xTaskCreateStatic>
 8007160:	4603      	mov	r3, r0
 8007162:	4a10      	ldr	r2, [pc, #64]	; (80071a4 <xTimerCreateTimerTask+0x8c>)
 8007164:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <xTimerCreateTimerTask+0x8c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800716e:	2301      	movs	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	f383 8811 	msr	BASEPRI, r3
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	613b      	str	r3, [r7, #16]
}
 800718a:	bf00      	nop
 800718c:	e7fe      	b.n	800718c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800718e:	697b      	ldr	r3, [r7, #20]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000af0 	.word	0x20000af0
 800719c:	080081f8 	.word	0x080081f8
 80071a0:	080072dd 	.word	0x080072dd
 80071a4:	20000af4 	.word	0x20000af4

080071a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	; 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	623b      	str	r3, [r7, #32]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071d6:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <xTimerGenericCommand+0x98>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d02a      	beq.n	8007234 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b05      	cmp	r3, #5
 80071ee:	dc18      	bgt.n	8007222 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071f0:	f7ff fe70 	bl	8006ed4 <xTaskGetSchedulerState>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d109      	bne.n	800720e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071fa:	4b11      	ldr	r3, [pc, #68]	; (8007240 <xTimerGenericCommand+0x98>)
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	f107 0110 	add.w	r1, r7, #16
 8007202:	2300      	movs	r3, #0
 8007204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007206:	f7fe fbd7 	bl	80059b8 <xQueueGenericSend>
 800720a:	6278      	str	r0, [r7, #36]	; 0x24
 800720c:	e012      	b.n	8007234 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <xTimerGenericCommand+0x98>)
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f107 0110 	add.w	r1, r7, #16
 8007216:	2300      	movs	r3, #0
 8007218:	2200      	movs	r2, #0
 800721a:	f7fe fbcd 	bl	80059b8 <xQueueGenericSend>
 800721e:	6278      	str	r0, [r7, #36]	; 0x24
 8007220:	e008      	b.n	8007234 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <xTimerGenericCommand+0x98>)
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	f107 0110 	add.w	r1, r7, #16
 800722a:	2300      	movs	r3, #0
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	f7fe fcc1 	bl	8005bb4 <xQueueGenericSendFromISR>
 8007232:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007236:	4618      	mov	r0, r3
 8007238:	3728      	adds	r7, #40	; 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000af0 	.word	0x20000af0

08007244 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724e:	4b22      	ldr	r3, [pc, #136]	; (80072d8 <prvProcessExpiredTimer+0x94>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3304      	adds	r3, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fa47 	bl	80056f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d022      	beq.n	80072b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	699a      	ldr	r2, [r3, #24]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	18d1      	adds	r1, r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	6978      	ldr	r0, [r7, #20]
 800727e:	f000 f8d1 	bl	8007424 <prvInsertTimerInActiveList>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01f      	beq.n	80072c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007288:	2300      	movs	r3, #0
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	2300      	movs	r3, #0
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	2100      	movs	r1, #0
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f7ff ff88 	bl	80071a8 <xTimerGenericCommand>
 8007298:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d113      	bne.n	80072c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	60fb      	str	r3, [r7, #12]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	6978      	ldr	r0, [r7, #20]
 80072ce:	4798      	blx	r3
}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000ae8 	.word	0x20000ae8

080072dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f857 	bl	800739c <prvGetNextExpireTime>
 80072ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f803 	bl	8007300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072fa:	f000 f8d5 	bl	80074a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072fe:	e7f1      	b.n	80072e4 <prvTimerTask+0x8>

08007300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800730a:	f7ff f96b 	bl	80065e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800730e:	f107 0308 	add.w	r3, r7, #8
 8007312:	4618      	mov	r0, r3
 8007314:	f000 f866 	bl	80073e4 <prvSampleTimeNow>
 8007318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d130      	bne.n	8007382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <prvProcessTimerOrBlockTask+0x3c>
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	429a      	cmp	r2, r3
 800732c:	d806      	bhi.n	800733c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800732e:	f7ff f967 	bl	8006600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007332:	68f9      	ldr	r1, [r7, #12]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff ff85 	bl	8007244 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800733a:	e024      	b.n	8007386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007342:	4b13      	ldr	r3, [pc, #76]	; (8007390 <prvProcessTimerOrBlockTask+0x90>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <prvProcessTimerOrBlockTask+0x50>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <prvProcessTimerOrBlockTask+0x52>
 8007350:	2300      	movs	r3, #0
 8007352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007354:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <prvProcessTimerOrBlockTask+0x94>)
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4619      	mov	r1, r3
 8007362:	f7fe fedd 	bl	8006120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007366:	f7ff f94b 	bl	8006600 <xTaskResumeAll>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007370:	4b09      	ldr	r3, [pc, #36]	; (8007398 <prvProcessTimerOrBlockTask+0x98>)
 8007372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	f3bf 8f6f 	isb	sy
}
 8007380:	e001      	b.n	8007386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007382:	f7ff f93d 	bl	8006600 <xTaskResumeAll>
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000aec 	.word	0x20000aec
 8007394:	20000af0 	.word	0x20000af0
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073a4:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <prvGetNextExpireTime+0x44>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <prvGetNextExpireTime+0x16>
 80073ae:	2201      	movs	r2, #1
 80073b0:	e000      	b.n	80073b4 <prvGetNextExpireTime+0x18>
 80073b2:	2200      	movs	r2, #0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073c0:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <prvGetNextExpireTime+0x44>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e001      	b.n	80073d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	20000ae8 	.word	0x20000ae8

080073e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073ec:	f7ff f9a4 	bl	8006738 <xTaskGetTickCount>
 80073f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <prvSampleTimeNow+0x3c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d205      	bcs.n	8007408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073fc:	f000 f936 	bl	800766c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e002      	b.n	800740e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800740e:	4a04      	ldr	r2, [pc, #16]	; (8007420 <prvSampleTimeNow+0x3c>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007414:	68fb      	ldr	r3, [r7, #12]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000af8 	.word	0x20000af8

08007424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d812      	bhi.n	8007470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	429a      	cmp	r2, r3
 8007456:	d302      	bcc.n	800745e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e01b      	b.n	8007496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800745e:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <prvInsertTimerInActiveList+0x7c>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3304      	adds	r3, #4
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fe f908 	bl	800567e <vListInsert>
 800746e:	e012      	b.n	8007496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d206      	bcs.n	8007486 <prvInsertTimerInActiveList+0x62>
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e007      	b.n	8007496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007486:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <prvInsertTimerInActiveList+0x80>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3304      	adds	r3, #4
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f7fe f8f4 	bl	800567e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007496:	697b      	ldr	r3, [r7, #20]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000aec 	.word	0x20000aec
 80074a4:	20000ae8 	.word	0x20000ae8

080074a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08e      	sub	sp, #56	; 0x38
 80074ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ae:	e0ca      	b.n	8007646 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	da18      	bge.n	80074e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	3304      	adds	r3, #4
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	61fb      	str	r3, [r7, #28]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074de:	6850      	ldr	r0, [r2, #4]
 80074e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e2:	6892      	ldr	r2, [r2, #8]
 80074e4:	4611      	mov	r1, r2
 80074e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f2c0 80ab 	blt.w	8007646 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe f8f5 	bl	80056f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007506:	463b      	mov	r3, r7
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff ff6b 	bl	80073e4 <prvSampleTimeNow>
 800750e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b09      	cmp	r3, #9
 8007514:	f200 8096 	bhi.w	8007644 <prvProcessReceivedCommands+0x19c>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <prvProcessReceivedCommands+0x78>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007549 	.word	0x08007549
 8007524:	08007549 	.word	0x08007549
 8007528:	08007549 	.word	0x08007549
 800752c:	080075bd 	.word	0x080075bd
 8007530:	080075d1 	.word	0x080075d1
 8007534:	0800761b 	.word	0x0800761b
 8007538:	08007549 	.word	0x08007549
 800753c:	08007549 	.word	0x08007549
 8007540:	080075bd 	.word	0x080075bd
 8007544:	080075d1 	.word	0x080075d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	18d1      	adds	r1, r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007568:	f7ff ff5c 	bl	8007424 <prvInsertTimerInActiveList>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d069      	beq.n	8007646 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007578:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d05e      	beq.n	8007646 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	441a      	add	r2, r3
 8007590:	2300      	movs	r3, #0
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	2100      	movs	r1, #0
 8007598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800759a:	f7ff fe05 	bl	80071a8 <xTimerGenericCommand>
 800759e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d14f      	bne.n	8007646 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	61bb      	str	r3, [r7, #24]
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80075ce:	e03a      	b.n	8007646 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	617b      	str	r3, [r7, #20]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	18d1      	adds	r1, r2, r3
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007614:	f7ff ff06 	bl	8007424 <prvInsertTimerInActiveList>
					break;
 8007618:	e015      	b.n	8007646 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762a:	f000 fc01 	bl	8007e30 <vPortFree>
 800762e:	e00a      	b.n	8007646 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007636:	f023 0301 	bic.w	r3, r3, #1
 800763a:	b2da      	uxtb	r2, r3
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007642:	e000      	b.n	8007646 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007644:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007646:	4b08      	ldr	r3, [pc, #32]	; (8007668 <prvProcessReceivedCommands+0x1c0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	1d39      	adds	r1, r7, #4
 800764c:	2200      	movs	r2, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fb4c 	bl	8005cec <xQueueReceive>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	f47f af2a 	bne.w	80074b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	3730      	adds	r7, #48	; 0x30
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000af0 	.word	0x20000af0

0800766c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007672:	e048      	b.n	8007706 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007674:	4b2d      	ldr	r3, [pc, #180]	; (800772c <prvSwitchTimerLists+0xc0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767e:	4b2b      	ldr	r3, [pc, #172]	; (800772c <prvSwitchTimerLists+0xc0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3304      	adds	r3, #4
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe f82f 	bl	80056f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d02e      	beq.n	8007706 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4413      	add	r3, r2
 80076b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d90e      	bls.n	80076d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <prvSwitchTimerLists+0xc0>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7fd ffd4 	bl	800567e <vListInsert>
 80076d6:	e016      	b.n	8007706 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076d8:	2300      	movs	r3, #0
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2300      	movs	r3, #0
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff fd60 	bl	80071a8 <xTimerGenericCommand>
 80076e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10a      	bne.n	8007706 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	603b      	str	r3, [r7, #0]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007706:	4b09      	ldr	r3, [pc, #36]	; (800772c <prvSwitchTimerLists+0xc0>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1b1      	bne.n	8007674 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <prvSwitchTimerLists+0xc0>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007716:	4b06      	ldr	r3, [pc, #24]	; (8007730 <prvSwitchTimerLists+0xc4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a04      	ldr	r2, [pc, #16]	; (800772c <prvSwitchTimerLists+0xc0>)
 800771c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800771e:	4a04      	ldr	r2, [pc, #16]	; (8007730 <prvSwitchTimerLists+0xc4>)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	6013      	str	r3, [r2, #0]
}
 8007724:	bf00      	nop
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000ae8 	.word	0x20000ae8
 8007730:	20000aec 	.word	0x20000aec

08007734 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800773a:	f000 f98b 	bl	8007a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <prvCheckForValidListAndQueue+0x60>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d120      	bne.n	8007788 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007746:	4814      	ldr	r0, [pc, #80]	; (8007798 <prvCheckForValidListAndQueue+0x64>)
 8007748:	f7fd ff48 	bl	80055dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800774c:	4813      	ldr	r0, [pc, #76]	; (800779c <prvCheckForValidListAndQueue+0x68>)
 800774e:	f7fd ff45 	bl	80055dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007752:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <prvCheckForValidListAndQueue+0x6c>)
 8007754:	4a10      	ldr	r2, [pc, #64]	; (8007798 <prvCheckForValidListAndQueue+0x64>)
 8007756:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007758:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <prvCheckForValidListAndQueue+0x70>)
 800775a:	4a10      	ldr	r2, [pc, #64]	; (800779c <prvCheckForValidListAndQueue+0x68>)
 800775c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800775e:	2300      	movs	r3, #0
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <prvCheckForValidListAndQueue+0x74>)
 8007764:	4a11      	ldr	r2, [pc, #68]	; (80077ac <prvCheckForValidListAndQueue+0x78>)
 8007766:	2110      	movs	r1, #16
 8007768:	200a      	movs	r0, #10
 800776a:	f7fe f853 	bl	8005814 <xQueueGenericCreateStatic>
 800776e:	4603      	mov	r3, r0
 8007770:	4a08      	ldr	r2, [pc, #32]	; (8007794 <prvCheckForValidListAndQueue+0x60>)
 8007772:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <prvCheckForValidListAndQueue+0x60>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <prvCheckForValidListAndQueue+0x60>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	490b      	ldr	r1, [pc, #44]	; (80077b0 <prvCheckForValidListAndQueue+0x7c>)
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fca2 	bl	80060cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007788:	f000 f994 	bl	8007ab4 <vPortExitCritical>
}
 800778c:	bf00      	nop
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000af0 	.word	0x20000af0
 8007798:	20000ac0 	.word	0x20000ac0
 800779c:	20000ad4 	.word	0x20000ad4
 80077a0:	20000ae8 	.word	0x20000ae8
 80077a4:	20000aec 	.word	0x20000aec
 80077a8:	20000b9c 	.word	0x20000b9c
 80077ac:	20000afc 	.word	0x20000afc
 80077b0:	08008200 	.word	0x08008200

080077b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80077c2:	f06f 0301 	mvn.w	r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077d4:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <xTimerPendFunctionCallFromISR+0x3c>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	f107 0114 	add.w	r1, r7, #20
 80077dc:	2300      	movs	r3, #0
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	f7fe f9e8 	bl	8005bb4 <xQueueGenericSendFromISR>
 80077e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3728      	adds	r7, #40	; 0x28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000af0 	.word	0x20000af0

080077f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3b04      	subs	r3, #4
 8007804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800780c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b04      	subs	r3, #4
 8007812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f023 0201 	bic.w	r2, r3, #1
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3b04      	subs	r3, #4
 8007822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007824:	4a0c      	ldr	r2, [pc, #48]	; (8007858 <pxPortInitialiseStack+0x64>)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3b14      	subs	r3, #20
 800782e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b04      	subs	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f06f 0202 	mvn.w	r2, #2
 8007842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3b20      	subs	r3, #32
 8007848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800784a:	68fb      	ldr	r3, [r7, #12]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	0800785d 	.word	0x0800785d

0800785c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007866:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <prvTaskExitError+0x54>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d00a      	beq.n	8007886 <prvTaskExitError+0x2a>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <prvTaskExitError+0x28>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60bb      	str	r3, [r7, #8]
}
 8007898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800789a:	bf00      	nop
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0fc      	beq.n	800789c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	2000000c 	.word	0x2000000c
	...

080078c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <pxCurrentTCBConst2>)
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	6808      	ldr	r0, [r1, #0]
 80078c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	f380 8809 	msr	PSP, r0
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8811 	msr	BASEPRI, r0
 80078da:	4770      	bx	lr
 80078dc:	f3af 8000 	nop.w

080078e0 <pxCurrentTCBConst2>:
 80078e0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop

080078e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078e8:	4808      	ldr	r0, [pc, #32]	; (800790c <prvPortStartFirstTask+0x24>)
 80078ea:	6800      	ldr	r0, [r0, #0]
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f380 8808 	msr	MSP, r0
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8814 	msr	CONTROL, r0
 80078fa:	b662      	cpsie	i
 80078fc:	b661      	cpsie	f
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	df00      	svc	0
 8007908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800790a:	bf00      	nop
 800790c:	e000ed08 	.word	0xe000ed08

08007910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007916:	4b46      	ldr	r3, [pc, #280]	; (8007a30 <xPortStartScheduler+0x120>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a46      	ldr	r2, [pc, #280]	; (8007a34 <xPortStartScheduler+0x124>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10a      	bne.n	8007936 <xPortStartScheduler+0x26>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	613b      	str	r3, [r7, #16]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007936:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a3f      	ldr	r2, [pc, #252]	; (8007a38 <xPortStartScheduler+0x128>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x46>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007956:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <xPortStartScheduler+0x12c>)
 8007958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	22ff      	movs	r2, #255	; 0xff
 8007966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007978:	b2da      	uxtb	r2, r3
 800797a:	4b31      	ldr	r3, [pc, #196]	; (8007a40 <xPortStartScheduler+0x130>)
 800797c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800797e:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <xPortStartScheduler+0x134>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007984:	e009      	b.n	800799a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007986:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <xPortStartScheduler+0x134>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a2d      	ldr	r2, [pc, #180]	; (8007a44 <xPortStartScheduler+0x134>)
 800798e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d0ef      	beq.n	8007986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079a6:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1c3 0307 	rsb	r3, r3, #7
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d00a      	beq.n	80079c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079c8:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <xPortStartScheduler+0x134>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <xPortStartScheduler+0x134>)
 80079d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <xPortStartScheduler+0x134>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079da:	4a1a      	ldr	r2, [pc, #104]	; (8007a44 <xPortStartScheduler+0x134>)
 80079dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079e6:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <xPortStartScheduler+0x138>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <xPortStartScheduler+0x138>)
 80079ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <xPortStartScheduler+0x138>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <xPortStartScheduler+0x138>)
 80079f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079fe:	f000 f8dd 	bl	8007bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a02:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <xPortStartScheduler+0x13c>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a08:	f000 f8fc 	bl	8007c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <xPortStartScheduler+0x140>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a0f      	ldr	r2, [pc, #60]	; (8007a50 <xPortStartScheduler+0x140>)
 8007a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a18:	f7ff ff66 	bl	80078e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a1c:	f7fe ff54 	bl	80068c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007a20:	f7ff ff1c 	bl	800785c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	e000ed00 	.word	0xe000ed00
 8007a34:	410fc271 	.word	0x410fc271
 8007a38:	410fc270 	.word	0x410fc270
 8007a3c:	e000e400 	.word	0xe000e400
 8007a40:	20000be4 	.word	0x20000be4
 8007a44:	20000be8 	.word	0x20000be8
 8007a48:	e000ed20 	.word	0xe000ed20
 8007a4c:	2000000c 	.word	0x2000000c
 8007a50:	e000ef34 	.word	0xe000ef34

08007a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	607b      	str	r3, [r7, #4]
}
 8007a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <vPortEnterCritical+0x58>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a0d      	ldr	r2, [pc, #52]	; (8007aac <vPortEnterCritical+0x58>)
 8007a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a78:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <vPortEnterCritical+0x58>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d10f      	bne.n	8007aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <vPortEnterCritical+0x5c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	603b      	str	r3, [r7, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <vPortEnterCritical+0x4a>
	}
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	2000000c 	.word	0x2000000c
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <vPortExitCritical+0x50>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <vPortExitCritical+0x24>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	607b      	str	r3, [r7, #4]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <vPortExitCritical+0x50>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <vPortExitCritical+0x50>)
 8007ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ae2:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <vPortExitCritical+0x50>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <vPortExitCritical+0x42>
 8007aea:	2300      	movs	r3, #0
 8007aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	f383 8811 	msr	BASEPRI, r3
}
 8007af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	2000000c 	.word	0x2000000c
	...

08007b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b10:	f3ef 8009 	mrs	r0, PSP
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <pxCurrentTCBConst>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f01e 0f10 	tst.w	lr, #16
 8007b20:	bf08      	it	eq
 8007b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	6010      	str	r0, [r2, #0]
 8007b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b34:	f380 8811 	msr	BASEPRI, r0
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f7fe fec2 	bl	80068c8 <vTaskSwitchContext>
 8007b44:	f04f 0000 	mov.w	r0, #0
 8007b48:	f380 8811 	msr	BASEPRI, r0
 8007b4c:	bc09      	pop	{r0, r3}
 8007b4e:	6819      	ldr	r1, [r3, #0]
 8007b50:	6808      	ldr	r0, [r1, #0]
 8007b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b56:	f01e 0f10 	tst.w	lr, #16
 8007b5a:	bf08      	it	eq
 8007b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b60:	f380 8809 	msr	PSP, r0
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst>:
 8007b70:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	607b      	str	r3, [r7, #4]
}
 8007b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b92:	f7fe fde1 	bl	8006758 <xTaskIncrementTick>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b9c:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <SysTick_Handler+0x40>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	f383 8811 	msr	BASEPRI, r3
}
 8007bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <vPortSetupTimerInterrupt+0x38>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <vPortSetupTimerInterrupt+0x3c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <vPortSetupTimerInterrupt+0x40>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	099b      	lsrs	r3, r3, #6
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <vPortSetupTimerInterrupt+0x44>)
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bde:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
}
 8007be4:	bf00      	nop
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	e000e010 	.word	0xe000e010
 8007bf4:	e000e018 	.word	0xe000e018
 8007bf8:	20000000 	.word	0x20000000
 8007bfc:	10624dd3 	.word	0x10624dd3
 8007c00:	e000e014 	.word	0xe000e014

08007c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c14 <vPortEnableVFP+0x10>
 8007c08:	6801      	ldr	r1, [r0, #0]
 8007c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c0e:	6001      	str	r1, [r0, #0]
 8007c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c12:	bf00      	nop
 8007c14:	e000ed88 	.word	0xe000ed88

08007c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c1e:	f3ef 8305 	mrs	r3, IPSR
 8007c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d914      	bls.n	8007c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <vPortValidateInterruptPriority+0x70>)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c34:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <vPortValidateInterruptPriority+0x74>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	7afa      	ldrb	r2, [r7, #11]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d20a      	bcs.n	8007c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	607b      	str	r3, [r7, #4]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c54:	4b0e      	ldr	r3, [pc, #56]	; (8007c90 <vPortValidateInterruptPriority+0x78>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <vPortValidateInterruptPriority+0x7c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d90a      	bls.n	8007c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	603b      	str	r3, [r7, #0]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <vPortValidateInterruptPriority+0x60>
	}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	e000e3f0 	.word	0xe000e3f0
 8007c8c:	20000be4 	.word	0x20000be4
 8007c90:	e000ed0c 	.word	0xe000ed0c
 8007c94:	20000be8 	.word	0x20000be8

08007c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	; 0x28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ca4:	f7fe fc9e 	bl	80065e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ca8:	4b5b      	ldr	r3, [pc, #364]	; (8007e18 <pvPortMalloc+0x180>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cb0:	f000 f920 	bl	8007ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cb4:	4b59      	ldr	r3, [pc, #356]	; (8007e1c <pvPortMalloc+0x184>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 8093 	bne.w	8007de8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01d      	beq.n	8007d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cc8:	2208      	movs	r2, #8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d014      	beq.n	8007d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f023 0307 	bic.w	r3, r3, #7
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <pvPortMalloc+0x6c>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	617b      	str	r3, [r7, #20]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d06e      	beq.n	8007de8 <pvPortMalloc+0x150>
 8007d0a:	4b45      	ldr	r3, [pc, #276]	; (8007e20 <pvPortMalloc+0x188>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d869      	bhi.n	8007de8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d14:	4b43      	ldr	r3, [pc, #268]	; (8007e24 <pvPortMalloc+0x18c>)
 8007d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d18:	4b42      	ldr	r3, [pc, #264]	; (8007e24 <pvPortMalloc+0x18c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d1e:	e004      	b.n	8007d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d903      	bls.n	8007d3c <pvPortMalloc+0xa4>
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f1      	bne.n	8007d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d3c:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <pvPortMalloc+0x180>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d050      	beq.n	8007de8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2208      	movs	r2, #8
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	2308      	movs	r3, #8
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d91f      	bls.n	8007da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <pvPortMalloc+0xf8>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	613b      	str	r3, [r7, #16]
}
 8007d8c:	bf00      	nop
 8007d8e:	e7fe      	b.n	8007d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007da2:	69b8      	ldr	r0, [r7, #24]
 8007da4:	f000 f908 	bl	8007fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007da8:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <pvPortMalloc+0x188>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <pvPortMalloc+0x188>)
 8007db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <pvPortMalloc+0x188>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <pvPortMalloc+0x190>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d203      	bcs.n	8007dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dc2:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <pvPortMalloc+0x188>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a18      	ldr	r2, [pc, #96]	; (8007e28 <pvPortMalloc+0x190>)
 8007dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <pvPortMalloc+0x184>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <pvPortMalloc+0x194>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a11      	ldr	r2, [pc, #68]	; (8007e2c <pvPortMalloc+0x194>)
 8007de6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007de8:	f7fe fc0a 	bl	8006600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <pvPortMalloc+0x174>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60fb      	str	r3, [r7, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <pvPortMalloc+0x172>
	return pvReturn;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3728      	adds	r7, #40	; 0x28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200047f4 	.word	0x200047f4
 8007e1c:	20004808 	.word	0x20004808
 8007e20:	200047f8 	.word	0x200047f8
 8007e24:	200047ec 	.word	0x200047ec
 8007e28:	200047fc 	.word	0x200047fc
 8007e2c:	20004800 	.word	0x20004800

08007e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d04d      	beq.n	8007ede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e42:	2308      	movs	r3, #8
 8007e44:	425b      	negs	r3, r3
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4413      	add	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	4b24      	ldr	r3, [pc, #144]	; (8007ee8 <vPortFree+0xb8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10a      	bne.n	8007e74 <vPortFree+0x44>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	60fb      	str	r3, [r7, #12]
}
 8007e70:	bf00      	nop
 8007e72:	e7fe      	b.n	8007e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <vPortFree+0x62>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	60bb      	str	r3, [r7, #8]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <vPortFree+0xb8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01e      	beq.n	8007ede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11a      	bne.n	8007ede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <vPortFree+0xb8>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	401a      	ands	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007eb8:	f7fe fb94 	bl	80065e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <vPortFree+0xbc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	4a09      	ldr	r2, [pc, #36]	; (8007eec <vPortFree+0xbc>)
 8007ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eca:	6938      	ldr	r0, [r7, #16]
 8007ecc:	f000 f874 	bl	8007fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <vPortFree+0xc0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	4a06      	ldr	r2, [pc, #24]	; (8007ef0 <vPortFree+0xc0>)
 8007ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eda:	f7fe fb91 	bl	8006600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ede:	bf00      	nop
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20004808 	.word	0x20004808
 8007eec:	200047f8 	.word	0x200047f8
 8007ef0:	20004804 	.word	0x20004804

08007ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007efa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f00:	4b27      	ldr	r3, [pc, #156]	; (8007fa0 <prvHeapInit+0xac>)
 8007f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00c      	beq.n	8007f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3307      	adds	r3, #7
 8007f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <prvHeapInit+0xac>)
 8007f24:	4413      	add	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f2c:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <prvHeapInit+0xb0>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <prvHeapInit+0xb0>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f40:	2208      	movs	r2, #8
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1a9b      	subs	r3, r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0307 	bic.w	r3, r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f5e:	4b12      	ldr	r3, [pc, #72]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f74:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <prvHeapInit+0xb8>)
 8007f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	4a09      	ldr	r2, [pc, #36]	; (8007fb0 <prvHeapInit+0xbc>)
 8007f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f8c:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <prvHeapInit+0xc0>)
 8007f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f92:	601a      	str	r2, [r3, #0]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	20000bec 	.word	0x20000bec
 8007fa4:	200047ec 	.word	0x200047ec
 8007fa8:	200047f4 	.word	0x200047f4
 8007fac:	200047fc 	.word	0x200047fc
 8007fb0:	200047f8 	.word	0x200047f8
 8007fb4:	20004808 	.word	0x20004808

08007fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fc0:	4b28      	ldr	r3, [pc, #160]	; (8008064 <prvInsertBlockIntoFreeList+0xac>)
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e002      	b.n	8007fcc <prvInsertBlockIntoFreeList+0x14>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d8f7      	bhi.n	8007fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d108      	bne.n	8007ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	441a      	add	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d118      	bne.n	8008040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <prvInsertBlockIntoFreeList+0xb0>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d00d      	beq.n	8008036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	441a      	add	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	e008      	b.n	8008048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008036:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <prvInsertBlockIntoFreeList+0xb0>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e003      	b.n	8008048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d002      	beq.n	8008056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	200047ec 	.word	0x200047ec
 8008068:	200047f4 	.word	0x200047f4

0800806c <memset>:
 800806c:	4402      	add	r2, r0
 800806e:	4603      	mov	r3, r0
 8008070:	4293      	cmp	r3, r2
 8008072:	d100      	bne.n	8008076 <memset+0xa>
 8008074:	4770      	bx	lr
 8008076:	f803 1b01 	strb.w	r1, [r3], #1
 800807a:	e7f9      	b.n	8008070 <memset+0x4>

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 f826 	bl	80080e0 <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	08008228 	.word	0x08008228
 80080b8:	08008228 	.word	0x08008228
 80080bc:	08008228 	.word	0x08008228
 80080c0:	0800822c 	.word	0x0800822c

080080c4 <memcpy>:
 80080c4:	440a      	add	r2, r1
 80080c6:	4291      	cmp	r1, r2
 80080c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080cc:	d100      	bne.n	80080d0 <memcpy+0xc>
 80080ce:	4770      	bx	lr
 80080d0:	b510      	push	{r4, lr}
 80080d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080da:	4291      	cmp	r1, r2
 80080dc:	d1f9      	bne.n	80080d2 <memcpy+0xe>
 80080de:	bd10      	pop	{r4, pc}

080080e0 <_init>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr

080080ec <_fini>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr


simple_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006248  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e4  080064e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064ec  080064ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080064f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004190  20000010  08006504  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041a0  08006504  000241a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001470f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e8  00000000  00000000  00034792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00037a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e90  00000000  00000000  00038d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179ee  00000000  00000000  00039bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151b6  00000000  00000000  000515b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000969c1  00000000  00000000  0006676c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e0c  00000000  00000000  000fd130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00101f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063d0 	.word	0x080063d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080063d0 	.word	0x080063d0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000090 	.word	0x20000090

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b0a0      	sub	sp, #128	; 0x80
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000516:	2300      	movs	r3, #0
 8000518:	67fb      	str	r3, [r7, #124]	; 0x7c
 800051a:	e007      	b.n	800052c <main+0x1c>
		exm.execution_memory[i] = 0;
 800051c:	4a63      	ldr	r2, [pc, #396]	; (80006ac <main+0x19c>)
 800051e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000520:	4413      	add	r3, r2
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000528:	3301      	adds	r3, #1
 800052a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800052c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800052e:	2b76      	cmp	r3, #118	; 0x76
 8000530:	d9f4      	bls.n	800051c <main+0xc>
	}
	exm.memory_pointer = exm.execution_memory;
 8000532:	4b5e      	ldr	r3, [pc, #376]	; (80006ac <main+0x19c>)
 8000534:	4a5d      	ldr	r2, [pc, #372]	; (80006ac <main+0x19c>)
 8000536:	679a      	str	r2, [r3, #120]	; 0x78
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000538:	2300      	movs	r3, #0
 800053a:	67bb      	str	r3, [r7, #120]	; 0x78
 800053c:	e008      	b.n	8000550 <main+0x40>
		exm.sizes_of_instruction[i] = 1;
 800053e:	4a5b      	ldr	r2, [pc, #364]	; (80006ac <main+0x19c>)
 8000540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000542:	4413      	add	r3, r2
 8000544:	337c      	adds	r3, #124	; 0x7c
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 800054a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800054c:	3301      	adds	r3, #1
 800054e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000552:	2b3b      	cmp	r3, #59	; 0x3b
 8000554:	d9f3      	bls.n	800053e <main+0x2e>
	}
	exm.sizes_pointer = exm.sizes_of_instruction;
 8000556:	4b55      	ldr	r3, [pc, #340]	; (80006ac <main+0x19c>)
 8000558:	4a55      	ldr	r2, [pc, #340]	; (80006b0 <main+0x1a0>)
 800055a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 800055e:	2300      	movs	r3, #0
 8000560:	677b      	str	r3, [r7, #116]	; 0x74
 8000562:	e008      	b.n	8000576 <main+0x66>
		exm.current_instruction[i] = 0;
 8000564:	4a51      	ldr	r2, [pc, #324]	; (80006ac <main+0x19c>)
 8000566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000568:	4413      	add	r3, r2
 800056a:	33bc      	adds	r3, #188	; 0xbc
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.current_instruction); i++){
 8000570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000572:	3301      	adds	r3, #1
 8000574:	677b      	str	r3, [r7, #116]	; 0x74
 8000576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000578:	2b03      	cmp	r3, #3
 800057a:	d9f3      	bls.n	8000564 <main+0x54>
	}
	exm.function_pointer_S = function_of_S;
 800057c:	4b4b      	ldr	r3, [pc, #300]	; (80006ac <main+0x19c>)
 800057e:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <main+0x1a4>)
 8000580:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fe10 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f8b2 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f988 	bl	80008a0 <MX_GPIO_Init>
  MX_TIM10_Init();
 8000590:	f000 f90c 	bl	80007ac <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000594:	f000 f958 	bl	8000848 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 8000598:	4b47      	ldr	r3, [pc, #284]	; (80006b8 <main+0x1a8>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a46      	ldr	r2, [pc, #280]	; (80006b8 <main+0x1a8>)
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_TE;
 80005a4:	4b44      	ldr	r3, [pc, #272]	; (80006b8 <main+0x1a8>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a43      	ldr	r2, [pc, #268]	; (80006b8 <main+0x1a8>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;
 80005b0:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <main+0x1a8>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a40      	ldr	r2, [pc, #256]	; (80006b8 <main+0x1a8>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_UE; //USART enable
 80005bc:	4b3e      	ldr	r3, [pc, #248]	; (80006b8 <main+0x1a8>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a3d      	ldr	r2, [pc, #244]	; (80006b8 <main+0x1a8>)
 80005c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c6:	60d3      	str	r3, [r2, #12]

  GPIOB->ODR &= ~GPIO_ODR_OD10; //Enable stepper driver
 80005c8:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <main+0x1ac>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a3b      	ldr	r2, [pc, #236]	; (80006bc <main+0x1ac>)
 80005ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005d2:	6153      	str	r3, [r2, #20]
  HAL_TIM_Base_Start_IT(&htim10);
 80005d4:	483a      	ldr	r0, [pc, #232]	; (80006c0 <main+0x1b0>)
 80005d6:	f001 fe15 	bl	8002204 <HAL_TIM_Base_Start_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  EventGroup = xEventGroupCreate();
 80005da:	f003 fc34 	bl	8003e46 <xEventGroupCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a38      	ldr	r2, [pc, #224]	; (80006c4 <main+0x1b4>)
 80005e2:	6013      	str	r3, [r2, #0]
  xEventGroupSetBits(EventGroup, 0x40); // Start the Execution mode
 80005e4:	4b37      	ldr	r3, [pc, #220]	; (80006c4 <main+0x1b4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fd4c 	bl	8004088 <xEventGroupSetBits>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uart_queue_rx = xQueueCreate(32, 1);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	2020      	movs	r0, #32
 80005f6:	f003 ff11 	bl	800441c <xQueueGenericCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <main+0x1b8>)
 80005fe:	6013      	str	r3, [r2, #0]
  programing_queue = xQueueCreate(64, 1);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	2040      	movs	r0, #64	; 0x40
 8000606:	f003 ff09 	bl	800441c <xQueueGenericCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a2f      	ldr	r2, [pc, #188]	; (80006cc <main+0x1bc>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ProgramingMode */
  osThreadDef(ProgramingMode, programing_mode, osPriorityNormal, 0, 500);
 8000610:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <main+0x1c0>)
 8000612:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProgramingModeHandle = osThreadCreate(osThread(ProgramingMode), NULL);
 8000624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fbbf 	bl	8003dae <osThreadCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <main+0x1c4>)
 8000634:	6013      	str	r3, [r2, #0]

  /* definition and creation of Interpreter */
  osThreadDef(Interpreter, interpreter, osPriorityNormal, 0, 500);
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <main+0x1c8>)
 8000638:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InterpreterHandle = osThreadCreate(osThread(Interpreter), NULL);
 800064a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fbac 	bl	8003dae <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a20      	ldr	r2, [pc, #128]	; (80006dc <main+0x1cc>)
 800065a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_comunication */
  osThreadDef(UART_comunication, uart_comunication, osPriorityNormal, 0, 160);
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <main+0x1d0>)
 800065e:	f107 0420 	add.w	r4, r7, #32
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_comunicationHandle = osThreadCreate(osThread(UART_comunication), NULL);
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fb99 	bl	8003dae <osThreadCreate>
 800067c:	4603      	mov	r3, r0
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <main+0x1d4>)
 8000680:	6013      	str	r3, [r2, #0]

  /* definition and creation of ExecutionFromMemory */
  osThreadDef(ExecutionFromMemory, execution_from_memory, osPriorityNormal, 0, 500);
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <main+0x1d8>)
 8000684:	1d3c      	adds	r4, r7, #4
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ExecutionFromMemoryHandle = osThreadCreate(osThread(ExecutionFromMemory), NULL);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fb88 	bl	8003dae <osThreadCreate>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <main+0x1dc>)
 80006a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a4:	f003 fb7c 	bl	8003da0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x198>
 80006aa:	bf00      	nop
 80006ac:	20000334 	.word	0x20000334
 80006b0:	200003b0 	.word	0x200003b0
 80006b4:	08000b65 	.word	0x08000b65
 80006b8:	40011000 	.word	0x40011000
 80006bc:	40020400 	.word	0x40020400
 80006c0:	20000290 	.word	0x20000290
 80006c4:	200003fc 	.word	0x200003fc
 80006c8:	2000032c 	.word	0x2000032c
 80006cc:	20000330 	.word	0x20000330
 80006d0:	080063f8 	.word	0x080063f8
 80006d4:	2000031c 	.word	0x2000031c
 80006d8:	08006420 	.word	0x08006420
 80006dc:	20000320 	.word	0x20000320
 80006e0:	08006450 	.word	0x08006450
 80006e4:	20000324 	.word	0x20000324
 80006e8:	08006480 	.word	0x08006480
 80006ec:	20000328 	.word	0x20000328

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 fe2c 	bl	800635c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xb4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xb4>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xb4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <SystemClock_Config+0xb8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <SystemClock_Config+0xb8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <SystemClock_Config+0xb8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f875 	bl	8001850 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800076c:	f000 fb53 	bl	8000e16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fad8 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000796:	f000 fb3e 	bl	8000e16 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_TIM10_Init+0x94>)
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <MX_TIM10_Init+0x98>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM10_Init+0x94>)
 80007cc:	220f      	movs	r2, #15
 80007ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_TIM10_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_TIM10_Init+0x94>)
 80007d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80007dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM10_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_TIM10_Init+0x94>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007ea:	4815      	ldr	r0, [pc, #84]	; (8000840 <MX_TIM10_Init+0x94>)
 80007ec:	f001 fcba 	bl	8002164 <HAL_TIM_Base_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80007f6:	f000 fb0e 	bl	8000e16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_TIM10_Init+0x94>)
 80007fc:	f001 fd64 	bl	80022c8 <HAL_TIM_PWM_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 fb06 	bl	8000e16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080a:	2360      	movs	r3, #96	; 0x60
 800080c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 800080e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	4807      	ldr	r0, [pc, #28]	; (8000840 <MX_TIM10_Init+0x94>)
 8000824:	f001 ff62 	bl	80026ec <HAL_TIM_PWM_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800082e:	f000 faf2 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <MX_TIM10_Init+0x94>)
 8000834:	f000 fb42 	bl	8000ebc <HAL_TIM_MspPostInit>

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000290 	.word	0x20000290
 8000844:	40014400 	.word	0x40014400

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_USART1_UART_Init+0x50>)
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <MX_USART1_UART_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000854:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART1_UART_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000866:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART1_UART_Init+0x50>)
 800086a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800086e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART1_UART_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000884:	f002 fa61 	bl	8002d4a <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fac2 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200002d8 	.word	0x200002d8
 800089c:	40011000 	.word	0x40011000

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_GPIO_Init+0x80>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_GPIO_Init+0x80>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_GPIO_Init+0x80>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_GPIO_Init+0x80>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <MX_GPIO_Init+0x80>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_GPIO_Init+0x80>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENA_stepper_Pin|DIR_stepper_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <MX_GPIO_Init+0x84>)
 80008f6:	f000 ff91 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENA_stepper_Pin DIR_stepper_Pin */
  GPIO_InitStruct.Pin = ENA_stepper_Pin|DIR_stepper_Pin;
 80008fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_GPIO_Init+0x84>)
 8000914:	f000 fdfe 	bl	8001514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400

08000928 <uart1_rx_callback>:

/* USER CODE BEGIN 4 */
void uart1_rx_callback(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	xQueueSendToBackFromISR(uart_queue_rx, (void*)&(USART1->DR), pdTRUE);
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <uart1_rx_callback+0x18>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	2300      	movs	r3, #0
 8000932:	2201      	movs	r2, #1
 8000934:	4903      	ldr	r1, [pc, #12]	; (8000944 <uart1_rx_callback+0x1c>)
 8000936:	f003 fec9 	bl	80046cc <xQueueGenericSendFromISR>
	__asm__ volatile("NOP");
 800093a:	bf00      	nop

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000032c 	.word	0x2000032c
 8000944:	40011004 	.word	0x40011004

08000948 <enter_programing>:

void enter_programing()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	xEventGroupClearBits(EventGroup, 0x40);
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <enter_programing+0x34>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fb60 	bl	8004018 <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <enter_programing+0x38>)
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <enter_programing+0x38>)
 800095c:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <enter_programing+0x38>)
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <enter_programing+0x3c>)
 8000962:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	erase_exm();
 8000966:	f000 f8d3 	bl	8000b10 <erase_exm>
	xEventGroupSetBits(EventGroup, 0x80);
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <enter_programing+0x34>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fb89 	bl	8004088 <xEventGroupSetBits>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200003fc 	.word	0x200003fc
 8000980:	20000334 	.word	0x20000334
 8000984:	200003b0 	.word	0x200003b0

08000988 <exit_programing>:

void exit_programing()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	xEventGroupClearBits(EventGroup, 0x80);
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <exit_programing+0x30>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fb40 	bl	8004018 <xEventGroupClearBits>
	exm.memory_pointer = exm.execution_memory;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <exit_programing+0x34>)
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <exit_programing+0x34>)
 800099c:	679a      	str	r2, [r3, #120]	; 0x78
	exm.sizes_pointer = exm.sizes_of_instruction;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <exit_programing+0x34>)
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <exit_programing+0x38>)
 80009a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	xEventGroupSetBits(EventGroup, 0x40);
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <exit_programing+0x30>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fb6b 	bl	8004088 <xEventGroupSetBits>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200003fc 	.word	0x200003fc
 80009bc:	20000334 	.word	0x20000334
 80009c0:	200003b0 	.word	0x200003b0

080009c4 <write_to_exm>:

void write_to_exm(uint8_t* start_of_data, uint8_t size_of_data)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size_of_data; i++){
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e017      	b.n	8000a06 <write_to_exm+0x42>
//		exm.execution_memory[exm.memory_pointer] = start_of_data[i];
		*exm.memory_pointer = start_of_data[i];
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	441a      	add	r2, r3
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <write_to_exm+0x84>)
 80009de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <write_to_exm+0x84>)
 80009e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <write_to_exm+0x84>)
 80009ec:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <write_to_exm+0x84>)
 80009f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <write_to_exm+0x88>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d303      	bcc.n	8000a00 <write_to_exm+0x3c>
			exm.memory_pointer = exm.execution_memory + 118;
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <write_to_exm+0x8c>)
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <write_to_exm+0x84>)
 80009fc:	679a      	str	r2, [r3, #120]	; 0x78
			return;
 80009fe:	e01d      	b.n	8000a3c <write_to_exm+0x78>
	for(int i = 0; i < size_of_data; i++){
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbe3      	blt.n	80009d6 <write_to_exm+0x12>
		}
	}
//	exm.sizes_of_instruction[exm.sizes_pointer] = size_of_data;
	*exm.sizes_pointer = size_of_data;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <write_to_exm+0x84>)
 8000a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000a14:	78fa      	ldrb	r2, [r7, #3]
 8000a16:	701a      	strb	r2, [r3, #0]
	exm.sizes_pointer++;
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <write_to_exm+0x84>)
 8000a1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <write_to_exm+0x84>)
 8000a22:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <write_to_exm+0x84>)
 8000a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <write_to_exm+0x90>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d304      	bcc.n	8000a3c <write_to_exm+0x78>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <write_to_exm+0x94>)
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <write_to_exm+0x84>)
 8000a36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return;
 8000a3a:	bf00      	nop
	}
}
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000334 	.word	0x20000334
 8000a4c:	200003ab 	.word	0x200003ab
 8000a50:	200003aa 	.word	0x200003aa
 8000a54:	200003ec 	.word	0x200003ec
 8000a58:	200003eb 	.word	0x200003eb

08000a5c <read_from_exm>:

void read_from_exm()
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e008      	b.n	8000a7a <read_from_exm+0x1e>
		exm.current_instruction[i] = 0;
 8000a68:	4a24      	ldr	r2, [pc, #144]	; (8000afc <read_from_exm+0xa0>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	33bc      	adds	r3, #188	; 0xbc
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	ddf3      	ble.n	8000a68 <read_from_exm+0xc>
	}
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	e019      	b.n	8000aba <read_from_exm+0x5e>
		exm.current_instruction[i] = *exm.memory_pointer;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <read_from_exm+0xa0>)
 8000a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a8a:	7819      	ldrb	r1, [r3, #0]
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <read_from_exm+0xa0>)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	33bc      	adds	r3, #188	; 0xbc
 8000a94:	460a      	mov	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
		exm.memory_pointer++;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <read_from_exm+0xa0>)
 8000a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <read_from_exm+0xa0>)
 8000aa0:	6793      	str	r3, [r2, #120]	; 0x78
		if(exm.memory_pointer >= (exm.execution_memory + 119)){
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <read_from_exm+0xa0>)
 8000aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <read_from_exm+0xa4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d303      	bcc.n	8000ab4 <read_from_exm+0x58>
			exm.memory_pointer = exm.execution_memory + 118;
 8000aac:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <read_from_exm+0xa8>)
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <read_from_exm+0xa0>)
 8000ab0:	679a      	str	r2, [r3, #120]	; 0x78
			return ;
 8000ab2:	e01d      	b.n	8000af0 <read_from_exm+0x94>
	for(int i = 0; i < *exm.sizes_pointer; i++){
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <read_from_exm+0xa0>)
 8000abc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	dbdd      	blt.n	8000a86 <read_from_exm+0x2a>
		}
	}
	exm.sizes_pointer++;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <read_from_exm+0xa0>)
 8000acc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <read_from_exm+0xa0>)
 8000ad4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	if(exm.sizes_pointer >= (exm.sizes_of_instruction + 60)){
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <read_from_exm+0xa0>)
 8000ada:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <read_from_exm+0xac>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d304      	bcc.n	8000aee <read_from_exm+0x92>
		exm.sizes_pointer = exm.sizes_of_instruction + 59;
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <read_from_exm+0xb0>)
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <read_from_exm+0xa0>)
 8000ae8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		return ;
 8000aec:	e000      	b.n	8000af0 <read_from_exm+0x94>
	}
	return ;
 8000aee:	bf00      	nop
}
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000334 	.word	0x20000334
 8000b00:	200003ab 	.word	0x200003ab
 8000b04:	200003aa 	.word	0x200003aa
 8000b08:	200003ec 	.word	0x200003ec
 8000b0c:	200003eb 	.word	0x200003eb

08000b10 <erase_exm>:

void erase_exm()
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e007      	b.n	8000b2c <erase_exm+0x1c>
		exm.execution_memory[i] = 0;
 8000b1c:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <erase_exm+0x50>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.execution_memory); i++){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b76      	cmp	r3, #118	; 0x76
 8000b30:	d9f4      	bls.n	8000b1c <erase_exm+0xc>
	}
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	e008      	b.n	8000b4a <erase_exm+0x3a>
		exm.sizes_of_instruction[i] = 1;
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <erase_exm+0x50>)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	337c      	adds	r3, #124	; 0x7c
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(exm.sizes_of_instruction); i++){
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b3b      	cmp	r3, #59	; 0x3b
 8000b4e:	d9f3      	bls.n	8000b38 <erase_exm+0x28>
	}
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000334 	.word	0x20000334

08000b64 <function_of_S>:


void function_of_S()
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
//	  TIM3->ARR = base;
//	  TIM3->CCR1 = (uint16_t) base*0.99;
//	  TIM3->CCR2 = (uint16_t) base*0.99;
//	  TIM3->CCR3 = (uint16_t) base*0.99;
//	  TIM3->CCR4 = (uint16_t) base*0.99;
	__asm__ volatile("NOP");
 8000b68:	bf00      	nop
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <programing_mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_programing_mode */
void programing_mode(void const * argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x80, pdFALSE, pdTRUE, portMAX_DELAY);
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <programing_mode+0x78>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2301      	movs	r3, #1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	f003 f976 	bl	8003e7c <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Programming mode", 17, 100);
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	2211      	movs	r2, #17
 8000b94:	4916      	ldr	r1, [pc, #88]	; (8000bf0 <programing_mode+0x7c>)
 8000b96:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <programing_mode+0x80>)
 8000b98:	f002 f924 	bl	8002de4 <HAL_UART_Transmit>
	  //vTaskDelay(200);
	  char instruction_for_programing = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	  xQueueReceive(programing_queue, &instruction_for_programing, portMAX_DELAY);
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <programing_mode+0x84>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f107 010f 	add.w	r1, r7, #15
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 fe29 	bl	8004804 <xQueueReceive>
	  switch (instruction_for_programing) {
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	2b53      	cmp	r3, #83	; 0x53
 8000bb6:	d116      	bne.n	8000be6 <programing_mode+0x72>
		case 'S':
			uint8_t data[4] = {'S', (uint8_t)(exm.start_speed_value), (uint8_t)((exm.start_speed_value>>8)), 0};
 8000bb8:	2353      	movs	r3, #83	; 0x53
 8000bba:	723b      	strb	r3, [r7, #8]
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <programing_mode+0x88>)
 8000bbe:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	727b      	strb	r3, [r7, #9]
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <programing_mode+0x88>)
 8000bc8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	72bb      	strb	r3, [r7, #10]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	72fb      	strb	r3, [r7, #11]
			write_to_exm(data, sizeof(data));
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2104      	movs	r1, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fef0 	bl	80009c4 <write_to_exm>
			break;
 8000be4:	e000      	b.n	8000be8 <programing_mode+0x74>
		default:
			break;
 8000be6:	bf00      	nop
  {
 8000be8:	e7c8      	b.n	8000b7c <programing_mode+0x8>
 8000bea:	bf00      	nop
 8000bec:	200003fc 	.word	0x200003fc
 8000bf0:	0800649c 	.word	0x0800649c
 8000bf4:	200002d8 	.word	0x200002d8
 8000bf8:	20000330 	.word	0x20000330
 8000bfc:	20000334 	.word	0x20000334

08000c00 <interpreter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_interpreter */
void interpreter(void const * argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN interpreter */
	char pData;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8000c08:	4b57      	ldr	r3, [pc, #348]	; (8000d68 <interpreter+0x168>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f107 010b 	add.w	r1, r7, #11
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fdf5 	bl	8004804 <xQueueReceive>
	  HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000c1a:	f107 010b 	add.w	r1, r7, #11
 8000c1e:	230a      	movs	r3, #10
 8000c20:	2201      	movs	r2, #1
 8000c22:	4852      	ldr	r0, [pc, #328]	; (8000d6c <interpreter+0x16c>)
 8000c24:	f002 f8de 	bl	8002de4 <HAL_UART_Transmit>
	  if ((pData & (1<<7)) == 0x80){  //Check odd parity
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da04      	bge.n	8000c3a <interpreter+0x3a>
		  pData &= ~(1<<7);
 8000c30:	7afb      	ldrb	r3, [r7, #11]
 8000c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	72fb      	strb	r3, [r7, #11]
	  }
	  __asm__ volatile("NOP");
 8000c3a:	bf00      	nop
	  switch (pData) {
 8000c3c:	7afb      	ldrb	r3, [r7, #11]
 8000c3e:	2b53      	cmp	r3, #83	; 0x53
 8000c40:	d036      	beq.n	8000cb0 <interpreter+0xb0>
 8000c42:	2b53      	cmp	r3, #83	; 0x53
 8000c44:	f300 8087 	bgt.w	8000d56 <interpreter+0x156>
 8000c48:	2b50      	cmp	r3, #80	; 0x50
 8000c4a:	d008      	beq.n	8000c5e <interpreter+0x5e>
 8000c4c:	2b50      	cmp	r3, #80	; 0x50
 8000c4e:	f300 8082 	bgt.w	8000d56 <interpreter+0x156>
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8081 	beq.w	8000d5a <interpreter+0x15a>
 8000c58:	2b45      	cmp	r3, #69	; 0x45
 8000c5a:	d026      	beq.n	8000caa <interpreter+0xaa>
			__asm__ volatile("NOP");
			break;
	    case 0:
			break;
		default:
			break;
 8000c5c:	e07b      	b.n	8000d56 <interpreter+0x156>
			xQueueReceive(uart_queue_rx, &pData, 5);
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <interpreter+0x168>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f107 010b 	add.w	r1, r7, #11
 8000c66:	2205      	movs	r2, #5
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fdcb 	bl	8004804 <xQueueReceive>
			HAL_UART_Transmit(&huart1, &pData, 1, 10);
 8000c6e:	f107 010b 	add.w	r1, r7, #11
 8000c72:	230a      	movs	r3, #10
 8000c74:	2201      	movs	r2, #1
 8000c76:	483d      	ldr	r0, [pc, #244]	; (8000d6c <interpreter+0x16c>)
 8000c78:	f002 f8b4 	bl	8002de4 <HAL_UART_Transmit>
				  if ((pData & (1<<7)) == 0x80){ //Check odd parity
 8000c7c:	7afb      	ldrb	r3, [r7, #11]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	da04      	bge.n	8000c8e <interpreter+0x8e>
					  pData &= ~(1<<7);
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	72fb      	strb	r3, [r7, #11]
			__asm__ volatile("NOP");
 8000c8e:	bf00      	nop
			switch (pData) {
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	2b6f      	cmp	r3, #111	; 0x6f
 8000c94:	d002      	beq.n	8000c9c <interpreter+0x9c>
 8000c96:	2b78      	cmp	r3, #120	; 0x78
 8000c98:	d003      	beq.n	8000ca2 <interpreter+0xa2>
					break;
 8000c9a:	e005      	b.n	8000ca8 <interpreter+0xa8>
					enter_programing();
 8000c9c:	f7ff fe54 	bl	8000948 <enter_programing>
					break;
 8000ca0:	e002      	b.n	8000ca8 <interpreter+0xa8>
					exit_programing();
 8000ca2:	f7ff fe71 	bl	8000988 <exit_programing>
					break;
 8000ca6:	bf00      	nop
			break;
 8000ca8:	e05a      	b.n	8000d60 <interpreter+0x160>
	    	exit_programing();
 8000caa:	f7ff fe6d 	bl	8000988 <exit_programing>
	    	break;
 8000cae:	e057      	b.n	8000d60 <interpreter+0x160>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <interpreter+0x170>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f9ae 	bl	8004018 <xEventGroupClearBits>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	2b80      	cmp	r3, #128	; 0x80
 8000cc4:	d14b      	bne.n	8000d5e <interpreter+0x15e>
			exm.start_speed_value = 0;
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <interpreter+0x174>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			char temp = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	72bb      	strb	r3, [r7, #10]
			for(int i = 0; i < 4; i++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	e030      	b.n	8000d3a <interpreter+0x13a>
				xQueueReceive(uart_queue_rx, &temp, 5);
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <interpreter+0x168>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f107 010a 	add.w	r1, r7, #10
 8000ce0:	2205      	movs	r2, #5
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fd8e 	bl	8004804 <xQueueReceive>
				if((temp == 13) || (temp == 0) || (i == 3)) break;
 8000ce8:	7abb      	ldrb	r3, [r7, #10]
 8000cea:	2b0d      	cmp	r3, #13
 8000cec:	d02a      	beq.n	8000d44 <interpreter+0x144>
 8000cee:	7abb      	ldrb	r3, [r7, #10]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d027      	beq.n	8000d44 <interpreter+0x144>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d024      	beq.n	8000d44 <interpreter+0x144>
				if(i == 3) break;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d020      	beq.n	8000d42 <interpreter+0x142>
				if ((temp & (1<<7)) == 0x80){
 8000d00:	7abb      	ldrb	r3, [r7, #10]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	da04      	bge.n	8000d12 <interpreter+0x112>
					temp &= ~(1<<7);
 8000d08:	7abb      	ldrb	r3, [r7, #10]
 8000d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	72bb      	strb	r3, [r7, #10]
				exm.start_speed_value = (exm.start_speed_value*10) + (temp - 48);
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <interpreter+0x174>)
 8000d14:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	7abb      	ldrb	r3, [r7, #10]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4413      	add	r3, r2
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	3b30      	subs	r3, #48	; 0x30
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <interpreter+0x174>)
 8000d30:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			for(int i = 0; i < 4; i++){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	ddcb      	ble.n	8000cd8 <interpreter+0xd8>
 8000d40:	e000      	b.n	8000d44 <interpreter+0x144>
				if(i == 3) break;
 8000d42:	bf00      	nop
			xQueueSendToBack(programing_queue, (void*)"S", 100);
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <interpreter+0x178>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2264      	movs	r2, #100	; 0x64
 8000d4c:	490b      	ldr	r1, [pc, #44]	; (8000d7c <interpreter+0x17c>)
 8000d4e:	f003 fbbf 	bl	80044d0 <xQueueGenericSend>
			__asm__ volatile("NOP");
 8000d52:	bf00      	nop
			break;
 8000d54:	e004      	b.n	8000d60 <interpreter+0x160>
			break;
 8000d56:	bf00      	nop
 8000d58:	e002      	b.n	8000d60 <interpreter+0x160>
			break;
 8000d5a:	bf00      	nop
 8000d5c:	e000      	b.n	8000d60 <interpreter+0x160>
			if((xEventGroupGetBits(EventGroup) & (1<<7)) != 0x80) break; // if  Programming mode is OFF
 8000d5e:	bf00      	nop
	}

	  pData = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	72fb      	strb	r3, [r7, #11]
	  xQueueReceive(uart_queue_rx, &pData, portMAX_DELAY);
 8000d64:	e750      	b.n	8000c08 <interpreter+0x8>
 8000d66:	bf00      	nop
 8000d68:	2000032c 	.word	0x2000032c
 8000d6c:	200002d8 	.word	0x200002d8
 8000d70:	200003fc 	.word	0x200003fc
 8000d74:	20000334 	.word	0x20000334
 8000d78:	20000330 	.word	0x20000330
 8000d7c:	080064b0 	.word	0x080064b0

08000d80 <uart_comunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_comunication */
void uart_comunication(void const * argument)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_comunication */
	GPIOB->ODR |= GPIO_ODR_OD9;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <uart_comunication+0x20>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <uart_comunication+0x20>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6153      	str	r3, [r2, #20]
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <uart_comunication+0x24>)
 8000d98:	f001 faf0 	bl	800237c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
 8000d9c:	e7fe      	b.n	8000d9c <uart_comunication+0x1c>
 8000d9e:	bf00      	nop
 8000da0:	40020400 	.word	0x40020400
 8000da4:	20000290 	.word	0x20000290

08000da8 <execution_from_memory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execution_from_memory */
void execution_from_memory(void const * argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execution_from_memory */
  /* Infinite loop */
  for(;;)
  {
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <execution_from_memory+0x40>)
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	f003 f85c 	bl	8003e7c <xEventGroupWaitBits>
	  HAL_UART_Transmit(&huart1, "Execution mode", 15, 100);
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	4908      	ldr	r1, [pc, #32]	; (8000dec <execution_from_memory+0x44>)
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <execution_from_memory+0x48>)
 8000dcc:	f002 f80a 	bl	8002de4 <HAL_UART_Transmit>
	  read_from_exm();
 8000dd0:	f7ff fe44 	bl	8000a5c <read_from_exm>
	  HAL_UART_Transmit(&huart1, exm.current_instruction, sizeof(exm.current_instruction), 100);
 8000dd4:	2364      	movs	r3, #100	; 0x64
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	4906      	ldr	r1, [pc, #24]	; (8000df4 <execution_from_memory+0x4c>)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <execution_from_memory+0x48>)
 8000ddc:	f002 f802 	bl	8002de4 <HAL_UART_Transmit>

	  vTaskDelay(200);
 8000de0:	20c8      	movs	r0, #200	; 0xc8
 8000de2:	f004 f893 	bl	8004f0c <vTaskDelay>
	  xEventGroupWaitBits(EventGroup, 0x40, pdFALSE, pdTRUE, portMAX_DELAY);
 8000de6:	e7e3      	b.n	8000db0 <execution_from_memory+0x8>
 8000de8:	200003fc 	.word	0x200003fc
 8000dec:	080064b4 	.word	0x080064b4
 8000df0:	200002d8 	.word	0x200002d8
 8000df4:	200003f0 	.word	0x200003f0

08000df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0a:	f000 f9ef 	bl	80011ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1a:	b672      	cpsid	i
}
 8000e1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <Error_Handler+0x8>

08000e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_MspInit+0x54>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_MspInit+0x54>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_MspInit+0x54>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_MspInit+0x54>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_MspInit+0x54>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_MspInit+0x54>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210f      	movs	r1, #15
 8000e62:	f06f 0001 	mvn.w	r0, #1
 8000e66:	f000 fa99 	bl	800139c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10d      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_TIM_Base_MspInit+0x40>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_TIM_Base_MspInit+0x40>)
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_TIM_Base_MspInit+0x40>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40014400 	.word	0x40014400
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_TIM_MspPostInit+0x68>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d11e      	bne.n	8000f1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = PUL_stepper_Pin;
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PUL_stepper_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_TIM_MspPostInit+0x70>)
 8000f18:	f000 fafc 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40014400 	.word	0x40014400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_UART_MspInit+0x94>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d134      	bne.n	8000fbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f5c:	f043 0310 	orr.w	r3, r3, #16
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_UART_MspInit+0x9c>)
 8000fa8:	f000 fab4 	bl	8001514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2105      	movs	r1, #5
 8000fb0:	2025      	movs	r0, #37	; 0x25
 8000fb2:	f000 f9f3 	bl	800139c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fb6:	2025      	movs	r0, #37	; 0x25
 8000fb8:	f000 fa0c 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <HAL_InitTick+0xe8>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <HAL_InitTick+0xe8>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <HAL_InitTick+0xe8>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ffc:	f107 0210 	add.w	r2, r7, #16
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f001 f87a 	bl	8002100 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001016:	f001 f84b 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 800101a:	6378      	str	r0, [r7, #52]	; 0x34
 800101c:	e004      	b.n	8001028 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800101e:	f001 f847 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8001022:	4603      	mov	r3, r0
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_InitTick+0xec>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	0c9b      	lsrs	r3, r3, #18
 8001032:	3b01      	subs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_InitTick+0xf0>)
 8001038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_InitTick+0xf0>)
 8001040:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001044:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <HAL_InitTick+0xf0>)
 8001048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_InitTick+0xf0>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_InitTick+0xf0>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_InitTick+0xf0>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <HAL_InitTick+0xf0>)
 8001060:	f001 f880 	bl	8002164 <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800106a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800106e:	2b00      	cmp	r3, #0
 8001070:	d11b      	bne.n	80010aa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <HAL_InitTick+0xf0>)
 8001074:	f001 f8c6 	bl	8002204 <HAL_TIM_Base_Start_IT>
 8001078:	4603      	mov	r3, r0
 800107a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800107e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001082:	2b00      	cmp	r3, #0
 8001084:	d111      	bne.n	80010aa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001086:	201c      	movs	r0, #28
 8001088:	f000 f9a4 	bl	80013d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d808      	bhi.n	80010a4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001092:	2200      	movs	r2, #0
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	201c      	movs	r0, #28
 8001098:	f000 f980 	bl	800139c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_InitTick+0xf4>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e002      	b.n	80010aa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3738      	adds	r7, #56	; 0x38
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	20000400 	.word	0x20000400
 80010c4:	20000004 	.word	0x20000004

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM2_IRQHandler+0x10>)
 80010fa:	f001 f9ef 	bl	80024dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000400 	.word	0x20000400

08001108 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(USART1->SR & USART_SR_RXNE){
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <USART1_IRQHandler+0x20>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <USART1_IRQHandler+0x16>
		uart1_rx_callback();
 8001118:	f7ff fc06 	bl	8000928 <uart1_rx_callback>
		__asm__ volatile("NOP");
 800111c:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <USART1_IRQHandler+0x24>)
 8001120:	f001 fef2 	bl	8002f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40011000 	.word	0x40011000
 800112c:	200002d8 	.word	0x200002d8

08001130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <SystemInit+0x20>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <SystemInit+0x20>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001170:	4c0b      	ldr	r4, [pc, #44]	; (80011a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117e:	f7ff ffd7 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f005 f8f3 	bl	800636c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff f9c3 	bl	8000510 <main>
  bx  lr    
 800118a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001198:	080064f4 	.word	0x080064f4
  ldr r2, =_sbss
 800119c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011a0:	200041a0 	.word	0x200041a0

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_Init+0x40>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_Init+0x40>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x40>)
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f8d8 	bl	8001386 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff fefa 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fe20 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20000448 	.word	0x20000448

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000448 	.word	0x20000448

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff4c 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ae:	f7ff ff61 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f7ff ffb1 	bl	8001320 <NVIC_EncodePriority>
 80013be:	4602      	mov	r2, r0
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff80 	bl	80012cc <__NVIC_SetPriority>
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff54 	bl	8001290 <__NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013fe:	f7ff ff09 	bl	8001214 <HAL_GetTick>
 8001402:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e052      	b.n	80014c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0216 	bic.w	r2, r2, #22
 8001430:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001440:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d103      	bne.n	8001452 <HAL_DMA_Abort+0x62>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0208 	bic.w	r2, r2, #8
 8001460:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001472:	e013      	b.n	800149c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001474:	f7ff fece 	bl	8001214 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d90c      	bls.n	800149c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2220      	movs	r2, #32
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e015      	b.n	80014c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1e4      	bne.n	8001474 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	223f      	movs	r2, #63	; 0x3f
 80014b0:	409a      	lsls	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d004      	beq.n	80014ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00c      	b.n	8001508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e159      	b.n	80017e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8148 	bne.w	80017de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a2 	beq.w	80017de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b57      	ldr	r3, [pc, #348]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a56      	ldr	r2, [pc, #344]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x2ec>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a49      	ldr	r2, [pc, #292]	; (8001804 <HAL_GPIO_Init+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x202>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x1fe>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_GPIO_Init+0x2f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x1fa>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_GPIO_Init+0x2fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x1f6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a45      	ldr	r2, [pc, #276]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x1f2>
 8001702:	2304      	movs	r3, #4
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001706:	2307      	movs	r3, #7
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	; (8001800 <HAL_GPIO_Init+0x2ec>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175a:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_GPIO_Init+0x304>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_GPIO_Init+0x304>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ae:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f aea2 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e267      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d075      	beq.n	800195a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d00c      	beq.n	8001894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001882:	2b08      	cmp	r3, #8
 8001884:	d112      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001886:	4b82      	ldr	r3, [pc, #520]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001892:	d10b      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	4b7e      	ldr	r3, [pc, #504]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05b      	beq.n	8001958 <HAL_RCC_OscConfig+0x108>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d157      	bne.n	8001958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e242      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_OscConfig+0x74>
 80018b6:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a75      	ldr	r2, [pc, #468]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x98>
 80018ce:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6f      	ldr	r2, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6c      	ldr	r2, [pc, #432]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018e8:	4b69      	ldr	r3, [pc, #420]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a68      	ldr	r2, [pc, #416]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a65      	ldr	r2, [pc, #404]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fc84 	bl	8001214 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fc80 	bl	8001214 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e207      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xc0>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fc70 	bl	8001214 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fc6c 	bl	8001214 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1f3      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0xe8>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1c7      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4937      	ldr	r1, [pc, #220]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_RCC_OscConfig+0x244>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fc25 	bl	8001214 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff fc21 	bl	8001214 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1a8      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4925      	ldr	r1, [pc, #148]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_RCC_OscConfig+0x244>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fc04 	bl	8001214 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff fc00 	bl	8001214 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e187      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d036      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d016      	beq.n	8001a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_RCC_OscConfig+0x248>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fbe4 	bl	8001214 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fbe0 	bl	8001214 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e167      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x200>
 8001a6e:	e01b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x248>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbcd 	bl	8001214 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	e00e      	b.n	8001a9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fbc9 	bl	8001214 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d907      	bls.n	8001a9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e150      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	42470000 	.word	0x42470000
 8001a98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ea      	bne.n	8001a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8097 	beq.w	8001be4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b7d      	ldr	r3, [pc, #500]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a7c      	ldr	r2, [pc, #496]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af2:	4b74      	ldr	r3, [pc, #464]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a73      	ldr	r2, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fb89 	bl	8001214 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff fb85 	bl	8001214 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e10c      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b6a      	ldr	r3, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2ea>
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a63      	ldr	r2, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	e01c      	b.n	8001b74 <HAL_RCC_OscConfig+0x324>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x30c>
 8001b42:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0x324>
 8001b5c:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	4a57      	ldr	r2, [pc, #348]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6713      	str	r3, [r2, #112]	; 0x70
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f023 0304 	bic.w	r3, r3, #4
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d015      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fb4a 	bl	8001214 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f7ff fb46 	bl	8001214 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0cb      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0ee      	beq.n	8001b84 <HAL_RCC_OscConfig+0x334>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fb34 	bl	8001214 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fb30 	bl	8001214 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0b5      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1ee      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd8:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a1 	beq.w	8001d30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d05c      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d141      	bne.n	8001c86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb04 	bl	8001214 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff fb00 	bl	8001214 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e087      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	491b      	ldr	r1, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fad9 	bl	8001214 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fad5 	bl	8001214 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e05c      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x416>
 8001c84:	e054      	b.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fac2 	bl	8001214 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff fabe 	bl	8001214 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e045      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x444>
 8001cb2:	e03d      	b.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e038      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x4ec>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d028      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d121      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d11a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cc      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d90c      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b8      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	494d      	ldr	r1, [pc, #308]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d044      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d119      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e07f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e067      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff f9f0 	bl	8001214 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f9ec 	bl	8001214 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d20c      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4916      	ldr	r1, [pc, #88]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec6:	f000 f821 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490a      	ldr	r1, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f872 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00
 8001efc:	40023800 	.word	0x40023800
 8001f00:	080064cc 	.word	0x080064cc
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f10:	b090      	sub	sp, #64	; 0x40
 8001f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d00d      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x40>
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	f200 80a1 	bhi.w	8002078 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f3e:	e09b      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f44:	e09b      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f46:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f4a:	e098      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	2200      	movs	r2, #0
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	627a      	str	r2, [r7, #36]	; 0x24
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f74:	2100      	movs	r1, #0
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f78:	fb03 f201 	mul.w	r2, r3, r1
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	fb00 f303 	mul.w	r3, r0, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	4a43      	ldr	r2, [pc, #268]	; (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f86:	fba0 1202 	umull	r1, r2, r0, r2
 8001f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f92:	4413      	add	r3, r2
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	61fa      	str	r2, [r7, #28]
 8001f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fa6:	f7fe f91b 	bl	80001e0 <__aeabi_uldivmod>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4613      	mov	r3, r2
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb2:	e053      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	2200      	movs	r2, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	617a      	str	r2, [r7, #20]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fc6:	f04f 0b00 	mov.w	fp, #0
 8001fca:	4652      	mov	r2, sl
 8001fcc:	465b      	mov	r3, fp
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	ebb2 080a 	subs.w	r8, r2, sl
 8001fe6:	eb63 090b 	sbc.w	r9, r3, fp
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ff6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ffa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ffe:	ebb2 0408 	subs.w	r4, r2, r8
 8002002:	eb63 0509 	sbc.w	r5, r3, r9
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	00eb      	lsls	r3, r5, #3
 8002010:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002014:	00e2      	lsls	r2, r4, #3
 8002016:	4614      	mov	r4, r2
 8002018:	461d      	mov	r5, r3
 800201a:	eb14 030a 	adds.w	r3, r4, sl
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	eb45 030b 	adc.w	r3, r5, fp
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002032:	4629      	mov	r1, r5
 8002034:	028b      	lsls	r3, r1, #10
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800203c:	4621      	mov	r1, r4
 800203e:	028a      	lsls	r2, r1, #10
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002046:	2200      	movs	r2, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	60fa      	str	r2, [r7, #12]
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe f8c6 	bl	80001e0 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4613      	mov	r3, r2
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800206c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCC_GetSysClockFreq+0x184>)
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002080:	4618      	mov	r0, r3
 8002082:	3740      	adds	r7, #64	; 0x40
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	00f42400 	.word	0x00f42400
 8002094:	017d7840 	.word	0x017d7840

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_RCC_GetHCLKFreq+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b4:	f7ff fff0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0a9b      	lsrs	r3, r3, #10
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	080064dc 	.word	0x080064dc

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020dc:	f7ff ffdc 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0b5b      	lsrs	r3, r3, #13
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	080064dc 	.word	0x080064dc

08002100 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	220f      	movs	r2, #15
 800210e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_RCC_GetClockConfig+0x5c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0203 	and.w	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_RCC_GetClockConfig+0x5c>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_RCC_GetClockConfig+0x5c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_GetClockConfig+0x5c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	08db      	lsrs	r3, r3, #3
 800213a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_RCC_GetClockConfig+0x60>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0207 	and.w	r2, r3, #7
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	601a      	str	r2, [r3, #0]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40023c00 	.word	0x40023c00

08002164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e041      	b.n	80021fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fe74 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f000 fb8c 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d001      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e044      	b.n	80022a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d018      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x6c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002246:	d013      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x6c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00e      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x6c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_TIM_Base_Start_IT+0xb8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x6c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x6c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d111      	bne.n	8002294 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b06      	cmp	r3, #6
 8002280:	d010      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002292:	e007      	b.n	80022a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40000c00 	.word	0x40000c00
 80022c4:	40014000 	.word	0x40014000

080022c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e041      	b.n	800235e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f839 	bl	8002366 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 fada 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_TIM_PWM_Start+0x24>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	bf14      	ite	ne
 8002398:	2301      	movne	r3, #1
 800239a:	2300      	moveq	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e022      	b.n	80023e6 <HAL_TIM_PWM_Start+0x6a>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d109      	bne.n	80023ba <HAL_TIM_PWM_Start+0x3e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e015      	b.n	80023e6 <HAL_TIM_PWM_Start+0x6a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d109      	bne.n	80023d4 <HAL_TIM_PWM_Start+0x58>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e008      	b.n	80023e6 <HAL_TIM_PWM_Start+0x6a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e068      	b.n	80024c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_PWM_Start+0x82>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023fc:	e013      	b.n	8002426 <HAL_TIM_PWM_Start+0xaa>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d104      	bne.n	800240e <HAL_TIM_PWM_Start+0x92>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800240c:	e00b      	b.n	8002426 <HAL_TIM_PWM_Start+0xaa>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d104      	bne.n	800241e <HAL_TIM_PWM_Start+0xa2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800241c:	e003      	b.n	8002426 <HAL_TIM_PWM_Start+0xaa>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fc52 	bl	8002cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <HAL_TIM_PWM_Start+0x14c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d107      	bne.n	800244e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_TIM_PWM_Start+0x14c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d018      	beq.n	800248a <HAL_TIM_PWM_Start+0x10e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d013      	beq.n	800248a <HAL_TIM_PWM_Start+0x10e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_TIM_PWM_Start+0x150>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_TIM_PWM_Start+0x10e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_TIM_PWM_Start+0x154>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_TIM_PWM_Start+0x10e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_TIM_PWM_Start+0x158>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_TIM_PWM_Start+0x10e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_TIM_PWM_Start+0x15c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d111      	bne.n	80024ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d010      	beq.n	80024be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	e007      	b.n	80024be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40000800 	.word	0x40000800
 80024d4:	40000c00 	.word	0x40000c00
 80024d8:	40014000 	.word	0x40014000

080024dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0202 	mvn.w	r2, #2
 8002508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f9b0 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f9a2 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f9b3 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b04      	cmp	r3, #4
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0204 	mvn.w	r2, #4
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f986 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f978 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f989 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b08      	cmp	r3, #8
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0208 	mvn.w	r2, #8
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2204      	movs	r2, #4
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f95c 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f94e 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f95f 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0210 	mvn.w	r2, #16
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2208      	movs	r2, #8
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f932 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f924 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f935 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0201 	mvn.w	r2, #1
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fbcc 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fb55 	bl	8002d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8fa 	bl	80028ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0220 	mvn.w	r2, #32
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fb1f 	bl	8002d22 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002706:	2302      	movs	r3, #2
 8002708:	e0ae      	b.n	8002868 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	f200 809f 	bhi.w	8002858 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002755 	.word	0x08002755
 8002724:	08002859 	.word	0x08002859
 8002728:	08002859 	.word	0x08002859
 800272c:	08002859 	.word	0x08002859
 8002730:	08002795 	.word	0x08002795
 8002734:	08002859 	.word	0x08002859
 8002738:	08002859 	.word	0x08002859
 800273c:	08002859 	.word	0x08002859
 8002740:	080027d7 	.word	0x080027d7
 8002744:	08002859 	.word	0x08002859
 8002748:	08002859 	.word	0x08002859
 800274c:	08002859 	.word	0x08002859
 8002750:	08002817 	.word	0x08002817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f930 	bl	80029c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0208 	orr.w	r2, r2, #8
 800276e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6999      	ldr	r1, [r3, #24]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	619a      	str	r2, [r3, #24]
      break;
 8002792:	e064      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f976 	bl	8002a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6999      	ldr	r1, [r3, #24]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	021a      	lsls	r2, r3, #8
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	619a      	str	r2, [r3, #24]
      break;
 80027d4:	e043      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f9c1 	bl	8002b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0208 	orr.w	r2, r2, #8
 80027f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0204 	bic.w	r2, r2, #4
 8002800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69d9      	ldr	r1, [r3, #28]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
      break;
 8002814:	e023      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fa0b 	bl	8002c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69d9      	ldr	r1, [r3, #28]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	021a      	lsls	r2, r3, #8
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	61da      	str	r2, [r3, #28]
      break;
 8002856:	e002      	b.n	800285e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	75fb      	strb	r3, [r7, #23]
      break;
 800285c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a34      	ldr	r2, [pc, #208]	; (80029a4 <TIM_Base_SetConfig+0xe4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00f      	beq.n	80028f8 <TIM_Base_SetConfig+0x38>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d00b      	beq.n	80028f8 <TIM_Base_SetConfig+0x38>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <TIM_Base_SetConfig+0xe8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <TIM_Base_SetConfig+0x38>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a30      	ldr	r2, [pc, #192]	; (80029ac <TIM_Base_SetConfig+0xec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_Base_SetConfig+0x38>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a2f      	ldr	r2, [pc, #188]	; (80029b0 <TIM_Base_SetConfig+0xf0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <TIM_Base_SetConfig+0xe4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01b      	beq.n	800294a <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002918:	d017      	beq.n	800294a <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <TIM_Base_SetConfig+0xe8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a21      	ldr	r2, [pc, #132]	; (80029ac <TIM_Base_SetConfig+0xec>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00f      	beq.n	800294a <TIM_Base_SetConfig+0x8a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a20      	ldr	r2, [pc, #128]	; (80029b0 <TIM_Base_SetConfig+0xf0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00b      	beq.n	800294a <TIM_Base_SetConfig+0x8a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <TIM_Base_SetConfig+0xf4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_Base_SetConfig+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <TIM_Base_SetConfig+0xf8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d003      	beq.n	800294a <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <TIM_Base_SetConfig+0xfc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d108      	bne.n	800295c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <TIM_Base_SetConfig+0xe4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40014000 	.word	0x40014000
 80029b8:	40014400 	.word	0x40014400
 80029bc:	40014800 	.word	0x40014800

080029c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0201 	bic.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f023 0302 	bic.w	r3, r3, #2
 8002a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <TIM_OC1_SetConfig+0xc8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10c      	bne.n	8002a36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f023 0308 	bic.w	r3, r3, #8
 8002a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <TIM_OC1_SetConfig+0xc8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40010000 	.word	0x40010000

08002a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f023 0210 	bic.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0320 	bic.w	r3, r3, #32
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <TIM_OC2_SetConfig+0xd4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10d      	bne.n	8002b08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <TIM_OC2_SetConfig+0xd4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d113      	bne.n	8002b38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40010000 	.word	0x40010000

08002b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <TIM_OC3_SetConfig+0xd0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10d      	bne.n	8002bde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <TIM_OC3_SetConfig+0xd0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d113      	bne.n	8002c0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40010000 	.word	0x40010000

08002c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	031b      	lsls	r3, r3, #12
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <TIM_OC4_SetConfig+0x9c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d109      	bne.n	8002cac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40010000 	.word	0x40010000

08002cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e03f      	b.n	8002ddc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe f8dd 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2224      	movs	r2, #36	; 0x24
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fd7a 	bl	8003888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d17c      	bne.n	8002efe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Transmit+0x2c>
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e075      	b.n	8002f00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Transmit+0x3e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e06e      	b.n	8002f00 <HAL_UART_Transmit+0x11c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2221      	movs	r2, #33	; 0x21
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e38:	f7fe f9ec 	bl	8001214 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e52:	d108      	bne.n	8002e66 <HAL_UART_Transmit+0x82>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e003      	b.n	8002e6e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e76:	e02a      	b.n	8002ece <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 faf8 	bl	8003478 <UART_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e036      	b.n	8002f00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	3302      	adds	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e007      	b.n	8002ec0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1cf      	bne.n	8002e78 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2140      	movs	r1, #64	; 0x40
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fac8 	bl	8003478 <UART_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e006      	b.n	8002f00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0ba      	sub	sp, #232	; 0xe8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_UART_IRQHandler+0x66>
 8002f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fbd3 	bl	8003712 <UART_Receive_IT>
      return;
 8002f6c:	e256      	b.n	800341c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80de 	beq.w	8003134 <HAL_UART_IRQHandler+0x22c>
 8002f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80d1 	beq.w	8003134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_UART_IRQHandler+0xae>
 8002f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_UART_IRQHandler+0xd2>
 8002fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0202 	orr.w	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xf6>
 8002fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0204 	orr.w	r2, r3, #4
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d011      	beq.n	800302e <HAL_UART_IRQHandler+0x126>
 800300a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0208 	orr.w	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 81ed 	beq.w	8003412 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x14e>
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fb5e 	bl	8003712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_UART_IRQHandler+0x17a>
 800307a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04f      	beq.n	8003122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa66 	bl	8003554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d141      	bne.n	800311a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3314      	adds	r3, #20
 800309c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1d9      	bne.n	8003096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	4a7d      	ldr	r2, [pc, #500]	; (80032e4 <HAL_UART_IRQHandler+0x3dc>)
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe f9ea 	bl	80014d0 <HAL_DMA_Abort_IT>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800310c:	4610      	mov	r0, r2
 800310e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	e00e      	b.n	8003130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f99a 	bl	800344c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003118:	e00a      	b.n	8003130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f996 	bl	800344c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	e006      	b.n	8003130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f992 	bl	800344c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800312e:	e170      	b.n	8003412 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	bf00      	nop
    return;
 8003132:	e16e      	b.n	8003412 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	2b01      	cmp	r3, #1
 800313a:	f040 814a 	bne.w	80033d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8143 	beq.w	80033d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800314c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 813c 	beq.w	80033d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	f040 80b4 	bne.w	80032e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800318c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8140 	beq.w	8003416 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800319a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800319e:	429a      	cmp	r2, r3
 80031a0:	f080 8139 	bcs.w	8003416 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	f000 8088 	beq.w	80032ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80031e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1d9      	bne.n	80031ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3314      	adds	r3, #20
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3314      	adds	r3, #20
 8003226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800322a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800322e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e1      	bne.n	8003206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800326c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80032ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e3      	bne.n	8003288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe f893 	bl	80013f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8c0 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032e0:	e099      	b.n	8003416 <HAL_UART_IRQHandler+0x50e>
 80032e2:	bf00      	nop
 80032e4:	0800361b 	.word	0x0800361b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 808b 	beq.w	800341a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8086 	beq.w	800341a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003332:	647a      	str	r2, [r7, #68]	; 0x44
 8003334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3314      	adds	r3, #20
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	623b      	str	r3, [r7, #32]
   return(result);
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800336a:	633a      	str	r2, [r7, #48]	; 0x30
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e3      	bne.n	8003346 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	60fb      	str	r3, [r7, #12]
   return(result);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0310 	bic.w	r3, r3, #16
 80033a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033b0:	61fa      	str	r2, [r7, #28]
 80033b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	617b      	str	r3, [r7, #20]
   return(result);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e3      	bne.n	800338c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f848 	bl	8003460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033d0:	e023      	b.n	800341a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_UART_IRQHandler+0x4ea>
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f929 	bl	8003642 <UART_Transmit_IT>
    return;
 80033f0:	e014      	b.n	800341c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <HAL_UART_IRQHandler+0x514>
 80033fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f969 	bl	80036e2 <UART_EndTransmit_IT>
    return;
 8003410:	e004      	b.n	800341c <HAL_UART_IRQHandler+0x514>
    return;
 8003412:	bf00      	nop
 8003414:	e002      	b.n	800341c <HAL_UART_IRQHandler+0x514>
      return;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_UART_IRQHandler+0x514>
      return;
 800341a:	bf00      	nop
  }
}
 800341c:	37e8      	adds	r7, #232	; 0xe8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop

08003424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b090      	sub	sp, #64	; 0x40
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003488:	e050      	b.n	800352c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d04c      	beq.n	800352c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003498:	f7fd febc 	bl	8001214 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d241      	bcs.n	800352c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034c8:	637a      	str	r2, [r7, #52]	; 0x34
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e5      	bne.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	613b      	str	r3, [r7, #16]
   return(result);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034fc:	623a      	str	r2, [r7, #32]
 80034fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	69f9      	ldr	r1, [r7, #28]
 8003502:	6a3a      	ldr	r2, [r7, #32]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	61bb      	str	r3, [r7, #24]
   return(result);
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e5      	bne.n	80034dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e00f      	b.n	800354c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	429a      	cmp	r2, r3
 8003548:	d09f      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3740      	adds	r7, #64	; 0x40
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b095      	sub	sp, #84	; 0x54
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800357c:	643a      	str	r2, [r7, #64]	; 0x40
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e5      	bne.n	800355c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3314      	adds	r3, #20
 8003596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3314      	adds	r3, #20
 80035ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d119      	bne.n	8003600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	60bb      	str	r3, [r7, #8]
   return(result);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f023 0310 	bic.w	r3, r3, #16
 80035e2:	647b      	str	r3, [r7, #68]	; 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ec:	61ba      	str	r2, [r7, #24]
 80035ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	613b      	str	r3, [r7, #16]
   return(result);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800360e:	bf00      	nop
 8003610:	3754      	adds	r7, #84	; 0x54
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff ff09 	bl	800344c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b21      	cmp	r3, #33	; 0x21
 8003654:	d13e      	bne.n	80036d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	d114      	bne.n	800368a <UART_Transmit_IT+0x48>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d110      	bne.n	800368a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]
 8003688:	e008      	b.n	800369c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6211      	str	r1, [r2, #32]
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4619      	mov	r1, r3
 80036aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10f      	bne.n	80036d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fe8e 	bl	8003424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b08c      	sub	sp, #48	; 0x30
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b22      	cmp	r3, #34	; 0x22
 8003724:	f040 80ab 	bne.w	800387e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d117      	bne.n	8003762 <UART_Receive_IT+0x50>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d113      	bne.n	8003762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003750:	b29a      	uxth	r2, r3
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
 8003760:	e026      	b.n	80037b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003768:	2300      	movs	r3, #0
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d007      	beq.n	8003786 <UART_Receive_IT+0x74>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <UART_Receive_IT+0x82>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e008      	b.n	80037a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4619      	mov	r1, r3
 80037be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d15a      	bne.n	800387a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0220 	bic.w	r2, r2, #32
 80037d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	2b01      	cmp	r3, #1
 8003802:	d135      	bne.n	8003870 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	613b      	str	r3, [r7, #16]
   return(result);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f023 0310 	bic.w	r3, r3, #16
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382a:	623a      	str	r2, [r7, #32]
 800382c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	69f9      	ldr	r1, [r7, #28]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	61bb      	str	r3, [r7, #24]
   return(result);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e5      	bne.n	800380a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d10a      	bne.n	8003862 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fdf9 	bl	8003460 <HAL_UARTEx_RxEventCallback>
 800386e:	e002      	b.n	8003876 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fde1 	bl	8003438 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e002      	b.n	8003880 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3730      	adds	r7, #48	; 0x30
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b0c0      	sub	sp, #256	; 0x100
 800388e:	af00      	add	r7, sp, #0
 8003890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	68d9      	ldr	r1, [r3, #12]
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	ea40 0301 	orr.w	r3, r0, r1
 80038b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	431a      	orrs	r2, r3
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038e0:	f021 010c 	bic.w	r1, r1, #12
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ee:	430b      	orrs	r3, r1
 80038f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	6999      	ldr	r1, [r3, #24]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	ea40 0301 	orr.w	r3, r0, r1
 800390e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b8f      	ldr	r3, [pc, #572]	; (8003b54 <UART_SetConfig+0x2cc>)
 8003918:	429a      	cmp	r2, r3
 800391a:	d005      	beq.n	8003928 <UART_SetConfig+0xa0>
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b8d      	ldr	r3, [pc, #564]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003924:	429a      	cmp	r2, r3
 8003926:	d104      	bne.n	8003932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe fbd6 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 800392c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003930:	e003      	b.n	800393a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003932:	f7fe fbbd 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8003936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003944:	f040 810c 	bne.w	8003b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	1891      	adds	r1, r2, r2
 8003960:	65b9      	str	r1, [r7, #88]	; 0x58
 8003962:	415b      	adcs	r3, r3
 8003964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800396a:	4621      	mov	r1, r4
 800396c:	eb12 0801 	adds.w	r8, r2, r1
 8003970:	4629      	mov	r1, r5
 8003972:	eb43 0901 	adc.w	r9, r3, r1
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398a:	4690      	mov	r8, r2
 800398c:	4699      	mov	r9, r3
 800398e:	4623      	mov	r3, r4
 8003990:	eb18 0303 	adds.w	r3, r8, r3
 8003994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003998:	462b      	mov	r3, r5
 800399a:	eb49 0303 	adc.w	r3, r9, r3
 800399e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039b6:	460b      	mov	r3, r1
 80039b8:	18db      	adds	r3, r3, r3
 80039ba:	653b      	str	r3, [r7, #80]	; 0x50
 80039bc:	4613      	mov	r3, r2
 80039be:	eb42 0303 	adc.w	r3, r2, r3
 80039c2:	657b      	str	r3, [r7, #84]	; 0x54
 80039c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039cc:	f7fc fc08 	bl	80001e0 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <UART_SetConfig+0x2d4>)
 80039d6:	fba3 2302 	umull	r2, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	011c      	lsls	r4, r3, #4
 80039de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039f8:	415b      	adcs	r3, r3
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a00:	4641      	mov	r1, r8
 8003a02:	eb12 0a01 	adds.w	sl, r2, r1
 8003a06:	4649      	mov	r1, r9
 8003a08:	eb43 0b01 	adc.w	fp, r3, r1
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a20:	4692      	mov	sl, r2
 8003a22:	469b      	mov	fp, r3
 8003a24:	4643      	mov	r3, r8
 8003a26:	eb1a 0303 	adds.w	r3, sl, r3
 8003a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	eb4b 0303 	adc.w	r3, fp, r3
 8003a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	18db      	adds	r3, r3, r3
 8003a50:	643b      	str	r3, [r7, #64]	; 0x40
 8003a52:	4613      	mov	r3, r2
 8003a54:	eb42 0303 	adc.w	r3, r2, r3
 8003a58:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a62:	f7fc fbbd 	bl	80001e0 <__aeabi_uldivmod>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2264      	movs	r2, #100	; 0x64
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	1acb      	subs	r3, r1, r3
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003a84:	fba3 2302 	umull	r2, r3, r3, r2
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a90:	441c      	add	r4, r3
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aac:	415b      	adcs	r3, r3
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	1851      	adds	r1, r2, r1
 8003ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8003aba:	4649      	mov	r1, r9
 8003abc:	414b      	adcs	r3, r1
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003acc:	4659      	mov	r1, fp
 8003ace:	00cb      	lsls	r3, r1, #3
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	00ca      	lsls	r2, r1, #3
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b08:	460b      	mov	r3, r1
 8003b0a:	18db      	adds	r3, r3, r3
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0e:	4613      	mov	r3, r2
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b1e:	f7fc fb5f 	bl	80001e0 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	; 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	3332      	adds	r3, #50	; 0x32
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <UART_SetConfig+0x2d4>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 0207 	and.w	r2, r3, #7
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4422      	add	r2, r4
 8003b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b50:	e106      	b.n	8003d60 <UART_SetConfig+0x4d8>
 8003b52:	bf00      	nop
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b72:	4642      	mov	r2, r8
 8003b74:	464b      	mov	r3, r9
 8003b76:	1891      	adds	r1, r2, r2
 8003b78:	6239      	str	r1, [r7, #32]
 8003b7a:	415b      	adcs	r3, r3
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b82:	4641      	mov	r1, r8
 8003b84:	1854      	adds	r4, r2, r1
 8003b86:	4649      	mov	r1, r9
 8003b88:	eb43 0501 	adc.w	r5, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	00eb      	lsls	r3, r5, #3
 8003b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b9a:	00e2      	lsls	r2, r4, #3
 8003b9c:	4614      	mov	r4, r2
 8003b9e:	461d      	mov	r5, r3
 8003ba0:	4643      	mov	r3, r8
 8003ba2:	18e3      	adds	r3, r4, r3
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ba8:	464b      	mov	r3, r9
 8003baa:	eb45 0303 	adc.w	r3, r5, r3
 8003bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bce:	4629      	mov	r1, r5
 8003bd0:	008b      	lsls	r3, r1, #2
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd8:	4621      	mov	r1, r4
 8003bda:	008a      	lsls	r2, r1, #2
 8003bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003be0:	f7fc fafe 	bl	80001e0 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003bea:	fba3 2302 	umull	r2, r3, r3, r2
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	011c      	lsls	r4, r3, #4
 8003bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	1891      	adds	r1, r2, r2
 8003c0a:	61b9      	str	r1, [r7, #24]
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c14:	4641      	mov	r1, r8
 8003c16:	1851      	adds	r1, r2, r1
 8003c18:	6139      	str	r1, [r7, #16]
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	414b      	adcs	r3, r1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	00cb      	lsls	r3, r1, #3
 8003c30:	4651      	mov	r1, sl
 8003c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c36:	4651      	mov	r1, sl
 8003c38:	00ca      	lsls	r2, r1, #3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4642      	mov	r2, r8
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c48:	464b      	mov	r3, r9
 8003c4a:	460a      	mov	r2, r1
 8003c4c:	eb42 0303 	adc.w	r3, r2, r3
 8003c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	008b      	lsls	r3, r1, #2
 8003c70:	4641      	mov	r1, r8
 8003c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c76:	4641      	mov	r1, r8
 8003c78:	008a      	lsls	r2, r1, #2
 8003c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c7e:	f7fc faaf 	bl	80001e0 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2264      	movs	r2, #100	; 0x64
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	1acb      	subs	r3, r1, r3
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	3332      	adds	r3, #50	; 0x32
 8003c9c:	4a33      	ldr	r2, [pc, #204]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca8:	441c      	add	r4, r3
 8003caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb2:	677a      	str	r2, [r7, #116]	; 0x74
 8003cb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc8:	4641      	mov	r1, r8
 8003cca:	1851      	adds	r1, r2, r1
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	4649      	mov	r1, r9
 8003cd0:	414b      	adcs	r3, r1
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	00cb      	lsls	r3, r1, #3
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cea:	4651      	mov	r1, sl
 8003cec:	00ca      	lsls	r2, r1, #3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	460a      	mov	r2, r1
 8003cfe:	eb42 0303 	adc.w	r3, r2, r3
 8003d02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0e:	667a      	str	r2, [r7, #100]	; 0x64
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	008b      	lsls	r3, r1, #2
 8003d20:	4641      	mov	r1, r8
 8003d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d26:	4641      	mov	r1, r8
 8003d28:	008a      	lsls	r2, r1, #2
 8003d2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d2e:	f7fc fa57 	bl	80001e0 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003d38:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	2164      	movs	r1, #100	; 0x64
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	3332      	adds	r3, #50	; 0x32
 8003d4a:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <UART_SetConfig+0x4e4>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	f003 020f 	and.w	r2, r3, #15
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4422      	add	r2, r4
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d66:	46bd      	mov	sp, r7
 8003d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6c:	51eb851f 	.word	0x51eb851f

08003d70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d82:	2b84      	cmp	r3, #132	; 0x84
 8003d84:	d005      	beq.n	8003d92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3303      	adds	r3, #3
 8003d90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003da4:	f001 f8e6 	bl	8004f74 <vTaskStartScheduler>
  
  return osOK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	bd80      	pop	{r7, pc}

08003dae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db0:	b089      	sub	sp, #36	; 0x24
 8003db2:	af04      	add	r7, sp, #16
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <osThreadCreate+0x54>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01c      	beq.n	8003e02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685c      	ldr	r4, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691e      	ldr	r6, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ffc8 	bl	8003d70 <makeFreeRtosPriority>
 8003de0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dea:	9202      	str	r2, [sp, #8]
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	9100      	str	r1, [sp, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4632      	mov	r2, r6
 8003df4:	4629      	mov	r1, r5
 8003df6:	4620      	mov	r0, r4
 8003df8:	f000 fef4 	bl	8004be4 <xTaskCreateStatic>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e01c      	b.n	8003e3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685c      	ldr	r4, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e0e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ffaa 	bl	8003d70 <makeFreeRtosPriority>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f107 030c 	add.w	r3, r7, #12
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	9200      	str	r2, [sp, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	4632      	mov	r2, r6
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f000 ff36 	bl	8004c9e <xTaskCreate>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d001      	beq.n	8003e3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e46 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003e4c:	201c      	movs	r0, #28
 8003e4e:	f002 f89b 	bl	8005f88 <pvPortMalloc>
 8003e52:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f9bc 	bl	80041e2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003e70:	687b      	ldr	r3, [r7, #4]
	}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b090      	sub	sp, #64	; 0x40
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	61fb      	str	r3, [r7, #28]
}
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <xEventGroupWaitBits+0x72>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	61bb      	str	r3, [r7, #24]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eee:	f001 fcdd 	bl	80058ac <xTaskGetSchedulerState>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <xEventGroupWaitBits+0x82>
 8003ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <xEventGroupWaitBits+0x86>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <xEventGroupWaitBits+0x88>
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	617b      	str	r3, [r7, #20]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003f1e:	f001 f889 	bl	8005034 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f2e:	f000 f936 	bl	800419e <prvTestWaitCondition>
 8003f32:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d028      	beq.n	8003f9a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	401a      	ands	r2, r3
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e020      	b.n	8003f9a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003f62:	2301      	movs	r3, #1
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	e018      	b.n	8003f9a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f74:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	1d18      	adds	r0, r3, #4
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f90:	4619      	mov	r1, r3
 8003f92:	f001 fa31 	bl	80053f8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003f9a:	f001 f859 	bl	8005050 <xTaskResumeAll>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d031      	beq.n	800400a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <xEventGroupWaitBits+0x198>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003fbc:	f001 fd1a 	bl	80059f4 <uxTaskResetEventItemValue>
 8003fc0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11a      	bne.n	8004002 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003fcc:	f001 feba 	bl	8005d44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fdc:	f000 f8df 	bl	800419e <prvTestWaitCondition>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d006      	beq.n	8003ffa <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003ffe:	f001 fed1 	bl	8005da4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004004:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800400c:	4618      	mov	r0, r3
 800400e:	3740      	adds	r7, #64	; 0x40
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xEventGroupClearBits+0x2a>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <xEventGroupClearBits+0x4a>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60bb      	str	r3, [r7, #8]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004062:	f001 fe6f 	bl	8005d44 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	43db      	mvns	r3, r3
 8004074:	401a      	ands	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800407a:	f001 fe93 	bl	8005da4 <vPortExitCritical>

	return uxReturn;
 800407e:	693b      	ldr	r3, [r7, #16]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08e      	sub	sp, #56	; 0x38
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004092:	2300      	movs	r3, #0
 8004094:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800409a:	2300      	movs	r3, #0
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xEventGroupSetBits+0x32>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	613b      	str	r3, [r7, #16]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <xEventGroupSetBits+0x52>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
}
 80040d6:	bf00      	nop
 80040d8:	e7fe      	b.n	80040d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	3304      	adds	r3, #4
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	3308      	adds	r3, #8
 80040e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80040e6:	f000 ffa5 	bl	8005034 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80040fc:	e03c      	b.n	8004178 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800410a:	2300      	movs	r3, #0
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004114:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800411c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004138:	e008      	b.n	800414c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d101      	bne.n	800414c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800415c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800416c:	4619      	mov	r1, r3
 800416e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004170:	f001 f9e0 	bl	8005534 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	429a      	cmp	r2, r3
 800417e:	d1be      	bne.n	80040fe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	43db      	mvns	r3, r3
 8004188:	401a      	ands	r2, r3
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800418e:	f000 ff5f 	bl	8005050 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	681b      	ldr	r3, [r3, #0]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3738      	adds	r7, #56	; 0x38
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80041be:	2301      	movs	r3, #1
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e007      	b.n	80041d4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d101      	bne.n	80041d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80041d4:	697b      	ldr	r3, [r7, #20]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f103 0208 	add.w	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f103 0208 	add.w	r2, r3, #8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f103 0208 	add.w	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	601a      	str	r2, [r3, #0]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d103      	bne.n	80042a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e00c      	b.n	80042be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3308      	adds	r3, #8
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e002      	b.n	80042b2 <vListInsert+0x2e>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d2f6      	bcs.n	80042ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6892      	ldr	r2, [r2, #8]
 800430c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6852      	ldr	r2, [r2, #4]
 8004316:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d103      	bne.n	800432a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <xQueueGenericReset+0x2a>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	60bb      	str	r3, [r7, #8]
}
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004376:	f001 fce5 	bl	8005d44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	441a      	add	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	3b01      	subs	r3, #1
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	441a      	add	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	22ff      	movs	r2, #255	; 0xff
 80043ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22ff      	movs	r2, #255	; 0xff
 80043c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d114      	bne.n	80043f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01a      	beq.n	800440a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3310      	adds	r3, #16
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f849 	bl	8005470 <xTaskRemoveFromEventList>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d012      	beq.n	800440a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <xQueueGenericReset+0xcc>)
 80043e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	e009      	b.n	800440a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3310      	adds	r3, #16
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fef1 	bl	80041e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3324      	adds	r3, #36	; 0x24
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff feec 	bl	80041e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800440a:	f001 fccb 	bl	8005da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800440e:	2301      	movs	r3, #1
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3348      	adds	r3, #72	; 0x48
 8004454:	4618      	mov	r0, r3
 8004456:	f001 fd97 	bl	8005f88 <pvPortMalloc>
 800445a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	3348      	adds	r3, #72	; 0x48
 800446a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004474:	79fa      	ldrb	r2, [r7, #7]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	4613      	mov	r3, r2
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f805 	bl	8004490 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004486:	69bb      	ldr	r3, [r7, #24]
	}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e002      	b.n	80044b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044be:	2101      	movs	r1, #1
 80044c0:	69b8      	ldr	r0, [r7, #24]
 80044c2:	f7ff ff43 	bl	800434c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <xQueueGenericSend+0x32>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d103      	bne.n	8004510 <xQueueGenericSend+0x40>
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <xQueueGenericSend+0x44>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <xQueueGenericSend+0x46>
 8004514:	2300      	movs	r3, #0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <xQueueGenericSend+0x60>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d103      	bne.n	800453e <xQueueGenericSend+0x6e>
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <xQueueGenericSend+0x72>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <xQueueGenericSend+0x74>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xQueueGenericSend+0x8e>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	623b      	str	r3, [r7, #32]
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800455e:	f001 f9a5 	bl	80058ac <xTaskGetSchedulerState>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <xQueueGenericSend+0x9e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <xQueueGenericSend+0xa2>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <xQueueGenericSend+0xa4>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericSend+0xbe>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	61fb      	str	r3, [r7, #28]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800458e:	f001 fbd9 	bl	8005d44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <xQueueGenericSend+0xd4>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d129      	bne.n	80045f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045aa:	f000 fa0b 	bl	80049c4 <prvCopyDataToQueue>
 80045ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 ff57 	bl	8005470 <xTaskRemoveFromEventList>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d013      	beq.n	80045f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045c8:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <xQueueGenericSend+0x1f8>)
 80045ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	e00a      	b.n	80045f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045e0:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <xQueueGenericSend+0x1f8>)
 80045e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045f0:	f001 fbd8 	bl	8005da4 <vPortExitCritical>
				return pdPASS;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e063      	b.n	80046c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045fe:	f001 fbd1 	bl	8005da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004602:	2300      	movs	r3, #0
 8004604:	e05c      	b.n	80046c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fff1 	bl	80055f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004616:	2301      	movs	r3, #1
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800461a:	f001 fbc3 	bl	8005da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800461e:	f000 fd09 	bl	8005034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004622:	f001 fb8f 	bl	8005d44 <vPortEnterCritical>
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462c:	b25b      	sxtb	r3, r3
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d103      	bne.n	800463c <xQueueGenericSend+0x16c>
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004642:	b25b      	sxtb	r3, r3
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d103      	bne.n	8004652 <xQueueGenericSend+0x182>
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004652:	f001 fba7 	bl	8005da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004656:	1d3a      	adds	r2, r7, #4
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f000 ffe0 	bl	8005624 <xTaskCheckForTimeOut>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d124      	bne.n	80046b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800466a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800466c:	f000 faa2 	bl	8004bb4 <prvIsQueueFull>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d018      	beq.n	80046a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	3310      	adds	r3, #16
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fe96 	bl	80053b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004686:	f000 fa2d 	bl	8004ae4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800468a:	f000 fce1 	bl	8005050 <xTaskResumeAll>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	f47f af7c 	bne.w	800458e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <xQueueGenericSend+0x1f8>)
 8004698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	e772      	b.n	800458e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046aa:	f000 fa1b 	bl	8004ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ae:	f000 fccf 	bl	8005050 <xTaskResumeAll>
 80046b2:	e76c      	b.n	800458e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046b6:	f000 fa15 	bl	8004ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ba:	f000 fcc9 	bl	8005050 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3738      	adds	r7, #56	; 0x38
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b090      	sub	sp, #64	; 0x40
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <xQueueGenericSendFromISR+0x3c>
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <xQueueGenericSendFromISR+0x40>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <xQueueGenericSendFromISR+0x42>
 800470c:	2300      	movs	r3, #0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d103      	bne.n	8004736 <xQueueGenericSendFromISR+0x6a>
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <xQueueGenericSendFromISR+0x6e>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <xQueueGenericSendFromISR+0x70>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	623b      	str	r3, [r7, #32]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004756:	f001 fbd7 	bl	8005f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800475a:	f3ef 8211 	mrs	r2, BASEPRI
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	61fa      	str	r2, [r7, #28]
 8004770:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004772:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <xQueueGenericSendFromISR+0xbc>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d12f      	bne.n	80047e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800478e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800479e:	f000 f911 	bl	80049c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d112      	bne.n	80047d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d016      	beq.n	80047e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	3324      	adds	r3, #36	; 0x24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fe59 	bl	8005470 <xTaskRemoveFromEventList>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00e      	beq.n	80047e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e007      	b.n	80047e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047d6:	3301      	adds	r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	b25a      	sxtb	r2, r3
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047e2:	2301      	movs	r3, #1
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80047e6:	e001      	b.n	80047ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3740      	adds	r7, #64	; 0x40
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08c      	sub	sp, #48	; 0x30
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004810:	2300      	movs	r3, #0
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <xQueueReceive+0x30>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	623b      	str	r3, [r7, #32]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <xQueueReceive+0x3e>
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <xQueueReceive+0x42>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <xQueueReceive+0x44>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xQueueReceive+0x5e>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	61fb      	str	r3, [r7, #28]
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004862:	f001 f823 	bl	80058ac <xTaskGetSchedulerState>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <xQueueReceive+0x6e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <xQueueReceive+0x72>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <xQueueReceive+0x74>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xQueueReceive+0x8e>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	61bb      	str	r3, [r7, #24]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004892:	f001 fa57 	bl	8005d44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01f      	beq.n	80048e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a6:	f000 f8f7 	bl	8004a98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	1e5a      	subs	r2, r3, #1
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00f      	beq.n	80048da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	3310      	adds	r3, #16
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fdd6 	bl	8005470 <xTaskRemoveFromEventList>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048ca:	4b3d      	ldr	r3, [pc, #244]	; (80049c0 <xQueueReceive+0x1bc>)
 80048cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048da:	f001 fa63 	bl	8005da4 <vPortExitCritical>
				return pdPASS;
 80048de:	2301      	movs	r3, #1
 80048e0:	e069      	b.n	80049b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048e8:	f001 fa5c 	bl	8005da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e062      	b.n	80049b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048f6:	f107 0310 	add.w	r3, r7, #16
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fe7c 	bl	80055f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004904:	f001 fa4e 	bl	8005da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004908:	f000 fb94 	bl	8005034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800490c:	f001 fa1a 	bl	8005d44 <vPortEnterCritical>
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004916:	b25b      	sxtb	r3, r3
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d103      	bne.n	8004926 <xQueueReceive+0x122>
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492c:	b25b      	sxtb	r3, r3
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d103      	bne.n	800493c <xQueueReceive+0x138>
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800493c:	f001 fa32 	bl	8005da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004940:	1d3a      	adds	r2, r7, #4
 8004942:	f107 0310 	add.w	r3, r7, #16
 8004946:	4611      	mov	r1, r2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fe6b 	bl	8005624 <xTaskCheckForTimeOut>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d123      	bne.n	800499c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004956:	f000 f917 	bl	8004b88 <prvIsQueueEmpty>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d017      	beq.n	8004990 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	3324      	adds	r3, #36	; 0x24
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fd21 	bl	80053b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800496e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004970:	f000 f8b8 	bl	8004ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004974:	f000 fb6c 	bl	8005050 <xTaskResumeAll>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d189      	bne.n	8004892 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800497e:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <xQueueReceive+0x1bc>)
 8004980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	e780      	b.n	8004892 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004992:	f000 f8a7 	bl	8004ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004996:	f000 fb5b 	bl	8005050 <xTaskResumeAll>
 800499a:	e77a      	b.n	8004892 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800499c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499e:	f000 f8a1 	bl	8004ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049a2:	f000 fb55 	bl	8005050 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a8:	f000 f8ee 	bl	8004b88 <prvIsQueueEmpty>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f43f af6f 	beq.w	8004892 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3730      	adds	r7, #48	; 0x30
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d14d      	bne.n	8004a86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 ff7a 	bl	80058e8 <xTaskPriorityDisinherit>
 80049f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	e043      	b.n	8004a86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d119      	bne.n	8004a38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6858      	ldr	r0, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	f001 fcd0 	bl	80063b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d32b      	bcc.n	8004a86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	e026      	b.n	8004a86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68d8      	ldr	r0, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	461a      	mov	r2, r3
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	f001 fcb6 	bl	80063b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	425b      	negs	r3, r3
 8004a52:	441a      	add	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d207      	bcs.n	8004a74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	441a      	add	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d105      	bne.n	8004a86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a8e:	697b      	ldr	r3, [r7, #20]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	441a      	add	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d303      	bcc.n	8004acc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68d9      	ldr	r1, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6838      	ldr	r0, [r7, #0]
 8004ad8:	f001 fc6c 	bl	80063b4 <memcpy>
	}
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004aec:	f001 f92a 	bl	8005d44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004af8:	e011      	b.n	8004b1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3324      	adds	r3, #36	; 0x24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fcb2 	bl	8005470 <xTaskRemoveFromEventList>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b12:	f000 fde9 	bl	80056e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dce9      	bgt.n	8004afa <prvUnlockQueue+0x16>
 8004b26:	e000      	b.n	8004b2a <prvUnlockQueue+0x46>
					break;
 8004b28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b32:	f001 f937 	bl	8005da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b36:	f001 f905 	bl	8005d44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b42:	e011      	b.n	8004b68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d012      	beq.n	8004b72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3310      	adds	r3, #16
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fc8d 	bl	8005470 <xTaskRemoveFromEventList>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b5c:	f000 fdc4 	bl	80056e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b60:	7bbb      	ldrb	r3, [r7, #14]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dce9      	bgt.n	8004b44 <prvUnlockQueue+0x60>
 8004b70:	e000      	b.n	8004b74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	22ff      	movs	r2, #255	; 0xff
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b7c:	f001 f912 	bl	8005da4 <vPortExitCritical>
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b90:	f001 f8d8 	bl	8005d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e001      	b.n	8004ba6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ba6:	f001 f8fd 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bbc:	f001 f8c2 	bl	8005d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d102      	bne.n	8004bd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e001      	b.n	8004bd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bd6:	f001 f8e5 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	; 0x38
 8004be8:	af04      	add	r7, sp, #16
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	623b      	str	r3, [r7, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xTaskCreateStatic+0x46>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61fb      	str	r3, [r7, #28]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c2a:	2364      	movs	r3, #100	; 0x64
 8004c2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b64      	cmp	r3, #100	; 0x64
 8004c32:	d00a      	beq.n	8004c4a <xTaskCreateStatic+0x66>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	61bb      	str	r3, [r7, #24]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01e      	beq.n	8004c90 <xTaskCreateStatic+0xac>
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01b      	beq.n	8004c90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	9302      	str	r3, [sp, #8]
 8004c72:	f107 0314 	add.w	r3, r7, #20
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f850 	bl	8004d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c8a:	f000 f8d5 	bl	8004e38 <prvAddNewTaskToReadyList>
 8004c8e:	e001      	b.n	8004c94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c94:	697b      	ldr	r3, [r7, #20]
	}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3728      	adds	r7, #40	; 0x28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08c      	sub	sp, #48	; 0x30
 8004ca2:	af04      	add	r7, sp, #16
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 f968 	bl	8005f88 <pvPortMalloc>
 8004cb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00e      	beq.n	8004cde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cc0:	2064      	movs	r0, #100	; 0x64
 8004cc2:	f001 f961 	bl	8005f88 <pvPortMalloc>
 8004cc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004cd4:	e005      	b.n	8004ce2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f001 fa22 	bl	8006120 <vPortFree>
 8004cdc:	e001      	b.n	8004ce2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d017      	beq.n	8004d18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	9302      	str	r3, [sp, #8]
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f80e 	bl	8004d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d0c:	69f8      	ldr	r0, [r7, #28]
 8004d0e:	f000 f893 	bl	8004e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e002      	b.n	8004d1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d40:	3b01      	subs	r3, #1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	617b      	str	r3, [r7, #20]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01f      	beq.n	8004db6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e012      	b.n	8004da2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	7819      	ldrb	r1, [r3, #0]
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	3334      	adds	r3, #52	; 0x34
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2b1f      	cmp	r3, #31
 8004da6:	d9e9      	bls.n	8004d7c <prvInitialiseNewTask+0x54>
 8004da8:	e000      	b.n	8004dac <prvInitialiseNewTask+0x84>
			{
				break;
 8004daa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004db4:	e003      	b.n	8004dbe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d901      	bls.n	8004dc8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dc4:	2306      	movs	r3, #6
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fa1f 	bl	8004222 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	3318      	adds	r3, #24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fa1a 	bl	8004222 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	f1c3 0207 	rsb	r2, r3, #7
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	2200      	movs	r2, #0
 8004e08:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	69b8      	ldr	r0, [r7, #24]
 8004e18:	f000 fe6a 	bl	8005af0 <pxPortInitialiseStack>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e2e:	bf00      	nop
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e40:	f000 ff80 	bl	8005d44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e44:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <prvAddNewTaskToReadyList+0xb8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <prvAddNewTaskToReadyList+0xb8>)
 8004e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e4e:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <prvAddNewTaskToReadyList+0xbc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e56:	4a27      	ldr	r2, [pc, #156]	; (8004ef4 <prvAddNewTaskToReadyList+0xbc>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e5c:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <prvAddNewTaskToReadyList+0xb8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d110      	bne.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e64:	f000 fc64 	bl	8005730 <prvInitialiseTaskLists>
 8004e68:	e00d      	b.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <prvAddNewTaskToReadyList+0xc0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <prvAddNewTaskToReadyList+0xbc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d802      	bhi.n	8004e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e80:	4a1c      	ldr	r2, [pc, #112]	; (8004ef4 <prvAddNewTaskToReadyList+0xbc>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <prvAddNewTaskToReadyList+0xc4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <prvAddNewTaskToReadyList+0xc4>)
 8004e8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <prvAddNewTaskToReadyList+0xc8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <prvAddNewTaskToReadyList+0xc8>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <prvAddNewTaskToReadyList+0xcc>)
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7ff f9bf 	bl	800423c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ebe:	f000 ff71 	bl	8005da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <prvAddNewTaskToReadyList+0xc0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00e      	beq.n	8004ee8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <prvAddNewTaskToReadyList+0xbc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d207      	bcs.n	8004ee8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <prvAddNewTaskToReadyList+0xd0>)
 8004eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	2000054c 	.word	0x2000054c
 8004ef4:	2000044c 	.word	0x2000044c
 8004ef8:	20000558 	.word	0x20000558
 8004efc:	20000568 	.word	0x20000568
 8004f00:	20000554 	.word	0x20000554
 8004f04:	20000450 	.word	0x20000450
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <vTaskDelay+0x60>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <vTaskDelay+0x30>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60bb      	str	r3, [r7, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f3c:	f000 f87a 	bl	8005034 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f40:	2100      	movs	r1, #0
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fd6e 	bl	8005a24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f48:	f000 f882 	bl	8005050 <xTaskResumeAll>
 8004f4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <vTaskDelay+0x64>)
 8004f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000574 	.word	0x20000574
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f82:	463a      	mov	r2, r7
 8004f84:	1d39      	adds	r1, r7, #4
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fb faa6 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	9202      	str	r2, [sp, #8]
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	491e      	ldr	r1, [pc, #120]	; (800501c <vTaskStartScheduler+0xa8>)
 8004fa4:	481e      	ldr	r0, [pc, #120]	; (8005020 <vTaskStartScheduler+0xac>)
 8004fa6:	f7ff fe1d 	bl	8004be4 <xTaskCreateStatic>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <vTaskStartScheduler+0xb0>)
 8004fae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <vTaskStartScheduler+0xb0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e001      	b.n	8004fc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d116      	bne.n	8004ff6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	613b      	str	r3, [r7, #16]
}
 8004fda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fdc:	4b12      	ldr	r3, [pc, #72]	; (8005028 <vTaskStartScheduler+0xb4>)
 8004fde:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <vTaskStartScheduler+0xb8>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <vTaskStartScheduler+0xbc>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ff0:	f000 fe06 	bl	8005c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ff4:	e00e      	b.n	8005014 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d10a      	bne.n	8005014 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60fb      	str	r3, [r7, #12]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <vTaskStartScheduler+0x9e>
}
 8005014:	bf00      	nop
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	080064c4 	.word	0x080064c4
 8005020:	08005701 	.word	0x08005701
 8005024:	20000570 	.word	0x20000570
 8005028:	2000056c 	.word	0x2000056c
 800502c:	20000558 	.word	0x20000558
 8005030:	20000550 	.word	0x20000550

08005034 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <vTaskSuspendAll+0x18>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3301      	adds	r3, #1
 800503e:	4a03      	ldr	r2, [pc, #12]	; (800504c <vTaskSuspendAll+0x18>)
 8005040:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005042:	bf00      	nop
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20000574 	.word	0x20000574

08005050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800505e:	4b41      	ldr	r3, [pc, #260]	; (8005164 <xTaskResumeAll+0x114>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <xTaskResumeAll+0x2c>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	603b      	str	r3, [r7, #0]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800507c:	f000 fe62 	bl	8005d44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005080:	4b38      	ldr	r3, [pc, #224]	; (8005164 <xTaskResumeAll+0x114>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3b01      	subs	r3, #1
 8005086:	4a37      	ldr	r2, [pc, #220]	; (8005164 <xTaskResumeAll+0x114>)
 8005088:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508a:	4b36      	ldr	r3, [pc, #216]	; (8005164 <xTaskResumeAll+0x114>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d161      	bne.n	8005156 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005092:	4b35      	ldr	r3, [pc, #212]	; (8005168 <xTaskResumeAll+0x118>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d05d      	beq.n	8005156 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800509a:	e02e      	b.n	80050fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800509c:	4b33      	ldr	r3, [pc, #204]	; (800516c <xTaskResumeAll+0x11c>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3318      	adds	r3, #24
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff f924 	bl	80042f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff f91f 	bl	80042f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	2201      	movs	r2, #1
 80050be:	409a      	lsls	r2, r3
 80050c0:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <xTaskResumeAll+0x120>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <xTaskResumeAll+0x120>)
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4a27      	ldr	r2, [pc, #156]	; (8005174 <xTaskResumeAll+0x124>)
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3304      	adds	r3, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7ff f8ab 	bl	800423c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <xTaskResumeAll+0x128>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80050f4:	4b21      	ldr	r3, [pc, #132]	; (800517c <xTaskResumeAll+0x12c>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050fa:	4b1c      	ldr	r3, [pc, #112]	; (800516c <xTaskResumeAll+0x11c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1cc      	bne.n	800509c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005108:	f000 fbb0 	bl	800586c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800510c:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <xTaskResumeAll+0x130>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005118:	f000 f836 	bl	8005188 <xTaskIncrementTick>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005122:	4b16      	ldr	r3, [pc, #88]	; (800517c <xTaskResumeAll+0x12c>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3b01      	subs	r3, #1
 800512c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f1      	bne.n	8005118 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <xTaskResumeAll+0x130>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <xTaskResumeAll+0x12c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005142:	2301      	movs	r3, #1
 8005144:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005146:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <xTaskResumeAll+0x134>)
 8005148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005156:	f000 fe25 	bl	8005da4 <vPortExitCritical>

	return xAlreadyYielded;
 800515a:	68bb      	ldr	r3, [r7, #8]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000574 	.word	0x20000574
 8005168:	2000054c 	.word	0x2000054c
 800516c:	2000050c 	.word	0x2000050c
 8005170:	20000554 	.word	0x20000554
 8005174:	20000450 	.word	0x20000450
 8005178:	2000044c 	.word	0x2000044c
 800517c:	20000560 	.word	0x20000560
 8005180:	2000055c 	.word	0x2000055c
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005192:	4b4e      	ldr	r3, [pc, #312]	; (80052cc <xTaskIncrementTick+0x144>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 808e 	bne.w	80052b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800519c:	4b4c      	ldr	r3, [pc, #304]	; (80052d0 <xTaskIncrementTick+0x148>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051a4:	4a4a      	ldr	r2, [pc, #296]	; (80052d0 <xTaskIncrementTick+0x148>)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d120      	bne.n	80051f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051b0:	4b48      	ldr	r3, [pc, #288]	; (80052d4 <xTaskIncrementTick+0x14c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	603b      	str	r3, [r7, #0]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <xTaskIncrementTick+0x46>
 80051d0:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <xTaskIncrementTick+0x14c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <xTaskIncrementTick+0x150>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3e      	ldr	r2, [pc, #248]	; (80052d4 <xTaskIncrementTick+0x14c>)
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4a3e      	ldr	r2, [pc, #248]	; (80052d8 <xTaskIncrementTick+0x150>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	4b3d      	ldr	r3, [pc, #244]	; (80052dc <xTaskIncrementTick+0x154>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	4a3c      	ldr	r2, [pc, #240]	; (80052dc <xTaskIncrementTick+0x154>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	f000 fb3d 	bl	800586c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051f2:	4b3b      	ldr	r3, [pc, #236]	; (80052e0 <xTaskIncrementTick+0x158>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d348      	bcc.n	800528e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051fc:	4b35      	ldr	r3, [pc, #212]	; (80052d4 <xTaskIncrementTick+0x14c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005206:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <xTaskIncrementTick+0x158>)
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	601a      	str	r2, [r3, #0]
					break;
 800520e:	e03e      	b.n	800528e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005210:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <xTaskIncrementTick+0x14c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d203      	bcs.n	8005230 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005228:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <xTaskIncrementTick+0x158>)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800522e:	e02e      	b.n	800528e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff f85e 	bl	80042f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	3318      	adds	r3, #24
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff f855 	bl	80042f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	2201      	movs	r2, #1
 8005252:	409a      	lsls	r2, r3
 8005254:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <xTaskIncrementTick+0x15c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4313      	orrs	r3, r2
 800525a:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <xTaskIncrementTick+0x15c>)
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4a1f      	ldr	r2, [pc, #124]	; (80052e8 <xTaskIncrementTick+0x160>)
 800526c:	441a      	add	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	3304      	adds	r3, #4
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f7fe ffe1 	bl	800423c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <xTaskIncrementTick+0x164>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	429a      	cmp	r2, r3
 8005286:	d3b9      	bcc.n	80051fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800528c:	e7b6      	b.n	80051fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <xTaskIncrementTick+0x164>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4914      	ldr	r1, [pc, #80]	; (80052e8 <xTaskIncrementTick+0x160>)
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d901      	bls.n	80052aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <xTaskIncrementTick+0x168>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80052b2:	2301      	movs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e004      	b.n	80052c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <xTaskIncrementTick+0x16c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <xTaskIncrementTick+0x16c>)
 80052c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052c2:	697b      	ldr	r3, [r7, #20]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000574 	.word	0x20000574
 80052d0:	20000550 	.word	0x20000550
 80052d4:	20000504 	.word	0x20000504
 80052d8:	20000508 	.word	0x20000508
 80052dc:	20000564 	.word	0x20000564
 80052e0:	2000056c 	.word	0x2000056c
 80052e4:	20000554 	.word	0x20000554
 80052e8:	20000450 	.word	0x20000450
 80052ec:	2000044c 	.word	0x2000044c
 80052f0:	20000560 	.word	0x20000560
 80052f4:	2000055c 	.word	0x2000055c

080052f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052fe:	4b27      	ldr	r3, [pc, #156]	; (800539c <vTaskSwitchContext+0xa4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <vTaskSwitchContext+0xa8>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800530c:	e03f      	b.n	800538e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800530e:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <vTaskSwitchContext+0xa8>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005314:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <vTaskSwitchContext+0xac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	f1c3 031f 	rsb	r3, r3, #31
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	491f      	ldr	r1, [pc, #124]	; (80053a8 <vTaskSwitchContext+0xb0>)
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <vTaskSwitchContext+0x5c>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <vTaskSwitchContext+0x5a>
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <vTaskSwitchContext+0xb0>)
 8005360:	4413      	add	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3308      	adds	r3, #8
 8005376:	429a      	cmp	r2, r3
 8005378:	d104      	bne.n	8005384 <vTaskSwitchContext+0x8c>
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <vTaskSwitchContext+0xb4>)
 800538c:	6013      	str	r3, [r2, #0]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000574 	.word	0x20000574
 80053a0:	20000560 	.word	0x20000560
 80053a4:	20000554 	.word	0x20000554
 80053a8:	20000450 	.word	0x20000450
 80053ac:	2000044c 	.word	0x2000044c

080053b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <vTaskPlaceOnEventList+0x44>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3318      	adds	r3, #24
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fe ff50 	bl	8004284 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053e4:	2101      	movs	r1, #1
 80053e6:	6838      	ldr	r0, [r7, #0]
 80053e8:	f000 fb1c 	bl	8005a24 <prvAddCurrentTaskToDelayedList>
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	2000044c 	.word	0x2000044c

080053f8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	617b      	str	r3, [r7, #20]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	613b      	str	r3, [r7, #16]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <vTaskPlaceOnUnorderedEventList+0x74>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005448:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <vTaskPlaceOnUnorderedEventList+0x74>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3318      	adds	r3, #24
 8005450:	4619      	mov	r1, r3
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7fe fef2 	bl	800423c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005458:	2101      	movs	r1, #1
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fae2 	bl	8005a24 <prvAddCurrentTaskToDelayedList>
}
 8005460:	bf00      	nop
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000574 	.word	0x20000574
 800546c:	2000044c 	.word	0x2000044c

08005470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60fb      	str	r3, [r7, #12]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3318      	adds	r3, #24
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fe ff28 	bl	80042f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a6:	4b1d      	ldr	r3, [pc, #116]	; (800551c <xTaskRemoveFromEventList+0xac>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11c      	bne.n	80054e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe ff1f 	bl	80042f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <xTaskRemoveFromEventList+0xb0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <xTaskRemoveFromEventList+0xb0>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a13      	ldr	r2, [pc, #76]	; (8005524 <xTaskRemoveFromEventList+0xb4>)
 80054d8:	441a      	add	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f7fe feab 	bl	800423c <vListInsertEnd>
 80054e6:	e005      	b.n	80054f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	3318      	adds	r3, #24
 80054ec:	4619      	mov	r1, r3
 80054ee:	480e      	ldr	r0, [pc, #56]	; (8005528 <xTaskRemoveFromEventList+0xb8>)
 80054f0:	f7fe fea4 	bl	800423c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <xTaskRemoveFromEventList+0xbc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	429a      	cmp	r2, r3
 8005500:	d905      	bls.n	800550e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005502:	2301      	movs	r3, #1
 8005504:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <xTaskRemoveFromEventList+0xc0>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e001      	b.n	8005512 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005512:	697b      	ldr	r3, [r7, #20]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000574 	.word	0x20000574
 8005520:	20000554 	.word	0x20000554
 8005524:	20000450 	.word	0x20000450
 8005528:	2000050c 	.word	0x2000050c
 800552c:	2000044c 	.word	0x2000044c
 8005530:	20000560 	.word	0x20000560

08005534 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800553e:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	613b      	str	r3, [r7, #16]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fe feb4 	bl	80042f6 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe feaf 	bl	80042f6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	2201      	movs	r2, #1
 800559e:	409a      	lsls	r2, r3
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	4a10      	ldr	r2, [pc, #64]	; (80055e8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <vTaskRemoveFromUnorderedEventList+0xb8>)
 80055b8:	441a      	add	r2, r3
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7fe fe3b 	bl	800423c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d902      	bls.n	80055da <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80055d4:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
	}
}
 80055da:	bf00      	nop
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000574 	.word	0x20000574
 80055e8:	20000554 	.word	0x20000554
 80055ec:	20000450 	.word	0x20000450
 80055f0:	2000044c 	.word	0x2000044c
 80055f4:	20000560 	.word	0x20000560

080055f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <vTaskInternalSetTimeOutState+0x24>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <vTaskInternalSetTimeOutState+0x28>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	605a      	str	r2, [r3, #4]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000564 	.word	0x20000564
 8005620:	20000550 	.word	0x20000550

08005624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	60fb      	str	r3, [r7, #12]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005666:	f000 fb6d 	bl	8005d44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800566a:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <xTaskCheckForTimeOut+0xbc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d102      	bne.n	800568a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e023      	b.n	80056d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <xTaskCheckForTimeOut+0xc0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d007      	beq.n	80056a6 <xTaskCheckForTimeOut+0x82>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e015      	b.n	80056d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d20b      	bcs.n	80056c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff9b 	bl	80055f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	e004      	b.n	80056d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056d2:	f000 fb67 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 80056d6:	69fb      	ldr	r3, [r7, #28]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000550 	.word	0x20000550
 80056e4:	20000564 	.word	0x20000564

080056e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <vTaskMissedYield+0x14>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000560 	.word	0x20000560

08005700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005708:	f000 f852 	bl	80057b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <prvIdleTask+0x28>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d9f9      	bls.n	8005708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <prvIdleTask+0x2c>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005724:	e7f0      	b.n	8005708 <prvIdleTask+0x8>
 8005726:	bf00      	nop
 8005728:	20000450 	.word	0x20000450
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	e00c      	b.n	8005756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a12      	ldr	r2, [pc, #72]	; (8005790 <prvInitialiseTaskLists+0x60>)
 8005748:	4413      	add	r3, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fd49 	bl	80041e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3301      	adds	r3, #1
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b06      	cmp	r3, #6
 800575a:	d9ef      	bls.n	800573c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800575c:	480d      	ldr	r0, [pc, #52]	; (8005794 <prvInitialiseTaskLists+0x64>)
 800575e:	f7fe fd40 	bl	80041e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005762:	480d      	ldr	r0, [pc, #52]	; (8005798 <prvInitialiseTaskLists+0x68>)
 8005764:	f7fe fd3d 	bl	80041e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005768:	480c      	ldr	r0, [pc, #48]	; (800579c <prvInitialiseTaskLists+0x6c>)
 800576a:	f7fe fd3a 	bl	80041e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800576e:	480c      	ldr	r0, [pc, #48]	; (80057a0 <prvInitialiseTaskLists+0x70>)
 8005770:	f7fe fd37 	bl	80041e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005774:	480b      	ldr	r0, [pc, #44]	; (80057a4 <prvInitialiseTaskLists+0x74>)
 8005776:	f7fe fd34 	bl	80041e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <prvInitialiseTaskLists+0x78>)
 800577c:	4a05      	ldr	r2, [pc, #20]	; (8005794 <prvInitialiseTaskLists+0x64>)
 800577e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <prvInitialiseTaskLists+0x7c>)
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <prvInitialiseTaskLists+0x68>)
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000450 	.word	0x20000450
 8005794:	200004dc 	.word	0x200004dc
 8005798:	200004f0 	.word	0x200004f0
 800579c:	2000050c 	.word	0x2000050c
 80057a0:	20000520 	.word	0x20000520
 80057a4:	20000538 	.word	0x20000538
 80057a8:	20000504 	.word	0x20000504
 80057ac:	20000508 	.word	0x20000508

080057b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b6:	e019      	b.n	80057ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b8:	f000 fac4 	bl	8005d44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <prvCheckTasksWaitingTermination+0x50>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe fd94 	bl	80042f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <prvCheckTasksWaitingTermination+0x54>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	4a0b      	ldr	r2, [pc, #44]	; (8005804 <prvCheckTasksWaitingTermination+0x54>)
 80057d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <prvCheckTasksWaitingTermination+0x58>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3b01      	subs	r3, #1
 80057de:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <prvCheckTasksWaitingTermination+0x58>)
 80057e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057e2:	f000 fadf 	bl	8005da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f810 	bl	800580c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <prvCheckTasksWaitingTermination+0x58>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e1      	bne.n	80057b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000520 	.word	0x20000520
 8005804:	2000054c 	.word	0x2000054c
 8005808:	20000534 	.word	0x20000534

0800580c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800581a:	2b00      	cmp	r3, #0
 800581c:	d108      	bne.n	8005830 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc7c 	bl	8006120 <vPortFree>
				vPortFree( pxTCB );
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fc79 	bl	8006120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800582e:	e018      	b.n	8005862 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005836:	2b01      	cmp	r3, #1
 8005838:	d103      	bne.n	8005842 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fc70 	bl	8006120 <vPortFree>
	}
 8005840:	e00f      	b.n	8005862 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005848:	2b02      	cmp	r3, #2
 800584a:	d00a      	beq.n	8005862 <prvDeleteTCB+0x56>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60fb      	str	r3, [r7, #12]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <prvDeleteTCB+0x54>
	}
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005872:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <prvResetNextTaskUnblockTime+0x38>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <prvResetNextTaskUnblockTime+0x3c>)
 800587e:	f04f 32ff 	mov.w	r2, #4294967295
 8005882:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005884:	e008      	b.n	8005898 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005886:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <prvResetNextTaskUnblockTime+0x38>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <prvResetNextTaskUnblockTime+0x3c>)
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	20000504 	.word	0x20000504
 80058a8:	2000056c 	.word	0x2000056c

080058ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <xTaskGetSchedulerState+0x34>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ba:	2301      	movs	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	e008      	b.n	80058d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <xTaskGetSchedulerState+0x38>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058c8:	2302      	movs	r3, #2
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e001      	b.n	80058d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058d2:	687b      	ldr	r3, [r7, #4]
	}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	20000558 	.word	0x20000558
 80058e4:	20000574 	.word	0x20000574

080058e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d06e      	beq.n	80059dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058fe:	4b3a      	ldr	r3, [pc, #232]	; (80059e8 <xTaskPriorityDisinherit+0x100>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	429a      	cmp	r2, r3
 8005906:	d00a      	beq.n	800591e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60fb      	str	r3, [r7, #12]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60bb      	str	r3, [r7, #8]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	1e5a      	subs	r2, r3, #1
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	429a      	cmp	r2, r3
 8005950:	d044      	beq.n	80059dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005956:	2b00      	cmp	r3, #0
 8005958:	d140      	bne.n	80059dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fcc9 	bl	80042f6 <uxListRemove>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d115      	bne.n	8005996 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	491f      	ldr	r1, [pc, #124]	; (80059ec <xTaskPriorityDisinherit+0x104>)
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <xTaskPriorityDisinherit+0xae>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43da      	mvns	r2, r3
 800598c:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <xTaskPriorityDisinherit+0x108>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4013      	ands	r3, r2
 8005992:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <xTaskPriorityDisinherit+0x108>)
 8005994:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	f1c3 0207 	rsb	r2, r3, #7
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	2201      	movs	r2, #1
 80059b0:	409a      	lsls	r2, r3
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <xTaskPriorityDisinherit+0x108>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	4a0d      	ldr	r2, [pc, #52]	; (80059f0 <xTaskPriorityDisinherit+0x108>)
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a08      	ldr	r2, [pc, #32]	; (80059ec <xTaskPriorityDisinherit+0x104>)
 80059ca:	441a      	add	r2, r3
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7fe fc32 	bl	800423c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059dc:	697b      	ldr	r3, [r7, #20]
	}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2000044c 	.word	0x2000044c
 80059ec:	20000450 	.word	0x20000450
 80059f0:	20000554 	.word	0x20000554

080059f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <uxTaskResetEventItemValue+0x2c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <uxTaskResetEventItemValue+0x2c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <uxTaskResetEventItemValue+0x2c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f1c2 0207 	rsb	r2, r2, #7
 8005a10:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005a12:	687b      	ldr	r3, [r7, #4]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	2000044c 	.word	0x2000044c

08005a24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a2e:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a34:	4b28      	ldr	r3, [pc, #160]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fc5b 	bl	80042f6 <uxListRemove>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43da      	mvns	r2, r3
 8005a54:	4b21      	ldr	r3, [pc, #132]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d10a      	bne.n	8005a7c <prvAddCurrentTaskToDelayedList+0x58>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4619      	mov	r1, r3
 8005a74:	481a      	ldr	r0, [pc, #104]	; (8005ae0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a76:	f7fe fbe1 	bl	800423c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a7a:	e026      	b.n	8005aca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a84:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d209      	bcs.n	8005aa8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a94:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7fe fbef 	bl	8004284 <vListInsert>
}
 8005aa6:	e010      	b.n	8005aca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fe fbe5 	bl	8004284 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d202      	bcs.n	8005aca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6013      	str	r3, [r2, #0]
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000550 	.word	0x20000550
 8005ad8:	2000044c 	.word	0x2000044c
 8005adc:	20000554 	.word	0x20000554
 8005ae0:	20000538 	.word	0x20000538
 8005ae4:	20000508 	.word	0x20000508
 8005ae8:	20000504 	.word	0x20000504
 8005aec:	2000056c 	.word	0x2000056c

08005af0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3b04      	subs	r3, #4
 8005b00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3b04      	subs	r3, #4
 8005b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f023 0201 	bic.w	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3b04      	subs	r3, #4
 8005b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <pxPortInitialiseStack+0x64>)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3b14      	subs	r3, #20
 8005b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b04      	subs	r3, #4
 8005b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f06f 0202 	mvn.w	r2, #2
 8005b3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3b20      	subs	r3, #32
 8005b44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b46:	68fb      	ldr	r3, [r7, #12]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	08005b59 	.word	0x08005b59

08005b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <prvTaskExitError+0x54>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d00a      	beq.n	8005b82 <prvTaskExitError+0x2a>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60fb      	str	r3, [r7, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <prvTaskExitError+0x28>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	60bb      	str	r3, [r7, #8]
}
 8005b94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b96:	bf00      	nop
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0fc      	beq.n	8005b98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <pxCurrentTCBConst2>)
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	6808      	ldr	r0, [r1, #0]
 8005bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	f380 8809 	msr	PSP, r0
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8811 	msr	BASEPRI, r0
 8005bca:	4770      	bx	lr
 8005bcc:	f3af 8000 	nop.w

08005bd0 <pxCurrentTCBConst2>:
 8005bd0:	2000044c 	.word	0x2000044c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop

08005bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bd8:	4808      	ldr	r0, [pc, #32]	; (8005bfc <prvPortStartFirstTask+0x24>)
 8005bda:	6800      	ldr	r0, [r0, #0]
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f380 8808 	msr	MSP, r0
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f380 8814 	msr	CONTROL, r0
 8005bea:	b662      	cpsie	i
 8005bec:	b661      	cpsie	f
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	df00      	svc	0
 8005bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bfa:	bf00      	nop
 8005bfc:	e000ed08 	.word	0xe000ed08

08005c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c06:	4b46      	ldr	r3, [pc, #280]	; (8005d20 <xPortStartScheduler+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a46      	ldr	r2, [pc, #280]	; (8005d24 <xPortStartScheduler+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10a      	bne.n	8005c26 <xPortStartScheduler+0x26>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	613b      	str	r3, [r7, #16]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c26:	4b3e      	ldr	r3, [pc, #248]	; (8005d20 <xPortStartScheduler+0x120>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3f      	ldr	r2, [pc, #252]	; (8005d28 <xPortStartScheduler+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10a      	bne.n	8005c46 <xPortStartScheduler+0x46>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <xPortStartScheduler+0x12c>)
 8005c48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <xPortStartScheduler+0x130>)
 8005c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c70:	2207      	movs	r2, #7
 8005c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c74:	e009      	b.n	8005c8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c76:	4b2f      	ldr	r3, [pc, #188]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c92:	2b80      	cmp	r3, #128	; 0x80
 8005c94:	d0ef      	beq.n	8005c76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c96:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <xPortStartScheduler+0x134>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1c3 0307 	rsb	r3, r3, #7
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d00a      	beq.n	8005cb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	60bb      	str	r3, [r7, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <xPortStartScheduler+0x134>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <xPortStartScheduler+0x134>)
 8005ccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cd6:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <xPortStartScheduler+0x138>)
 8005cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <xPortStartScheduler+0x138>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <xPortStartScheduler+0x138>)
 8005ce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cee:	f000 f8dd 	bl	8005eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cf2:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <xPortStartScheduler+0x13c>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cf8:	f000 f8fc 	bl	8005ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cfc:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <xPortStartScheduler+0x140>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <xPortStartScheduler+0x140>)
 8005d02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d08:	f7ff ff66 	bl	8005bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d0c:	f7ff faf4 	bl	80052f8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d10:	f7ff ff22 	bl	8005b58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed00 	.word	0xe000ed00
 8005d24:	410fc271 	.word	0x410fc271
 8005d28:	410fc270 	.word	0x410fc270
 8005d2c:	e000e400 	.word	0xe000e400
 8005d30:	20000578 	.word	0x20000578
 8005d34:	2000057c 	.word	0x2000057c
 8005d38:	e000ed20 	.word	0xe000ed20
 8005d3c:	2000000c 	.word	0x2000000c
 8005d40:	e000ef34 	.word	0xe000ef34

08005d44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	607b      	str	r3, [r7, #4]
}
 8005d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <vPortEnterCritical+0x58>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10f      	bne.n	8005d90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <vPortEnterCritical+0x5c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	603b      	str	r3, [r7, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <vPortEnterCritical+0x4a>
	}
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	2000000c 	.word	0x2000000c
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <vPortExitCritical+0x50>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <vPortExitCritical+0x24>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	607b      	str	r3, [r7, #4]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <vPortExitCritical+0x50>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <vPortExitCritical+0x50>)
 8005dd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <vPortExitCritical+0x50>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <vPortExitCritical+0x42>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f383 8811 	msr	BASEPRI, r3
}
 8005de4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	2000000c 	.word	0x2000000c
	...

08005e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e00:	f3ef 8009 	mrs	r0, PSP
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <pxCurrentTCBConst>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	f01e 0f10 	tst.w	lr, #16
 8005e10:	bf08      	it	eq
 8005e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1a:	6010      	str	r0, [r2, #0]
 8005e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e24:	f380 8811 	msr	BASEPRI, r0
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f7ff fa62 	bl	80052f8 <vTaskSwitchContext>
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f380 8811 	msr	BASEPRI, r0
 8005e3c:	bc09      	pop	{r0, r3}
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	6808      	ldr	r0, [r1, #0]
 8005e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e46:	f01e 0f10 	tst.w	lr, #16
 8005e4a:	bf08      	it	eq
 8005e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e50:	f380 8809 	msr	PSP, r0
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	f3af 8000 	nop.w

08005e60 <pxCurrentTCBConst>:
 8005e60:	2000044c 	.word	0x2000044c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop

08005e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e82:	f7ff f981 	bl	8005188 <xTaskIncrementTick>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <SysTick_Handler+0x40>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <vPortSetupTimerInterrupt+0x34>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <vPortSetupTimerInterrupt+0x38>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <vPortSetupTimerInterrupt+0x3c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <vPortSetupTimerInterrupt+0x40>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <vPortSetupTimerInterrupt+0x44>)
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <vPortSetupTimerInterrupt+0x34>)
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	e000e010 	.word	0xe000e010
 8005ee4:	e000e018 	.word	0xe000e018
 8005ee8:	20000000 	.word	0x20000000
 8005eec:	10624dd3 	.word	0x10624dd3
 8005ef0:	e000e014 	.word	0xe000e014

08005ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f04 <vPortEnableVFP+0x10>
 8005ef8:	6801      	ldr	r1, [r0, #0]
 8005efa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005efe:	6001      	str	r1, [r0, #0]
 8005f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f02:	bf00      	nop
 8005f04:	e000ed88 	.word	0xe000ed88

08005f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f0e:	f3ef 8305 	mrs	r3, IPSR
 8005f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	d914      	bls.n	8005f44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <vPortValidateInterruptPriority+0x70>)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f24:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <vPortValidateInterruptPriority+0x74>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	7afa      	ldrb	r2, [r7, #11]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d20a      	bcs.n	8005f44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <vPortValidateInterruptPriority+0x78>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <vPortValidateInterruptPriority+0x7c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d90a      	bls.n	8005f6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	603b      	str	r3, [r7, #0]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <vPortValidateInterruptPriority+0x60>
	}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000e3f0 	.word	0xe000e3f0
 8005f7c:	20000578 	.word	0x20000578
 8005f80:	e000ed0c 	.word	0xe000ed0c
 8005f84:	2000057c 	.word	0x2000057c

08005f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f94:	f7ff f84e 	bl	8005034 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f98:	4b5b      	ldr	r3, [pc, #364]	; (8006108 <pvPortMalloc+0x180>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fa0:	f000 f920 	bl	80061e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fa4:	4b59      	ldr	r3, [pc, #356]	; (800610c <pvPortMalloc+0x184>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 8093 	bne.w	80060d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01d      	beq.n	8005ff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fb8:	2208      	movs	r2, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d014      	beq.n	8005ff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	617b      	str	r3, [r7, #20]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d06e      	beq.n	80060d8 <pvPortMalloc+0x150>
 8005ffa:	4b45      	ldr	r3, [pc, #276]	; (8006110 <pvPortMalloc+0x188>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d869      	bhi.n	80060d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006004:	4b43      	ldr	r3, [pc, #268]	; (8006114 <pvPortMalloc+0x18c>)
 8006006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006008:	4b42      	ldr	r3, [pc, #264]	; (8006114 <pvPortMalloc+0x18c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800600e:	e004      	b.n	800601a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d903      	bls.n	800602c <pvPortMalloc+0xa4>
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f1      	bne.n	8006010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800602c:	4b36      	ldr	r3, [pc, #216]	; (8006108 <pvPortMalloc+0x180>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	429a      	cmp	r2, r3
 8006034:	d050      	beq.n	80060d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2208      	movs	r2, #8
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	2308      	movs	r3, #8
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	429a      	cmp	r2, r3
 8006056:	d91f      	bls.n	8006098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <pvPortMalloc+0xf8>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	613b      	str	r3, [r7, #16]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006092:	69b8      	ldr	r0, [r7, #24]
 8006094:	f000 f908 	bl	80062a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006098:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <pvPortMalloc+0x188>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <pvPortMalloc+0x188>)
 80060a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060a6:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <pvPortMalloc+0x188>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <pvPortMalloc+0x190>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d203      	bcs.n	80060ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060b2:	4b17      	ldr	r3, [pc, #92]	; (8006110 <pvPortMalloc+0x188>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <pvPortMalloc+0x190>)
 80060b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <pvPortMalloc+0x184>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <pvPortMalloc+0x194>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	4a11      	ldr	r2, [pc, #68]	; (800611c <pvPortMalloc+0x194>)
 80060d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060d8:	f7fe ffba 	bl	8005050 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <pvPortMalloc+0x174>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	60fb      	str	r3, [r7, #12]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <pvPortMalloc+0x172>
	return pvReturn;
 80060fc:	69fb      	ldr	r3, [r7, #28]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	; 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20004188 	.word	0x20004188
 800610c:	2000419c 	.word	0x2000419c
 8006110:	2000418c 	.word	0x2000418c
 8006114:	20004180 	.word	0x20004180
 8006118:	20004190 	.word	0x20004190
 800611c:	20004194 	.word	0x20004194

08006120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d04d      	beq.n	80061ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006132:	2308      	movs	r3, #8
 8006134:	425b      	negs	r3, r3
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <vPortFree+0xb8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <vPortFree+0x44>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60fb      	str	r3, [r7, #12]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <vPortFree+0x62>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60bb      	str	r3, [r7, #8]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <vPortFree+0xb8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01e      	beq.n	80061ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11a      	bne.n	80061ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <vPortFree+0xb8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061a8:	f7fe ff44 	bl	8005034 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <vPortFree+0xbc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <vPortFree+0xbc>)
 80061b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f000 f874 	bl	80062a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <vPortFree+0xc0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a06      	ldr	r2, [pc, #24]	; (80061e0 <vPortFree+0xc0>)
 80061c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061ca:	f7fe ff41 	bl	8005050 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	2000419c 	.word	0x2000419c
 80061dc:	2000418c 	.word	0x2000418c
 80061e0:	20004198 	.word	0x20004198

080061e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <prvHeapInit+0xac>)
 80061f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00c      	beq.n	8006218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3307      	adds	r3, #7
 8006202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <prvHeapInit+0xac>)
 8006214:	4413      	add	r3, r2
 8006216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800621c:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <prvHeapInit+0xb0>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006222:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <prvHeapInit+0xb0>)
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4413      	add	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006230:	2208      	movs	r2, #8
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <prvHeapInit+0xb4>)
 8006244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006246:	4b14      	ldr	r3, [pc, #80]	; (8006298 <prvHeapInit+0xb4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <prvHeapInit+0xb4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	1ad2      	subs	r2, r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvHeapInit+0xb4>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <prvHeapInit+0xb8>)
 8006272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <prvHeapInit+0xbc>)
 800627a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <prvHeapInit+0xc0>)
 800627e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000580 	.word	0x20000580
 8006294:	20004180 	.word	0x20004180
 8006298:	20004188 	.word	0x20004188
 800629c:	20004190 	.word	0x20004190
 80062a0:	2000418c 	.word	0x2000418c
 80062a4:	2000419c 	.word	0x2000419c

080062a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b0:	4b28      	ldr	r3, [pc, #160]	; (8006354 <prvInsertBlockIntoFreeList+0xac>)
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e002      	b.n	80062bc <prvInsertBlockIntoFreeList+0x14>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d8f7      	bhi.n	80062b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4413      	add	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d108      	bne.n	80062ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	441a      	add	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d118      	bne.n	8006330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <prvInsertBlockIntoFreeList+0xb0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d00d      	beq.n	8006326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e008      	b.n	8006338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <prvInsertBlockIntoFreeList+0xb0>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e003      	b.n	8006338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	429a      	cmp	r2, r3
 800633e:	d002      	beq.n	8006346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20004180 	.word	0x20004180
 8006358:	20004188 	.word	0x20004188

0800635c <memset>:
 800635c:	4402      	add	r2, r0
 800635e:	4603      	mov	r3, r0
 8006360:	4293      	cmp	r3, r2
 8006362:	d100      	bne.n	8006366 <memset+0xa>
 8006364:	4770      	bx	lr
 8006366:	f803 1b01 	strb.w	r1, [r3], #1
 800636a:	e7f9      	b.n	8006360 <memset+0x4>

0800636c <__libc_init_array>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	4d0d      	ldr	r5, [pc, #52]	; (80063a4 <__libc_init_array+0x38>)
 8006370:	4c0d      	ldr	r4, [pc, #52]	; (80063a8 <__libc_init_array+0x3c>)
 8006372:	1b64      	subs	r4, r4, r5
 8006374:	10a4      	asrs	r4, r4, #2
 8006376:	2600      	movs	r6, #0
 8006378:	42a6      	cmp	r6, r4
 800637a:	d109      	bne.n	8006390 <__libc_init_array+0x24>
 800637c:	4d0b      	ldr	r5, [pc, #44]	; (80063ac <__libc_init_array+0x40>)
 800637e:	4c0c      	ldr	r4, [pc, #48]	; (80063b0 <__libc_init_array+0x44>)
 8006380:	f000 f826 	bl	80063d0 <_init>
 8006384:	1b64      	subs	r4, r4, r5
 8006386:	10a4      	asrs	r4, r4, #2
 8006388:	2600      	movs	r6, #0
 800638a:	42a6      	cmp	r6, r4
 800638c:	d105      	bne.n	800639a <__libc_init_array+0x2e>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	f855 3b04 	ldr.w	r3, [r5], #4
 8006394:	4798      	blx	r3
 8006396:	3601      	adds	r6, #1
 8006398:	e7ee      	b.n	8006378 <__libc_init_array+0xc>
 800639a:	f855 3b04 	ldr.w	r3, [r5], #4
 800639e:	4798      	blx	r3
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7f2      	b.n	800638a <__libc_init_array+0x1e>
 80063a4:	080064ec 	.word	0x080064ec
 80063a8:	080064ec 	.word	0x080064ec
 80063ac:	080064ec 	.word	0x080064ec
 80063b0:	080064f0 	.word	0x080064f0

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <_init>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr

080063dc <_fini>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr
